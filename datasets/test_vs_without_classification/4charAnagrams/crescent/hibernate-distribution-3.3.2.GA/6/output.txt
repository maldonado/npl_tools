//test out the optimizer:	WITHOUT_CLASSIFICATION	0.9981582120009467	WITHOUT_CLASSIFICATION	0.0018417879990533016	TEST
// aload_0	WITHOUT_CLASSIFICATION	0.9999978350524678	WITHOUT_CLASSIFICATION	2.164947532232812E-6	TEST
// aload_0	WITHOUT_CLASSIFICATION	0.9999978350524678	WITHOUT_CLASSIFICATION	2.164947532232812E-6	TEST
// aload_0	WITHOUT_CLASSIFICATION	0.9999978350524678	WITHOUT_CLASSIFICATION	2.164947532232812E-6	TEST
// aload_0	WITHOUT_CLASSIFICATION	0.9999978350524678	WITHOUT_CLASSIFICATION	2.164947532232812E-6	TEST
// aload_0	WITHOUT_CLASSIFICATION	0.9999978350524678	WITHOUT_CLASSIFICATION	2.164947532232812E-6	TEST
// aload_0	WITHOUT_CLASSIFICATION	0.9999978350524678	WITHOUT_CLASSIFICATION	2.164947532232812E-6	TEST
// aload_0	WITHOUT_CLASSIFICATION	0.9999978350524678	WITHOUT_CLASSIFICATION	2.164947532232812E-6	TEST
// return	WITHOUT_CLASSIFICATION	0.9999989224764467	WITHOUT_CLASSIFICATION	1.0775235532512376E-6	TEST
// return	WITHOUT_CLASSIFICATION	0.9999989224764467	WITHOUT_CLASSIFICATION	1.0775235532512376E-6	TEST
/* | this | bean | args | raw bean | */	WITHOUT_CLASSIFICATION	0.999988848061947	WITHOUT_CLASSIFICATION	1.1151938053017281E-5	TEST
// invokeinterface	WITHOUT_CLASSIFICATION	0.9999992236693411	WITHOUT_CLASSIFICATION	7.7633065880554E-7	TEST
// astore 4 // store the raw bean	WITHOUT_CLASSIFICATION	0.9999977660739354	WITHOUT_CLASSIFICATION	2.2339260645704746E-6	TEST
/* current stack len = 0 */	WITHOUT_CLASSIFICATION	0.9999988207237865	WITHOUT_CLASSIFICATION	1.1792762135377597E-6	TEST
/* current stack len = 0 */	WITHOUT_CLASSIFICATION	0.9999988207237865	WITHOUT_CLASSIFICATION	1.1792762135377597E-6	TEST
/* local variables | target obj | each oldvalue | */	WITHOUT_CLASSIFICATION	0.9999991926727989	WITHOUT_CLASSIFICATION	8.07327200995124E-7	TEST
// invokeinterface // invoke Enabled.getInterceptFieldCallback()	WITHOUT_CLASSIFICATION	0.9999970250051528	WITHOUT_CLASSIFICATION	2.9749948472883156E-6	TEST
// putfield // new value of the field	WITHOUT_CLASSIFICATION	0.9999970801779385	WITHOUT_CLASSIFICATION	2.919822061512168E-6	TEST
// reference type	WITHOUT_CLASSIFICATION	0.9999994578846922	WITHOUT_CLASSIFICATION	5.421153078506639E-7	TEST
// double	WITHOUT_CLASSIFICATION	0.9999983480684377	WITHOUT_CLASSIFICATION	1.6519315623265913E-6	TEST
// double	WITHOUT_CLASSIFICATION	0.9999983480684377	WITHOUT_CLASSIFICATION	1.6519315623265913E-6	TEST
// long	WITHOUT_CLASSIFICATION	0.9999978833391827	WITHOUT_CLASSIFICATION	2.116660817294975E-6	TEST
// just decrement the lock, don't recache // (we don't know which transaction won)	WITHOUT_CLASSIFICATION	0.9999999152661455	WITHOUT_CLASSIFICATION	8.473385445277459E-8	TEST
// decode row selection...	WITHOUT_CLASSIFICATION	0.9999999576548563	WITHOUT_CLASSIFICATION	4.2345143794128006E-8	TEST
//disassembled state gets put in a new array (we write to cache by value!)	WITHOUT_CLASSIFICATION	0.9999983631953104	WITHOUT_CLASSIFICATION	1.6368046895659416E-6	TEST
// again, CCS did not have such a concept; but a reasonable // proximity is to clear the cache after transaction *as long as* // the underlying cache is not JTA aware.	WITHOUT_CLASSIFICATION	0.9999999856745637	WITHOUT_CLASSIFICATION	1.4325436205383466E-8	TEST
// CHECK	WITHOUT_CLASSIFICATION	0.9999953383292423	WITHOUT_CLASSIFICATION	4.661670757781943E-6	TEST
// ROW ID	WITHOUT_CLASSIFICATION	0.9999847959377062	WITHOUT_CLASSIFICATION	1.5204062293871078E-5	TEST
// COMPOSITE-ID	WITHOUT_CLASSIFICATION	0.9999914875820114	WITHOUT_CLASSIFICATION	8.512417988616332E-6	TEST
// DISCRIMINATOR	WITHOUT_CLASSIFICATION	0.9999857634155818	WITHOUT_CLASSIFICATION	1.4236584418213871E-5	TEST
/*	WITHOUT_CLASSIFICATION	0.9998653805382814	WITHOUT_CLASSIFICATION	1.3461946171863497E-4	TEST
// DYNAMIC INSERT	WITHOUT_CLASSIFICATION	0.9999903536859455	WITHOUT_CLASSIFICATION	9.646314054628175E-6	TEST
// PERSISTER	WITHOUT_CLASSIFICATION	0.9999934454975988	WITHOUT_CLASSIFICATION	6.5545024011593856E-6	TEST
// get meta's from <subclass>	WITHOUT_CLASSIFICATION	0.9999989708513994	WITHOUT_CLASSIFICATION	1.0291486004979808E-6	TEST
// PROPERTIES	WITHOUT_CLASSIFICATION	0.9999918385121593	WITHOUT_CLASSIFICATION	8.161487840657556E-6	TEST
// PROPERTIES	WITHOUT_CLASSIFICATION	0.9999918385121593	WITHOUT_CLASSIFICATION	8.161487840657556E-6	TEST
// generated properties can *never* be insertable...	WITHOUT_CLASSIFICATION	0.9999997441959978	WITHOUT_CLASSIFICATION	2.558040022584416E-7	TEST
// TABLE	WITHOUT_CLASSIFICATION	0.9999896906790994	WITHOUT_CLASSIFICATION	1.0309320900664157E-5	TEST
//by default, natural-ids are "immutable" (constant)	WITHOUT_CLASSIFICATION	0.9999999021659542	WITHOUT_CLASSIFICATION	9.783404568385579E-8	TEST
// ( (Column) ( (SimpleValue) ic.getIndex() ).getColumnIterator().next() // ).setNullable(false);	WITHOUT_CLASSIFICATION	0.9999994494244224	WITHOUT_CLASSIFICATION	5.505755775882555E-7	TEST
// we found some extends attributes referencing entities which were // not already processed.  here we need to locate all entity-names // and class-names contained in this document itself, making sure // that these get removed from the extendz list such that only // extends names which require us to delay processing (i.e. // external to this document and not yet processed) are contained // in the returned result	WITHOUT_CLASSIFICATION	0.9999999333755198	WITHOUT_CLASSIFICATION	6.662448018247343E-8	TEST
/**	WITHOUT_CLASSIFICATION	0.5443205247184848	WITHOUT_CLASSIFICATION	0.45567947528151515	TEST
//	WITHOUT_CLASSIFICATION	0.9999527008540617	WITHOUT_CLASSIFICATION	4.729914593835468E-5	TEST
//	WITHOUT_CLASSIFICATION	0.9999527008540617	WITHOUT_CLASSIFICATION	4.729914593835468E-5	TEST
/**	WITHOUT_CLASSIFICATION	0.5443205247184848	WITHOUT_CLASSIFICATION	0.45567947528151515	TEST
//	WITHOUT_CLASSIFICATION	0.9999527008540617	WITHOUT_CLASSIFICATION	4.729914593835468E-5	TEST
// If close() is called, guarantee unbind()	WITHOUT_CLASSIFICATION	0.9999968958068273	WITHOUT_CLASSIFICATION	3.104193172695563E-6	TEST
// if a ThreadLocalSessionContext-bound session happens to get // serialized, to be completely correct, we need to make sure // that unbinding of that session occurs.	WITHOUT_CLASSIFICATION	0.9999990046568143	WITHOUT_CLASSIFICATION	9.95343185594445E-7	TEST
// on the inverse, it makes sense that if a ThreadLocalSessionContext- // bound session then gets deserialized to go ahead and re-bind it to // the ThreadLocalSessionContext session map.	WITHOUT_CLASSIFICATION	0.99999992543651	WITHOUT_CLASSIFICATION	7.456348995140852E-8	TEST
//cannot be instantiated	WITHOUT_CLASSIFICATION	0.9999939641665165	WITHOUT_CLASSIFICATION	6.035833483481428E-6	TEST
// 60 second lock timeout	WITHOUT_CLASSIFICATION	0.9999998212153764	WITHOUT_CLASSIFICATION	1.787846236441232E-7	TEST
// OptimisticCache impl ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999894958836121	WITHOUT_CLASSIFICATION	1.0504116387948942E-5	TEST
// Cache impl ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999902303221264	WITHOUT_CLASSIFICATION	9.769677873491903E-6	TEST
//	WITHOUT_CLASSIFICATION	0.9999527008540617	WITHOUT_CLASSIFICATION	4.729914593835468E-5	TEST
// do the put outside the scope of the JTA txn	WITHOUT_CLASSIFICATION	0.9999998385066833	WITHOUT_CLASSIFICATION	1.6149331671875585E-7	TEST
//ignore!	WITHOUT_CLASSIFICATION	0.9999855715835938	WITHOUT_CLASSIFICATION	1.4428416406178273E-5	TEST
// tree cache in optimistic mode seems to have as very difficult // time with remove calls on non-existent nodes (NPEs)...	WITHOUT_CLASSIFICATION	0.999999935625271	WITHOUT_CLASSIFICATION	6.437472906308862E-8	TEST
//60 seconds	WITHOUT_CLASSIFICATION	0.9999984950539823	WITHOUT_CLASSIFICATION	1.5049460176244212E-6	TEST
//ignore!	WITHOUT_CLASSIFICATION	0.9999855715835938	WITHOUT_CLASSIFICATION	1.4428416406178273E-5	TEST
//60 seconds	WITHOUT_CLASSIFICATION	0.9999984950539823	WITHOUT_CLASSIFICATION	1.5049460176244212E-6	TEST
//do the failfast put outside the scope of the JTA txn	WITHOUT_CLASSIFICATION	0.9999994660941713	WITHOUT_CLASSIFICATION	5.339058287880647E-7	TEST
// NOTE : evict() operates locally only (i.e., does not propogate // to any other nodes in the potential cluster).  This is // exactly what is needed when we destroy() here; destroy() is used // as part of the process of shutting down a SessionFactory; thus // these removals should not be propogated	WITHOUT_CLASSIFICATION	0.9999948968557684	WITHOUT_CLASSIFICATION	5.1031442316086715E-6	TEST
//    protected RegionRootListener listener;	WITHOUT_CLASSIFICATION	0.9999992165921985	WITHOUT_CLASSIFICATION	7.834078015903307E-7	TEST
// Establish the region root node with a non-locking data version	WITHOUT_CLASSIFICATION	0.9999999127991818	WITHOUT_CLASSIFICATION	8.720081826932792E-8	TEST
// If we've been blocking for the mutex, perhaps another // thread has already reestablished the root. // In case the node was reestablised via replication, confirm it's  // marked "resident" (a status which doesn't replicate)	WITHOUT_CLASSIFICATION	0.9999999767766725	WITHOUT_CLASSIFICATION	2.3223327517197494E-8	TEST
// For pessimistic locking, we just want to toss out our ref // to any old invalid root node and get the latest (may be null)            	WITHOUT_CLASSIFICATION	0.9999545463003163	WITHOUT_CLASSIFICATION	4.5453699683621785E-5	TEST
// The rest only matters for optimistic locking, where we // need to establish the proper data version on the region root	WITHOUT_CLASSIFICATION	0.9999844100153432	WITHOUT_CLASSIFICATION	1.5589984656716436E-5	TEST
// Don't hold a transactional lock for this 	WITHOUT_CLASSIFICATION	0.9999971006683048	WITHOUT_CLASSIFICATION	2.899331695217305E-6	TEST
// Make sure the root node for the region exists and  // has a DataVersion that never complains	WITHOUT_CLASSIFICATION	0.9999998253491353	WITHOUT_CLASSIFICATION	1.7465086477170353E-7	TEST
// Never evict this node	WITHOUT_CLASSIFICATION	0.9999888273362088	WITHOUT_CLASSIFICATION	1.1172663791157297E-5	TEST
// Fix up the resident flag	WITHOUT_CLASSIFICATION	0.9999955197789054	WITHOUT_CLASSIFICATION	4.4802210945511275E-6	TEST
// 60 seconds	WITHOUT_CLASSIFICATION	0.9999996908254669	WITHOUT_CLASSIFICATION	3.091745330839027E-7	TEST
// We ignore minimalPutOverride. JBossCache putForExternalRead is // already about as minimal as we can get; it will promptly return // if it discovers that the node we want to write to already exists	WITHOUT_CLASSIFICATION	0.9999999815664079	WITHOUT_CLASSIFICATION	1.843359216884078E-8	TEST
// no-op. We don't own the cache so we shouldn't stop it.	WITHOUT_CLASSIFICATION	0.9999999047949307	WITHOUT_CLASSIFICATION	9.520506928678124E-8	TEST
// This should only be possible if the caches are constructor injected 	WITHOUT_CLASSIFICATION	0.9999998253786058	WITHOUT_CLASSIFICATION	1.746213942104701E-7	TEST
// We only build caches if *none* were passed in.  Passing in // caches counts as a clear statement of exactly what is wanted	WITHOUT_CLASSIFICATION	0.9999997557385015	WITHOUT_CLASSIFICATION	2.442614984675896E-7	TEST
// Set up the cache factory	WITHOUT_CLASSIFICATION	0.99999930340546	WITHOUT_CLASSIFICATION	6.965945400907519E-7	TEST
// See if the user configured a multiplexer stack	WITHOUT_CLASSIFICATION	0.999999870093259	WITHOUT_CLASSIFICATION	1.2990674096796734E-7	TEST
// Default to collections sharing entity cache if there is one	WITHOUT_CLASSIFICATION	0.9999998782566477	WITHOUT_CLASSIFICATION	1.2174335235912592E-7	TEST
// Default to sharing the entity cache if there is one	WITHOUT_CLASSIFICATION	0.9999996015397797	WITHOUT_CLASSIFICATION	3.984602202157164E-7	TEST
// For Timestamps, we default to a separate config	WITHOUT_CLASSIFICATION	0.999999381756221	WITHOUT_CLASSIFICATION	6.182437788654503E-7	TEST
// We can't change the TM on a running cache; just check // if the cache has no TM and we're OK with that	WITHOUT_CLASSIFICATION	0.9999995905756567	WITHOUT_CLASSIFICATION	4.094243432641681E-7	TEST
// Configure the cache to use our TM	WITHOUT_CLASSIFICATION	0.9999998509916104	WITHOUT_CLASSIFICATION	1.4900838964548168E-7	TEST
// Make sure JBC doesn't look one up	WITHOUT_CLASSIFICATION	0.999997582292209	WITHOUT_CLASSIFICATION	2.4177077910024337E-6	TEST
// This method should be implemented assuming it's valid to  // do start/stop/start -- leave state appropriate for another start	WITHOUT_CLASSIFICATION	0.9999002638545582	WITHOUT_CLASSIFICATION	9.97361454417232E-5	TEST
// Make sure we don't re-release the same cache	WITHOUT_CLASSIFICATION	0.9999994917291677	WITHOUT_CLASSIFICATION	5.08270832363511E-7	TEST
// We use a different delegate than the non-optimistic superclass default	WITHOUT_CLASSIFICATION	0.9999998091406624	WITHOUT_CLASSIFICATION	1.9085933758290728E-7	TEST
// Following methods we don't delegate since they have so little logic // it's clearer to just implement them here	WITHOUT_CLASSIFICATION	0.9999432754450064	WITHOUT_CLASSIFICATION	5.672455499349475E-5	TEST
// If JBC is using INVALIDATION, we don't want to propagate changes. // We use the Timestamps cache to manage invalidation	WITHOUT_CLASSIFICATION	0.9999993968463127	WITHOUT_CLASSIFICATION	6.031536873492687E-7	TEST
// We don't want to waste effort setting an option if JBC is // already in LOCAL mode. If JBC is REPL_(A)SYNC then check // if they passed an config option to disable query replication	WITHOUT_CLASSIFICATION	0.9999998533485706	WITHOUT_CLASSIFICATION	1.4665142941767737E-7	TEST
// Don't hold the JBC node lock throughout the tx, as that // prevents updates // Add a zero (or low) timeout option so we don't block // waiting for tx's that did a put to commit	WITHOUT_CLASSIFICATION	0.9999999740465867	WITHOUT_CLASSIFICATION	2.595341332450826E-8	TEST
// Double check the distributed cache	WITHOUT_CLASSIFICATION	0.9999993053467875	WITHOUT_CLASSIFICATION	6.946532124173466E-7	TEST
// Get an exclusive right to update JBC for this key from this node.	WITHOUT_CLASSIFICATION	0.9999989530889349	WITHOUT_CLASSIFICATION	1.046911065017037E-6	TEST
// We ensure ASYNC semantics (JBCACHE-1175)	WITHOUT_CLASSIFICATION	0.9999999214428725	WITHOUT_CLASSIFICATION	7.855712748797167E-8	TEST
// Initial load from JBC	WITHOUT_CLASSIFICATION	0.9999981560788319	WITHOUT_CLASSIFICATION	1.8439211681203038E-6	TEST
// See if we had a 2nd invalidation from the same initial // preinvalidation timestamp. If so, only increment // if the new current value is an increase	WITHOUT_CLASSIFICATION	0.9999999023591203	WITHOUT_CLASSIFICATION	9.764087978614296E-8	TEST
// We ensure ASYNC semantics (JBCACHE-1175)	WITHOUT_CLASSIFICATION	0.9999999214428725	WITHOUT_CLASSIFICATION	7.855712748797167E-8	TEST
// If the workspace node has null as well, OK; if not we've // been modified in a non-comparable manner, which we have to // treat as us being newer	WITHOUT_CLASSIFICATION	0.9999999394554803	WITHOUT_CLASSIFICATION	6.054451967046012E-8	TEST
// The standard comparator types are not Serializable but are singletons	WITHOUT_CLASSIFICATION	0.9999996951346466	WITHOUT_CLASSIFICATION	3.0486535336868356E-7	TEST
// ignore!	WITHOUT_CLASSIFICATION	0.9999988240175668	WITHOUT_CLASSIFICATION	1.1759824331834806E-6	TEST
// ignore it	WITHOUT_CLASSIFICATION	0.9999992121054	WITHOUT_CLASSIFICATION	7.878946000619137E-7	TEST
// construct the cache	WITHOUT_CLASSIFICATION	0.9999995253711436	WITHOUT_CLASSIFICATION	4.746288564839454E-7	TEST
// local cache, so we use synchronization	WITHOUT_CLASSIFICATION	0.9999999724992688	WITHOUT_CLASSIFICATION	2.7500731157950928E-8	TEST
// local cache, so we use synchronization	WITHOUT_CLASSIFICATION	0.9999999724992688	WITHOUT_CLASSIFICATION	2.7500731157950928E-8	TEST
//ie. 60 seconds	WITHOUT_CLASSIFICATION	0.9999983864597718	WITHOUT_CLASSIFICATION	1.6135402281893643E-6	TEST
//swaldman 2006-08-28: define c3p0-style configuration parameters for initialPoolSize, which //                     hibernate sensibly lets default to minPoolSize, but we'll let users //                     override it with the c3p0-style property if they want.	WITHOUT_CLASSIFICATION	0.9999999677231275	WITHOUT_CLASSIFICATION	3.2276872485995984E-8	TEST
/*DataSource unpooled = DataSources.unpooledDataSource(	WITHOUT_CLASSIFICATION	0.999976391088834	WITHOUT_CLASSIFICATION	2.3608911166001002E-5	TEST
// TRUE if the pool is borrowed from the outside, FALSE if we used to create it	WITHOUT_CLASSIFICATION	0.9999996981926034	WITHOUT_CLASSIFICATION	3.018073966732324E-7	TEST
// get a connection from the pool (thru DriverManager, cfr. Proxool doc)	WITHOUT_CLASSIFICATION	0.9999999805120985	WITHOUT_CLASSIFICATION	1.948790148320983E-8	TEST
// set the Transaction Isolation if defined	WITHOUT_CLASSIFICATION	0.9999998386101073	WITHOUT_CLASSIFICATION	1.6138989263462686E-7	TEST
// toggle autoCommit to false if set	WITHOUT_CLASSIFICATION	0.9999975447482429	WITHOUT_CLASSIFICATION	2.455251757209449E-6	TEST
// return the connection	WITHOUT_CLASSIFICATION	0.9999999124064921	WITHOUT_CLASSIFICATION	8.759350785965322E-8	TEST
// Get the configurator files (if available)	WITHOUT_CLASSIFICATION	0.9999996344527	WITHOUT_CLASSIFICATION	3.655472999920302E-7	TEST
// Default the Proxool alias setting	WITHOUT_CLASSIFICATION	0.999998864804472	WITHOUT_CLASSIFICATION	1.1351955281060483E-6	TEST
// Validate that an alias name was provided to determine which pool to use	WITHOUT_CLASSIFICATION	0.9999993740653752	WITHOUT_CLASSIFICATION	6.259346247813228E-7	TEST
// Validate that an alias name was provided to determine which pool to use	WITHOUT_CLASSIFICATION	0.9999993740653752	WITHOUT_CLASSIFICATION	6.259346247813228E-7	TEST
// Append the stem to the proxool pool alias	WITHOUT_CLASSIFICATION	0.9999988250516065	WITHOUT_CLASSIFICATION	1.1749483934674638E-6	TEST
// Set the existing pool flag to true	WITHOUT_CLASSIFICATION	0.9999983108027707	WITHOUT_CLASSIFICATION	1.68919722933271E-6	TEST
// Configured using the JAXP Configurator	WITHOUT_CLASSIFICATION	0.9999988081016865	WITHOUT_CLASSIFICATION	1.1918983135421025E-6	TEST
// Validate that an alias name was provided to determine which pool to use	WITHOUT_CLASSIFICATION	0.9999993740653752	WITHOUT_CLASSIFICATION	6.259346247813228E-7	TEST
// Append the stem to the proxool pool alias	WITHOUT_CLASSIFICATION	0.9999988250516065	WITHOUT_CLASSIFICATION	1.1749483934674638E-6	TEST
// Append the stem to the proxool pool alias	WITHOUT_CLASSIFICATION	0.9999988250516065	WITHOUT_CLASSIFICATION	1.1749483934674638E-6	TEST
// Configured using the Properties File Configurator	WITHOUT_CLASSIFICATION	0.9999980719363147	WITHOUT_CLASSIFICATION	1.9280636853156944E-6	TEST
// Remember Isolation level	WITHOUT_CLASSIFICATION	0.9999994993123951	WITHOUT_CLASSIFICATION	5.006876050015524E-7	TEST
// If the provider was leeching off an existing pool don't close it	WITHOUT_CLASSIFICATION	0.9999995346261813	WITHOUT_CLASSIFICATION	4.653738186628527E-7	TEST
// We have created the pool ourselves, so shut it down	WITHOUT_CLASSIFICATION	0.9999995269937749	WITHOUT_CLASSIFICATION	4.730062249645056E-7	TEST
// not really a many-to-one association *necessarily*	WITHOUT_CLASSIFICATION	0.9999998746883689	WITHOUT_CLASSIFICATION	1.2531163113001833E-7	TEST
// not really a many-to-one association *necessarily*	WITHOUT_CLASSIFICATION	0.9999998746883689	WITHOUT_CLASSIFICATION	1.2531163113001833E-7	TEST
//always overwrite nonversioned data	WITHOUT_CLASSIFICATION	0.9999993248623492	WITHOUT_CLASSIFICATION	6.751376507097474E-7	TEST
//public Currency getCurrency(int col) throws HibernateException;	WITHOUT_CLASSIFICATION	0.9999994521564569	WITHOUT_CLASSIFICATION	5.478435430525784E-7	TEST
// default is POJO	WITHOUT_CLASSIFICATION	0.9999983656061971	WITHOUT_CLASSIFICATION	1.6343938028844122E-6	TEST
// use setParameter for null values	WITHOUT_CLASSIFICATION	0.9999989675902875	WITHOUT_CLASSIFICATION	1.0324097125184324E-6	TEST
// use setParameter for null values	WITHOUT_CLASSIFICATION	0.9999989675902875	WITHOUT_CLASSIFICATION	1.0324097125184324E-6	TEST
//private CacheEntry cacheEntry;	WITHOUT_CLASSIFICATION	0.9999984632902704	WITHOUT_CLASSIFICATION	1.5367097295007147E-6	TEST
// Don't need to lock the cache here, since if someone // else inserted the same pk first, the insert would fail	WITHOUT_CLASSIFICATION	0.9999913034706636	WITHOUT_CLASSIFICATION	8.696529336343022E-6	TEST
//Make 100% certain that this is called before any subsequent ScheduledUpdate.afterTransactionCompletion()!!	WITHOUT_CLASSIFICATION	0.9999095176465551	WITHOUT_CLASSIFICATION	9.048235344484317E-5	TEST
// get the updated snapshot of the entity state by cloning current state; // it is safe to copy in place, since by this time no-one else (should have) // has a reference  to the array	WITHOUT_CLASSIFICATION	0.9999999704726413	WITHOUT_CLASSIFICATION	2.9527358677626783E-8	TEST
// this entity defines proeprty generation, so process those generated // values...	WITHOUT_CLASSIFICATION	0.9999999309847323	WITHOUT_CLASSIFICATION	6.901526773218992E-8	TEST
// have the entity entry perform post-update processing, passing it the // update state and the new version (if one).	WITHOUT_CLASSIFICATION	0.9999996775117252	WITHOUT_CLASSIFICATION	3.2248827477582284E-7	TEST
/*!persister.isCacheInvalidationRequired()*/	WITHOUT_CLASSIFICATION	0.9999986508868722	WITHOUT_CLASSIFICATION	1.3491131277406835E-6	TEST
// need to look it up from the persistence-context	WITHOUT_CLASSIFICATION	0.9999988771180504	WITHOUT_CLASSIFICATION	1.1228819496798417E-6	TEST
//sort first by role name	WITHOUT_CLASSIFICATION	0.9999715339176175	WITHOUT_CLASSIFICATION	2.846608238257751E-5	TEST
//Make 100% certain that this is called before any subsequent ScheduledUpdate.afterTransactionCompletion()!!	WITHOUT_CLASSIFICATION	0.9999095176465551	WITHOUT_CLASSIFICATION	9.048235344484317E-5	TEST
//then by fk	WITHOUT_CLASSIFICATION	0.9999572412021986	WITHOUT_CLASSIFICATION	4.275879780132839E-5	TEST
// nothing to do	WITHOUT_CLASSIFICATION	0.9999977288183669	WITHOUT_CLASSIFICATION	2.2711816330722216E-6	TEST
// nothing to do	WITHOUT_CLASSIFICATION	0.9999977288183669	WITHOUT_CLASSIFICATION	2.2711816330722216E-6	TEST
// an existing collection that was either non-empty or uninitialized // is replaced by null or a different collection // (if the collection is uninitialized, hibernate has no way of // knowing if the collection is actually empty without querying the db)	WITHOUT_CLASSIFICATION	0.9999998269773794	WITHOUT_CLASSIFICATION	1.7302262055878004E-7	TEST
// this method is called when a new non-null collection is persisted // or when an existing (non-null) collection is moved to a new owner	WITHOUT_CLASSIFICATION	0.999999649638854	WITHOUT_CLASSIFICATION	3.503611459905617E-7	TEST
//	WITHOUT_CLASSIFICATION	0.9999527008540617	WITHOUT_CLASSIFICATION	4.729914593835468E-5	TEST
// we need to grab the version value from the entity, otherwise // we have issues with generated-version entities that may have // multiple actions queued during the same flush	WITHOUT_CLASSIFICATION	0.9999996984573783	WITHOUT_CLASSIFICATION	3.015426216151819E-7	TEST
//do nothing - we only need to notify the cache...	WITHOUT_CLASSIFICATION	0.9999985355326689	WITHOUT_CLASSIFICATION	1.4644673311119798E-6	TEST
//sort first by entity name	WITHOUT_CLASSIFICATION	0.9999791506424264	WITHOUT_CLASSIFICATION	2.0849357573579083E-5	TEST
//then by id	WITHOUT_CLASSIFICATION	0.999978610359896	WITHOUT_CLASSIFICATION	2.1389640104013144E-5	TEST
// to be safe...	WITHOUT_CLASSIFICATION	0.999998900057394	WITHOUT_CLASSIFICATION	1.0999426059421574E-6	TEST
// no transformations took place, so handle it as we would a // non-instrumented class	WITHOUT_CLASSIFICATION	0.9999999455632089	WITHOUT_CLASSIFICATION	5.4436791015549456E-8	TEST
// see if the entry represents a class file	WITHOUT_CLASSIFICATION	0.9999998522743913	WITHOUT_CLASSIFICATION	1.4772560863996914E-7	TEST
// see if the entry represents a class file	WITHOUT_CLASSIFICATION	0.9999998522743913	WITHOUT_CLASSIFICATION	1.4772560863996914E-7	TEST
// intentionally empty	WITHOUT_CLASSIFICATION	0.9999990309162337	WITHOUT_CLASSIFICATION	9.690837663139552E-7	TEST
//test out the optimizer:	WITHOUT_CLASSIFICATION	0.9981582120009467	WITHOUT_CLASSIFICATION	0.0018417879990533016	TEST
// set the name of bulk accessor.	WITHOUT_CLASSIFICATION	0.9999986465119102	WITHOUT_CLASSIFICATION	1.3534880898173418E-6	TEST
// aload_0	WITHOUT_CLASSIFICATION	0.9999978350524678	WITHOUT_CLASSIFICATION	2.164947532232812E-6	TEST
// invokespecial	WITHOUT_CLASSIFICATION	0.9999989730942763	WITHOUT_CLASSIFICATION	1.0269057237523967E-6	TEST
// return	WITHOUT_CLASSIFICATION	0.9999989224764467	WITHOUT_CLASSIFICATION	1.0775235532512376E-6	TEST
// aload_1 // load bean	WITHOUT_CLASSIFICATION	0.9999975609686883	WITHOUT_CLASSIFICATION	2.4390313117422944E-6	TEST
// checkcast // cast bean	WITHOUT_CLASSIFICATION	0.9999974185467271	WITHOUT_CLASSIFICATION	2.581453272967346E-6	TEST
// astore_3 // store bean	WITHOUT_CLASSIFICATION	0.9999979465821454	WITHOUT_CLASSIFICATION	2.053417854647669E-6	TEST
// aload_2 // args	WITHOUT_CLASSIFICATION	0.9999990523702103	WITHOUT_CLASSIFICATION	9.476297896237198E-7	TEST
// iconst_i // continue to aastore // growing stack is 1	WITHOUT_CLASSIFICATION	0.999999662644488	WITHOUT_CLASSIFICATION	3.3735551196371186E-7	TEST
// new	WITHOUT_CLASSIFICATION	0.9999981093768483	WITHOUT_CLASSIFICATION	1.8906231516751185E-6	TEST
// dup	WITHOUT_CLASSIFICATION	0.9999957428169753	WITHOUT_CLASSIFICATION	4.257183024689392E-6	TEST
// aload_3 // load the raw bean	WITHOUT_CLASSIFICATION	0.9999983209199933	WITHOUT_CLASSIFICATION	1.6790800067348342E-6	TEST
// invokeinterface	WITHOUT_CLASSIFICATION	0.9999992236693411	WITHOUT_CLASSIFICATION	7.7633065880554E-7	TEST
// invokevirtual	WITHOUT_CLASSIFICATION	0.999998671900301	WITHOUT_CLASSIFICATION	1.3280996990199875E-6	TEST
// invokevirtual	WITHOUT_CLASSIFICATION	0.999998671900301	WITHOUT_CLASSIFICATION	1.3280996990199875E-6	TEST
// aastore // args	WITHOUT_CLASSIFICATION	0.9999982687586544	WITHOUT_CLASSIFICATION	1.731241345719468E-6	TEST
/* | this | bean | args | i | raw bean | exception | */	WITHOUT_CLASSIFICATION	0.9999992532334618	WITHOUT_CLASSIFICATION	7.467665381817816E-7	TEST
// required to exception table // iconst_0 // i	WITHOUT_CLASSIFICATION	0.9999999344790784	WITHOUT_CLASSIFICATION	6.552092150452808E-8	TEST
// istore_3 // store i	WITHOUT_CLASSIFICATION	0.9999955068323911	WITHOUT_CLASSIFICATION	4.493167608867051E-6	TEST
// aload_1 // load the bean	WITHOUT_CLASSIFICATION	0.9999979591204058	WITHOUT_CLASSIFICATION	2.0408795942041965E-6	TEST
// checkcast // cast the bean into a raw bean	WITHOUT_CLASSIFICATION	0.9999991503522145	WITHOUT_CLASSIFICATION	8.496477854960945E-7	TEST
/* current stack len = 0 */	WITHOUT_CLASSIFICATION	0.9999988207237865	WITHOUT_CLASSIFICATION	1.1792762135377597E-6	TEST
// start region to handling exception (BulkAccessorException)	WITHOUT_CLASSIFICATION	0.9999993781802745	WITHOUT_CLASSIFICATION	6.218197255225668E-7	TEST
// iinc 3, 1	WITHOUT_CLASSIFICATION	0.9999975536031283	WITHOUT_CLASSIFICATION	2.44639687170814E-6	TEST
// aload 4 // load the raw bean	WITHOUT_CLASSIFICATION	0.9999981585051555	WITHOUT_CLASSIFICATION	1.8414948444386663E-6	TEST
// aload_2 // load the args	WITHOUT_CLASSIFICATION	0.9999988663067557	WITHOUT_CLASSIFICATION	1.1336932442109136E-6	TEST
// iconst_i	WITHOUT_CLASSIFICATION	0.9999989396001192	WITHOUT_CLASSIFICATION	1.0603998808009072E-6	TEST
// aaload	WITHOUT_CLASSIFICATION	0.999996959396218	WITHOUT_CLASSIFICATION	3.0406037820642514E-6	TEST
// checkcast	WITHOUT_CLASSIFICATION	0.9999979889701033	WITHOUT_CLASSIFICATION	2.011029896800832E-6	TEST
// checkcast (case of primitive type) // invokevirtual (case of primitive type)	WITHOUT_CLASSIFICATION	0.999999810392969	WITHOUT_CLASSIFICATION	1.8960703091896184E-7	TEST
// checkcast (case of reference type)	WITHOUT_CLASSIFICATION	0.9999994430605004	WITHOUT_CLASSIFICATION	5.569394995914359E-7	TEST
/* current stack len = 2 */	WITHOUT_CLASSIFICATION	0.9999988413629848	WITHOUT_CLASSIFICATION	1.1586370152254492E-6	TEST
// end region to handling exception (BulkAccessorException)	WITHOUT_CLASSIFICATION	0.9999996454398814	WITHOUT_CLASSIFICATION	3.5456011851045554E-7	TEST
// register in exception table	WITHOUT_CLASSIFICATION	0.9999996815801736	WITHOUT_CLASSIFICATION	3.1841982642334163E-7	TEST
// aload_0	WITHOUT_CLASSIFICATION	0.9999978350524678	WITHOUT_CLASSIFICATION	2.164947532232812E-6	TEST
// aload_0	WITHOUT_CLASSIFICATION	0.9999978350524678	WITHOUT_CLASSIFICATION	2.164947532232812E-6	TEST
// return	WITHOUT_CLASSIFICATION	0.9999989224764467	WITHOUT_CLASSIFICATION	1.0775235532512376E-6	TEST
// return	WITHOUT_CLASSIFICATION	0.9999989224764467	WITHOUT_CLASSIFICATION	1.0775235532512376E-6	TEST
// dup	WITHOUT_CLASSIFICATION	0.9999957428169753	WITHOUT_CLASSIFICATION	4.257183024689392E-6	TEST
// invokevirtual	WITHOUT_CLASSIFICATION	0.999998671900301	WITHOUT_CLASSIFICATION	1.3280996990199875E-6	TEST
// checkcast	WITHOUT_CLASSIFICATION	0.9999979889701033	WITHOUT_CLASSIFICATION	2.011029896800832E-6	TEST
/* local variables | target obj | each oldvalue | */	WITHOUT_CLASSIFICATION	0.9999991926727989	WITHOUT_CLASSIFICATION	8.07327200995124E-7	TEST
// astore 5 // store exception	WITHOUT_CLASSIFICATION	0.9999998359155364	WITHOUT_CLASSIFICATION	1.6408446353065477E-7	TEST
// new // BulkAccessorException	WITHOUT_CLASSIFICATION	0.9999997993746341	WITHOUT_CLASSIFICATION	2.0062536591032548E-7	TEST
// aload 5 // load exception	WITHOUT_CLASSIFICATION	0.9999998591096382	WITHOUT_CLASSIFICATION	1.408903617837613E-7	TEST
// iload_3 // i	WITHOUT_CLASSIFICATION	0.9999971923916252	WITHOUT_CLASSIFICATION	2.8076083747670943E-6	TEST
// invokespecial // BulkAccessorException.<init>	WITHOUT_CLASSIFICATION	0.9999997139624875	WITHOUT_CLASSIFICATION	2.8603751237342693E-7	TEST
// athrow	WITHOUT_CLASSIFICATION	0.9999982341543306	WITHOUT_CLASSIFICATION	1.7658456694191232E-6	TEST
// WARNING: classfile only	WITHOUT_CLASSIFICATION	0.9999994605227862	WITHOUT_CLASSIFICATION	5.394772136927745E-7	TEST
//swallow	WITHOUT_CLASSIFICATION	0.9999575593902252	WITHOUT_CLASSIFICATION	4.244060977486708E-5	TEST
/* local variable | this | */	WITHOUT_CLASSIFICATION	0.9999988931950482	WITHOUT_CLASSIFICATION	1.1068049518044484E-6	TEST
// aload_0 // load this	WITHOUT_CLASSIFICATION	0.9999953063607561	WITHOUT_CLASSIFICATION	4.693639243837985E-6	TEST
// aload_0 // load this	WITHOUT_CLASSIFICATION	0.9999953063607561	WITHOUT_CLASSIFICATION	4.693639243837985E-6	TEST
// getfield // get field "$JAVASSIST_CALLBACK" defined already	WITHOUT_CLASSIFICATION	0.9999978620083532	WITHOUT_CLASSIFICATION	2.1379916467764854E-6	TEST
// areturn // return the value of the field	WITHOUT_CLASSIFICATION	0.9999985392293557	WITHOUT_CLASSIFICATION	1.4607706443405107E-6	TEST
/* local variables | this | callback | */	WITHOUT_CLASSIFICATION	0.9999978693314234	WITHOUT_CLASSIFICATION	2.1306685765340514E-6	TEST
// aload_1 // load callback	WITHOUT_CLASSIFICATION	0.9999986644193745	WITHOUT_CLASSIFICATION	1.335580625577266E-6	TEST
// putfield // put field "$JAVASSIST_CALLBACK" defined already	WITHOUT_CLASSIFICATION	0.9999989060841881	WITHOUT_CLASSIFICATION	1.0939158118863726E-6	TEST
// case of non-static field	WITHOUT_CLASSIFICATION	0.999999821710459	WITHOUT_CLASSIFICATION	1.7828954105317278E-7	TEST
// getfield // get each field	WITHOUT_CLASSIFICATION	0.9999883533468076	WITHOUT_CLASSIFICATION	1.1646653192384916E-5	TEST
// invokeinterface // invoke Enabled.getInterceptFieldCallback()	WITHOUT_CLASSIFICATION	0.9999970250051528	WITHOUT_CLASSIFICATION	2.9749948472883156E-6	TEST
// ifnonnull	WITHOUT_CLASSIFICATION	0.9999982095716258	WITHOUT_CLASSIFICATION	1.7904283741781213E-6	TEST
// *return // each type	WITHOUT_CLASSIFICATION	0.999999746419689	WITHOUT_CLASSIFICATION	2.53580311057658E-7	TEST
// *return // each type	WITHOUT_CLASSIFICATION	0.999999746419689	WITHOUT_CLASSIFICATION	2.53580311057658E-7	TEST
// *store_1 // each type	WITHOUT_CLASSIFICATION	0.9999994427208547	WITHOUT_CLASSIFICATION	5.572791452776503E-7	TEST
// ldc // name of the field	WITHOUT_CLASSIFICATION	0.9999983029034499	WITHOUT_CLASSIFICATION	1.6970965501608713E-6	TEST
// *load_1 // each type	WITHOUT_CLASSIFICATION	0.9999996826088317	WITHOUT_CLASSIFICATION	3.173911683711683E-7	TEST
// invokeinterface // invoke Callback.read*() // each type	WITHOUT_CLASSIFICATION	0.9999997552322472	WITHOUT_CLASSIFICATION	2.4476775279956383E-7	TEST
// int	WITHOUT_CLASSIFICATION	0.9999971243054309	WITHOUT_CLASSIFICATION	2.8756945690858353E-6	TEST
// return	WITHOUT_CLASSIFICATION	0.9999989224764467	WITHOUT_CLASSIFICATION	1.0775235532512376E-6	TEST
// dup	WITHOUT_CLASSIFICATION	0.9999957428169753	WITHOUT_CLASSIFICATION	4.257183024689392E-6	TEST
// invokeinterface	WITHOUT_CLASSIFICATION	0.9999992236693411	WITHOUT_CLASSIFICATION	7.7633065880554E-7	TEST
// checkcast	WITHOUT_CLASSIFICATION	0.9999979889701033	WITHOUT_CLASSIFICATION	2.011029896800832E-6	TEST
// checkcast	WITHOUT_CLASSIFICATION	0.9999979889701033	WITHOUT_CLASSIFICATION	2.011029896800832E-6	TEST
// invokeinterface // enabled.getInterceptFieldCallback()	WITHOUT_CLASSIFICATION	0.9999980654747443	WITHOUT_CLASSIFICATION	1.9345252556513185E-6	TEST
// invokeinterface // enabled.getInterceptFieldCallback()	WITHOUT_CLASSIFICATION	0.9999980654747443	WITHOUT_CLASSIFICATION	1.9345252556513185E-6	TEST
// ifnonnull (label1)	WITHOUT_CLASSIFICATION	0.9999992891669166	WITHOUT_CLASSIFICATION	7.108330834347735E-7	TEST
// *load_1	WITHOUT_CLASSIFICATION	0.9999982311603967	WITHOUT_CLASSIFICATION	1.7688396032421395E-6	TEST
// *load_1	WITHOUT_CLASSIFICATION	0.9999982311603967	WITHOUT_CLASSIFICATION	1.7688396032421395E-6	TEST
// putfield	WITHOUT_CLASSIFICATION	0.9999958393351431	WITHOUT_CLASSIFICATION	4.16066485679308E-6	TEST
// return ;	WITHOUT_CLASSIFICATION	0.9999988939007318	WITHOUT_CLASSIFICATION	1.1060992681798789E-6	TEST
// ldc // field name	WITHOUT_CLASSIFICATION	0.999996174447286	WITHOUT_CLASSIFICATION	3.825552714034688E-6	TEST
// getfield // old value of the field	WITHOUT_CLASSIFICATION	0.999978055678818	WITHOUT_CLASSIFICATION	2.1944321181998964E-5	TEST
// invokeinterface // callback.write*(..)	WITHOUT_CLASSIFICATION	0.9999996392497648	WITHOUT_CLASSIFICATION	3.607502352392722E-7	TEST
// reference type	WITHOUT_CLASSIFICATION	0.9999994578846922	WITHOUT_CLASSIFICATION	5.421153078506639E-7	TEST
// reference type	WITHOUT_CLASSIFICATION	0.9999994578846922	WITHOUT_CLASSIFICATION	5.421153078506639E-7	TEST
// not array	WITHOUT_CLASSIFICATION	0.9999989565236871	WITHOUT_CLASSIFICATION	1.043476312869374E-6	TEST
// array of reference type	WITHOUT_CLASSIFICATION	0.9999998127674654	WITHOUT_CLASSIFICATION	1.8723253455211637E-7	TEST
// boolean	WITHOUT_CLASSIFICATION	0.9999971514917382	WITHOUT_CLASSIFICATION	2.8485082616951825E-6	TEST
// byte	WITHOUT_CLASSIFICATION	0.9999955132069167	WITHOUT_CLASSIFICATION	4.486793083341025E-6	TEST
// char	WITHOUT_CLASSIFICATION	0.9999973617897553	WITHOUT_CLASSIFICATION	2.638210244692658E-6	TEST
// short	WITHOUT_CLASSIFICATION	0.9999923430844065	WITHOUT_CLASSIFICATION	7.656915593561477E-6	TEST
// double	WITHOUT_CLASSIFICATION	0.9999983480684377	WITHOUT_CLASSIFICATION	1.6519315623265913E-6	TEST
// float	WITHOUT_CLASSIFICATION	0.9999966293358591	WITHOUT_CLASSIFICATION	3.3706641409814195E-6	TEST
// float	WITHOUT_CLASSIFICATION	0.9999966293358591	WITHOUT_CLASSIFICATION	3.3706641409814195E-6	TEST
// long	WITHOUT_CLASSIFICATION	0.9999978833391827	WITHOUT_CLASSIFICATION	2.116660817294975E-6	TEST
// long	WITHOUT_CLASSIFICATION	0.9999978833391827	WITHOUT_CLASSIFICATION	2.116660817294975E-6	TEST
// bad type	WITHOUT_CLASSIFICATION	0.9999981571882035	WITHOUT_CLASSIFICATION	1.8428117965320934E-6	TEST
// bad type	WITHOUT_CLASSIFICATION	0.9999981571882035	WITHOUT_CLASSIFICATION	1.8428117965320934E-6	TEST
// boolean, byte, char, int, short	WITHOUT_CLASSIFICATION	0.9999980308287526	WITHOUT_CLASSIFICATION	1.969171247343383E-6	TEST
// boolean, byte, char, int, short	WITHOUT_CLASSIFICATION	0.9999980308287526	WITHOUT_CLASSIFICATION	1.969171247343383E-6	TEST
// reference type	WITHOUT_CLASSIFICATION	0.9999994578846922	WITHOUT_CLASSIFICATION	5.421153078506639E-7	TEST
// double	WITHOUT_CLASSIFICATION	0.9999983480684377	WITHOUT_CLASSIFICATION	1.6519315623265913E-6	TEST
// float	WITHOUT_CLASSIFICATION	0.9999966293358591	WITHOUT_CLASSIFICATION	3.3706641409814195E-6	TEST
// float	WITHOUT_CLASSIFICATION	0.9999966293358591	WITHOUT_CLASSIFICATION	3.3706641409814195E-6	TEST
// long	WITHOUT_CLASSIFICATION	0.9999978833391827	WITHOUT_CLASSIFICATION	2.116660817294975E-6	TEST
// bad type	WITHOUT_CLASSIFICATION	0.9999981571882035	WITHOUT_CLASSIFICATION	1.8428117965320934E-6	TEST
// bad type	WITHOUT_CLASSIFICATION	0.9999981571882035	WITHOUT_CLASSIFICATION	1.8428117965320934E-6	TEST
// boolean, byte, char, int, short	WITHOUT_CLASSIFICATION	0.9999980308287526	WITHOUT_CLASSIFICATION	1.969171247343383E-6	TEST
// skip finalize methods	WITHOUT_CLASSIFICATION	0.9999967306247719	WITHOUT_CLASSIFICATION	3.2693752280942137E-6	TEST
//Mainly for OSCache	WITHOUT_CLASSIFICATION	0.9999934461543063	WITHOUT_CLASSIFICATION	6.553845693623111E-6	TEST
//decrement the lock	WITHOUT_CLASSIFICATION	0.9999945477446854	WITHOUT_CLASSIFICATION	5.452255314545017E-6	TEST
// create new lock that times out immediately	WITHOUT_CLASSIFICATION	0.9999995823425725	WITHOUT_CLASSIFICATION	4.176574274577587E-7	TEST
//recache the updated state	WITHOUT_CLASSIFICATION	0.999992933037266	WITHOUT_CLASSIFICATION	7.0669627339461685E-6	TEST
// noop	WITHOUT_CLASSIFICATION	0.9999977813666796	WITHOUT_CLASSIFICATION	2.218633320360067E-6	TEST
//null clientLock is remotely possible but will never happen in practice	WITHOUT_CLASSIFICATION	0.9999980899124338	WITHOUT_CLASSIFICATION	1.910087566173107E-6	TEST
// we really could refresh the item if it // is not a lock, but it might be slower //return freshTimestamp < txTimestamp	WITHOUT_CLASSIFICATION	0.999999257441203	WITHOUT_CLASSIFICATION	7.425587970915625E-7	TEST
//by requiring <, we rely on lock timeout in the case of an unsuccessful update!	WITHOUT_CLASSIFICATION	0.9999983412152867	WITHOUT_CLASSIFICATION	1.6587847133005699E-6	TEST
// the user provided resulttransformer, not the one used with "select new". Here to avoid mangling // transformed/non-transformed results.	WITHOUT_CLASSIFICATION	0.9999998258278446	WITHOUT_CLASSIFICATION	1.7417215529978385E-7	TEST
// disassemble positional parameters	WITHOUT_CLASSIFICATION	0.9999988732630954	WITHOUT_CLASSIFICATION	1.1267369044736483E-6	TEST
// disassemble named parameters	WITHOUT_CLASSIFICATION	0.9999960829661398	WITHOUT_CLASSIFICATION	3.917033860082115E-6	TEST
//ie. 60 seconds	WITHOUT_CLASSIFICATION	0.9999983864597718	WITHOUT_CLASSIFICATION	1.6135402281893643E-6	TEST
// noop	WITHOUT_CLASSIFICATION	0.9999977813666796	WITHOUT_CLASSIFICATION	2.218633320360067E-6	TEST
//noop	WITHOUT_CLASSIFICATION	0.9999563774172369	WITHOUT_CLASSIFICATION	4.362258276313625E-5	TEST
//noop	WITHOUT_CLASSIFICATION	0.9999563774172369	WITHOUT_CLASSIFICATION	4.362258276313625E-5	TEST
// this is called from SettingsFactory irregardless; trivial to simply disregard	WITHOUT_CLASSIFICATION	0.9999956161066597	WITHOUT_CLASSIFICATION	4.383893340257685E-6	TEST
// Do nothing; subclasses may override.	WITHOUT_CLASSIFICATION	0.999999455497132	WITHOUT_CLASSIFICATION	5.445028680820999E-7	TEST
// Do nothing; subclasses may override.	WITHOUT_CLASSIFICATION	0.999999455497132	WITHOUT_CLASSIFICATION	5.445028680820999E-7	TEST
//throw new UnsupportedOperationException("Can't write to a readonly object");	WITHOUT_CLASSIFICATION	0.9999999784743667	WITHOUT_CLASSIFICATION	2.1525633301138684E-8	TEST
//assembled state gets put in a new array (we read from cache by value!)	WITHOUT_CLASSIFICATION	0.9999987271358606	WITHOUT_CLASSIFICATION	1.2728641394227954E-6	TEST
//persister.setIdentifier(result, id); //before calling interceptor, for consistency with normal load	WITHOUT_CLASSIFICATION	0.9999994816705797	WITHOUT_CLASSIFICATION	5.183294203157027E-7	TEST
// no-op; CCS did not have such a concept	WITHOUT_CLASSIFICATION	0.9999999127200659	WITHOUT_CLASSIFICATION	8.727993398607239E-8	TEST
// no-op; CCS did not have such a concept	WITHOUT_CLASSIFICATION	0.9999999127200659	WITHOUT_CLASSIFICATION	8.727993398607239E-8	TEST
// again, CCS did not have such a concept; but a reasonable // proximity is to clear the cache after transaction *as long as* // the underlying cache is not JTA aware.	WITHOUT_CLASSIFICATION	0.9999999856745637	WITHOUT_CLASSIFICATION	1.4325436205383466E-8	TEST
// again, CCS did not have such a concept; however a reasonable // proximity is to clear the cache.  For non-transaction aware // caches, we will also do a clear at the end of the transaction	WITHOUT_CLASSIFICATION	0.9999999959638671	WITHOUT_CLASSIFICATION	4.036132931395911E-9	TEST
// again, CCS did not have such a concept; however a reasonable // proximity is to clear the cache.  For non-transaction aware // caches, we will also do a clear at the end of the transaction	WITHOUT_CLASSIFICATION	0.9999999959638671	WITHOUT_CLASSIFICATION	4.036132931395911E-9	TEST
// classes mentioned in extends not available - so put it in queue	WITHOUT_CLASSIFICATION	0.999999945978213	WITHOUT_CLASSIFICATION	5.402178709216889E-8	TEST
// get meta's from <hibernate-mapping>	WITHOUT_CLASSIFICATION	0.9999961840393197	WITHOUT_CLASSIFICATION	3.815960680371982E-6	TEST
// get meta's from <class>	WITHOUT_CLASSIFICATION	0.9999984786944934	WITHOUT_CLASSIFICATION	1.5213055065745948E-6	TEST
// DB-OBJECTNAME	WITHOUT_CLASSIFICATION	0.9999892491446813	WITHOUT_CLASSIFICATION	1.075085531871277E-5	TEST
// MUTABLE	WITHOUT_CLASSIFICATION	0.9999950212868907	WITHOUT_CLASSIFICATION	4.978713109357559E-6	TEST
// WHERE	WITHOUT_CLASSIFICATION	0.9999919653951245	WITHOUT_CLASSIFICATION	8.034604875588695E-6	TEST
// CHECK	WITHOUT_CLASSIFICATION	0.9999953383292423	WITHOUT_CLASSIFICATION	4.661670757781943E-6	TEST
// POLYMORPHISM	WITHOUT_CLASSIFICATION	0.9999937806110268	WITHOUT_CLASSIFICATION	6.219388973251812E-6	TEST
// TODO:	WITHOUT_CLASSIFICATION	0.998633178640568	WITHOUT_CLASSIFICATION	0.0013668213594320764	TEST
// ID	WITHOUT_CLASSIFICATION	0.9999795674011942	WITHOUT_CLASSIFICATION	2.043259880586913E-5	TEST
// VERSION / TIMESTAMP	WITHOUT_CLASSIFICATION	0.9999785856725418	WITHOUT_CLASSIFICATION	2.1414327458212447E-5	TEST
// DISCRIMINATOR	WITHOUT_CLASSIFICATION	0.9999857634155818	WITHOUT_CLASSIFICATION	1.4236584418213871E-5	TEST
// Primary key constraint	WITHOUT_CLASSIFICATION	0.9999998352744153	WITHOUT_CLASSIFICATION	1.647255848496566E-7	TEST
// this is either a <version/> tag with no type attribute, // or a <timestamp/> tag	WITHOUT_CLASSIFICATION	0.9999974065418221	WITHOUT_CLASSIFICATION	2.59345817778824E-6	TEST
// for version properties marked as being generated, make sure they are "always" // generated; aka, "insert" is invalid; this is dis-allowed by the DTD, // but just to make sure...	WITHOUT_CLASSIFICATION	0.9999963129070097	WITHOUT_CLASSIFICATION	3.6870929903096384E-6	TEST
// DISCRIMINATOR	WITHOUT_CLASSIFICATION	0.9999857634155818	WITHOUT_CLASSIFICATION	1.4236584418213871E-5	TEST
// ( (Column) discrim.getColumnIterator().next() ).setType(type);	WITHOUT_CLASSIFICATION	0.9999998320570723	WITHOUT_CLASSIFICATION	1.6794292776605198E-7	TEST
// go ahead and set the lazy here, since pojo.proxy can override it.	WITHOUT_CLASSIFICATION	0.9999997295594039	WITHOUT_CLASSIFICATION	2.7044059616433934E-7	TEST
// DYNAMIC UPDATE	WITHOUT_CLASSIFICATION	0.9999894315708601	WITHOUT_CLASSIFICATION	1.0568429139880898E-5	TEST
// IMPORT	WITHOUT_CLASSIFICATION	0.9999820927910691	WITHOUT_CLASSIFICATION	1.7907208930881185E-5	TEST
// BATCH SIZE	WITHOUT_CLASSIFICATION	0.9999958107494974	WITHOUT_CLASSIFICATION	4.189250502679477E-6	TEST
// SELECT BEFORE UPDATE	WITHOUT_CLASSIFICATION	0.9999922333204521	WITHOUT_CLASSIFICATION	7.766679547979465E-6	TEST
// OPTIMISTIC LOCK MODE	WITHOUT_CLASSIFICATION	0.9999809813682325	WITHOUT_CLASSIFICATION	1.9018631767466422E-5	TEST
// PERSISTER	WITHOUT_CLASSIFICATION	0.9999934454975988	WITHOUT_CLASSIFICATION	6.5545024011593856E-6	TEST
// CUSTOM SQL	WITHOUT_CLASSIFICATION	0.9999918485394554	WITHOUT_CLASSIFICATION	8.151460544553547E-6	TEST
// get meta's from <subclass>	WITHOUT_CLASSIFICATION	0.9999989708513994	WITHOUT_CLASSIFICATION	1.0291486004979808E-6	TEST
// properties	WITHOUT_CLASSIFICATION	0.9999977746183227	WITHOUT_CLASSIFICATION	2.2253816773172725E-6	TEST
// joined subclasses	WITHOUT_CLASSIFICATION	0.9999992042574205	WITHOUT_CLASSIFICATION	7.95742579482405E-7	TEST
// KEY	WITHOUT_CLASSIFICATION	0.9999912793216115	WITHOUT_CLASSIFICATION	8.720678388459407E-6	TEST
// CHECK	WITHOUT_CLASSIFICATION	0.9999953383292423	WITHOUT_CLASSIFICATION	4.661670757781943E-6	TEST
// CUSTOM SQL	WITHOUT_CLASSIFICATION	0.9999918485394554	WITHOUT_CLASSIFICATION	8.151460544553547E-6	TEST
// properties	WITHOUT_CLASSIFICATION	0.9999977746183227	WITHOUT_CLASSIFICATION	2.2253816773172725E-6	TEST
// KEY	WITHOUT_CLASSIFICATION	0.9999912793216115	WITHOUT_CLASSIFICATION	8.720678388459407E-6	TEST
// model.getKey().setType( new Type( model.getIdentifier() ) );	WITHOUT_CLASSIFICATION	0.9999996896611236	WITHOUT_CLASSIFICATION	3.1033887641558063E-7	TEST
// TABLENAME	WITHOUT_CLASSIFICATION	0.9999818670559601	WITHOUT_CLASSIFICATION	1.8132944039764054E-5	TEST
// join.getKey().setType( new Type( lazz.getIdentifier() ) );	WITHOUT_CLASSIFICATION	0.999999836672124	WITHOUT_CLASSIFICATION	1.6332787596227293E-7	TEST
// PROPERTIES	WITHOUT_CLASSIFICATION	0.9999918385121593	WITHOUT_CLASSIFICATION	8.161487840657556E-6	TEST
// COLUMN(S)	WITHOUT_CLASSIFICATION	0.9999931754594122	WITHOUT_CLASSIFICATION	6.824540587789102E-6	TEST
// column index	WITHOUT_CLASSIFICATION	0.9999997603295548	WITHOUT_CLASSIFICATION	2.396704452538432E-7	TEST
//column unique-key	WITHOUT_CLASSIFICATION	0.999989728047198	WITHOUT_CLASSIFICATION	1.0271952801924309E-5	TEST
// automatically makes a column with the default name if none is specifed by XML	WITHOUT_CLASSIFICATION	0.9999973143737416	WITHOUT_CLASSIFICATION	2.685626258343955E-6	TEST
// for an any	WITHOUT_CLASSIFICATION	0.9999800979268364	WITHOUT_CLASSIFICATION	1.9902073163538704E-5	TEST
// insertable simply because that is the user did not specify // anything; just override it	WITHOUT_CLASSIFICATION	0.9999993839250665	WITHOUT_CLASSIFICATION	6.160749335026072E-7	TEST
// the user specifically supplied insert="true", // which constitutes an illegal combo	WITHOUT_CLASSIFICATION	0.9999880156868658	WITHOUT_CLASSIFICATION	1.1984313134210428E-5	TEST
// properties generated on update can never be updateable...	WITHOUT_CLASSIFICATION	0.9999993063557692	WITHOUT_CLASSIFICATION	6.936442308033062E-7	TEST
// updateable only because the user did not specify  // anything; just override it	WITHOUT_CLASSIFICATION	0.9999999422738594	WITHOUT_CLASSIFICATION	5.772614061601319E-8	TEST
// the user specifically supplied update="true", // which constitutes an illegal combo	WITHOUT_CLASSIFICATION	0.9999927340749981	WITHOUT_CLASSIFICATION	7.265925001970719E-6	TEST
// ROLENAME	WITHOUT_CLASSIFICATION	0.9999910410260587	WITHOUT_CLASSIFICATION	8.958973941275039E-6	TEST
// FETCH STRATEGY	WITHOUT_CLASSIFICATION	0.999994526633906	WITHOUT_CLASSIFICATION	5.473366094046066E-6	TEST
// TABLE	WITHOUT_CLASSIFICATION	0.9999896906790994	WITHOUT_CLASSIFICATION	1.0309320900664157E-5	TEST
//tableName = mappings.getNamingStrategy().propertyToTableName( className, path );	WITHOUT_CLASSIFICATION	0.9999913681997041	WITHOUT_CLASSIFICATION	8.631800295881322E-6	TEST
// SORT	WITHOUT_CLASSIFICATION	0.9999928274401778	WITHOUT_CLASSIFICATION	7.172559822172388E-6	TEST
// CUSTOM SQL	WITHOUT_CLASSIFICATION	0.9999918485394554	WITHOUT_CLASSIFICATION	8.151460544553547E-6	TEST
// unsorted, natural, comparator.class.name	WITHOUT_CLASSIFICATION	0.9999992998540735	WITHOUT_CLASSIFICATION	7.001459263698813E-7	TEST
// ORPHAN DELETE (used for programmer error detection)	WITHOUT_CLASSIFICATION	0.9999998545930814	WITHOUT_CLASSIFICATION	1.4540691862687463E-7	TEST
// set up second pass	WITHOUT_CLASSIFICATION	0.9999989925755458	WITHOUT_CLASSIFICATION	1.0074244542498665E-6	TEST
// an "embedded" component (composite ids and unique) // note that this does not handle nested components	WITHOUT_CLASSIFICATION	0.9999917664133854	WITHOUT_CLASSIFICATION	8.23358661467197E-6	TEST
// a nested composite element	WITHOUT_CLASSIFICATION	0.9999967815368404	WITHOUT_CLASSIFICATION	3.2184631597263524E-6	TEST
// for an any // we will have to use reflection	WITHOUT_CLASSIFICATION	0.9999986778586512	WITHOUT_CLASSIFICATION	1.322141348850075E-6	TEST
//NOTE SPECIAL CASE: // one-to-one constrained=false cannot be proxied, // so default to join and non-lazy	WITHOUT_CLASSIFICATION	0.9999999835479036	WITHOUT_CLASSIFICATION	1.6452096415804495E-8	TEST
// use old (HB 2.1) defaults if outer-join is specified	WITHOUT_CLASSIFICATION	0.99999972901452	WITHOUT_CLASSIFICATION	2.7098547997492077E-7	TEST
//lazy = !join;	WITHOUT_CLASSIFICATION	0.9999938987753746	WITHOUT_CLASSIFICATION	6.101224625449249E-6	TEST
// GENERATOR	WITHOUT_CLASSIFICATION	0.9999891680801324	WITHOUT_CLASSIFICATION	1.0831919867547178E-5	TEST
// ID UNSAVED-VALUE	WITHOUT_CLASSIFICATION	0.9999896077777801	WITHOUT_CLASSIFICATION	1.0392222219877956E-5	TEST
// VERSION UNSAVED-VALUE	WITHOUT_CLASSIFICATION	0.9999900968309652	WITHOUT_CLASSIFICATION	9.903169034750937E-6	TEST
// not necessarily a *unique* property reference	WITHOUT_CLASSIFICATION	0.9999999359285578	WITHOUT_CLASSIFICATION	6.407144215077959E-8	TEST
// ( (Column) ( (SimpleValue) ic.getIndex() ).getColumnIterator().next() // ).setNullable(false);	WITHOUT_CLASSIFICATION	0.9999994494244224	WITHOUT_CLASSIFICATION	5.505755775882555E-7	TEST
// contained elements:	WITHOUT_CLASSIFICATION	0.9999996937158359	WITHOUT_CLASSIFICATION	3.0628416414519604E-7	TEST
// for non-inverse one-to-many, with a not-null fk, add a backref!	WITHOUT_CLASSIFICATION	0.9999999167588453	WITHOUT_CLASSIFICATION	8.324115475220749E-8	TEST
// Bind the where	WITHOUT_CLASSIFICATION	0.9999921891225455	WITHOUT_CLASSIFICATION	7.810877454531314E-6	TEST
// Bind the order-by	WITHOUT_CLASSIFICATION	0.9999989175823533	WITHOUT_CLASSIFICATION	1.0824176467402872E-6	TEST
// Bind the filters	WITHOUT_CLASSIFICATION	0.9999974146798892	WITHOUT_CLASSIFICATION	2.585320110751428E-6	TEST
// overriding inherited meta attribute. HBX-621 & HBX-793	WITHOUT_CLASSIFICATION	0.9999995666997511	WITHOUT_CLASSIFICATION	4.333002489283318E-7	TEST
// first, iterate over all elements capable of defining an extends attribute // collecting all found extends references if they cannot be resolved // against the already processed mappings.	WITHOUT_CLASSIFICATION	0.9999998653991392	WITHOUT_CLASSIFICATION	1.3460086085352638E-7	TEST
// mappings might contain either the "raw" extends name (in the case of // an entity-name mapping) or a FQN (in the case of a POJO mapping).	WITHOUT_CLASSIFICATION	0.9999993829371301	WITHOUT_CLASSIFICATION	6.170628699637312E-7	TEST
//+ "_" + referencedColumnName not used for backward compatibility	WITHOUT_CLASSIFICATION	0.9999994853400124	WITHOUT_CLASSIFICATION	5.146599875638722E-7	TEST
//SessionFactory name:	WITHOUT_CLASSIFICATION	0.9999973251695145	WITHOUT_CLASSIFICATION	2.6748304855094333E-6	TEST
//JDBC and connection settings:	WITHOUT_CLASSIFICATION	0.9999991597322826	WITHOUT_CLASSIFICATION	8.402677174584192E-7	TEST
//JDBC and connection settings:	WITHOUT_CLASSIFICATION	0.9999991597322826	WITHOUT_CLASSIFICATION	8.402677174584192E-7	TEST
//Interrogate JDBC metadata	WITHOUT_CLASSIFICATION	0.9999687148447526	WITHOUT_CLASSIFICATION	3.128515524748884E-5	TEST
// user supplied JDBC connections	WITHOUT_CLASSIFICATION	0.9999998967921193	WITHOUT_CLASSIFICATION	1.0320788064475111E-7	TEST
//use dialect default properties	WITHOUT_CLASSIFICATION	0.9999981113599337	WITHOUT_CLASSIFICATION	1.8886400663757E-6	TEST
// Transaction settings:	WITHOUT_CLASSIFICATION	0.9999995184732352	WITHOUT_CLASSIFICATION	4.815267647361313E-7	TEST
//SQL Generation settings:	WITHOUT_CLASSIFICATION	0.9999988683804264	WITHOUT_CLASSIFICATION	1.1316195736460147E-6	TEST
//Query parser settings:	WITHOUT_CLASSIFICATION	0.9999940621040022	WITHOUT_CLASSIFICATION	5.937895997711993E-6	TEST
// Second-level / query cache:	WITHOUT_CLASSIFICATION	0.9999998316883116	WITHOUT_CLASSIFICATION	1.6831168834442314E-7	TEST
// The cache provider is needed when we either have second-level cache enabled // or query cache enabled.  Note that useSecondLevelCache is enabled by default	WITHOUT_CLASSIFICATION	0.9999992086542766	WITHOUT_CLASSIFICATION	7.913457234508463E-7	TEST
//SQL Exception converter:	WITHOUT_CLASSIFICATION	0.9999988102055501	WITHOUT_CLASSIFICATION	1.189794449806284E-6	TEST
//Statistics and logging:	WITHOUT_CLASSIFICATION	0.9999912230838953	WITHOUT_CLASSIFICATION	8.7769161046912E-6	TEST
//	WITHOUT_CLASSIFICATION	0.9999527008540617	WITHOUT_CLASSIFICATION	4.729914593835468E-5	TEST
//	WITHOUT_CLASSIFICATION	0.9999527008540617	WITHOUT_CLASSIFICATION	4.729914593835468E-5	TEST
//Schema export:	WITHOUT_CLASSIFICATION	0.9999959425387636	WITHOUT_CLASSIFICATION	4.057461236383912E-6	TEST
//	WITHOUT_CLASSIFICATION	0.9999527008540617	WITHOUT_CLASSIFICATION	4.729914593835468E-5	TEST
// legacy behavior, apply the bridge...	WITHOUT_CLASSIFICATION	0.9999964596702617	WITHOUT_CLASSIFICATION	3.54032973815523E-6	TEST
// maybe a concrete SQLpropertyresult type, but Map is exactly what is required at the moment	WITHOUT_CLASSIFICATION	0.9999993131433689	WITHOUT_CLASSIFICATION	6.868566311302188E-7	TEST
//if dotted and not load-collection nor return-join //regular property	WITHOUT_CLASSIFICATION	0.9999996778537673	WITHOUT_CLASSIFICATION	3.221462327318905E-7	TEST
//	WITHOUT_CLASSIFICATION	0.9999527008540617	WITHOUT_CLASSIFICATION	4.729914593835468E-5	TEST
// public getters ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999916284174832	WITHOUT_CLASSIFICATION	8.37158251673505E-6	TEST
//	WITHOUT_CLASSIFICATION	0.9999527008540617	WITHOUT_CLASSIFICATION	4.729914593835468E-5	TEST
// package protected setters ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999979331517647	WITHOUT_CLASSIFICATION	2.0668482352715287E-6	TEST
//	WITHOUT_CLASSIFICATION	0.9999527008540617	WITHOUT_CLASSIFICATION	4.729914593835468E-5	TEST
//	WITHOUT_CLASSIFICATION	0.9999527008540617	WITHOUT_CLASSIFICATION	4.729914593835468E-5	TEST
// using local since the inheritedMetas at this point is not the correct map since it is always the empty map	WITHOUT_CLASSIFICATION	0.9999998678572003	WITHOUT_CLASSIFICATION	1.321427997628311E-7	TEST
//	WITHOUT_CLASSIFICATION	0.9999527008540617	WITHOUT_CLASSIFICATION	4.729914593835468E-5	TEST
//	WITHOUT_CLASSIFICATION	0.9999527008540617	WITHOUT_CLASSIFICATION	4.729914593835468E-5	TEST
//	WITHOUT_CLASSIFICATION	0.9999527008540617	WITHOUT_CLASSIFICATION	4.729914593835468E-5	TEST
//	WITHOUT_CLASSIFICATION	0.9999527008540617	WITHOUT_CLASSIFICATION	4.729914593835468E-5	TEST
// if doc is null, then for whatever reason, the cached file cannot be used...	WITHOUT_CLASSIFICATION	0.9999988859014844	WITHOUT_CLASSIFICATION	1.114098515621126E-6	TEST
// drop them in reverse order in case db needs it done that way...	WITHOUT_CLASSIFICATION	0.9999999405422749	WITHOUT_CLASSIFICATION	5.9457724983632164E-8	TEST
//	WITHOUT_CLASSIFICATION	0.9999527008540617	WITHOUT_CLASSIFICATION	4.729914593835468E-5	TEST
// This method may be called many times!!	WITHOUT_CLASSIFICATION	0.9999936006983974	WITHOUT_CLASSIFICATION	6.399301602638648E-6	TEST
//	WITHOUT_CLASSIFICATION	0.9999527008540617	WITHOUT_CLASSIFICATION	4.729914593835468E-5	TEST
//	WITHOUT_CLASSIFICATION	0.9999527008540617	WITHOUT_CLASSIFICATION	4.729914593835468E-5	TEST
// found	WITHOUT_CLASSIFICATION	0.999996966587105	WITHOUT_CLASSIFICATION	3.0334128949491047E-6	TEST
// found	WITHOUT_CLASSIFICATION	0.999996966587105	WITHOUT_CLASSIFICATION	3.0334128949491047E-6	TEST
//	WITHOUT_CLASSIFICATION	0.9999527008540617	WITHOUT_CLASSIFICATION	4.729914593835468E-5	TEST
//	WITHOUT_CLASSIFICATION	0.9999527008540617	WITHOUT_CLASSIFICATION	4.729914593835468E-5	TEST
//<String, String>	WITHOUT_CLASSIFICATION	0.9999874206930945	WITHOUT_CLASSIFICATION	1.257930690547631E-5	TEST
//<String, String>	WITHOUT_CLASSIFICATION	0.9999874206930945	WITHOUT_CLASSIFICATION	1.257930690547631E-5	TEST
//+ "_" + referencedColumnName not used for backward compatibility	WITHOUT_CLASSIFICATION	0.9999994853400124	WITHOUT_CLASSIFICATION	5.146599875638722E-7	TEST
//Set USE_REFLECTION_OPTIMIZER to false to fix HHH-227	WITHOUT_CLASSIFICATION	0.9999920246811264	WITHOUT_CLASSIFICATION	7.975318873642017E-6	TEST
//orphan delete not supported for EntityMode.DOM4J	WITHOUT_CLASSIFICATION	0.9999554146063677	WITHOUT_CLASSIFICATION	4.4585393632359944E-5	TEST
//element = XMLHelper.generateDom4jElement( persister.getNodeName() );	WITHOUT_CLASSIFICATION	0.9999050105977347	WITHOUT_CLASSIFICATION	9.498940226530307E-5	TEST
// intentionally empty	WITHOUT_CLASSIFICATION	0.9999990309162337	WITHOUT_CLASSIFICATION	9.690837663139552E-7	TEST
//orphan delete not supported for EntityMode.DOM4J	WITHOUT_CLASSIFICATION	0.9999554146063677	WITHOUT_CLASSIFICATION	4.4585393632359944E-5	TEST
//element = XMLHelper.generateDom4jElement( persister.getNodeName() );	WITHOUT_CLASSIFICATION	0.9999050105977347	WITHOUT_CLASSIFICATION	9.498940226530307E-5	TEST
//needed for SOAP libraries, etc	WITHOUT_CLASSIFICATION	0.9999932295852949	WITHOUT_CLASSIFICATION	6.770414705077721E-6	TEST
//maintain correct duplication if loaded in a cartesian product	WITHOUT_CLASSIFICATION	0.9999995462348508	WITHOUT_CLASSIFICATION	4.53765149244752E-7	TEST
// the element has been removed from the set	WITHOUT_CLASSIFICATION	0.9999972324691764	WITHOUT_CLASSIFICATION	2.7675308237147983E-6	TEST
// the element has changed	WITHOUT_CLASSIFICATION	0.9999887626692512	WITHOUT_CLASSIFICATION	1.1237330748830077E-5	TEST
//Careful: these methods do not initialize the collection.	WITHOUT_CLASSIFICATION	0.9999976970044255	WITHOUT_CLASSIFICATION	2.3029955743844954E-6	TEST
//needed so that we remove this collection from the second-level cache	WITHOUT_CLASSIFICATION	0.9999998788269038	WITHOUT_CLASSIFICATION	1.2117309624375798E-7	TEST
// override on some subclasses	WITHOUT_CLASSIFICATION	0.9999997806818756	WITHOUT_CLASSIFICATION	2.1931812443179644E-7	TEST
//override on some subclasses	WITHOUT_CLASSIFICATION	0.9999988011685577	WITHOUT_CLASSIFICATION	1.1988314422675313E-6	TEST
//do this bit after setting initialized to true or it will recurse	WITHOUT_CLASSIFICATION	0.9999278401190549	WITHOUT_CLASSIFICATION	7.215988094508252E-5	TEST
// short-circuit(s) // no new elements, the old list contains only Orphans // no old elements, so no Orphans neither	WITHOUT_CLASSIFICATION	0.9999997461365339	WITHOUT_CLASSIFICATION	2.5386346610602645E-7	TEST
// create the collection holding the Orphans	WITHOUT_CLASSIFICATION	0.9999997512307185	WITHOUT_CLASSIFICATION	2.4876928149299277E-7	TEST
// collect EntityIdentifier(s) of the *current* elements - add them into a HashSet for fast access	WITHOUT_CLASSIFICATION	0.9999998153240302	WITHOUT_CLASSIFICATION	1.8467596990588998E-7	TEST
// iterate over the *old* list	WITHOUT_CLASSIFICATION	0.9999970514142454	WITHOUT_CLASSIFICATION	2.94858575459837E-6	TEST
/*(array==null) ? tempList.size() :*/	WITHOUT_CLASSIFICATION	0.999970099130779	WITHOUT_CLASSIFICATION	2.9900869220937688E-5	TEST
// intentionally empty	WITHOUT_CLASSIFICATION	0.9999990309162337	WITHOUT_CLASSIFICATION	9.690837663139552E-7	TEST
/*(array==null) ? tempList.get(i) :*/	WITHOUT_CLASSIFICATION	0.9999806704000193	WITHOUT_CLASSIFICATION	1.932959998080268E-5	TEST
//write(); -- doesn't	WITHOUT_CLASSIFICATION	0.9999940273023236	WITHOUT_CLASSIFICATION	5.972697676403361E-6	TEST
//write(); -- doesn't	WITHOUT_CLASSIFICATION	0.9999940273023236	WITHOUT_CLASSIFICATION	5.972697676403361E-6	TEST
// amazingly, these two will work because AbstractCollection // uses iterator() to fill the array	WITHOUT_CLASSIFICATION	0.9999999218148395	WITHOUT_CLASSIFICATION	7.818516043467692E-8	TEST
//needed for SOAP libraries, etc	WITHOUT_CLASSIFICATION	0.9999932295852949	WITHOUT_CLASSIFICATION	6.770414705077721E-6	TEST
// finally, what it's all about...	WITHOUT_CLASSIFICATION	0.9999984026601687	WITHOUT_CLASSIFICATION	1.597339831317903E-6	TEST
// note that if we load this collection from a cartesian product // the multiplicity would be broken ... so use an idbag instead	WITHOUT_CLASSIFICATION	0.9999997583075276	WITHOUT_CLASSIFICATION	2.416924724066749E-7	TEST
// Anyway, here we implement <set> semantics for a // <one-to-many> <bag>!	WITHOUT_CLASSIFICATION	0.9999935566146098	WITHOUT_CLASSIFICATION	6.4433853902183055E-6	TEST
//a shortcut if its location didn't change!	WITHOUT_CLASSIFICATION	0.9999979591716708	WITHOUT_CLASSIFICATION	2.040828329187013E-6	TEST
//search for it //note that this code is incorrect for other than one-to-many	WITHOUT_CLASSIFICATION	0.9999854992720935	WITHOUT_CLASSIFICATION	1.4500727906555557E-5	TEST
//needed for SOAP libraries, etc	WITHOUT_CLASSIFICATION	0.9999932295852949	WITHOUT_CLASSIFICATION	6.770414705077721E-6	TEST
//a shortcut if its location didn't change!	WITHOUT_CLASSIFICATION	0.9999979591716708	WITHOUT_CLASSIFICATION	2.040828329187013E-6	TEST
//search for it //note that this code is incorrect for other than one-to-many	WITHOUT_CLASSIFICATION	0.9999854992720935	WITHOUT_CLASSIFICATION	1.4500727906555557E-5	TEST
/*public boolean equals(Object other) {	WITHOUT_CLASSIFICATION	0.9999609844100585	WITHOUT_CLASSIFICATION	3.901558994140556E-5	TEST
// List OPERATIONS:	WITHOUT_CLASSIFICATION	0.9999918827599298	WITHOUT_CLASSIFICATION	8.11724007013171E-6	TEST
//pad with nulls from the current last element up to the new index	WITHOUT_CLASSIFICATION	0.9999978893187631	WITHOUT_CLASSIFICATION	2.1106812367998258E-6	TEST
//needed for SOAP libraries, etc	WITHOUT_CLASSIFICATION	0.9999932295852949	WITHOUT_CLASSIFICATION	6.770414705077721E-6	TEST
//needed for SOAP libraries, etc	WITHOUT_CLASSIFICATION	0.9999932295852949	WITHOUT_CLASSIFICATION	6.770414705077721E-6	TEST
// from Map	WITHOUT_CLASSIFICATION	0.999995698340181	WITHOUT_CLASSIFICATION	4.30165981899033E-6	TEST
// from SortedMap	WITHOUT_CLASSIFICATION	0.9999969305894404	WITHOUT_CLASSIFICATION	3.0694105595427246E-6	TEST
//inject the data	WITHOUT_CLASSIFICATION	0.9999958765965782	WITHOUT_CLASSIFICATION	4.123403421848811E-6	TEST
// cannot be instantiated	WITHOUT_CLASSIFICATION	0.9999992189303891	WITHOUT_CLASSIFICATION	7.810696108425491E-7	TEST
//default pool size 20	WITHOUT_CLASSIFICATION	0.9999964760417729	WITHOUT_CLASSIFICATION	3.5239582269785386E-6	TEST
// trying via forName() first to be as close to DriverManager's semantics	WITHOUT_CLASSIFICATION	0.9999993924572065	WITHOUT_CLASSIFICATION	6.075427934329228E-7	TEST
// if debug level is enabled, then log the password, otherwise mask it	WITHOUT_CLASSIFICATION	0.9999873061514954	WITHOUT_CLASSIFICATION	1.2693848504517736E-5	TEST
// register a cleanup synch	WITHOUT_CLASSIFICATION	0.9999990737585231	WITHOUT_CLASSIFICATION	9.262414768089647E-7	TEST
// wrap the session in the transaction-protection proxy	WITHOUT_CLASSIFICATION	0.9999999254248825	WITHOUT_CLASSIFICATION	7.457511759924698E-8	TEST
// then bind it	WITHOUT_CLASSIFICATION	0.9999939856502217	WITHOUT_CLASSIFICATION	6.014349778381948E-6	TEST
// try to make sure we don't wrap and already wrapped session	WITHOUT_CLASSIFICATION	0.9999987007513043	WITHOUT_CLASSIFICATION	1.2992486957752979E-6	TEST
// allow these to go through the the real session no matter what	WITHOUT_CLASSIFICATION	0.9999996569465908	WITHOUT_CLASSIFICATION	3.4305340922821145E-7	TEST
// limit the methods available if no transaction is active	WITHOUT_CLASSIFICATION	0.9999998265554573	WITHOUT_CLASSIFICATION	1.734445425893268E-7	TEST
// allow these (deprecated) methods to pass through	WITHOUT_CLASSIFICATION	0.9999991760999949	WITHOUT_CLASSIFICATION	8.239000050720942E-7	TEST
// serialization ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999994115734522	WITHOUT_CLASSIFICATION	5.884265477574293E-7	TEST
// We could register the session against the transaction even though it is // not started, but we'd have no guarentee of ever getting the map // entries cleaned up (aside from spawning threads).	WITHOUT_CLASSIFICATION	0.9999999831097638	WITHOUT_CLASSIFICATION	1.689023616485723E-8	TEST
//cannot be instantiated	WITHOUT_CLASSIFICATION	0.9999939641665165	WITHOUT_CLASSIFICATION	6.035833483481428E-6	TEST
//private String propertyName;	WITHOUT_CLASSIFICATION	0.9999954280293784	WITHOUT_CLASSIFICATION	4.57197062166079E-6	TEST
/*public PropertyProjection project() {	WITHOUT_CLASSIFICATION	0.9999976476720316	WITHOUT_CLASSIFICATION	2.352327968308402E-6	TEST
//String[] fk = StringHelper.qualify( "collection_", cp.getKeyColumnNames() );	WITHOUT_CLASSIFICATION	0.9999996393943231	WITHOUT_CLASSIFICATION	3.6060567680167035E-7	TEST
//" collection_ where " +	WITHOUT_CLASSIFICATION	0.99999817038809	WITHOUT_CLASSIFICATION	1.8296119101040824E-6	TEST
//unsupported	WITHOUT_CLASSIFICATION	0.9999573137446668	WITHOUT_CLASSIFICATION	4.2686255333082806E-5	TEST
//unsupported	WITHOUT_CLASSIFICATION	0.9999573137446668	WITHOUT_CLASSIFICATION	4.2686255333082806E-5	TEST
//cannot be instantiated	WITHOUT_CLASSIFICATION	0.9999939641665165	WITHOUT_CLASSIFICATION	6.035833483481428E-6	TEST
//the following two lines were added to ensure that this.params is not null, which //can happen with two-deep nested subqueries	WITHOUT_CLASSIFICATION	0.9999817765397536	WITHOUT_CLASSIFICATION	1.8223460246459303E-5	TEST
//with two-deep subqueries, the same alias would get generated for //both using the old method (criteriaQuery.generateSQLAlias()), so //that is now used as a fallback if the main criteria alias isn't set	WITHOUT_CLASSIFICATION	0.9999995845685737	WITHOUT_CLASSIFICATION	4.1543142628401226E-7	TEST
//implicit polymorphism not supported (would need a union)	WITHOUT_CLASSIFICATION	0.999993063498017	WITHOUT_CLASSIFICATION	6.936501983046472E-6	TEST
//pull off the last ", "	WITHOUT_CLASSIFICATION	0.9999854733498811	WITHOUT_CLASSIFICATION	1.4526650118883965E-5	TEST
//$NON-NLS-1	WITHOUT_CLASSIFICATION	0.9999837526505527	WITHOUT_CLASSIFICATION	1.6247349447348884E-5	TEST
// we have the form: trim(trimSource) //      so we trim leading and trailing spaces	WITHOUT_CLASSIFICATION	0.9999985845702738	WITHOUT_CLASSIFICATION	1.415429726231282E-6	TEST
// we have the form: trim(from trimSource). //      This is functionally equivalent to trim(trimSource)	WITHOUT_CLASSIFICATION	0.9999978550329466	WITHOUT_CLASSIFICATION	2.1449670534595302E-6	TEST
// NOT_SUPPORTED_SHOULD_USE_JDBC3_PreparedStatement.getGeneratedKeys_method	WITHOUT_CLASSIFICATION	0.9999977514185668	WITHOUT_CLASSIFICATION	2.2485814331577847E-6	TEST
// potentialTrimCharacterArgIndex = 1 assumes that a // trim-specification has been specified.  we handle the // exception to that explicitly	WITHOUT_CLASSIFICATION	0.9999997465027068	WITHOUT_CLASSIFICATION	2.534972931692559E-7	TEST
// Overridden informational metadata ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999998166235341	WITHOUT_CLASSIFICATION	1.8337646600056628E-7	TEST
// Oracle did add support for ANSI CASE statements in 9i	WITHOUT_CLASSIFICATION	0.9999986862424569	WITHOUT_CLASSIFICATION	1.3137575430553734E-6	TEST
// the standard SQL function name is current_timestamp...	WITHOUT_CLASSIFICATION	0.9999990074680866	WITHOUT_CLASSIFICATION	9.925319135430935E-7	TEST
// Informix doesn't have a bit type	WITHOUT_CLASSIFICATION	0.9999962768097189	WITHOUT_CLASSIFICATION	3.7231902811613005E-6	TEST
// or BYTE // or TEXT? // or MONEY	WITHOUT_CLASSIFICATION	0.9999476777185724	WITHOUT_CLASSIFICATION	5.232228142759386E-5	TEST
// strip table-owner because Informix always returns constraint names as "<table-owner>.<constraint-name>"	WITHOUT_CLASSIFICATION	0.9999999835298568	WITHOUT_CLASSIFICATION	1.6470143304970825E-8	TEST
// build the map of standard ANSI SQL aggregation functions ~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999998133403465	WITHOUT_CLASSIFICATION	1.86659653473707E-7	TEST
//pre H3.2 behavior: super.getReturnType(ct, m);	WITHOUT_CLASSIFICATION	0.9999989583904061	WITHOUT_CLASSIFICATION	1.0416095939204327E-6	TEST
// finally use the sqltype if == on Hibernate types did not find a match.	WITHOUT_CLASSIFICATION	0.9999997211071522	WITHOUT_CLASSIFICATION	2.7889284776825685E-7	TEST
//because numeric can be anything	WITHOUT_CLASSIFICATION	0.9999976563205057	WITHOUT_CLASSIFICATION	2.3436794942351622E-6	TEST
// constructors and factory methods ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999996682780893	WITHOUT_CLASSIFICATION	3.317219107215772E-7	TEST
// standard sql92 functions (can be overridden by subclasses)	WITHOUT_CLASSIFICATION	0.9999998054839396	WITHOUT_CLASSIFICATION	1.9451606035423087E-7	TEST
//map second/minute/hour/day/month/year to ANSI extract(), override on subclasses	WITHOUT_CLASSIFICATION	0.9999995329313075	WITHOUT_CLASSIFICATION	4.670686924834839E-7	TEST
// register hibernate types for default use in scalar sqlquery type auto detection	WITHOUT_CLASSIFICATION	0.9999998772472896	WITHOUT_CLASSIFICATION	1.2275271053578928E-7	TEST
// database type mapping support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999986649395814	WITHOUT_CLASSIFICATION	1.335060418573671E-6	TEST
// hibernate type mapping support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.999990783476045	WITHOUT_CLASSIFICATION	9.216523955027205E-6	TEST
// keyword support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999883174002757	WITHOUT_CLASSIFICATION	1.1682599724369132E-5	TEST
// native identifier generatiion ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999994676680783	WITHOUT_CLASSIFICATION	5.32331921744791E-7	TEST
// IDENTITY support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999598092681184	WITHOUT_CLASSIFICATION	4.019073188144133E-5	TEST
// SEQUENCE support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999901087791278	WITHOUT_CLASSIFICATION	9.891220872283939E-6	TEST
// GUID support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.999982743938272	WITHOUT_CLASSIFICATION	1.7256061728023824E-5	TEST
// limit/offset support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999944309143457	WITHOUT_CLASSIFICATION	5.5690856542476415E-6	TEST
// by default we report no support	WITHOUT_CLASSIFICATION	0.9999994943689704	WITHOUT_CLASSIFICATION	5.056310296100508E-7	TEST
// by default we report no support for NOWAIT lock semantics	WITHOUT_CLASSIFICATION	0.9999992106289698	WITHOUT_CLASSIFICATION	7.893710302427094E-7	TEST
// table support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999964439094909	WITHOUT_CLASSIFICATION	3.5560905089509016E-6	TEST
// temporary table support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999968358235604	WITHOUT_CLASSIFICATION	3.164176439621825E-6	TEST
// callable statement support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999989076982269	WITHOUT_CLASSIFICATION	1.0923017731894354E-6	TEST
// current timestamp support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999905470994506	WITHOUT_CLASSIFICATION	9.452900549384764E-6	TEST
// SQLException support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999996571618293	WITHOUT_CLASSIFICATION	3.4283817077166575E-7	TEST
// miscellaneous support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999980230026494	WITHOUT_CLASSIFICATION	1.9769973505457804E-6	TEST
// identifier quoting support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999948350032914	WITHOUT_CLASSIFICATION	5.164996708558377E-6	TEST
// DDL support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999856982837593	WITHOUT_CLASSIFICATION	1.430171624084091E-5	TEST
// grrr... for differentiation of mysql storage engines	WITHOUT_CLASSIFICATION	0.9999998261968204	WITHOUT_CLASSIFICATION	1.7380317949143165E-7	TEST
// Informational metadata ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999992782094427	WITHOUT_CLASSIFICATION	7.217905574064301E-7	TEST
// return false here, as most databases do not properly support this construct...	WITHOUT_CLASSIFICATION	0.9999996259450575	WITHOUT_CLASSIFICATION	3.7405494251878806E-7	TEST
// Mckoi has no known variation of a "SELECT ... FOR UPDATE" syntax...	WITHOUT_CLASSIFICATION	0.999999991494515	WITHOUT_CLASSIFICATION	8.505485045957691E-9	TEST
// Oracle8 and previous define only a "DATE" type which //      is used to represent all aspects of date/time	WITHOUT_CLASSIFICATION	0.9999999722921714	WITHOUT_CLASSIFICATION	2.7707828548778257E-8	TEST
//starts with 1, implicitly	WITHOUT_CLASSIFICATION	0.9998443206110962	WITHOUT_CLASSIFICATION	1.5567938890375294E-4	TEST
//" cascade";	WITHOUT_CLASSIFICATION	0.9999966725038583	WITHOUT_CLASSIFICATION	3.327496141709944E-6	TEST
//trim off the length/precision/scale	WITHOUT_CLASSIFICATION	0.9999986516070838	WITHOUT_CLASSIFICATION	1.348392916255359E-6	TEST
/*public boolean dropTemporaryTableAfterUse() {	WITHOUT_CLASSIFICATION	0.9999860843325954	WITHOUT_CLASSIFICATION	1.3915667404617584E-5	TEST
// CHECK VIOLATION	WITHOUT_CLASSIFICATION	0.999995950678676	WITHOUT_CLASSIFICATION	4.0493213239737905E-6	TEST
// UNIQUE VIOLATION	WITHOUT_CLASSIFICATION	0.9999911564874829	WITHOUT_CLASSIFICATION	8.843512517013399E-6	TEST
// FOREIGN KEY VIOLATION	WITHOUT_CLASSIFICATION	0.9999830883112429	WITHOUT_CLASSIFICATION	1.6911688757067304E-5	TEST
// Overridden informational metadata ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999998166235341	WITHOUT_CLASSIFICATION	1.8337646600056628E-7	TEST
// NOT NULL VIOLATION	WITHOUT_CLASSIFICATION	0.9999248424368141	WITHOUT_CLASSIFICATION	7.515756318593064E-5	TEST
// ALL OTHER	WITHOUT_CLASSIFICATION	0.9999937014826137	WITHOUT_CLASSIFICATION	6.298517386309577E-6	TEST
// Register the type of the out param - PostgreSQL uses Types.OTHER	WITHOUT_CLASSIFICATION	0.9999987497784598	WITHOUT_CLASSIFICATION	1.250221540216081E-6	TEST
// seems to not really... //	WITHOUT_CLASSIFICATION	0.9999994655849346	WITHOUT_CLASSIFICATION	5.344150655367397E-7	TEST
// seems to have spotty LOB suppport	WITHOUT_CLASSIFICATION	0.9999945315881584	WITHOUT_CLASSIFICATION	5.46841184150318E-6	TEST
// HHH-2300	WITHOUT_CLASSIFICATION	0.9999956188620165	WITHOUT_CLASSIFICATION	4.381137983591292E-6	TEST
// ignore (probably H2 not in the classpath)	WITHOUT_CLASSIFICATION	0.9999999419765786	WITHOUT_CLASSIFICATION	5.802342137472596E-8	TEST
// Numeric Functions ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999990873147379	WITHOUT_CLASSIFICATION	9.126852622886369E-7	TEST
// String Functions ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999995267986892	WITHOUT_CLASSIFICATION	4.7320131086669075E-7	TEST
// Time and Date Functions ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.999996882498317	WITHOUT_CLASSIFICATION	3.1175016831164332E-6	TEST
// System Functions ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999987207527078	WITHOUT_CLASSIFICATION	1.2792472921679027E-6	TEST
// not null is implicit	WITHOUT_CLASSIFICATION	0.9999820015276055	WITHOUT_CLASSIFICATION	1.7998472394532047E-5	TEST
// 23000: Check constraint violation: {0} // 23001: Unique index or primary key violation: {0}	WITHOUT_CLASSIFICATION	0.999999993443008	WITHOUT_CLASSIFICATION	6.556991988853686E-9	TEST
// Display the dialect version.	WITHOUT_CLASSIFICATION	0.9999994791932942	WITHOUT_CLASSIFICATION	5.208067058053392E-7	TEST
// The RDMS concat() function only supports 2 parameters	WITHOUT_CLASSIFICATION	0.9999994223308928	WITHOUT_CLASSIFICATION	5.776691072797433E-7	TEST
// Dialect method overrides ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999960148275263	WITHOUT_CLASSIFICATION	3.98517247372432E-6	TEST
// Original Dialect.java returns " for update";	WITHOUT_CLASSIFICATION	0.9999995843439358	WITHOUT_CLASSIFICATION	4.156560642500032E-7	TEST
// Verify the state of this new method in Hibernate 3.0 Dialect.java	WITHOUT_CLASSIFICATION	0.9999998493667112	WITHOUT_CLASSIFICATION	1.506332887773739E-7	TEST
// Origial Dialect.java returns true;	WITHOUT_CLASSIFICATION	0.9999995950600361	WITHOUT_CLASSIFICATION	4.049399638741515E-7	TEST
// The keyword used to specify a nullable column.	WITHOUT_CLASSIFICATION	0.999999852118556	WITHOUT_CLASSIFICATION	1.4788144386570996E-7	TEST
// *** Sequence methods - start. The RDMS dialect needs these	WITHOUT_CLASSIFICATION	0.9999950451911402	WITHOUT_CLASSIFICATION	4.954808859797325E-6	TEST
// methods to make it possible to use the Native Id generator	WITHOUT_CLASSIFICATION	0.9999912571496133	WITHOUT_CLASSIFICATION	8.74285038663563E-6	TEST
// The where clause was added to eliminate this statement from Brute Force Searches.	WITHOUT_CLASSIFICATION	0.9999995376388624	WITHOUT_CLASSIFICATION	4.6236113762724533E-7	TEST
// *** Sequence methods - end	WITHOUT_CLASSIFICATION	0.9999991206182564	WITHOUT_CLASSIFICATION	8.793817436989227E-7	TEST
// Overridden informational metadata ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999998166235341	WITHOUT_CLASSIFICATION	1.8337646600056628E-7	TEST
//starts with 1, implicitly	WITHOUT_CLASSIFICATION	0.9998443206110962	WITHOUT_CLASSIFICATION	1.5567938890375294E-4	TEST
// We must return a valid RDMS/RSA command from this method to // prevent RDMS/RSA from issuing *ERROR 400	WITHOUT_CLASSIFICATION	0.9999992883211735	WITHOUT_CLASSIFICATION	7.116788265545419E-7	TEST
// Used with DROP TABLE to delete all records in the table.	WITHOUT_CLASSIFICATION	0.9999995681841841	WITHOUT_CLASSIFICATION	4.31815815971788E-7	TEST
// RDMS supports the UNION ALL clause.	WITHOUT_CLASSIFICATION	0.9999979600178748	WITHOUT_CLASSIFICATION	2.0399821253014876E-6	TEST
// RDMS has no known variation of a "SELECT ... FOR UPDATE" syntax...	WITHOUT_CLASSIFICATION	0.9999999476541458	WITHOUT_CLASSIFICATION	5.2345854145814E-8	TEST
// Multi-param dialect functions...	WITHOUT_CLASSIFICATION	0.9999998020369535	WITHOUT_CLASSIFICATION	1.9796304654989548E-7	TEST
// function templates	WITHOUT_CLASSIFICATION	0.9999983566530192	WITHOUT_CLASSIFICATION	1.6433469808570868E-6	TEST
//not null is implicit	WITHOUT_CLASSIFICATION	0.9998775011893245	WITHOUT_CLASSIFICATION	1.2249881067540345E-4	TEST
// this assumes schema support, which is present in 1.8.0 and later...	WITHOUT_CLASSIFICATION	0.9999980950316448	WITHOUT_CLASSIFICATION	1.9049683551971919E-6	TEST
// HSQLDB only supports READ_UNCOMMITTED transaction isolation	WITHOUT_CLASSIFICATION	0.9999999219117546	WITHOUT_CLASSIFICATION	7.808824546465974E-8	TEST
// Multi-param string dialect functions...	WITHOUT_CLASSIFICATION	0.9999998823719514	WITHOUT_CLASSIFICATION	1.1762804867155162E-7	TEST
// Multi-param numeric dialect functions...	WITHOUT_CLASSIFICATION	0.9999999178719651	WITHOUT_CLASSIFICATION	8.212803487285473E-8	TEST
// Multi-param date dialect functions...	WITHOUT_CLASSIFICATION	0.9999997986338692	WITHOUT_CLASSIFICATION	2.0136613067873954E-7	TEST
// simple nullability constraint	WITHOUT_CLASSIFICATION	0.9999998595147943	WITHOUT_CLASSIFICATION	1.4048520575298702E-7	TEST
// Overridden informational metadata ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999998166235341	WITHOUT_CLASSIFICATION	1.8337646600056628E-7	TEST
// Overridden informational metadata ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999998166235341	WITHOUT_CLASSIFICATION	1.8337646600056628E-7	TEST
// not final-static to avoid possible classcast exceptions if using different oracle drivers.	WITHOUT_CLASSIFICATION	0.9999999882034701	WITHOUT_CLASSIFICATION	1.1796529832870954E-8	TEST
//	WITHOUT_CLASSIFICATION	0.9999527008540617	WITHOUT_CLASSIFICATION	4.729914593835468E-5	TEST
// TimesTen has no BLOB/CLOB support, but these types may be suitable  // for some applications. The length is limited to 4 million bytes.	WITHOUT_CLASSIFICATION	0.9999984288231407	WITHOUT_CLASSIFICATION	1.5711768592594647E-6	TEST
// new methods in dialect3	WITHOUT_CLASSIFICATION	0.9999996830505301	WITHOUT_CLASSIFICATION	3.169494698834191E-7	TEST
/*public boolean supportsForUpdateNowait() {	WITHOUT_CLASSIFICATION	0.9999649246183813	WITHOUT_CLASSIFICATION	3.507538161885801E-5	TEST
// TimesTen has no known variation of a "SELECT ... FOR UPDATE" syntax...	WITHOUT_CLASSIFICATION	0.9999999656823614	WITHOUT_CLASSIFICATION	3.43176386220367E-8	TEST
// iterate entries ordered by capacity to find first fit	WITHOUT_CLASSIFICATION	0.9999980834313137	WITHOUT_CLASSIFICATION	1.9165686863649472E-6	TEST
// add new ordered map	WITHOUT_CLASSIFICATION	0.9999990731654269	WITHOUT_CLASSIFICATION	9.268345730984446E-7	TEST
//	WITHOUT_CLASSIFICATION	0.9999527008540617	WITHOUT_CLASSIFICATION	4.729914593835468E-5	TEST
// Overridden informational metadata ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999998166235341	WITHOUT_CLASSIFICATION	1.8337646600056628E-7	TEST
//	WITHOUT_CLASSIFICATION	0.9999527008540617	WITHOUT_CLASSIFICATION	4.729914593835468E-5	TEST
// sql server just returns automatically	WITHOUT_CLASSIFICATION	0.9999993456293323	WITHOUT_CLASSIFICATION	6.543706677762529E-7	TEST
//	WITHOUT_CLASSIFICATION	0.9999527008540617	WITHOUT_CLASSIFICATION	4.729914593835468E-5	TEST
//registerColumnType data types	WITHOUT_CLASSIFICATION	0.9999944923497623	WITHOUT_CLASSIFICATION	5.507650237629559E-6	TEST
// hibernate seems to ignore this type...	WITHOUT_CLASSIFICATION	0.9999985102603031	WITHOUT_CLASSIFICATION	1.489739697020277E-6	TEST
// IBID for current_time and current_date	WITHOUT_CLASSIFICATION	0.9999952241618473	WITHOUT_CLASSIFICATION	4.77583815270307E-6	TEST
// Tell hibernate to use getBytes instead of getBinaryStream	WITHOUT_CLASSIFICATION	0.9999965331118774	WITHOUT_CLASSIFICATION	3.4668881226175456E-6	TEST
// No batch statements	WITHOUT_CLASSIFICATION	0.999998451108264	WITHOUT_CLASSIFICATION	1.548891736059982E-6	TEST
/*	WITHOUT_CLASSIFICATION	0.9998653805382814	WITHOUT_CLASSIFICATION	1.3461946171863497E-4	TEST
//no pointbase BIT	WITHOUT_CLASSIFICATION	0.9999980408988847	WITHOUT_CLASSIFICATION	1.959101115443059E-6	TEST
//no pointbase TINYINT	WITHOUT_CLASSIFICATION	0.9999951160996092	WITHOUT_CLASSIFICATION	4.883900390766657E-6	TEST
// Pointbase has no known variation of a "SELECT ... FOR UPDATE" syntax...	WITHOUT_CLASSIFICATION	0.999999994316664	WITHOUT_CLASSIFICATION	5.683336054661968E-9	TEST
//starts with 1, implicitly	WITHOUT_CLASSIFICATION	0.9998443206110962	WITHOUT_CLASSIFICATION	1.5567938890375294E-4	TEST
// The current_timestamp is more accurate, but only known to be supported // in SQL Server 7.0 and later (i.e., Sybase not known to support it at all)	WITHOUT_CLASSIFICATION	0.9999993990720297	WITHOUT_CLASSIFICATION	6.009279702760368E-7	TEST
// SQL Server (at least up through 2005) does not support defining // cascade delete constraints which can circel back to the mutating // table	WITHOUT_CLASSIFICATION	0.9999999869144135	WITHOUT_CLASSIFICATION	1.3085586412535194E-8	TEST
// here assume SQLServer2005 using snapshot isolation, which does not have this problem	WITHOUT_CLASSIFICATION	0.9999992341558182	WITHOUT_CLASSIFICATION	7.658441817805684E-7	TEST
//	WITHOUT_CLASSIFICATION	0.9999527008540617	WITHOUT_CLASSIFICATION	4.729914593835468E-5	TEST
//	WITHOUT_CLASSIFICATION	0.9999527008540617	WITHOUT_CLASSIFICATION	4.729914593835468E-5	TEST
//	WITHOUT_CLASSIFICATION	0.9999527008540617	WITHOUT_CLASSIFICATION	4.729914593835468E-5	TEST
//starts with 1, implicitly	WITHOUT_CLASSIFICATION	0.9998443206110962	WITHOUT_CLASSIFICATION	1.5567938890375294E-4	TEST
/* package-private */	WITHOUT_CLASSIFICATION	0.9999991510838024	WITHOUT_CLASSIFICATION	8.48916197660669E-7	TEST
// sql server just returns automatically	WITHOUT_CLASSIFICATION	0.9999993456293323	WITHOUT_CLASSIFICATION	6.543706677762529E-7	TEST
//Sybase BIT type does not support null values	WITHOUT_CLASSIFICATION	0.9999976050606322	WITHOUT_CLASSIFICATION	2.3949393679154286E-6	TEST
//	WITHOUT_CLASSIFICATION	0.9999527008540617	WITHOUT_CLASSIFICATION	4.729914593835468E-5	TEST
// Overridden informational metadata ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999998166235341	WITHOUT_CLASSIFICATION	1.8337646600056628E-7	TEST
//	WITHOUT_CLASSIFICATION	0.9999527008540617	WITHOUT_CLASSIFICATION	4.729914593835468E-5	TEST
//not null ... (start with 1) is implicit	WITHOUT_CLASSIFICATION	0.9995719552758053	WITHOUT_CLASSIFICATION	4.280447241947224E-4	TEST
// Overridden informational metadata ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999998166235341	WITHOUT_CLASSIFICATION	1.8337646600056628E-7	TEST
// Oracle driver reports to support getGeneratedKeys(), but they only // support the version taking an array of the names of the columns to // be returned (via its RETURNING clause).  No other driver seems to // support this overloaded version.	WITHOUT_CLASSIFICATION	0.9999999764441442	WITHOUT_CLASSIFICATION	2.3555855856435413E-8	TEST
// Multi-param string dialect functions...	WITHOUT_CLASSIFICATION	0.9999998823719514	WITHOUT_CLASSIFICATION	1.1762804867155162E-7	TEST
// Multi-param numeric dialect functions...	WITHOUT_CLASSIFICATION	0.9999999178719651	WITHOUT_CLASSIFICATION	8.212803487285473E-8	TEST
// Multi-param date dialect functions...	WITHOUT_CLASSIFICATION	0.9999997986338692	WITHOUT_CLASSIFICATION	2.0136613067873954E-7	TEST
// add another (inner) nested select // add the main query // close off the inner nested select	WITHOUT_CLASSIFICATION	0.9999965546090144	WITHOUT_CLASSIFICATION	3.4453909856261304E-6	TEST
// add the main query	WITHOUT_CLASSIFICATION	0.9999968325888046	WITHOUT_CLASSIFICATION	3.1674111954213553E-6	TEST
//add the restriction to the outer select	WITHOUT_CLASSIFICATION	0.9999928189058241	WITHOUT_CLASSIFICATION	7.181094175875877E-6	TEST
// This assumes you will want to ignore any update counts 	WITHOUT_CLASSIFICATION	0.9999951686470291	WITHOUT_CLASSIFICATION	4.831352970890223E-6	TEST
// You may still have other ResultSets or update counts left to process here  // but you can't do it now or the ResultSet you just got will be closed 	WITHOUT_CLASSIFICATION	0.9999992962472086	WITHOUT_CLASSIFICATION	7.037527913646503E-7	TEST
// Overridden informational metadata ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999998166235341	WITHOUT_CLASSIFICATION	1.8337646600056628E-7	TEST
//starts with 1, implicitly	WITHOUT_CLASSIFICATION	0.9998443206110962	WITHOUT_CLASSIFICATION	1.5567938890375294E-4	TEST
// simple nullability constraint	WITHOUT_CLASSIFICATION	0.9999998595147943	WITHOUT_CLASSIFICATION	1.4048520575298702E-7	TEST
// not final-static to avoid possible classcast exceptions if using different oracle drivers.	WITHOUT_CLASSIFICATION	0.9999999882034701	WITHOUT_CLASSIFICATION	1.1796529832870954E-8	TEST
//	WITHOUT_CLASSIFICATION	0.9999527008540617	WITHOUT_CLASSIFICATION	4.729914593835468E-5	TEST
// features which change between 8i, 9i, and 10g ~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999979670589432	WITHOUT_CLASSIFICATION	2.0329410567415277E-6	TEST
// features which remain constant across 8i, 9i, and 10g ~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999998475331312	WITHOUT_CLASSIFICATION	1.52466868703466E-7	TEST
// binary %Stream // character %Stream	WITHOUT_CLASSIFICATION	0.9999987162175797	WITHOUT_CLASSIFICATION	1.2837824202641284E-6	TEST
//getDefaultProperties().setProperty(Environment.STATEMENT_BATCH_SIZE, NO_BATCH);	WITHOUT_CLASSIFICATION	0.9999966288694766	WITHOUT_CLASSIFICATION	3.3711305234908074E-6	TEST
// hibernate impelemnts cast in Dialect.java	WITHOUT_CLASSIFICATION	0.9999958344968568	WITHOUT_CLASSIFICATION	4.1655031431993935E-6	TEST
// aggregate functions shouldn't be registered, right? //registerFunction( "list", new StandardSQLFunction("list",Hibernate.STRING) ); // stopped on $list	WITHOUT_CLASSIFICATION	0.9999999801955678	WITHOUT_CLASSIFICATION	1.9804432237623756E-8	TEST
// DDL support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999856982837593	WITHOUT_CLASSIFICATION	1.430171624084091E-5	TEST
// below is for Cache' that don't have str in 2007.1 there is str and we register str directly	WITHOUT_CLASSIFICATION	0.9999974364284038	WITHOUT_CLASSIFICATION	2.563571596141163E-6	TEST
// note that %string is deprecated	WITHOUT_CLASSIFICATION	0.9999980421762126	WITHOUT_CLASSIFICATION	1.9578237873901363E-6	TEST
// %upper is deprecated	WITHOUT_CLASSIFICATION	0.9999969000050334	WITHOUT_CLASSIFICATION	3.0999949665513665E-6	TEST
// The syntax used to add a foreign key constraint to a table.	WITHOUT_CLASSIFICATION	0.999999823327742	WITHOUT_CLASSIFICATION	1.7667225809715753E-7	TEST
// identifier-commalist	WITHOUT_CLASSIFICATION	0.9999995693778602	WITHOUT_CLASSIFICATION	4.306221398043367E-7	TEST
// IDENTITY support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999598092681184	WITHOUT_CLASSIFICATION	4.019073188144133E-5	TEST
// SEQUENCE support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999901087791278	WITHOUT_CLASSIFICATION	9.891220872283939E-6	TEST
// temporary table support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999968358235604	WITHOUT_CLASSIFICATION	3.164176439621825E-6	TEST
// identifier-commalist	WITHOUT_CLASSIFICATION	0.9999995693778602	WITHOUT_CLASSIFICATION	4.306221398043367E-7	TEST
// The syntax used to add a column to a table	WITHOUT_CLASSIFICATION	0.9999997236993291	WITHOUT_CLASSIFICATION	2.763006708906926E-7	TEST
// Completely optional cascading drop clause.	WITHOUT_CLASSIFICATION	0.9999998341527185	WITHOUT_CLASSIFICATION	1.6584728139044198E-7	TEST
// lock acquisition support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999992640518467	WITHOUT_CLASSIFICATION	7.359481532979998E-7	TEST
// LIMIT support (ala TOP) ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999865165205112	WITHOUT_CLASSIFICATION	1.3483479488748453E-5	TEST
// InterSystems Cache' does not current support "SELECT ... FOR UPDATE" syntax... // Set your transaction mode to READ_COMMITTED before using	WITHOUT_CLASSIFICATION	0.9999999499160714	WITHOUT_CLASSIFICATION	5.0083928669346945E-8	TEST
// Overridden informational metadata ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999998166235341	WITHOUT_CLASSIFICATION	1.8337646600056628E-7	TEST
// Overridden informational metadata ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999998166235341	WITHOUT_CLASSIFICATION	1.8337646600056628E-7	TEST
/*<String>*/	WITHOUT_CLASSIFICATION	0.9999810741636317	WITHOUT_CLASSIFICATION	1.8925836368312104E-5	TEST
// callable statement support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999989076982269	WITHOUT_CLASSIFICATION	1.0923017731894354E-6	TEST
// miscellaneous support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999980230026494	WITHOUT_CLASSIFICATION	1.9769973505457804E-6	TEST
// The keyword used to specify a nullable column.	WITHOUT_CLASSIFICATION	0.999999852118556	WITHOUT_CLASSIFICATION	1.4788144386570996E-7	TEST
// Does the LIMIT clause come at the start of the SELECT statement, rather than at the end?	WITHOUT_CLASSIFICATION	0.9999995511958975	WITHOUT_CLASSIFICATION	4.4880410246708716E-7	TEST
// Does the LIMIT clause take a "maximum" row number instead of a total number of returned rows?	WITHOUT_CLASSIFICATION	0.9999991464925374	WITHOUT_CLASSIFICATION	8.535074625355597E-7	TEST
// The name of the SQL function that transforms a string to lowercase	WITHOUT_CLASSIFICATION	0.999999946289608	WITHOUT_CLASSIFICATION	5.371039208450982E-8	TEST
// Create an OuterJoinGenerator for this dialect.	WITHOUT_CLASSIFICATION	0.999991625186215	WITHOUT_CLASSIFICATION	8.37481378501602E-6	TEST
// The keyword used to insert a row without specifying // any column values	WITHOUT_CLASSIFICATION	0.9999983973988198	WITHOUT_CLASSIFICATION	1.6026011801958926E-6	TEST
//registerFunction( "trim", new StandardSQLFunction( "trim", Hibernate.STRING ) );	WITHOUT_CLASSIFICATION	0.9999997762075252	WITHOUT_CLASSIFICATION	2.2379247482710014E-7	TEST
//skip the FROM keyword in params	WITHOUT_CLASSIFICATION	0.9999798750378476	WITHOUT_CLASSIFICATION	2.012496215247856E-5	TEST
/*package*/	WITHOUT_CLASSIFICATION	0.9999826414449617	WITHOUT_CLASSIFICATION	1.7358555038213658E-5	TEST
// potentialTrimCharacterArgIndex = 1 assumes that a // trim-specification has been specified.  we handle the // exception to that explicitly	WITHOUT_CLASSIFICATION	0.9999997465027068	WITHOUT_CLASSIFICATION	2.534972931692559E-7	TEST
// SQLFunction implementation	WITHOUT_CLASSIFICATION	0.9999994406855675	WITHOUT_CLASSIFICATION	5.593144324875014E-7	TEST
// conceivable that the dialect ctor could throw HibernateExceptions, so don't re-wrap	WITHOUT_CLASSIFICATION	0.9999999822920209	WITHOUT_CLASSIFICATION	1.7707979067714648E-8	TEST
// register the standard dialect resolver	WITHOUT_CLASSIFICATION	0.9999963596655688	WITHOUT_CLASSIFICATION	3.6403344312387843E-6	TEST
// register resolvers set via Environment property	WITHOUT_CLASSIFICATION	0.9999980840037191	WITHOUT_CLASSIFICATION	1.9159962807986746E-6	TEST
// kept for backward compatibility until after the 3.1beta5 release of HA	WITHOUT_CLASSIFICATION	0.9999972789163579	WITHOUT_CLASSIFICATION	2.721083642030922E-6	TEST
//cache the hashcode	WITHOUT_CLASSIFICATION	0.9999952420006823	WITHOUT_CLASSIFICATION	4.757999317631835E-6	TEST
// the CascadingAction contract ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999998493657173	WITHOUT_CLASSIFICATION	1.5063428264286692E-7	TEST
// the CascadingAction implementations ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999988648909183	WITHOUT_CLASSIFICATION	1.1351090818336165E-6	TEST
// delete does cascade to uninitialized collections	WITHOUT_CLASSIFICATION	0.9999992576016342	WITHOUT_CLASSIFICATION	7.423983658841377E-7	TEST
// orphans should be deleted during delete	WITHOUT_CLASSIFICATION	0.9999988963271191	WITHOUT_CLASSIFICATION	1.1036728809219988E-6	TEST
/*(LockMode) anything*/	WITHOUT_CLASSIFICATION	0.9999921902068357	WITHOUT_CLASSIFICATION	7.809793164305288E-6	TEST
// lock doesn't cascade to uninitialized collections	WITHOUT_CLASSIFICATION	0.999999299887424	WITHOUT_CLASSIFICATION	7.001125760679661E-7	TEST
// refresh doesn't cascade to uninitialized collections	WITHOUT_CLASSIFICATION	0.9999994721744906	WITHOUT_CLASSIFICATION	5.278255093388953E-7	TEST
// evicts don't cascade to uninitialized collections	WITHOUT_CLASSIFICATION	0.9999993639232849	WITHOUT_CLASSIFICATION	6.360767151610811E-7	TEST
// saves / updates don't cascade to uninitialized collections	WITHOUT_CLASSIFICATION	0.9999980877905666	WITHOUT_CLASSIFICATION	1.912209433415299E-6	TEST
// orphans should be deleted during save/update	WITHOUT_CLASSIFICATION	0.9999988895309929	WITHOUT_CLASSIFICATION	1.1104690070863185E-6	TEST
// for deprecated saveOrUpdateCopy()	WITHOUT_CLASSIFICATION	0.9999990330067351	WITHOUT_CLASSIFICATION	9.66993264849236E-7	TEST
// persists don't cascade to uninitialized collections	WITHOUT_CLASSIFICATION	0.999999117877714	WITHOUT_CLASSIFICATION	8.82122286043448E-7	TEST
//a proxy cannot be transient and it breaks ForeignKeys.isTransient	WITHOUT_CLASSIFICATION	0.9999983397290944	WITHOUT_CLASSIFICATION	1.6602709056312657E-6	TEST
// replicate does cascade to uninitialized collections	WITHOUT_CLASSIFICATION	0.9999994592526448	WITHOUT_CLASSIFICATION	5.407473551930602E-7	TEST
// static helper methods ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999977234759498	WITHOUT_CLASSIFICATION	2.276524050193204E-6	TEST
// handles arrays and newly instantiated collections	WITHOUT_CLASSIFICATION	0.9999997586204445	WITHOUT_CLASSIFICATION	2.413795554307303E-7	TEST
// Actually the semantics of the next three are really "Bag" // Note that, unlike objects, collection insertions, updates, // deletions are not really remembered between flushes. We // just re-use the same Lists for convenience.	WITHOUT_CLASSIFICATION	0.999999680805053	WITHOUT_CLASSIFICATION	3.191949470793169E-7	TEST
// Add these directly to the executions queue	WITHOUT_CLASSIFICATION	0.9999998831290654	WITHOUT_CLASSIFICATION	1.1687093468762804E-7	TEST
// continue loop	WITHOUT_CLASSIFICATION	0.9999998946340632	WITHOUT_CLASSIFICATION	1.0536593678425049E-7	TEST
//sort the updates by fk	WITHOUT_CLASSIFICATION	0.9996906346027224	WITHOUT_CLASSIFICATION	3.093653972775784E-4	TEST
//sort the updates by pk	WITHOUT_CLASSIFICATION	0.9997142419301781	WITHOUT_CLASSIFICATION	2.857580698219368E-4	TEST
// the mapping of entity names to their latest batch numbers.	WITHOUT_CLASSIFICATION	0.9999860324386469	WITHOUT_CLASSIFICATION	1.3967561353143015E-5	TEST
// the map of batch numbers to EntityInsertAction lists	WITHOUT_CLASSIFICATION	0.9999996091719472	WITHOUT_CLASSIFICATION	3.908280528091504E-7	TEST
//optimize the hash size to eliminate a rehash.	WITHOUT_CLASSIFICATION	0.9999911915614843	WITHOUT_CLASSIFICATION	8.808438515732021E-6	TEST
// the list of entity names that indicate the batch number	WITHOUT_CLASSIFICATION	0.9999996339922632	WITHOUT_CLASSIFICATION	3.660077368331495E-7	TEST
// remove the current element from insertions. It will be added back later.	WITHOUT_CLASSIFICATION	0.9999997562774156	WITHOUT_CLASSIFICATION	2.4372258440116583E-7	TEST
// the entity associated with the current action.	WITHOUT_CLASSIFICATION	0.9999982670488948	WITHOUT_CLASSIFICATION	1.7329511052261438E-6	TEST
// There is already an existing batch for this type of entity. // Check to see if the latest batch is acceptable.	WITHOUT_CLASSIFICATION	0.9999632163929348	WITHOUT_CLASSIFICATION	3.678360706524238E-5	TEST
// now rebuild the insertions list. There is a batch for each entry in the name list.	WITHOUT_CLASSIFICATION	0.999999548478038	WITHOUT_CLASSIFICATION	4.515219621577243E-7	TEST
// the current batch number is the latest batch for this entity type.	WITHOUT_CLASSIFICATION	0.9999416450553165	WITHOUT_CLASSIFICATION	5.835494468348527E-5	TEST
// loop through all the associations of the current entity and make sure that they are processed // before the current batch number	WITHOUT_CLASSIFICATION	0.9999997914226452	WITHOUT_CLASSIFICATION	2.0857735476996728E-7	TEST
// find the batch number associated with the current association, if any.	WITHOUT_CLASSIFICATION	0.9999983128491192	WITHOUT_CLASSIFICATION	1.687150880784223E-6	TEST
// create a new batch for this type. The batch number is the number of current batches.	WITHOUT_CLASSIFICATION	0.9999989531727538	WITHOUT_CLASSIFICATION	1.0468272462498728E-6	TEST
// loop through all the associated entities and make sure they have been // processed before the latest // batch associated with this entity type.	WITHOUT_CLASSIFICATION	0.9997530781764793	WITHOUT_CLASSIFICATION	2.469218235207755E-4	TEST
// since this entity will now be processed in the latest possible batch, // we can be assured that it will come after all other associations, // there's not need to continue checking.	WITHOUT_CLASSIFICATION	0.9999983395133488	WITHOUT_CLASSIFICATION	1.6604866511989788E-6	TEST
//cascade to current collection elements	WITHOUT_CLASSIFICATION	0.9999995563275306	WITHOUT_CLASSIFICATION	4.436724694562314E-7	TEST
//not really necessary, but good for consistency...	WITHOUT_CLASSIFICATION	0.9999976876085528	WITHOUT_CLASSIFICATION	2.312391447208759E-6	TEST
// we can't cascade to non-embedded elements	WITHOUT_CLASSIFICATION	0.9999998365728215	WITHOUT_CLASSIFICATION	1.6342717853039558E-7	TEST
//a newly instantiated collection can't have orphans	WITHOUT_CLASSIFICATION	0.999999362550196	WITHOUT_CLASSIFICATION	6.374498041382642E-7	TEST
// handle orphaned entities!!	WITHOUT_CLASSIFICATION	0.9999969453666615	WITHOUT_CLASSIFICATION	3.054633338579227E-6	TEST
// Loaded entity instances, by EntityUniqueKey	WITHOUT_CLASSIFICATION	0.999999619613256	WITHOUT_CLASSIFICATION	3.8038674401368305E-7	TEST
// Identity map of EntityEntry instances, by the entity instance	WITHOUT_CLASSIFICATION	0.999999317085794	WITHOUT_CLASSIFICATION	6.829142060377427E-7	TEST
// Entity proxies, by EntityKey	WITHOUT_CLASSIFICATION	0.9999970848027353	WITHOUT_CLASSIFICATION	2.915197264773087E-6	TEST
// Snapshots of current database state for entities // that have *not* been loaded	WITHOUT_CLASSIFICATION	0.99999963750002	WITHOUT_CLASSIFICATION	3.6249998005668197E-7	TEST
// Identity map of array holder ArrayHolder instances, by the array instance	WITHOUT_CLASSIFICATION	0.9999992009394599	WITHOUT_CLASSIFICATION	7.990605400709117E-7	TEST
// Collection wrappers, by the CollectionKey //key=CollectionKey, value=PersistentCollection	WITHOUT_CLASSIFICATION	0.9999997051685302	WITHOUT_CLASSIFICATION	2.9483146978120603E-7	TEST
// Set of EntityKeys of deleted objects	WITHOUT_CLASSIFICATION	0.9999997445693961	WITHOUT_CLASSIFICATION	2.5543060389340527E-7	TEST
// properties that we have tried to load, and not found in the database	WITHOUT_CLASSIFICATION	0.9999994067863137	WITHOUT_CLASSIFICATION	5.93213686247011E-7	TEST
// A list of collection wrappers that were instantiating during result set // processing, that we will need to initialize at the end of the query	WITHOUT_CLASSIFICATION	0.9999999254036267	WITHOUT_CLASSIFICATION	7.459637330387871E-8	TEST
// A container for collections we load up when the owning entity is not // yet loaded ... for now, this is purely transient!	WITHOUT_CLASSIFICATION	0.9999997988984771	WITHOUT_CLASSIFICATION	2.0110152287249117E-7	TEST
// Downgrade locks	WITHOUT_CLASSIFICATION	0.9999996740602581	WITHOUT_CLASSIFICATION	3.2593974185850853E-7	TEST
// any earlier proxy takes precedence	WITHOUT_CLASSIFICATION	0.9999983959590694	WITHOUT_CLASSIFICATION	1.6040409306579833E-6	TEST
//unwrap the object	WITHOUT_CLASSIFICATION	0.9999975171391698	WITHOUT_CLASSIFICATION	2.482860830218201E-6	TEST
//initialize + unwrap the object	WITHOUT_CLASSIFICATION	0.99998736842579	WITHOUT_CLASSIFICATION	1.2631574209945696E-5	TEST
//return the proxied object	WITHOUT_CLASSIFICATION	0.9999975971438138	WITHOUT_CLASSIFICATION	2.4028561863042525E-6	TEST
//overwrite old proxy	WITHOUT_CLASSIFICATION	0.9999881709787147	WITHOUT_CLASSIFICATION	1.1829021285284709E-5	TEST
// early exit...	WITHOUT_CLASSIFICATION	0.9999989334914253	WITHOUT_CLASSIFICATION	1.0665085747230522E-6	TEST
// or should it actually throw an exception?	WITHOUT_CLASSIFICATION	0.9999991654697401	WITHOUT_CLASSIFICATION	8.345302600216453E-7	TEST
//treat it just like a new collection	WITHOUT_CLASSIFICATION	0.9999996010680262	WITHOUT_CLASSIFICATION	3.9893197381989787E-7	TEST
//do this work only at the very highest level of the load //don't let this method be called recursively	WITHOUT_CLASSIFICATION	0.9999931968234278	WITHOUT_CLASSIFICATION	6.803176572213487E-6	TEST
//note that each iteration of the loop may add new elements	WITHOUT_CLASSIFICATION	0.9999996979914011	WITHOUT_CLASSIFICATION	3.0200859896167556E-7	TEST
//it might be an unwrapped collection reference! //try to find a wrapper (slowish)	WITHOUT_CLASSIFICATION	0.9999989667106773	WITHOUT_CLASSIFICATION	1.0332893226913838E-6	TEST
/*public boolean isNonExistant(EntityKey key) {	WITHOUT_CLASSIFICATION	0.999968544498636	WITHOUT_CLASSIFICATION	3.1455501364027886E-5	TEST
/*public boolean isNonExistant(EntityUniqueKey key) {	WITHOUT_CLASSIFICATION	0.999972262068751	WITHOUT_CLASSIFICATION	2.773793124909915E-5	TEST
// iterate all the entities currently associated with the persistence context.	WITHOUT_CLASSIFICATION	0.9999967953696791	WITHOUT_CLASSIFICATION	3.2046303208450145E-6	TEST
// does this entity entry pertain to the entity persister in which we are interested (owner)?	WITHOUT_CLASSIFICATION	0.9999926144378395	WITHOUT_CLASSIFICATION	7.385562160474679E-6	TEST
//check if the managed object is the parent	WITHOUT_CLASSIFICATION	0.9999901892066351	WITHOUT_CLASSIFICATION	9.81079336497902E-6	TEST
// otherwise, the proxy was pruned during the serialization process	WITHOUT_CLASSIFICATION	0.9999998219141845	WITHOUT_CLASSIFICATION	1.7808581550682284E-7	TEST
// adds remove as a sort-of alias for delete...	WITHOUT_CLASSIFICATION	0.999999443785422	WITHOUT_CLASSIFICATION	5.562145779360518E-7	TEST
//bad cast	WITHOUT_CLASSIFICATION	0.9999903582954068	WITHOUT_CLASSIFICATION	9.641704593267411E-6	TEST
//return lhsPersister.getSubclassPropertyColumnNames(property);	WITHOUT_CLASSIFICATION	0.9999950779101575	WITHOUT_CLASSIFICATION	4.922089842566889E-6	TEST
//property-refs for associations defined on a //component are not supported, so no need to slice	WITHOUT_CLASSIFICATION	0.9999995415257952	WITHOUT_CLASSIFICATION	4.5847420481396436E-7	TEST
//if there is no property-ref, assume the join //is to the subclass table (ie. the table of the //subclass that the association belongs to)	WITHOUT_CLASSIFICATION	0.9999993872651769	WITHOUT_CLASSIFICATION	6.127348230299873E-7	TEST
//handle a property-ref	WITHOUT_CLASSIFICATION	0.999993848441884	WITHOUT_CLASSIFICATION	6.151558115963267E-6	TEST
/*NativeSQLQueryReturn*/	WITHOUT_CLASSIFICATION	0.9999927279695121	WITHOUT_CLASSIFICATION	7.27203048788053E-6	TEST
//final boolean forceCacheRefresh,	WITHOUT_CLASSIFICATION	0.9999851282592251	WITHOUT_CLASSIFICATION	1.4871740774867605E-5	TEST
// why is all others non final ?	WITHOUT_CLASSIFICATION	0.999998662654106	WITHOUT_CLASSIFICATION	1.33734589396827E-6	TEST
//this.forceCacheRefresh = forceCacheRefresh;	WITHOUT_CLASSIFICATION	0.9999920733136335	WITHOUT_CLASSIFICATION	7.92668636656174E-6	TEST
// HELLA IMPORTANT OPTIMIZATION!!!	WITHOUT_CLASSIFICATION	0.9999809733740733	WITHOUT_CLASSIFICATION	1.9026625926601555E-5	TEST
/*return that.type.equals(type) && 	WITHOUT_CLASSIFICATION	0.9999785653932182	WITHOUT_CLASSIFICATION	2.1434606781883997E-5	TEST
//Must occur after resolving identifiers!	WITHOUT_CLASSIFICATION	0.99997483311924	WITHOUT_CLASSIFICATION	2.516688076002649E-5	TEST
//take a snapshot	WITHOUT_CLASSIFICATION	0.9999794937460194	WITHOUT_CLASSIFICATION	2.0506253980587656E-5	TEST
// do a check	WITHOUT_CLASSIFICATION	0.9999995958368203	WITHOUT_CLASSIFICATION	4.041631796666755E-7	TEST
// the owning entity may have been deleted and its identifier unset due to // identifier-rollback; in which case, try to look up its identifier from // the persistence context	WITHOUT_CLASSIFICATION	0.9999995591435947	WITHOUT_CLASSIFICATION	4.408564052805305E-7	TEST
// do the work	WITHOUT_CLASSIFICATION	0.999998306773039	WITHOUT_CLASSIFICATION	1.6932269609618842E-6	TEST
// We've been here before	WITHOUT_CLASSIFICATION	0.9999530214380217	WITHOUT_CLASSIFICATION	4.697856197828398E-5	TEST
// it is or was referenced _somewhere_	WITHOUT_CLASSIFICATION	0.9999945450542309	WITHOUT_CLASSIFICATION	5.454945769071344E-6	TEST
// do the work	WITHOUT_CLASSIFICATION	0.999998306773039	WITHOUT_CLASSIFICATION	1.6932269609618842E-6	TEST
// if either its role changed,	WITHOUT_CLASSIFICATION	0.999998186773571	WITHOUT_CLASSIFICATION	1.8132264290765717E-6	TEST
// or its key changed	WITHOUT_CLASSIFICATION	0.9999958348801573	WITHOUT_CLASSIFICATION	4.16511984272629E-6	TEST
// we will need to create new entries	WITHOUT_CLASSIFICATION	0.9999997293071845	WITHOUT_CLASSIFICATION	2.70692815523001E-7	TEST
// we will need to remove ye olde entries	WITHOUT_CLASSIFICATION	0.9999984804447523	WITHOUT_CLASSIFICATION	1.5195552477520007E-6	TEST
// force initialize!	WITHOUT_CLASSIFICATION	0.9999988393806897	WITHOUT_CLASSIFICATION	1.1606193103324495E-6	TEST
// else if it's elements changed	WITHOUT_CLASSIFICATION	0.9999973133760506	WITHOUT_CLASSIFICATION	2.686623949324388E-6	TEST
//ATTRIBUTES MAINTAINED BETWEEN FLUSH CYCLES	WITHOUT_CLASSIFICATION	0.9999190867796244	WITHOUT_CLASSIFICATION	8.091322037564086E-5	TEST
// session-start/post-flush persistent state	WITHOUT_CLASSIFICATION	0.9999987405673817	WITHOUT_CLASSIFICATION	1.2594326182621602E-6	TEST
// allow the CollectionSnapshot to be serialized	WITHOUT_CLASSIFICATION	0.9999995331951761	WITHOUT_CLASSIFICATION	4.668048238775766E-7	TEST
// ATTRIBUTES USED ONLY DURING FLUSH CYCLE	WITHOUT_CLASSIFICATION	0.9999896695052608	WITHOUT_CLASSIFICATION	1.0330494739211824E-5	TEST
// "current" means the reference that was found during flush() 	WITHOUT_CLASSIFICATION	0.9999996335071121	WITHOUT_CLASSIFICATION	3.664928878874233E-7	TEST
// "loaded" means the reference that is consistent  // with the current database state	WITHOUT_CLASSIFICATION	0.9999997452591102	WITHOUT_CLASSIFICATION	2.5474088982933754E-7	TEST
// during flush, we navigate the object graph to // collections and decide what to do with them	WITHOUT_CLASSIFICATION	0.9999999452593675	WITHOUT_CLASSIFICATION	5.4740632450044026E-8	TEST
// if we instantiate a collection during the flush() process, // we must ignore it for the rest of the flush()	WITHOUT_CLASSIFICATION	0.999999886474612	WITHOUT_CLASSIFICATION	1.1352538797981867E-7	TEST
// new collections that get found + wrapped // during flush shouldn't be ignored	WITHOUT_CLASSIFICATION	0.9999999733893368	WITHOUT_CLASSIFICATION	2.661066325070852E-8	TEST
//a newly wrapped collection is NOT dirty (or we get unnecessary version updates)	WITHOUT_CLASSIFICATION	0.9999369345126308	WITHOUT_CLASSIFICATION	6.306548736916448E-5	TEST
//collection.clearDirty()	WITHOUT_CLASSIFICATION	0.9999954871037406	WITHOUT_CLASSIFICATION	4.512896259365074E-6	TEST
//collection.clearDirty()	WITHOUT_CLASSIFICATION	0.9999954871037406	WITHOUT_CLASSIFICATION	4.512896259365074E-6	TEST
// detached collections that get found + reattached // during flush shouldn't be ignored	WITHOUT_CLASSIFICATION	0.9999999529374676	WITHOUT_CLASSIFICATION	4.706253251498234E-8	TEST
//optimization	WITHOUT_CLASSIFICATION	0.9999898730465394	WITHOUT_CLASSIFICATION	1.0126953460518001E-5	TEST
//optimization //optimization	WITHOUT_CLASSIFICATION	0.9999942944617087	WITHOUT_CLASSIFICATION	5.705538291313714E-6	TEST
//re-snapshot	WITHOUT_CLASSIFICATION	0.999981868817138	WITHOUT_CLASSIFICATION	1.8131182862049867E-5	TEST
// for convenience to save some lookups	WITHOUT_CLASSIFICATION	0.999999705923854	WITHOUT_CLASSIFICATION	2.940761460010448E-7	TEST
//NOTE: this is not updated when properties are fetched lazily!	WITHOUT_CLASSIFICATION	0.9999202513477645	WITHOUT_CLASSIFICATION	7.974865223550146E-5	TEST
//memory optimization	WITHOUT_CLASSIFICATION	0.9999981029046234	WITHOUT_CLASSIFICATION	1.8970953766495972E-6	TEST
// use the id value of a newly instantiated instance as the unsaved-value	WITHOUT_CLASSIFICATION	0.9999999421873779	WITHOUT_CLASSIFICATION	5.781262224495941E-8	TEST
// copied from Session:	WITHOUT_CLASSIFICATION	0.9999995322245598	WITHOUT_CLASSIFICATION	4.677754401361063E-7	TEST
// this should not happen since the DTD prevents it	WITHOUT_CLASSIFICATION	0.9999994538482241	WITHOUT_CLASSIFICATION	5.46151775966356E-7	TEST
// JoinProcessor needs to know if the where clause fragment came from a dynamic filter or not so it // can put the where clause fragment in the right place in the SQL AST.   'hasFilterCondition' keeps track // of that fact.	WITHOUT_CLASSIFICATION	0.9999999974577877	WITHOUT_CLASSIFICATION	2.5422122258226054E-9	TEST
// the current join represents the join between a many-to-many association table // and its "target" table.  Here we need to apply any additional filters // defined specifically on the many-to-many	WITHOUT_CLASSIFICATION	0.9999998020317492	WITHOUT_CLASSIFICATION	1.9796825075075725E-7	TEST
//check basic level one nullablilty	WITHOUT_CLASSIFICATION	0.999998773727383	WITHOUT_CLASSIFICATION	1.2262726170160884E-6	TEST
//values is not null and is checkable, we'll look deeper	WITHOUT_CLASSIFICATION	0.999995242178495	WITHOUT_CLASSIFICATION	4.757821504987486E-6	TEST
//for non null args, check for components and elements containing components	WITHOUT_CLASSIFICATION	0.9999996003087772	WITHOUT_CLASSIFICATION	3.9969122272302625E-7	TEST
//cache the hashcode	WITHOUT_CLASSIFICATION	0.9999952420006823	WITHOUT_CLASSIFICATION	4.757999317631835E-6	TEST
//persistent collections may have components	WITHOUT_CLASSIFICATION	0.9999978656724093	WITHOUT_CLASSIFICATION	2.134327590707457E-6	TEST
//check for all components values in the collection	WITHOUT_CLASSIFICATION	0.9999995020772191	WITHOUT_CLASSIFICATION	4.979227808668782E-7	TEST
/* will check current level if some of them are not null	WITHOUT_CLASSIFICATION	0.9999989471505578	WITHOUT_CLASSIFICATION	1.0528494422513906E-6	TEST
//do the test	WITHOUT_CLASSIFICATION	0.9977245975492438	WITHOUT_CLASSIFICATION	0.0022754024507561973	TEST
// if its an uninitialized proxy it can't be transient	WITHOUT_CLASSIFICATION	0.9999984841073493	WITHOUT_CLASSIFICATION	1.5158926506730759E-6	TEST
//unwrap it	WITHOUT_CLASSIFICATION	0.9999879640722871	WITHOUT_CLASSIFICATION	1.2035927712844471E-5	TEST
// See if the entity is already bound to this session, if not look at the // entity identifier and assume that the entity is persistent if the // id is not "unsaved" (that is, we rely on foreign keys to keep // database integrity)	WITHOUT_CLASSIFICATION	0.9999998507973428	WITHOUT_CLASSIFICATION	1.492026571160091E-7	TEST
// an unfetched association can only point to // an entity that already exists in the db	WITHOUT_CLASSIFICATION	0.9999997334312919	WITHOUT_CLASSIFICATION	2.6656870813822525E-7	TEST
// let the interceptor inspect the instance to decide	WITHOUT_CLASSIFICATION	0.9999990232552864	WITHOUT_CLASSIFICATION	9.767447135401406E-7	TEST
// let the persister inspect the instance to decide	WITHOUT_CLASSIFICATION	0.9999978528408155	WITHOUT_CLASSIFICATION	2.147159184548319E-6	TEST
// we use the assumed value, if there is one, to avoid hitting // the database	WITHOUT_CLASSIFICATION	0.9999985417320627	WITHOUT_CLASSIFICATION	1.458267937253397E-6	TEST
// hit the database, after checking the session cache for a snapshot	WITHOUT_CLASSIFICATION	0.9999988878818363	WITHOUT_CLASSIFICATION	1.112118163670665E-6	TEST
// context-entity-identifier returns null explicitly if the entity // is not associated with the persistence context; so make some // deeper checks...	WITHOUT_CLASSIFICATION	0.9999989564562144	WITHOUT_CLASSIFICATION	1.0435437855320645E-6	TEST
//int count = 0;	WITHOUT_CLASSIFICATION	0.9999972828876255	WITHOUT_CLASSIFICATION	2.717112374554516E-6	TEST
//the first key found after the given key	WITHOUT_CLASSIFICATION	0.9998714265743525	WITHOUT_CLASSIFICATION	1.2857342564754552E-4	TEST
//checkForEnd = false;	WITHOUT_CLASSIFICATION	0.9999966861168191	WITHOUT_CLASSIFICATION	3.3138831807412797E-6	TEST
//count++;	WITHOUT_CLASSIFICATION	0.9999862953058264	WITHOUT_CLASSIFICATION	1.3704694173605096E-5	TEST
//end of array, start filling again from start	WITHOUT_CLASSIFICATION	0.9999924150328632	WITHOUT_CLASSIFICATION	7.584967136902527E-6	TEST
//we ran out of keys to try	WITHOUT_CLASSIFICATION	0.9999864898860218	WITHOUT_CLASSIFICATION	1.3510113978177724E-5	TEST
//first element of array is reserved for the actual instance we are loading!	WITHOUT_CLASSIFICATION	0.9999941604790457	WITHOUT_CLASSIFICATION	5.839520954429034E-6	TEST
//the first id found after the given id	WITHOUT_CLASSIFICATION	0.9999476675449557	WITHOUT_CLASSIFICATION	5.2332455044242893E-5	TEST
//we ran out of ids to try	WITHOUT_CLASSIFICATION	0.9999952757738189	WITHOUT_CLASSIFICATION	4.724226181159493E-6	TEST
// look for existing collection as part of the persistence context	WITHOUT_CLASSIFICATION	0.9999987904131106	WITHOUT_CLASSIFICATION	1.209586889395362E-6	TEST
// ignore this row of results! Note the early exit	WITHOUT_CLASSIFICATION	0.9999977376170632	WITHOUT_CLASSIFICATION	2.262382936724616E-6	TEST
// initialize this collection	WITHOUT_CLASSIFICATION	0.9999987970386909	WITHOUT_CLASSIFICATION	1.2029613090551686E-6	TEST
// create one	WITHOUT_CLASSIFICATION	0.9999997959590724	WITHOUT_CLASSIFICATION	2.0404092751782448E-7	TEST
// warning: can cause a recursive calls! (proxy initialization)	WITHOUT_CLASSIFICATION	0.9999999635053683	WITHOUT_CLASSIFICATION	3.649463159800667E-8	TEST
// there were no queued additions // and the role has a cache	WITHOUT_CLASSIFICATION	0.9999999096610555	WITHOUT_CLASSIFICATION	9.033894446179819E-8	TEST
// and this is not a forced initialization during flush	WITHOUT_CLASSIFICATION	0.9999985955289986	WITHOUT_CLASSIFICATION	1.404471001386437E-6	TEST
// some filters affecting the collection are enabled on the session, so do not do the put into the cache.	WITHOUT_CLASSIFICATION	0.9999999880999803	WITHOUT_CLASSIFICATION	1.1900019783303935E-8	TEST
// cleanup code ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999991857755257	WITHOUT_CLASSIFICATION	8.142244744144846E-7	TEST
// loading collection xrefs ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.999999753505727	WITHOUT_CLASSIFICATION	2.464942729630391E-7	TEST
// Collection load contexts ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.999999814785149	WITHOUT_CLASSIFICATION	1.852148510448549E-7	TEST
// simple cache of param metadata based on query string.  Ideally, the // original "user-supplied query" string should be used to retreive this // metadata (i.e., not the para-list-expanded query string) to avoid // unnecessary cache entries. // Used solely for caching param metadata for native-sql queries, see // getSQLParameterMetadata() for a discussion as to why...	WITHOUT_CLASSIFICATION	0.9999999840426854	WITHOUT_CLASSIFICATION	1.5957314526541504E-8	TEST
// the cache of the actual plans...	WITHOUT_CLASSIFICATION	0.9999995980910982	WITHOUT_CLASSIFICATION	4.0190890180196027E-7	TEST
/*package*/	WITHOUT_CLASSIFICATION	0.9999826414449617	WITHOUT_CLASSIFICATION	1.7358555038213658E-5	TEST
/*package*/	WITHOUT_CLASSIFICATION	0.9999826414449617	WITHOUT_CLASSIFICATION	1.7358555038213658E-5	TEST
// assumes that types are all of span 1	WITHOUT_CLASSIFICATION	0.999997937866196	WITHOUT_CLASSIFICATION	2.062133804026127E-6	TEST
// for native-sql queries, the param metadata is determined outside // any relation to a query plan, because query plan creation and/or // retreival for a native-sql query depends on all of the return // types having been set, which might not be the case up-front when // param metadata would be most useful	WITHOUT_CLASSIFICATION	0.9999999960905869	WITHOUT_CLASSIFICATION	3.9094131557979395E-9	TEST
// don't care...	WITHOUT_CLASSIFICATION	0.9999997565521881	WITHOUT_CLASSIFICATION	2.434478119446439E-7	TEST
// Recognition code ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999997282400399	WITHOUT_CLASSIFICATION	2.717599601817649E-7	TEST
// don't care...	WITHOUT_CLASSIFICATION	0.9999997565521881	WITHOUT_CLASSIFICATION	2.434478119446439E-7	TEST
// NOTE : firstRow is zero-based	WITHOUT_CLASSIFICATION	0.9999199592738788	WITHOUT_CLASSIFICATION	8.004072612114338E-5	TEST
// break the outer loop !!!	WITHOUT_CLASSIFICATION	0.9999952490083427	WITHOUT_CLASSIFICATION	4.750991657221535E-6	TEST
// named parameter	WITHOUT_CLASSIFICATION	0.9999983939903198	WITHOUT_CLASSIFICATION	1.6060096801624214E-6	TEST
// could be either an ordinal or JPA-positional parameter	WITHOUT_CLASSIFICATION	0.9999997411309834	WITHOUT_CLASSIFICATION	2.5886901661865684E-7	TEST
// a peek ahead showed this as an JPA-positional parameter	WITHOUT_CLASSIFICATION	0.9999990770545414	WITHOUT_CLASSIFICATION	9.229454585772609E-7	TEST
// make sure this "name" is an integral	WITHOUT_CLASSIFICATION	0.9999635692312836	WITHOUT_CLASSIFICATION	3.643076871644529E-5	TEST
// pre-determine and cache the hashcode	WITHOUT_CLASSIFICATION	0.9999989964405798	WITHOUT_CLASSIFICATION	1.0035594201705306E-6	TEST
// perform the actual work	WITHOUT_CLASSIFICATION	0.9999992221743158	WITHOUT_CLASSIFICATION	7.778256841753486E-7	TEST
// if everything went ok, commit the transaction and close the obtained // connection handle...	WITHOUT_CLASSIFICATION	0.9999999219461719	WITHOUT_CLASSIFICATION	7.805382809766309E-8	TEST
// at some point the processing went bad, so we need to: //      1) make sure the connection handle gets released //      2) try to cleanup the JTA context as much as possible	WITHOUT_CLASSIFICATION	0.9999996111673447	WITHOUT_CLASSIFICATION	3.888326553735061E-7	TEST
// finally handle the exception	WITHOUT_CLASSIFICATION	0.9999982262683016	WITHOUT_CLASSIFICATION	1.7737316985097845E-6	TEST
// a "detached" collection that belonged to a different entity	WITHOUT_CLASSIFICATION	0.9999999599733488	WITHOUT_CLASSIFICATION	4.002665113750466E-8	TEST
//saveOrUpdateCopy() is deprecated!	WITHOUT_CLASSIFICATION	0.9999909489539995	WITHOUT_CLASSIFICATION	9.051046000485402E-6	TEST
// collectionPersister should not be null, but we don't want to throw // an exception if it is null	WITHOUT_CLASSIFICATION	0.9999999556717262	WITHOUT_CLASSIFICATION	4.4328273808367147E-8	TEST
// otherwise a null or brand new collection // this will also (inefficiently) handle arrays, which // have no snapshot, so we can't do any better //processArrayOrNewCollection(collection, type);	WITHOUT_CLASSIFICATION	0.9999999213477987	WITHOUT_CLASSIFICATION	7.865220126331434E-8	TEST
// a "detached" collection that originally belonged to the same entity	WITHOUT_CLASSIFICATION	0.9999999771813124	WITHOUT_CLASSIFICATION	2.2818687612906642E-8	TEST
//do nothing	WITHOUT_CLASSIFICATION	0.9999886284524299	WITHOUT_CLASSIFICATION	1.137154757016675E-5	TEST
//do nothing	WITHOUT_CLASSIFICATION	0.9999886284524299	WITHOUT_CLASSIFICATION	1.137154757016675E-5	TEST
//Force a substitution!	WITHOUT_CLASSIFICATION	0.9999991805242682	WITHOUT_CLASSIFICATION	8.194757318339202E-7	TEST
// The user requested a "greater" (i.e. more restrictive) form of // pessimistic lock	WITHOUT_CLASSIFICATION	0.9999979765824099	WITHOUT_CLASSIFICATION	2.023417590121736E-6	TEST
// the database now holds a lock + the object is flushed from the cache, // so release the soft lock	WITHOUT_CLASSIFICATION	0.9999999725555918	WITHOUT_CLASSIFICATION	2.744440816738337E-8	TEST
// now update the object .. has to be outside the main if block above (because of collections)	WITHOUT_CLASSIFICATION	0.9999999844769774	WITHOUT_CLASSIFICATION	1.5523022634044534E-8	TEST
// Search for collections by reachability, updating their role. // We don't want to touch collections reachable from a deleted object	WITHOUT_CLASSIFICATION	0.9999999772459831	WITHOUT_CLASSIFICATION	2.2754016849526554E-8	TEST
// this is a situation where the entity id is assigned by a post-insert generator // and was saved outside the transaction forcing it to be delayed	WITHOUT_CLASSIFICATION	0.9999987040246983	WITHOUT_CLASSIFICATION	1.295975301674258E-6	TEST
// NOTE: we need to do the wrap here even if its not "dirty", // because collections need wrapping but changes to _them_ // don't dirty the container. Also, for versioned data, we // need to wrap before calling searchForDirtyCollections	WITHOUT_CLASSIFICATION	0.9999995404617071	WITHOUT_CLASSIFICATION	4.5953829290784387E-7	TEST
//grab its state saved at deletion	WITHOUT_CLASSIFICATION	0.9999985638489887	WITHOUT_CLASSIFICATION	1.4361510112465543E-6	TEST
// grab its current state	WITHOUT_CLASSIFICATION	0.9999993868271329	WITHOUT_CLASSIFICATION	6.131728670059365E-7	TEST
// schedule the update // note that we intentionally do _not_ pass in currentPersistentState!	WITHOUT_CLASSIFICATION	0.9999990849703064	WITHOUT_CLASSIFICATION	9.150296935687971E-7	TEST
// substitutes into values by side-effect	WITHOUT_CLASSIFICATION	0.9999992074265126	WITHOUT_CLASSIFICATION	7.92573487255771E-7	TEST
// give the Interceptor a chance to process property values, if the properties // were modified by the Interceptor, we need to set them back to the object	WITHOUT_CLASSIFICATION	0.9999997125521711	WITHOUT_CLASSIFICATION	2.8744782881071986E-7	TEST
// compare to cached state (ignoring collections unless versioned)	WITHOUT_CLASSIFICATION	0.9999999772938035	WITHOUT_CLASSIFICATION	2.2706196530241773E-8	TEST
// if it was dirtied by a collection only	WITHOUT_CLASSIFICATION	0.9999998778797164	WITHOUT_CLASSIFICATION	1.2212028350165246E-7	TEST
// increment the version number (if necessary)	WITHOUT_CLASSIFICATION	0.9999998167025421	WITHOUT_CLASSIFICATION	1.832974579188596E-7	TEST
// check nullability but do not perform command execute // we'll use scheduled updates for that.	WITHOUT_CLASSIFICATION	0.9999999023040163	WITHOUT_CLASSIFICATION	9.769598366254946E-8	TEST
//give the Interceptor a chance to modify property values	WITHOUT_CLASSIFICATION	0.9999976743799007	WITHOUT_CLASSIFICATION	2.325620099199058E-6	TEST
//now we might need to recalculate the dirtyProperties array	WITHOUT_CLASSIFICATION	0.9999979505233346	WITHOUT_CLASSIFICATION	2.049476665374812E-6	TEST
//use the current version	WITHOUT_CLASSIFICATION	0.999999113114822	WITHOUT_CLASSIFICATION	8.86885177977396E-7	TEST
// Interceptor returned null, so do the dirtycheck ourself, if possible	WITHOUT_CLASSIFICATION	0.9999997928402954	WITHOUT_CLASSIFICATION	2.0715970461299718E-7	TEST
// object loaded by update()	WITHOUT_CLASSIFICATION	0.99999754853061	WITHOUT_CLASSIFICATION	2.451469390076414E-6	TEST
// dirty check against the usual snapshot of the entity	WITHOUT_CLASSIFICATION	0.9999996456855124	WITHOUT_CLASSIFICATION	3.543144876547782E-7	TEST
// dirty check against the database snapshot, if possible/necessary	WITHOUT_CLASSIFICATION	0.9999996843674372	WITHOUT_CLASSIFICATION	3.156325626542588E-7	TEST
// the Interceptor handled the dirty checking	WITHOUT_CLASSIFICATION	0.9999940018607129	WITHOUT_CLASSIFICATION	5.998139287121404E-6	TEST
//even process null collections	WITHOUT_CLASSIFICATION	0.9999993692278673	WITHOUT_CLASSIFICATION	6.307721327487276E-7	TEST
// get the id from the object	WITHOUT_CLASSIFICATION	0.9999981419023085	WITHOUT_CLASSIFICATION	1.8580976915760885E-6	TEST
//always do an INSERT, and let it fail by constraint violation	WITHOUT_CLASSIFICATION	0.9999995744201557	WITHOUT_CLASSIFICATION	4.2557984427797445E-7	TEST
//what is the version on the database?	WITHOUT_CLASSIFICATION	0.9999973974383954	WITHOUT_CLASSIFICATION	2.602561604604519E-6	TEST
/// HHH-2378	WITHOUT_CLASSIFICATION	0.9999927308753173	WITHOUT_CLASSIFICATION	7.26912468269087E-6	TEST
//will result in a SQL UPDATE:	WITHOUT_CLASSIFICATION	0.9999954445954802	WITHOUT_CLASSIFICATION	4.555404519773129E-6	TEST
//else do nothing (don't even reassociate object!)	WITHOUT_CLASSIFICATION	0.9999993279587515	WITHOUT_CLASSIFICATION	6.720412485994945E-7	TEST
// no existing row - do an insert	WITHOUT_CLASSIFICATION	0.999998752281047	WITHOUT_CLASSIFICATION	1.247718953034486E-6	TEST
//refresh() does not pass an entityName	WITHOUT_CLASSIFICATION	0.9999609999604876	WITHOUT_CLASSIFICATION	3.900003951243329E-5	TEST
//do not return a proxy! //(this option indicates we are initializing a proxy)	WITHOUT_CLASSIFICATION	0.9999991741192208	WITHOUT_CLASSIFICATION	8.258807792030091E-7	TEST
//return a proxy if appropriate	WITHOUT_CLASSIFICATION	0.9999975973342282	WITHOUT_CLASSIFICATION	2.4026657717785126E-6	TEST
// return existing object or initialized proxy (unless deleted)	WITHOUT_CLASSIFICATION	0.9999985642135791	WITHOUT_CLASSIFICATION	1.4357864208862548E-6	TEST
// return new uninitialized proxy	WITHOUT_CLASSIFICATION	0.9999981277032758	WITHOUT_CLASSIFICATION	1.8722967242466465E-6	TEST
// this object was already loaded	WITHOUT_CLASSIFICATION	0.9999991460151139	WITHOUT_CLASSIFICATION	8.539848860695192E-7	TEST
// Entity was found in second-level cache...	WITHOUT_CLASSIFICATION	0.9999999399533228	WITHOUT_CLASSIFICATION	6.004667722781489E-8	TEST
// make it circular-reference safe	WITHOUT_CLASSIFICATION	0.9999984079292634	WITHOUT_CLASSIFICATION	1.592070736577589E-6	TEST
// intializes result by side-effect	WITHOUT_CLASSIFICATION	0.9999992174616195	WITHOUT_CLASSIFICATION	7.825383805709541E-7	TEST
// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ // Pre-flushing section // ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999997852025563	WITHOUT_CLASSIFICATION	2.1479744384275766E-7	TEST
//some statistics	WITHOUT_CLASSIFICATION	0.9999975125607347	WITHOUT_CLASSIFICATION	2.487439265379436E-6	TEST
//safe from concurrent modification because of how entryList() is implemented on IdentityMap	WITHOUT_CLASSIFICATION	0.9999989503404317	WITHOUT_CLASSIFICATION	1.0496595682414626E-6	TEST
// Initialize dirty flags for arrays + collections with composite elements // and reset reached, doupdate, etc.	WITHOUT_CLASSIFICATION	0.9999993991045102	WITHOUT_CLASSIFICATION	6.008954897752575E-7	TEST
// Among other things, updateReachables() will recursively load all // collections that are moving roles. This might cause entities to // be loaded.	WITHOUT_CLASSIFICATION	0.9999999127352959	WITHOUT_CLASSIFICATION	8.726470416422103E-8	TEST
// So this needs to be safe from concurrent modification problems. // It is safe because of how IdentityMap implements entrySet()	WITHOUT_CLASSIFICATION	0.999999966535837	WITHOUT_CLASSIFICATION	3.346416292441598E-8	TEST
// Update the status of the object and if necessary, schedule an update	WITHOUT_CLASSIFICATION	0.9999979947638276	WITHOUT_CLASSIFICATION	2.005236172481176E-6	TEST
// Schedule updates to collections:	WITHOUT_CLASSIFICATION	0.9999983961564473	WITHOUT_CLASSIFICATION	1.603843552832307E-6	TEST
// we need to lock the collection caches before // executing entity inserts/updates in order to // account for bidi associations	WITHOUT_CLASSIFICATION	0.9999986531147675	WITHOUT_CLASSIFICATION	1.346885232500783E-6	TEST
// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ // Post-flushing section // ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999994989449011	WITHOUT_CLASSIFICATION	5.010550989635238E-7	TEST
//the database has changed now, so the subselect results need to be invalidated	WITHOUT_CLASSIFICATION	0.9999955934076573	WITHOUT_CLASSIFICATION	4.406592342654958E-6	TEST
//if the collection is dereferenced, remove from the session cache //iter.remove(); //does not work, since the entrySet is not backed by the set	WITHOUT_CLASSIFICATION	0.9999999391602684	WITHOUT_CLASSIFICATION	6.08397315838977E-8	TEST
//otherwise recreate the mapping between the collection and its key	WITHOUT_CLASSIFICATION	0.9999954011212904	WITHOUT_CLASSIFICATION	4.598878709687024E-6	TEST
//get a snapshot	WITHOUT_CLASSIFICATION	0.9999907609568796	WITHOUT_CLASSIFICATION	9.239043120467127E-6	TEST
/* package-private */	WITHOUT_CLASSIFICATION	0.9999991510838024	WITHOUT_CLASSIFICATION	8.48916197660669E-7	TEST
/* package-private */	WITHOUT_CLASSIFICATION	0.9999991510838024	WITHOUT_CLASSIFICATION	8.48916197660669E-7	TEST
// key is an entity involved with the operation performed by the listener; // value is a flag indicating if the listener explicitly operates on the entity	WITHOUT_CLASSIFICATION	0.9999964858374442	WITHOUT_CLASSIFICATION	3.5141625557993966E-6	TEST
// EARLY EXIT!!!	WITHOUT_CLASSIFICATION	0.9999946711680165	WITHOUT_CLASSIFICATION	5.328831983426839E-6	TEST
//ie. the entity came in from update()	WITHOUT_CLASSIFICATION	0.9999975014970299	WITHOUT_CLASSIFICATION	2.4985029701465107E-6	TEST
// before any callbacks, etc, so subdeletions see that this deletion happened first	WITHOUT_CLASSIFICATION	0.9999998523706983	WITHOUT_CLASSIFICATION	1.4762930160745914E-7	TEST
// Ensures that containing deletions happen before sub-deletions	WITHOUT_CLASSIFICATION	0.9999999363406638	WITHOUT_CLASSIFICATION	6.36593362319381E-8	TEST
//	WITHOUT_CLASSIFICATION	0.9999527008540617	WITHOUT_CLASSIFICATION	4.729914593835468E-5	TEST
// cascade-delete to collections BEFORE the collection owner is deleted	WITHOUT_CLASSIFICATION	0.9999996641000889	WITHOUT_CLASSIFICATION	3.358999110132477E-7	TEST
// cascade-delete to many-to-one AFTER the parent was deleted	WITHOUT_CLASSIFICATION	0.9999994698223446	WITHOUT_CLASSIFICATION	5.30177655369422E-7	TEST
// if it is an initialized proxy, let cascade // handle it later on	WITHOUT_CLASSIFICATION	0.9999797388269905	WITHOUT_CLASSIFICATION	2.026117300950061E-5	TEST
//assign the requested id to the proxy, *before* //reassociating the proxy	WITHOUT_CLASSIFICATION	0.9999736856151277	WITHOUT_CLASSIFICATION	2.631438487222202E-5	TEST
// an uninitialized proxy, noop, don't even need to // return an id, since it is never a save()	WITHOUT_CLASSIFICATION	0.9999993342654828	WITHOUT_CLASSIFICATION	6.657345172442131E-7	TEST
//initialize properties of the event:	WITHOUT_CLASSIFICATION	0.9999817973734955	WITHOUT_CLASSIFICATION	1.8202626504509495E-5	TEST
//return the id in the event object	WITHOUT_CLASSIFICATION	0.9999975067199572	WITHOUT_CLASSIFICATION	2.4932800427663113E-6	TEST
//TRANSIENT or DELETED	WITHOUT_CLASSIFICATION	0.9999450394428757	WITHOUT_CLASSIFICATION	5.496055712426794E-5	TEST
// use the id assigned to the instance	WITHOUT_CLASSIFICATION	0.9999989181711518	WITHOUT_CLASSIFICATION	1.0818288481810975E-6	TEST
// assume this is a newly instantiated transient object // which should be saved rather than updated	WITHOUT_CLASSIFICATION	0.9999966765951576	WITHOUT_CLASSIFICATION	3.323404842343376E-6	TEST
// this is a transient object with existing persistent state not loaded by the session	WITHOUT_CLASSIFICATION	0.9999994834462849	WITHOUT_CLASSIFICATION	5.16553715089506E-7	TEST
// a collection loaded in the current session // can not possibly be the collection belonging // to the entity passed to update()	WITHOUT_CLASSIFICATION	0.9999999661804821	WITHOUT_CLASSIFICATION	3.381951784347054E-8	TEST
//cachedState,	WITHOUT_CLASSIFICATION	0.9999816627921133	WITHOUT_CLASSIFICATION	1.8337207886659683E-5	TEST
//assume true, since we don't really know, and it doesn't matter	WITHOUT_CLASSIFICATION	0.9999808635417214	WITHOUT_CLASSIFICATION	1.9136458278523627E-5	TEST
//a "detached" collection!	WITHOUT_CLASSIFICATION	0.9999992331356834	WITHOUT_CLASSIFICATION	7.668643165721226E-7	TEST
// if the collection belonged to a different entity, // clean up the existing state of the collection	WITHOUT_CLASSIFICATION	0.9999999556440263	WITHOUT_CLASSIFICATION	4.435597364904557E-8	TEST
//log.debug( "calling onLoad()" );	WITHOUT_CLASSIFICATION	0.9999983064912369	WITHOUT_CLASSIFICATION	1.693508763063795E-6	TEST
//EARLY EXIT!	WITHOUT_CLASSIFICATION	0.9999736381539537	WITHOUT_CLASSIFICATION	2.6361846046264446E-5	TEST
// note: performExecutions() clears all collectionXxxxtion  // collections (the collection actions) in the session	WITHOUT_CLASSIFICATION	0.999999975829899	WITHOUT_CLASSIFICATION	2.4170101053043615E-8	TEST
// if no array holder we found an unwrappered array (this can't occur, // because we now always call wrap() before getting to here) // return (ah==null) ? true : searchForDirtyCollections(ah, type);	WITHOUT_CLASSIFICATION	0.9999999139049581	WITHOUT_CLASSIFICATION	8.609504189284752E-8	TEST
// if not wrappered yet, its dirty (this can't occur, because // we now always call wrap() before getting to here) // return ( ! (obj instanceof PersistentCollection) ) ? //true : searchForDirtyCollections( (PersistentCollection) obj, type );	WITHOUT_CLASSIFICATION	0.999999960949012	WITHOUT_CLASSIFICATION	3.905098801502057E-8	TEST
//we need to check even if it was not initialized, because of delayed adds!	WITHOUT_CLASSIFICATION	0.9999997269862345	WITHOUT_CLASSIFICATION	2.730137653848723E-7	TEST
//NOTE: EARLY EXIT!	WITHOUT_CLASSIFICATION	0.9999035822220526	WITHOUT_CLASSIFICATION	9.641777794744581E-5	TEST
// find any entities that are still transient after retry	WITHOUT_CLASSIFICATION	0.9999934785156709	WITHOUT_CLASSIFICATION	6.521484329159802E-6	TEST
//EARLY EXIT!	WITHOUT_CLASSIFICATION	0.9999736381539537	WITHOUT_CLASSIFICATION	2.6361846046264446E-5	TEST
// Check the persistence context for an entry relating to this // entity to be merged...	WITHOUT_CLASSIFICATION	0.9999988421326323	WITHOUT_CLASSIFICATION	1.1578673675888963E-6	TEST
// we have specialized case of a detached entity from the // perspective of the merge operation.  Specifically, we // have an incoming entity instance which has a corresponding // entry in the current persistence context, but registered // under a different entity instance	WITHOUT_CLASSIFICATION	0.9999999917988114	WITHOUT_CLASSIFICATION	8.201188574141694E-9	TEST
//DELETED	WITHOUT_CLASSIFICATION	0.9997797773882213	WITHOUT_CLASSIFICATION	2.2022261177877337E-4	TEST
//before cascade!	WITHOUT_CLASSIFICATION	0.9999982497498697	WITHOUT_CLASSIFICATION	1.7502501302915669E-6	TEST
// cascade first, so that all unsaved objects get their // copy created before we actually copy //cascadeOnMerge(event, persister, entity, copyCache, Cascades.CASCADE_BEFORE_MERGE);	WITHOUT_CLASSIFICATION	0.999999899869338	WITHOUT_CLASSIFICATION	1.0013066201043796E-7	TEST
//this bit is only *really* absolutely necessary for handling //requestedId, but is also good if we merge multiple object //graphs, since it helps ensure uniqueness	WITHOUT_CLASSIFICATION	0.9999767739536823	WITHOUT_CLASSIFICATION	2.322604631772216E-5	TEST
// continue...; we'll find out if it ends up not getting saved later	WITHOUT_CLASSIFICATION	0.9999999493088355	WITHOUT_CLASSIFICATION	5.069116451579941E-8	TEST
// cascade first, so that all unsaved objects get their // copy created before we actually copy	WITHOUT_CLASSIFICATION	0.999999460137494	WITHOUT_CLASSIFICATION	5.398625060035502E-7	TEST
// check that entity id = requestedId	WITHOUT_CLASSIFICATION	0.9999919787543727	WITHOUT_CLASSIFICATION	8.02124562725756E-6	TEST
//before cascade!	WITHOUT_CLASSIFICATION	0.9999982497498697	WITHOUT_CLASSIFICATION	1.7502501302915669E-6	TEST
// we got here because we assumed that an instance // with an assigned id was detached, when it was // really persistent	WITHOUT_CLASSIFICATION	0.9999505640927032	WITHOUT_CLASSIFICATION	4.943590729680788E-5	TEST
// cascade first, so that all unsaved objects get their  // copy created before we actually copy	WITHOUT_CLASSIFICATION	0.9999994391655302	WITHOUT_CLASSIFICATION	5.608344697895046E-7	TEST
//copyValues works by reflection, so explicitly mark the entity instance dirty	WITHOUT_CLASSIFICATION	0.9999990934193713	WITHOUT_CLASSIFICATION	9.065806286965609E-7	TEST
//EARLY EXIT	WITHOUT_CLASSIFICATION	0.9999713616258873	WITHOUT_CLASSIFICATION	2.8638374112663208E-5	TEST
//source.getBatcher().executeBatch(); //found another way to ensure that all batched joined inserts have been executed	WITHOUT_CLASSIFICATION	0.9999977983034173	WITHOUT_CLASSIFICATION	2.2016965828338863E-6	TEST
// substitutes into values by side-effect	WITHOUT_CLASSIFICATION	0.9999992074265126	WITHOUT_CLASSIFICATION	7.92573487255771E-7	TEST
//now done in EntityIdentityInsertAction //persister.setIdentifier( entity, id, source.getEntityMode() );	WITHOUT_CLASSIFICATION	0.9999996269986775	WITHOUT_CLASSIFICATION	3.7300132249438883E-7	TEST
//source.getPersistenceContext().removeNonExist( new EntityKey( id, persister, source.getEntityMode() ) );	WITHOUT_CLASSIFICATION	0.999999824861575	WITHOUT_CLASSIFICATION	1.751384250189505E-7	TEST
//keep the existing version number in the case of replicate!	WITHOUT_CLASSIFICATION	0.999999744730693	WITHOUT_CLASSIFICATION	2.552693070132935E-7	TEST
// cascade-save to many-to-one BEFORE the parent is saved	WITHOUT_CLASSIFICATION	0.9999994036139137	WITHOUT_CLASSIFICATION	5.963860862933073E-7	TEST
//pass this as an argument only to avoid double looking	WITHOUT_CLASSIFICATION	0.9999789024516685	WITHOUT_CLASSIFICATION	2.1097548331382674E-5	TEST
// the object is persistent	WITHOUT_CLASSIFICATION	0.9999954159784782	WITHOUT_CLASSIFICATION	4.584021521767039E-6	TEST
//the entity is associated with the session, so check its status	WITHOUT_CLASSIFICATION	0.9999973487723084	WITHOUT_CLASSIFICATION	2.651227691563961E-6	TEST
// do nothing for persistent instances	WITHOUT_CLASSIFICATION	0.9999976337843401	WITHOUT_CLASSIFICATION	2.366215659827095E-6	TEST
//ie. e.status==DELETED	WITHOUT_CLASSIFICATION	0.9999831530382269	WITHOUT_CLASSIFICATION	1.6846961773049474E-5	TEST
// the object is transient or detached	WITHOUT_CLASSIFICATION	0.999997564665816	WITHOUT_CLASSIFICATION	2.43533418392824E-6	TEST
//NOTE EARLY EXIT!	WITHOUT_CLASSIFICATION	0.9999360385038989	WITHOUT_CLASSIFICATION	6.39614961011615E-5	TEST
// Private constructor - stops checkstyle from complaining.	WITHOUT_CLASSIFICATION	0.9999999381410515	WITHOUT_CLASSIFICATION	6.185894851881301E-8	TEST
// First, try to find a matching constructor accepting a ViolatedConstraintNameExtracter param...	WITHOUT_CLASSIFICATION	0.9999996470846306	WITHOUT_CLASSIFICATION	3.5291536933724955E-7	TEST
// eat it and try next	WITHOUT_CLASSIFICATION	0.9999991902648188	WITHOUT_CLASSIFICATION	8.097351811614643E-7	TEST
// Otherwise, try to use the no-arg constructor	WITHOUT_CLASSIFICATION	0.9999999350112704	WITHOUT_CLASSIFICATION	6.498872951892997E-8	TEST
// oracle sql-state code for deadlock	WITHOUT_CLASSIFICATION	0.9999995402457679	WITHOUT_CLASSIFICATION	4.5975423215074293E-7	TEST
// CollectionPropertyMapping processes everything except 'index'.	WITHOUT_CLASSIFICATION	0.9999996289270693	WITHOUT_CLASSIFICATION	3.71072930757324E-7	TEST
// remove initial ", "	WITHOUT_CLASSIFICATION	0.9999991135359327	WITHOUT_CLASSIFICATION	8.864640671649771E-7	TEST
// remove initial " and "	WITHOUT_CLASSIFICATION	0.9999992077063261	WITHOUT_CLASSIFICATION	7.922936739087432E-7	TEST
//beforeClassTokens.add("new"); DEFINITELY DON'T HAVE THIS!!	WITHOUT_CLASSIFICATION	0.9999927065855313	WITHOUT_CLASSIFICATION	7.2934144687050955E-6	TEST
//notAfterClassTokens.add(",");	WITHOUT_CLASSIFICATION	0.9999778397854591	WITHOUT_CLASSIFICATION	2.216021454088105E-5	TEST
// just especially for the trivial collection filter	WITHOUT_CLASSIFICATION	0.9999986029590061	WITHOUT_CLASSIFICATION	1.397040993955434E-6	TEST
//update last non-whitespace token, if necessary	WITHOUT_CLASSIFICATION	0.9999966121268012	WITHOUT_CLASSIFICATION	3.387873198745711E-6	TEST
// select-range is terminated by declaration of "from"	WITHOUT_CLASSIFICATION	0.9999996834493126	WITHOUT_CLASSIFICATION	3.165506874368568E-7	TEST
//scan for next non-whitespace token	WITHOUT_CLASSIFICATION	0.9999774450109113	WITHOUT_CLASSIFICATION	2.255498908870033E-5	TEST
// Note this!!	WITHOUT_CLASSIFICATION	0.9999860377729317	WITHOUT_CLASSIFICATION	1.3962227068267436E-5	TEST
// Error message constants.	WITHOUT_CLASSIFICATION	0.999999745632046	WITHOUT_CLASSIFICATION	2.5436795402436655E-7	TEST
// handle trace logging ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999975131864538	WITHOUT_CLASSIFICATION	2.4868135462241735E-6	TEST
// semantic action handling ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999995629260808	WITHOUT_CLASSIFICATION	4.3707391920333313E-7	TEST
// Handle collection-fiter compilation. // IMPORTANT NOTE: This is modifying the INPUT (HQL) tree, not the output tree!	WITHOUT_CLASSIFICATION	0.9999981349470511	WITHOUT_CLASSIFICATION	1.8650529488494323E-6	TEST
// Show the modified AST.	WITHOUT_CLASSIFICATION	0.9999922960450067	WITHOUT_CLASSIFICATION	7.7039549932431E-6	TEST
// Create a parameter specification for the collection filter...	WITHOUT_CLASSIFICATION	0.9999999310372916	WITHOUT_CLASSIFICATION	6.896270847368305E-8	TEST
// Use the delegate.	WITHOUT_CLASSIFICATION	0.9999977312872448	WITHOUT_CLASSIFICATION	2.2687127551499246E-6	TEST
// Use the delegate.	WITHOUT_CLASSIFICATION	0.9999977312872448	WITHOUT_CLASSIFICATION	2.2687127551499246E-6	TEST
// Get the names of the columns used to link between the collection // owner and the collection elements.	WITHOUT_CLASSIFICATION	0.999999887419839	WITHOUT_CLASSIFICATION	1.1258016103584816E-7	TEST
// The path AST should be a DotNode, and it should have been evaluated already.	WITHOUT_CLASSIFICATION	0.9999956191878335	WITHOUT_CLASSIFICATION	4.380812166516283E-6	TEST
// Tell the dot node about the join type.	WITHOUT_CLASSIFICATION	0.9999979431483623	WITHOUT_CLASSIFICATION	2.0568516376043457E-6	TEST
// Re-arrange the tree so that the collection function is the root and the lhs is the path.	WITHOUT_CLASSIFICATION	0.9999997438503953	WITHOUT_CLASSIFICATION	2.56149604787706E-7	TEST
// Don't forget to resolve the argument! // Resolve the collection function now.	WITHOUT_CLASSIFICATION	0.9999998808345724	WITHOUT_CLASSIFICATION	1.191654275266223E-7	TEST
// Resolve everything up to this dot, but don't resolve the placeholders yet.	WITHOUT_CLASSIFICATION	0.9999990663711028	WITHOUT_CLASSIFICATION	9.336288972805164E-7	TEST
// Should mean that no such property was found	WITHOUT_CLASSIFICATION	0.9999996457373884	WITHOUT_CLASSIFICATION	3.542626115011776E-7	TEST
// Was there an explicit select expression?	WITHOUT_CLASSIFICATION	0.9999931901350287	WITHOUT_CLASSIFICATION	6.809864971308755E-6	TEST
// Attach any mapping-defined "ORDER BY" fragments	WITHOUT_CLASSIFICATION	0.9999995204495578	WITHOUT_CLASSIFICATION	4.795504423328863E-7	TEST
// Use the explicitly declared select expression; determine the // return types indicated by each select token	WITHOUT_CLASSIFICATION	0.99999979966909	WITHOUT_CLASSIFICATION	2.0033091004391613E-7	TEST
// After that, process the JOINs. // Invoke a delegate to do the work, as this is farily complex.	WITHOUT_CLASSIFICATION	0.9999937341641866	WITHOUT_CLASSIFICATION	6.265835813384275E-6	TEST
// Make #@%$^#^&# sure no alias is applied to the table name	WITHOUT_CLASSIFICATION	0.9999889744802156	WITHOUT_CLASSIFICATION	1.1025519784280772E-5	TEST
// We need to generate ids as part of this bulk insert. // // Note that this is only supported for sequence-style generators and // post-insert-style generators; basically, only in-db generators	WITHOUT_CLASSIFICATION	0.9999953022327364	WITHOUT_CLASSIFICATION	4.697767263632785E-6	TEST
// Use the delegate.	WITHOUT_CLASSIFICATION	0.9999977312872448	WITHOUT_CLASSIFICATION	2.2687127551499246E-6	TEST
// We need to seed the version value as part of this bulk insert	WITHOUT_CLASSIFICATION	0.9999986191337557	WITHOUT_CLASSIFICATION	1.38086624436842E-6	TEST
// we need to wrtap the param in a cast()	WITHOUT_CLASSIFICATION	0.9999987051250403	WITHOUT_CLASSIFICATION	1.2948749596757406E-6	TEST
// This is called when it's time to fully resolve a path expression.	WITHOUT_CLASSIFICATION	0.9999967022404358	WITHOUT_CLASSIFICATION	3.297759564236414E-6	TEST
// Generate implicit joins, only if necessary.	WITHOUT_CLASSIFICATION	0.9999988183054678	WITHOUT_CLASSIFICATION	1.1816945321522441E-6	TEST
// Notify the FROM element that it is being referenced by the select.	WITHOUT_CLASSIFICATION	0.9999899154090334	WITHOUT_CLASSIFICATION	1.0084590966560573E-5	TEST
// Turn off includeSubclasses on all FromElements.	WITHOUT_CLASSIFICATION	0.9999994023126993	WITHOUT_CLASSIFICATION	5.976873007411395E-7	TEST
// create the node initially with the param name so that it shows // appropriately in the "original text" attribute	WITHOUT_CLASSIFICATION	0.9999999030853616	WITHOUT_CLASSIFICATION	9.691463838562233E-8	TEST
// Use the delegate, resolve identifiers as FROM element aliases.	WITHOUT_CLASSIFICATION	0.9999956947615845	WITHOUT_CLASSIFICATION	4.30523841548635E-6	TEST
// select clauses for insert statements should alwasy be treated as shallow	WITHOUT_CLASSIFICATION	0.9999989702214699	WITHOUT_CLASSIFICATION	1.02977853003889E-6	TEST
// no need to even collect this information if the persister is considered multi-table	WITHOUT_CLASSIFICATION	0.9999996190280894	WITHOUT_CLASSIFICATION	3.809719105954067E-7	TEST
// Make sure that the persister is versioned	WITHOUT_CLASSIFICATION	0.9999498299903644	WITHOUT_CLASSIFICATION	5.0170009635561184E-5	TEST
// handle trace logging ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999975131864538	WITHOUT_CLASSIFICATION	2.4868135462241735E-6	TEST
// Use the delegate.	WITHOUT_CLASSIFICATION	0.9999977312872448	WITHOUT_CLASSIFICATION	2.2687127551499246E-6	TEST
// --Commented out by Inspection (12/11/04 10:56 AM): int getWarningCount();	WITHOUT_CLASSIFICATION	0.9999999474519279	WITHOUT_CLASSIFICATION	5.254807211208213E-8	TEST
// Alias references and identifiers use the same node class.	WITHOUT_CLASSIFICATION	0.9999999646240971	WITHOUT_CLASSIFICATION	3.537590295745604E-8	TEST
// switch	WITHOUT_CLASSIFICATION	0.9999978552234058	WITHOUT_CLASSIFICATION	2.144776594228529E-6	TEST
// make a new one	WITHOUT_CLASSIFICATION	0.9999966019359791	WITHOUT_CLASSIFICATION	3.398064020874967E-6	TEST
// just do the regular thing if you can't find the ctor // Your AST must have default ctor to use this.	WITHOUT_CLASSIFICATION	0.9999994820296173	WITHOUT_CLASSIFICATION	5.179703826356058E-7	TEST
// Initialize SQL nodes here.	WITHOUT_CLASSIFICATION	0.9999816059538285	WITHOUT_CLASSIFICATION	1.839404617159317E-5	TEST
// semantic action processing ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999996290816443	WITHOUT_CLASSIFICATION	3.7091835566563645E-7	TEST
// if template is null we just write the function out as it appears in the hql statement	WITHOUT_CLASSIFICATION	0.9999997148972457	WITHOUT_CLASSIFICATION	2.8510275436696375E-7	TEST
// this function has a template -> redirect output and catch the arguments	WITHOUT_CLASSIFICATION	0.9999998308959216	WITHOUT_CLASSIFICATION	1.6910407845689764E-7	TEST
// --- Inner classes (moved here from sql-gen.g) ---	WITHOUT_CLASSIFICATION	0.9999974376485826	WITHOUT_CLASSIFICATION	2.5623514173099277E-6	TEST
// check two "adjecent" nodes at the top of the from-clause tree	WITHOUT_CLASSIFICATION	0.9999999847065781	WITHOUT_CLASSIFICATION	1.5293421933634028E-8	TEST
///////////////////////////////////////////////////////////////////////	WITHOUT_CLASSIFICATION	0.9998743376002098	WITHOUT_CLASSIFICATION	1.2566239979016445E-4	TEST
// these are just two unrelated table references	WITHOUT_CLASSIFICATION	0.9999988052973958	WITHOUT_CLASSIFICATION	1.1947026042694527E-6	TEST
// again, both should be FromElements	WITHOUT_CLASSIFICATION	0.9999980354070118	WITHOUT_CLASSIFICATION	1.9645929881958067E-6	TEST
// NOTE : firstRow is zero-based	WITHOUT_CLASSIFICATION	0.9999199592738788	WITHOUT_CLASSIFICATION	8.004072612114338E-5	TEST
// right represents a joins originating from left; or // both right and left reprersent joins originating from the same FromElement	WITHOUT_CLASSIFICATION	0.9999995023767168	WITHOUT_CLASSIFICATION	4.976232832364017E-7	TEST
// check a set of parent/child nodes in the from-clause tree // to determine if a comma is required between them	WITHOUT_CLASSIFICATION	0.9999999831014162	WITHOUT_CLASSIFICATION	1.6898583711914553E-8	TEST
// right represents a joins originating from left...	WITHOUT_CLASSIFICATION	0.9999997437063405	WITHOUT_CLASSIFICATION	2.5629365952843173E-7	TEST
// all clear	WITHOUT_CLASSIFICATION	0.999998495989618	WITHOUT_CLASSIFICATION	1.5040103819981913E-6	TEST
// Ignore the token class name parameter, and use a specific token class.	WITHOUT_CLASSIFICATION	0.9999998617246889	WITHOUT_CLASSIFICATION	1.382753111758598E-7	TEST
//overriden to avoid System.exit	WITHOUT_CLASSIFICATION	0.9999914416861907	WITHOUT_CLASSIFICATION	8.558313809294592E-6	TEST
//overriden to avoid System.exit	WITHOUT_CLASSIFICATION	0.9999914416861907	WITHOUT_CLASSIFICATION	8.558313809294592E-6	TEST
// remember that ordinal parameters numbers are 1-based!!!	WITHOUT_CLASSIFICATION	0.9999995101144867	WITHOUT_CLASSIFICATION	4.898855132665943E-7	TEST
// don't care about other param types here, just those explicitly user-defined...	WITHOUT_CLASSIFICATION	0.9999973626893974	WITHOUT_CLASSIFICATION	2.637310602466538E-6	TEST
// If the query is already compiled, skip the compilation.	WITHOUT_CLASSIFICATION	0.9999998845671042	WITHOUT_CLASSIFICATION	1.1543289577500632E-7	TEST
// Remember the parameters for the compilation.	WITHOUT_CLASSIFICATION	0.9999996901301895	WITHOUT_CLASSIFICATION	3.0986981054476824E-7	TEST
// PHASE 1 : Parse the HQL into an AST.	WITHOUT_CLASSIFICATION	0.9999984609159887	WITHOUT_CLASSIFICATION	1.5390840113616517E-6	TEST
// PHASE 2 : Analyze the HQL AST, and produce an SQL AST.	WITHOUT_CLASSIFICATION	0.9999988833916995	WITHOUT_CLASSIFICATION	1.1166083005631268E-6	TEST
// PHASE 3 : Generate the SQL.	WITHOUT_CLASSIFICATION	0.9999982144403716	WITHOUT_CLASSIFICATION	1.785559628414376E-6	TEST
// we do not actually propogate ANTLRExceptions as a cause, so // log it here for diagnostic purposes	WITHOUT_CLASSIFICATION	0.9999999020711382	WITHOUT_CLASSIFICATION	9.792886182096747E-8	TEST
// we do not actually propogate ANTLRExceptions as a cause, so // log it here for diagnostic purposes	WITHOUT_CLASSIFICATION	0.9999999020711382	WITHOUT_CLASSIFICATION	9.792886182096747E-8	TEST
//only needed during compilation phase...	WITHOUT_CLASSIFICATION	0.9999999068771682	WITHOUT_CLASSIFICATION	9.312283175214501E-8	TEST
// Transform the tree.	WITHOUT_CLASSIFICATION	0.9999951589009418	WITHOUT_CLASSIFICATION	4.8410990581285515E-6	TEST
// Parse the query string into an HQL AST.	WITHOUT_CLASSIFICATION	0.9999995810734025	WITHOUT_CLASSIFICATION	4.189265974613521E-7	TEST
// Delegate to the QueryLoader...	WITHOUT_CLASSIFICATION	0.9999956878382862	WITHOUT_CLASSIFICATION	4.312161713829595E-6	TEST
// Delegate to the QueryLoader...	WITHOUT_CLASSIFICATION	0.9999956878382862	WITHOUT_CLASSIFICATION	4.312161713829595E-6	TEST
// Delegate to the QueryLoader...	WITHOUT_CLASSIFICATION	0.9999956878382862	WITHOUT_CLASSIFICATION	4.312161713829595E-6	TEST
// NOTE : ( max - 1 ) because first is zero-based while max is not...	WITHOUT_CLASSIFICATION	0.9999968612892957	WITHOUT_CLASSIFICATION	3.1387107042855073E-6	TEST
// -- Package local methods for the QueryLoader delegate --	WITHOUT_CLASSIFICATION	0.9999991014639753	WITHOUT_CLASSIFICATION	8.98536024707805E-7	TEST
// If there are no collection fetches, then no further checks are needed	WITHOUT_CLASSIFICATION	0.9999989966326023	WITHOUT_CLASSIFICATION	1.0033673978055196E-6	TEST
// A shallow query is ok (although technically there should be no fetching here...)	WITHOUT_CLASSIFICATION	0.99999171457993	WITHOUT_CLASSIFICATION	8.285420069983123E-6	TEST
// should be the first, but just to be safe...	WITHOUT_CLASSIFICATION	0.9999988541053371	WITHOUT_CLASSIFICATION	1.1458946629923074E-6	TEST
// Use the delegate.	WITHOUT_CLASSIFICATION	0.9999977312872448	WITHOUT_CLASSIFICATION	2.2687127551499246E-6	TEST
// Use the delegate.	WITHOUT_CLASSIFICATION	0.9999977312872448	WITHOUT_CLASSIFICATION	2.2687127551499246E-6	TEST
// Impl Note: allows multiple collection fetches as long as the // entire fecthed graph still "points back" to a single // root entity for return	WITHOUT_CLASSIFICATION	0.9999993121866488	WITHOUT_CLASSIFICATION	6.87813351244787E-7	TEST
// Otherwise, we have a non-scalar select with defined collection fetch(es). // Make sure that there is only a single root entity in the return (no tuples)	WITHOUT_CLASSIFICATION	0.9999997119887142	WITHOUT_CLASSIFICATION	2.880112857904671E-7	TEST
// This is not strictly true.  We actually just need to make sure that // it is ordered by root-entity PK and that that order-by comes before // any non-root-entity ordering...	WITHOUT_CLASSIFICATION	0.9999974786464163	WITHOUT_CLASSIFICATION	2.5213535836768704E-6	TEST
//	WITHOUT_CLASSIFICATION	0.9999527008540617	WITHOUT_CLASSIFICATION	4.729914593835468E-5	TEST
// we are already processing a dot-structure	WITHOUT_CLASSIFICATION	0.9999997441309664	WITHOUT_CLASSIFICATION	2.5586903371565953E-7	TEST
// igndore it...	WITHOUT_CLASSIFICATION	0.9999992872283461	WITHOUT_CLASSIFICATION	7.127716539751606E-7	TEST
// we are now at a new tree level	WITHOUT_CLASSIFICATION	0.9999996337128331	WITHOUT_CLASSIFICATION	3.6628716688276034E-7	TEST
// [jsd] The fix for HHH-558...	WITHOUT_CLASSIFICATION	0.999990278075876	WITHOUT_CLASSIFICATION	9.72192412397366E-6	TEST
// If the token can tell us if it could be an identifier...	WITHOUT_CLASSIFICATION	0.9999954817376645	WITHOUT_CLASSIFICATION	4.518262335569662E-6	TEST
// ... and the expected token type was an identifier, then:	WITHOUT_CLASSIFICATION	0.999997423562359	WITHOUT_CLASSIFICATION	2.576437641080199E-6	TEST
// Use the token as an identifier.	WITHOUT_CLASSIFICATION	0.99998631830675	WITHOUT_CLASSIFICATION	1.3681693249962795E-5	TEST
// Add the token to the AST.	WITHOUT_CLASSIFICATION	0.9999939390237387	WITHOUT_CLASSIFICATION	6.060976261272953E-6	TEST
// (NOT (EQ a b) ) => (NE a b)	WITHOUT_CLASSIFICATION	0.9999815678479596	WITHOUT_CLASSIFICATION	1.8432152040437378E-5	TEST
// (NOT (NE a b) ) => (EQ a b)	WITHOUT_CLASSIFICATION	0.9999815678479596	WITHOUT_CLASSIFICATION	1.8432152040437378E-5	TEST
// (NOT (LT a b) ) => (GE a b)	WITHOUT_CLASSIFICATION	0.9999858363265438	WITHOUT_CLASSIFICATION	1.4163673456197857E-5	TEST
// (NOT (GE a b) ) => (LT a b)	WITHOUT_CLASSIFICATION	0.9999858363265438	WITHOUT_CLASSIFICATION	1.4163673456197857E-5	TEST
// (NOT (LE a b) ) => (GT a b)	WITHOUT_CLASSIFICATION	0.9999859584160439	WITHOUT_CLASSIFICATION	1.4041583956126113E-5	TEST
// (NOT (LIKE a b) ) => (NOT_LIKE a b)	WITHOUT_CLASSIFICATION	0.9999756794599268	WITHOUT_CLASSIFICATION	2.4320540073172925E-5	TEST
// (NOT (NOT_LIKE a b) ) => (LIKE a b)	WITHOUT_CLASSIFICATION	0.9999756794599268	WITHOUT_CLASSIFICATION	2.4320540073172925E-5	TEST
// (NOT (IS_NOT_NULL a b) ) => (IS_NULL a b)	WITHOUT_CLASSIFICATION	0.9999824081825748	WITHOUT_CLASSIFICATION	1.7591817425200148E-5	TEST
// (NOT (BETWEEN a b) ) => (NOT_BETWEEN a b)	WITHOUT_CLASSIFICATION	0.9999721528492803	WITHOUT_CLASSIFICATION	2.784715071976484E-5	TEST
// Initialize the error handling delegate.	WITHOUT_CLASSIFICATION	0.9999623430019219	WITHOUT_CLASSIFICATION	3.765699807821786E-5	TEST
//overriden to avoid System.exit	WITHOUT_CLASSIFICATION	0.9999914416861907	WITHOUT_CLASSIFICATION	8.558313809294592E-6	TEST
// if // if // Otherwise, handle the error normally.	WITHOUT_CLASSIFICATION	0.9999949385385716	WITHOUT_CLASSIFICATION	5.061461428444289E-6	TEST
// (NOT (NOT_BETWEEN a b) ) => (BETWEEN a b)	WITHOUT_CLASSIFICATION	0.9999721528492803	WITHOUT_CLASSIFICATION	2.784715071976484E-5	TEST
/* This can never happen because this rule will always eliminate the child NOT.	WITHOUT_CLASSIFICATION	0.9999803313799537	WITHOUT_CLASSIFICATION	1.966862004627681E-5	TEST
// Just add a 'not' parent.	WITHOUT_CLASSIFICATION	0.9999989586130064	WITHOUT_CLASSIFICATION	1.0413869935580383E-6	TEST
// (EQ NULL b) => (IS_NULL b)	WITHOUT_CLASSIFICATION	0.9999898137704945	WITHOUT_CLASSIFICATION	1.0186229505572174E-5	TEST
// (EQ a NULL) => (IS_NULL a)	WITHOUT_CLASSIFICATION	0.9999950919000477	WITHOUT_CLASSIFICATION	4.908099952408406E-6	TEST
// NOTE: Because we're using ASTUtil.createParent(), the tree must be created from the bottom up. // IS EMPTY x => (EXISTS (QUERY (SELECT_FROM (FROM x) ) ) )	WITHOUT_CLASSIFICATION	0.9999995114728156	WITHOUT_CLASSIFICATION	4.885271843801368E-7	TEST
// Add NOT if it's negated.	WITHOUT_CLASSIFICATION	0.9999402745658507	WITHOUT_CLASSIFICATION	5.972543414941101E-5	TEST
// Create nodes that track line and column number.	WITHOUT_CLASSIFICATION	0.9999995563054243	WITHOUT_CLASSIFICATION	4.436945757951777E-7	TEST
// Case 1: Multi token keywords GROUP BY and ORDER BY // The next token ( LT(2) ) should be 'by'... otherwise, this is just an ident.	WITHOUT_CLASSIFICATION	0.9999877997764123	WITHOUT_CLASSIFICATION	1.220022358772614E-5	TEST
// Case 2: The current token is after FROM and before '.'.	WITHOUT_CLASSIFICATION	0.9998960059968969	WITHOUT_CLASSIFICATION	1.0399400310306683E-4	TEST
// This handles HHH-354, where there is a strange property name in a where clause. // If the lookahead contains a DOT then something that isn't an IDENT...	WITHOUT_CLASSIFICATION	0.9999967277401428	WITHOUT_CLASSIFICATION	3.2722598572765435E-6	TEST
// See if the second lookahed token can be an identifier.	WITHOUT_CLASSIFICATION	0.999999430496024	WITHOUT_CLASSIFICATION	5.695039760387208E-7	TEST
// Set it!	WITHOUT_CLASSIFICATION	0.9999978119146864	WITHOUT_CLASSIFICATION	2.188085313623167E-6	TEST
// ignore	WITHOUT_CLASSIFICATION	0.9999983654098049	WITHOUT_CLASSIFICATION	1.6345901950501815E-6	TEST
// strip the " where "	WITHOUT_CLASSIFICATION	0.9999959410900016	WITHOUT_CLASSIFICATION	4.058909998438035E-6	TEST
// Don't really know all the codes required to adequately decipher returned jdbc exceptions here. // simply allow the failure to be eaten and the subsequent insert-selects/deletes should fail	WITHOUT_CLASSIFICATION	0.9999993615399789	WITHOUT_CLASSIFICATION	6.384600211269354E-7	TEST
// at the very least cleanup the data :)	WITHOUT_CLASSIFICATION	0.9999990747975737	WITHOUT_CLASSIFICATION	9.252024263137121E-7	TEST
// First, save off the pertinent ids, as the return value	WITHOUT_CLASSIFICATION	0.9999988369160465	WITHOUT_CLASSIFICATION	1.1630839535012187E-6	TEST
// jdbc params are 1-based	WITHOUT_CLASSIFICATION	0.9999994161209068	WITHOUT_CLASSIFICATION	5.838790931871222E-7	TEST
// jdbc params are 1-based	WITHOUT_CLASSIFICATION	0.9999994161209068	WITHOUT_CLASSIFICATION	5.838790931871222E-7	TEST
// Start performing the updates	WITHOUT_CLASSIFICATION	0.9999867152094767	WITHOUT_CLASSIFICATION	1.3284790523306199E-5	TEST
// First, save off the pertinent ids, saving the number of pertinent ids for return	WITHOUT_CLASSIFICATION	0.9999970775572461	WITHOUT_CLASSIFICATION	2.9224427539967513E-6	TEST
// Start performing the deletes	WITHOUT_CLASSIFICATION	0.9999938063684962	WITHOUT_CLASSIFICATION	6.193631503783826E-6	TEST
// otherwise, everything ok.	WITHOUT_CLASSIFICATION	0.999994666804141	WITHOUT_CLASSIFICATION	5.3331958589957745E-6	TEST
// visit width-first, then depth	WITHOUT_CLASSIFICATION	0.9999936583620885	WITHOUT_CLASSIFICATION	6.341637911445739E-6	TEST
// if the types report logical equivalence, return true...	WITHOUT_CLASSIFICATION	0.999999538714136	WITHOUT_CLASSIFICATION	4.612858639327331E-7	TEST
// otherwise, perform a "deep equivalence" check...	WITHOUT_CLASSIFICATION	0.999999949731554	WITHOUT_CLASSIFICATION	5.026844606329409E-8	TEST
// If there is no WHERE node, make one.	WITHOUT_CLASSIFICATION	0.9999724134362281	WITHOUT_CLASSIFICATION	2.758656377193167E-5	TEST
// inject the WHERE after the parent	WITHOUT_CLASSIFICATION	0.9999900831324927	WITHOUT_CLASSIFICATION	9.916867507232236E-6	TEST
// Never include subclasses for implied from elements.	WITHOUT_CLASSIFICATION	0.9999806940945484	WITHOUT_CLASSIFICATION	1.9305905451555874E-5	TEST
// Moved here from SelectClause [jsd]	WITHOUT_CLASSIFICATION	0.9999992071879177	WITHOUT_CLASSIFICATION	7.928120823744498E-7	TEST
///////////////////////////////////////////////////////////////////////////	WITHOUT_CLASSIFICATION	0.9998743376002098	WITHOUT_CLASSIFICATION	1.2566239979016445E-4	TEST
// Use the table fromElement and the property name to get the array of column names.	WITHOUT_CLASSIFICATION	0.9999996655205476	WITHOUT_CLASSIFICATION	3.34479452418289E-7	TEST
// Set the attributes of the property reference expression.	WITHOUT_CLASSIFICATION	0.9999995824859337	WITHOUT_CLASSIFICATION	4.175140663653888E-7	TEST
// If the uresolved property path isn't set yet, just use the property name.	WITHOUT_CLASSIFICATION	0.9999984913168578	WITHOUT_CLASSIFICATION	1.508683142142107E-6	TEST
// The 'from element' that the property is in.	WITHOUT_CLASSIFICATION	0.9999663003905127	WITHOUT_CLASSIFICATION	3.369960948737734E-5	TEST
// Prepare the left hand side and get the data type.	WITHOUT_CLASSIFICATION	0.9999983283318604	WITHOUT_CLASSIFICATION	1.6716681396109098E-6	TEST
// Prepare the left hand side and get the data type.	WITHOUT_CLASSIFICATION	0.9999983283318604	WITHOUT_CLASSIFICATION	1.6716681396109098E-6	TEST
// If this dot has already been resolved, stop now.	WITHOUT_CLASSIFICATION	0.9999927250673676	WITHOUT_CLASSIFICATION	7.274932632431385E-6	TEST
// If there is no data type for this node, and we're at the end of the path (top most dot node), then // this might be a Java constant.	WITHOUT_CLASSIFICATION	0.9999997971257946	WITHOUT_CLASSIFICATION	2.0287420540836382E-7	TEST
// The property is a collection...	WITHOUT_CLASSIFICATION	0.999999403038985	WITHOUT_CLASSIFICATION	5.969610149191942E-7	TEST
// The property is a component...	WITHOUT_CLASSIFICATION	0.9999992685072704	WITHOUT_CLASSIFICATION	7.314927296251943E-7	TEST
// The property is another class..	WITHOUT_CLASSIFICATION	0.9999958368281497	WITHOUT_CLASSIFICATION	4.163171850240235E-6	TEST
// Otherwise, this is a primitive type.	WITHOUT_CLASSIFICATION	0.9999953499272038	WITHOUT_CLASSIFICATION	4.650072796069363E-6	TEST
//foo.bars.size (also handles deprecated stuff like foo.bars.maxelement for backwardness)	WITHOUT_CLASSIFICATION	0.9999747364021032	WITHOUT_CLASSIFICATION	2.5263597896835694E-5	TEST
// This 'dot' expression now refers to the resulting from element.	WITHOUT_CLASSIFICATION	0.999997430722267	WITHOUT_CLASSIFICATION	2.5692777331121524E-6	TEST
// Always add the collection's query spaces.	WITHOUT_CLASSIFICATION	0.9999999303543993	WITHOUT_CLASSIFICATION	6.964560073663072E-8	TEST
// in non-select queries, the only time we should need to join is if we are in a subquery from clause	WITHOUT_CLASSIFICATION	0.999999966634213	WITHOUT_CLASSIFICATION	3.3365787066379964E-8	TEST
// this is the regression style determination which matches the logic of the classic translator	WITHOUT_CLASSIFICATION	0.9999997774443119	WITHOUT_CLASSIFICATION	2.2255568814455753E-7	TEST
// This 'dot' expression now refers to the resulting from element.	WITHOUT_CLASSIFICATION	0.999997430722267	WITHOUT_CLASSIFICATION	2.5692777331121524E-6	TEST
// even though we might find a pre-existing element by join path, we may not be able to reuse it...	WITHOUT_CLASSIFICATION	0.999999896760507	WITHOUT_CLASSIFICATION	1.0323949290260429E-7	TEST
// NOTE : addDuplicateAlias() already performs nullness checks on the alias.	WITHOUT_CLASSIFICATION	0.9999989074944704	WITHOUT_CLASSIFICATION	1.0925055295464586E-6	TEST
// if the from-clauses are the same, we can be a little more aggressive in terms of what we reuse	WITHOUT_CLASSIFICATION	0.9999999489069062	WITHOUT_CLASSIFICATION	5.10930936983631E-8	TEST
// again, null != null here	WITHOUT_CLASSIFICATION	0.9999849087940137	WITHOUT_CLASSIFICATION	1.5091205986396072E-5	TEST
// If this is an implied join in a from element, then use the impled join type which is part of the // tree parser's state (set by the gramamar actions).	WITHOUT_CLASSIFICATION	0.9999966112086299	WITHOUT_CLASSIFICATION	3.3887913700908984E-6	TEST
// otherwise (subquery case) dont reuse the fromElement if we are processing the from-clause of the subquery	WITHOUT_CLASSIFICATION	0.9999999626389349	WITHOUT_CLASSIFICATION	3.736106510834415E-8	TEST
// we know only the lhs-hand type, so use that	WITHOUT_CLASSIFICATION	0.9999998410000355	WITHOUT_CLASSIFICATION	1.589999645574585E-7	TEST
// the referenced node text is the special 'id'	WITHOUT_CLASSIFICATION	0.999998679721409	WITHOUT_CLASSIFICATION	1.3202785910378614E-6	TEST
// only the identifier property field name can be a reference to the associated entity's PK...	WITHOUT_CLASSIFICATION	0.999999660755648	WITHOUT_CLASSIFICATION	3.39244352024786E-7	TEST
// special shortcut for id properties, skip the join! // this must only occur at the _end_ of a path expression	WITHOUT_CLASSIFICATION	0.999999014407517	WITHOUT_CLASSIFICATION	9.855924829755554E-7	TEST
// Append the new property name onto the unresolved path.	WITHOUT_CLASSIFICATION	0.999999632348968	WITHOUT_CLASSIFICATION	3.676510318832213E-7	TEST
// If the lhs is a collection, use CollectionPropertyMapping	WITHOUT_CLASSIFICATION	0.9999998593651083	WITHOUT_CLASSIFICATION	1.4063489178431698E-7	TEST
// Tell the destination fromElement to 'includeSubclasses'.	WITHOUT_CLASSIFICATION	0.9999969684478892	WITHOUT_CLASSIFICATION	3.0315521106685555E-6	TEST
// Use theta style (for regression) // Move the node up, after the origin node.	WITHOUT_CLASSIFICATION	0.9999992735915666	WITHOUT_CLASSIFICATION	7.264084333823169E-7	TEST
// Don't resolve the node again.	WITHOUT_CLASSIFICATION	0.9999986948699946	WITHOUT_CLASSIFICATION	1.3051300053592503E-6	TEST
// for expected parameter type injection, we expect that the lhs represents // some form of property ref and that the children of the in-list represent // one-or-more params.	WITHOUT_CLASSIFICATION	0.9999998585460564	WITHOUT_CLASSIFICATION	1.414539434946992E-7	TEST
// we need to strip off the embedded parens so that sql-gen does not double these up	WITHOUT_CLASSIFICATION	0.9999999191274856	WITHOUT_CLASSIFICATION	8.087251438752677E-8	TEST
// we have something like : "? [op] rhs"	WITHOUT_CLASSIFICATION	0.9999716080421054	WITHOUT_CLASSIFICATION	2.8391957894570006E-5	TEST
// we have something like : "lhs [op] ?"	WITHOUT_CLASSIFICATION	0.9999564938238539	WITHOUT_CLASSIFICATION	4.350617614610784E-5	TEST
// we know only the rhs-hand type, so use that	WITHOUT_CLASSIFICATION	0.9999998747418183	WITHOUT_CLASSIFICATION	1.252581817148597E-7	TEST
// handle the (assumed) valid cases: // #1 - the only valid datetime addition synatx is one or the other is a datetime (but not both)	WITHOUT_CLASSIFICATION	0.9999997431397446	WITHOUT_CLASSIFICATION	2.568602554364918E-7	TEST
// one or the other needs to be a datetime for us to get into this method in the first place...	WITHOUT_CLASSIFICATION	0.9999992270253992	WITHOUT_CLASSIFICATION	7.729746007353344E-7	TEST
// #3 - note that this is also true of "datetime - :param"...	WITHOUT_CLASSIFICATION	0.9999985113020954	WITHOUT_CLASSIFICATION	1.488697904636816E-6	TEST
// #2	WITHOUT_CLASSIFICATION	0.9999921532472141	WITHOUT_CLASSIFICATION	7.846752785746694E-6	TEST
// Generate the inner join -- The elements need to be joined to the collection they are in.	WITHOUT_CLASSIFICATION	0.9999999341005658	WITHOUT_CLASSIFICATION	6.589943421636112E-8	TEST
// nothing to do	WITHOUT_CLASSIFICATION	0.9999977288183669	WITHOUT_CLASSIFICATION	2.2711816330722216E-6	TEST
// The 'from element' that represents the elements of the collection.	WITHOUT_CLASSIFICATION	0.999999684924302	WITHOUT_CLASSIFICATION	3.150756979634436E-7	TEST
// Add the condition to the join sequence that qualifies the indexed element.	WITHOUT_CLASSIFICATION	0.9999999322730656	WITHOUT_CLASSIFICATION	6.772693440493681E-8	TEST
// Sometimes use the element table alias, sometimes use the... umm... collection table alias (many to many)	WITHOUT_CLASSIFICATION	0.9999999292480681	WITHOUT_CLASSIFICATION	7.075193194962445E-8	TEST
// Now, set the text for this node.  It should be the element columns.	WITHOUT_CLASSIFICATION	0.9999951257601148	WITHOUT_CLASSIFICATION	4.874239885107632E-6	TEST
// Get the function return value type, based on the type of the first argument.	WITHOUT_CLASSIFICATION	0.9999999647667731	WITHOUT_CLASSIFICATION	3.5233226976575805E-8	TEST
// This will call initialize(tok)!	WITHOUT_CLASSIFICATION	0.9999920903196415	WITHOUT_CLASSIFICATION	7.90968035844509E-6	TEST
// mutation depends on the types of nodes invloved...	WITHOUT_CLASSIFICATION	0.9999999062306592	WITHOUT_CLASSIFICATION	9.376934092115253E-8	TEST
// "pass along" our initial embedded parameter node(s) to the first generated // sql fragment so that it can be handled later for parameter binding...	WITHOUT_CLASSIFICATION	0.9999984655134185	WITHOUT_CLASSIFICATION	1.5344865815428361E-6	TEST
// logic operators by definition resolve to booleans	WITHOUT_CLASSIFICATION	0.9999998337082692	WITHOUT_CLASSIFICATION	1.6629173092221736E-7	TEST
// Generated select expressions are already resolved, nothing to do.	WITHOUT_CLASSIFICATION	0.9999999427312879	WITHOUT_CLASSIFICATION	5.726871214008918E-8	TEST
// The path may be a reference to an alias defined in the parent query.	WITHOUT_CLASSIFICATION	0.9999983298363275	WITHOUT_CLASSIFICATION	1.6701636725029547E-6	TEST
// The HQL class alias refers to the class name.	WITHOUT_CLASSIFICATION	0.9999989461776687	WITHOUT_CLASSIFICATION	1.0538223312830627E-6	TEST
// Associate the table alias with the element.	WITHOUT_CLASSIFICATION	0.9999970943395273	WITHOUT_CLASSIFICATION	2.905660472709607E-6	TEST
// try the parent FromClause...	WITHOUT_CLASSIFICATION	0.999999363672813	WITHOUT_CLASSIFICATION	6.363271870813002E-7	TEST
// Add the new node to the map so that we don't create it twice.	WITHOUT_CLASSIFICATION	0.9999998717853908	WITHOUT_CLASSIFICATION	1.2821460909691727E-7	TEST
// Make sure that all from elements registered with this FROM clause are actually in the AST.	WITHOUT_CLASSIFICATION	0.999997565557305	WITHOUT_CLASSIFICATION	2.434442694990864E-6	TEST
// Invoke setScalarColumnText on each constructor argument.	WITHOUT_CLASSIFICATION	0.9999999180391945	WITHOUT_CLASSIFICATION	8.196080541219578E-8	TEST
// Collect the select expressions, skip the first child because it is the class name.	WITHOUT_CLASSIFICATION	0.9999998640773788	WITHOUT_CLASSIFICATION	1.359226211844271E-7	TEST
// return an empty Type array	WITHOUT_CLASSIFICATION	0.9999986901383687	WITHOUT_CLASSIFICATION	1.3098616313076995E-6	TEST
// Constructors are always considered scalar results.	WITHOUT_CLASSIFICATION	0.9999999584351678	WITHOUT_CLASSIFICATION	4.156483214869858E-8	TEST
// this is the exception returned by ReflectHelper.getConstructor() if it cannot // locate an appropriate constructor	WITHOUT_CLASSIFICATION	0.9999998321516735	WITHOUT_CLASSIFICATION	1.6784832642463453E-7	TEST
// if there is no order by, make one	WITHOUT_CLASSIFICATION	0.9999882068202837	WITHOUT_CLASSIFICATION	1.1793179716282455E-5	TEST
// Find the WHERE; if there is no WHERE, find the FROM...	WITHOUT_CLASSIFICATION	0.9999841504376397	WITHOUT_CLASSIFICATION	1.5849562360310388E-5	TEST
// Now, inject the newly built ORDER BY into the tree	WITHOUT_CLASSIFICATION	0.999998874597025	WITHOUT_CLASSIFICATION	1.1254029750305374E-6	TEST
// ParameterContainer impl ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.999995918016046	WITHOUT_CLASSIFICATION	4.081983953920384E-6	TEST
// logic operators by definition resolve to boolean.	WITHOUT_CLASSIFICATION	0.9999997518138289	WITHOUT_CLASSIFICATION	2.481861711083722E-7	TEST
// Render the identifier select fragment using the table alias.	WITHOUT_CLASSIFICATION	0.9999996581960325	WITHOUT_CLASSIFICATION	3.418039674488618E-7	TEST
// Class names in the FROM clause result in a JoinSequence (the old FromParser does this).	WITHOUT_CLASSIFICATION	0.9999998536843608	WITHOUT_CLASSIFICATION	1.4631563911145568E-7	TEST
// For many-to-many joins, use the tablename from the queryable collection for the default text.	WITHOUT_CLASSIFICATION	0.9999999540606014	WITHOUT_CLASSIFICATION	4.5939398582478975E-8	TEST
// Otherwise, use the property mapping.	WITHOUT_CLASSIFICATION	0.9999978089705858	WITHOUT_CLASSIFICATION	2.1910294143063808E-6	TEST
// should be safe to only ever expect EntityPersister references here	WITHOUT_CLASSIFICATION	0.9999960608152092	WITHOUT_CLASSIFICATION	3.939184790708202E-6	TEST
// If the property is a special collection property name, return a CollectionPropertyMapping.	WITHOUT_CLASSIFICATION	0.9999998766650642	WITHOUT_CLASSIFICATION	1.2333493585288392E-7	TEST
// Collection of components.	WITHOUT_CLASSIFICATION	0.9999999626222202	WITHOUT_CLASSIFICATION	3.7377779713133414E-8	TEST
// make sure the lhs is "assignable"...	WITHOUT_CLASSIFICATION	0.9999762947075052	WITHOUT_CLASSIFICATION	2.3705292494757772E-5	TEST
// false indicates to not generate parens around the assignment	WITHOUT_CLASSIFICATION	0.9999978880788437	WITHOUT_CLASSIFICATION	2.1119211562685414E-6	TEST
// Register the FromElement with the FROM clause, now that we have the names and aliases.	WITHOUT_CLASSIFICATION	0.9999922653121552	WITHOUT_CLASSIFICATION	7.734687844779758E-6	TEST
// currently allowed...	WITHOUT_CLASSIFICATION	0.9999991120957447	WITHOUT_CLASSIFICATION	8.879042554808391E-7	TEST
// HHH-276 : implied joins in a subselect where clause - The destination needs to be added // to the destination's from clause. // Not sure if this is will fix everything, but it works.	WITHOUT_CLASSIFICATION	0.9999990216591442	WITHOUT_CLASSIFICATION	9.783408558368562E-7	TEST
//return classAlias == null ? className : classAlias;	WITHOUT_CLASSIFICATION	0.9999969449093479	WITHOUT_CLASSIFICATION	3.055090652135932E-6	TEST
// This is an explicit FROM element.	WITHOUT_CLASSIFICATION	0.9998654887228707	WITHOUT_CLASSIFICATION	1.345112771292396E-4	TEST
// ParameterContainer impl ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.999995918016046	WITHOUT_CLASSIFICATION	4.081983953920384E-6	TEST
// Fetch can't be used with scroll() or iterate().	WITHOUT_CLASSIFICATION	0.9999973056450416	WITHOUT_CLASSIFICATION	2.6943549582574903E-6	TEST
// If it's not implied or it is implied and it's a many to many join where the target wasn't found.	WITHOUT_CLASSIFICATION	0.9999875034047372	WITHOUT_CLASSIFICATION	1.2496595262783E-5	TEST
// Since this is an explicit FROM element, it can't be implied in the FROM clause.	WITHOUT_CLASSIFICATION	0.9999909530482162	WITHOUT_CLASSIFICATION	9.04695178385671E-6	TEST
// Do nothing, eplicit from elements are *always* in the projection list.	WITHOUT_CLASSIFICATION	0.9999998797518609	WITHOUT_CLASSIFICATION	1.2024813914912855E-7	TEST
// propertyName refers to something like collection.size...	WITHOUT_CLASSIFICATION	0.9999982488744276	WITHOUT_CLASSIFICATION	1.751125572396986E-6	TEST
// property name is a sub-path of a component...	WITHOUT_CLASSIFICATION	0.9999999593146739	WITHOUT_CLASSIFICATION	4.0685326111431513E-8	TEST
// Always add the collection's query spaces.	WITHOUT_CLASSIFICATION	0.9999999303543993	WITHOUT_CLASSIFICATION	6.964560073663072E-8	TEST
// nothing to do; even if the operand is a parameter, no way we could // infer an appropriate expected type here	WITHOUT_CLASSIFICATION	0.9999988903711863	WITHOUT_CLASSIFICATION	1.1096288136536692E-6	TEST
// logic operators by definition resolve to booleans	WITHOUT_CLASSIFICATION	0.9999998337082692	WITHOUT_CLASSIFICATION	1.6629173092221736E-7	TEST
// DotNode uses null here...	WITHOUT_CLASSIFICATION	0.9999917917262463	WITHOUT_CLASSIFICATION	8.20827375360842E-6	TEST
// We represent a from-clause alias	WITHOUT_CLASSIFICATION	0.9999997919153987	WITHOUT_CLASSIFICATION	2.0808460129727215E-7	TEST
// we are the LHS of the DOT representing a naked comp-prop-ref	WITHOUT_CLASSIFICATION	0.9999996921081933	WITHOUT_CLASSIFICATION	3.078918067285727E-7	TEST
// we are the RHS of the DOT representing a naked comp-prop-ref	WITHOUT_CLASSIFICATION	0.9999996724096578	WITHOUT_CLASSIFICATION	3.275903421763341E-7	TEST
// we represent a naked (simple) prop-ref	WITHOUT_CLASSIFICATION	0.9999951078820607	WITHOUT_CLASSIFICATION	4.892117939397697E-6	TEST
// EARLY EXIT!!!  return so the resolve call explicitly coming from DotNode can // resolve this...	WITHOUT_CLASSIFICATION	0.9999997869150612	WITHOUT_CLASSIFICATION	2.130849388690296E-7	TEST
// assume this ident's text does *not* refer to a property on the given persister	WITHOUT_CLASSIFICATION	0.9999988997922772	WITHOUT_CLASSIFICATION	1.1002077227775927E-6	TEST
// just ignore it for now, it'll get resolved later...	WITHOUT_CLASSIFICATION	0.9999975746964722	WITHOUT_CLASSIFICATION	2.4253035278691084E-6	TEST
// This is not actually a constant, but a reference to FROM element.	WITHOUT_CLASSIFICATION	0.999999290669474	WITHOUT_CLASSIFICATION	7.093305259442423E-7	TEST
// check to see if our "propPath" actually // represents a property on the persister	WITHOUT_CLASSIFICATION	0.9999999104986835	WITHOUT_CLASSIFICATION	8.950131646451836E-8	TEST
// these pieces are needed for usage in select clause	WITHOUT_CLASSIFICATION	0.9999998455681218	WITHOUT_CLASSIFICATION	1.5443187813543074E-7	TEST
// used to set the type of the parent dot node	WITHOUT_CLASSIFICATION	0.9999996990386331	WITHOUT_CLASSIFICATION	3.009613668890149E-7	TEST
// assume we do *not* refer to a property on the given persister	WITHOUT_CLASSIFICATION	0.9999996874426904	WITHOUT_CLASSIFICATION	3.125573095849132E-7	TEST
// assume we do *not* refer to a property on the given persister	WITHOUT_CLASSIFICATION	0.9999996874426904	WITHOUT_CLASSIFICATION	3.125573095849132E-7	TEST
// naked property-refs cannot be used with an aliased from element	WITHOUT_CLASSIFICATION	0.9999979016435161	WITHOUT_CLASSIFICATION	2.0983564837890585E-6	TEST
// this piece is needed for usage in select clause	WITHOUT_CLASSIFICATION	0.9999992361575841	WITHOUT_CLASSIFICATION	7.638424158158444E-7	TEST
// do *not* over-write the column text, as that has already been // "rendered" during resolve	WITHOUT_CLASSIFICATION	0.9999999713875473	WITHOUT_CLASSIFICATION	2.8612452747500157E-8	TEST
// for some reason the antlr.CommonAST initialization routines force // this method to get called twice.  The first time with an empty string	WITHOUT_CLASSIFICATION	0.9999977594354562	WITHOUT_CLASSIFICATION	2.240564543663715E-6	TEST
// Look up class name using the first identifier in the path.	WITHOUT_CLASSIFICATION	0.9999994457755778	WITHOUT_CLASSIFICATION	5.542244223090731E-7	TEST
// Add to the query spaces.	WITHOUT_CLASSIFICATION	0.9999992224959315	WITHOUT_CLASSIFICATION	7.775040685237624E-7	TEST
// If the from element isn't in the same clause, create a new from element.	WITHOUT_CLASSIFICATION	0.9999999701066662	WITHOUT_CLASSIFICATION	2.9893333830795774E-8	TEST
// This is the root level node. // Generate an explicit from clause at the root.	WITHOUT_CLASSIFICATION	0.9999934549207837	WITHOUT_CLASSIFICATION	6.545079216174455E-6	TEST
// Correlated subqueries create 'special' implied from nodes // because correlated subselects can't use an ANSI-style join	WITHOUT_CLASSIFICATION	0.9999999203151398	WITHOUT_CLASSIFICATION	7.968486021897862E-8	TEST
// super-duper-classic-parser-regression-testing-mojo-magic...	WITHOUT_CLASSIFICATION	0.99999872417727	WITHOUT_CLASSIFICATION	1.2758227300313246E-6	TEST
// A collection of entities...	WITHOUT_CLASSIFICATION	0.9999999197860541	WITHOUT_CLASSIFICATION	8.021394586866394E-8	TEST
// A collection of components...	WITHOUT_CLASSIFICATION	0.9999999496966775	WITHOUT_CLASSIFICATION	5.0303322585941825E-8	TEST
// A collection of scalar elements...	WITHOUT_CLASSIFICATION	0.9999999623715426	WITHOUT_CLASSIFICATION	3.7628457368667234E-8	TEST
// according to both the ANSI-SQL and EJB3 specs, trim can either take // exactly one parameter or a variable number of parameters between 1 and 4. // from the SQL spec: // // <trim function> ::= //      TRIM <left paren> <trim operands> <right paren> // // <trim operands> ::= //      [ [ <trim specification> ] [ <trim character> ] FROM ] <trim source> // // <trim specification> ::= //      LEADING //      | TRAILING //      | BOTH // // If only <trim specification> is omitted, BOTH is assumed; // if <trim character> is omitted, space is assumed	WITHOUT_CLASSIFICATION	0.9999998763200907	WITHOUT_CLASSIFICATION	1.2367990929850915E-7	TEST
// Don't include sub-classes for implied collection joins or subquery joins.	WITHOUT_CLASSIFICATION	0.999999514178404	WITHOUT_CLASSIFICATION	4.85821595952133E-7	TEST
// Treat explict from elements in sub-queries properly.	WITHOUT_CLASSIFICATION	0.9999993160919354	WITHOUT_CLASSIFICATION	6.839080646993543E-7	TEST
//	WITHOUT_CLASSIFICATION	0.9999527008540617	WITHOUT_CLASSIFICATION	4.729914593835468E-5	TEST
// the "root from-element" in correlated subqueries do need this piece	WITHOUT_CLASSIFICATION	0.9999993398227464	WITHOUT_CLASSIFICATION	6.601772535412657E-7	TEST
// Create the FROM element for the target (the elements of the collection).	WITHOUT_CLASSIFICATION	0.9999997236984413	WITHOUT_CLASSIFICATION	2.7630155879987396E-7	TEST
// If the join is implied, then don't include sub-classes on the element.	WITHOUT_CLASSIFICATION	0.999988546847383	WITHOUT_CLASSIFICATION	1.1453152616927795E-5	TEST
// Overridden informational metadata ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999998166235341	WITHOUT_CLASSIFICATION	1.8337646600056628E-7	TEST
// The associated entity is implied, but it must be included in the FROM. // The collection alias is the role.	WITHOUT_CLASSIFICATION	0.9999953205282812	WITHOUT_CLASSIFICATION	4.679471718859049E-6	TEST
// Tag this node as a JOIN. // Don't include subclasses in the join. // This is a clollection join.	WITHOUT_CLASSIFICATION	0.9999996520984996	WITHOUT_CLASSIFICATION	3.479015003565437E-7	TEST
// Get the class name of the associated entity.	WITHOUT_CLASSIFICATION	0.9999991799598592	WITHOUT_CLASSIFICATION	8.200401408934228E-7	TEST
//  origin, path, implied, columns, classAlias,	WITHOUT_CLASSIFICATION	0.9999995597442642	WITHOUT_CLASSIFICATION	4.4025573576143115E-7	TEST
/*implied*/	WITHOUT_CLASSIFICATION	0.9998629409991241	WITHOUT_CLASSIFICATION	1.3705900087595074E-4	TEST
// For implied many-to-many, just add the end join.	WITHOUT_CLASSIFICATION	0.9999708884441558	WITHOUT_CLASSIFICATION	2.911155584413329E-5	TEST
// Overridden informational metadata ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999998166235341	WITHOUT_CLASSIFICATION	1.8337646600056628E-7	TEST
// Overridden informational metadata ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999998166235341	WITHOUT_CLASSIFICATION	1.8337646600056628E-7	TEST
// the standard SQL function name is current_timestamp...	WITHOUT_CLASSIFICATION	0.9999990074680866	WITHOUT_CLASSIFICATION	9.925319135430935E-7	TEST
// This causes the factory to instantiate the desired class.	WITHOUT_CLASSIFICATION	0.9999998074414482	WITHOUT_CLASSIFICATION	1.9255855186889766E-7	TEST
//private Type[] sqlResultTypes;	WITHOUT_CLASSIFICATION	0.9999930402079306	WITHOUT_CLASSIFICATION	6.959792069494174E-6	TEST
// Frontbase has no known variation of a "SELECT ... FOR UPDATE" syntax...	WITHOUT_CLASSIFICATION	0.9999999903499315	WITHOUT_CLASSIFICATION	9.650068504204434E-9	TEST
/*	WITHOUT_CLASSIFICATION	0.9998653805382814	WITHOUT_CLASSIFICATION	1.3461946171863497E-4	TEST
/*public Type[] getSqlResultTypes() {	WITHOUT_CLASSIFICATION	0.9999438412952716	WITHOUT_CLASSIFICATION	5.6158704728302576E-5	TEST
// First, collect all of the select expressions. // NOTE: This must be done *before* invoking setScalarColumnText() because setScalarColumnText() // changes the AST!!!	WITHOUT_CLASSIFICATION	0.999999890210047	WITHOUT_CLASSIFICATION	1.0978995298371229E-7	TEST
// First allow the actual type to control the return value. (the actual underlying sqltype could actually be different)	WITHOUT_CLASSIFICATION	0.9999998927677218	WITHOUT_CLASSIFICATION	1.0723227813347207E-7	TEST
//sqlResultTypeList.addAll( constructorArgumentTypeList );	WITHOUT_CLASSIFICATION	0.9999996036070765	WITHOUT_CLASSIFICATION	3.9639292347000877E-7	TEST
// If the data type is not an association type, it could not have been in the FROM clause.	WITHOUT_CLASSIFICATION	0.999999412290374	WITHOUT_CLASSIFICATION	5.87709626032174E-7	TEST
//sqlResultTypeList.add( type );	WITHOUT_CLASSIFICATION	0.9999895024712967	WITHOUT_CLASSIFICATION	1.0497528703271411E-5	TEST
// Always add the type to the return type list.	WITHOUT_CLASSIFICATION	0.9999994335319261	WITHOUT_CLASSIFICATION	5.664680738788424E-7	TEST
// add the fetched entities	WITHOUT_CLASSIFICATION	0.9999984122280761	WITHOUT_CLASSIFICATION	1.5877719239966175E-6	TEST
// Get ready to start adding nodes.	WITHOUT_CLASSIFICATION	0.9999982119943945	WITHOUT_CLASSIFICATION	1.7880056055201263E-6	TEST
// function support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999981536201438	WITHOUT_CLASSIFICATION	1.8463798561916236E-6	TEST
// If there are any scalars (non-entities) selected, render the select column aliases.	WITHOUT_CLASSIFICATION	0.999999657458302	WITHOUT_CLASSIFICATION	3.425416979278055E-7	TEST
/*sqlResultTypeList,*/	WITHOUT_CLASSIFICATION	0.9999568924153309	WITHOUT_CLASSIFICATION	4.310758466915684E-5	TEST
/*ArrayList sqlResultTypeList,*/	WITHOUT_CLASSIFICATION	0.9999865829081386	WITHOUT_CLASSIFICATION	1.3417091861441736E-5	TEST
//sqlResultTypes = ( Type[] ) sqlResultTypeList.toArray( new Type[sqlResultTypeList.size()] );	WITHOUT_CLASSIFICATION	0.9999981446838346	WITHOUT_CLASSIFICATION	1.8553161653657039E-6	TEST
// lock acquisition support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999992640518467	WITHOUT_CLASSIFICATION	7.359481532979998E-7	TEST
//TODO:	WITHOUT_CLASSIFICATION	0.9969520720836396	WITHOUT_CLASSIFICATION	0.0030479279163604105	TEST
// Add the type to the list of returned sqlResultTypes.	WITHOUT_CLASSIFICATION	0.9999992350394143	WITHOUT_CLASSIFICATION	7.649605855748816E-7	TEST
// Generate an 2d array of column names, the first dimension is parallel with the // return types array.  The second dimension is the list of column names for each // type.	WITHOUT_CLASSIFICATION	0.9999997723504839	WITHOUT_CLASSIFICATION	2.2764951625665026E-7	TEST
// Generate the select expression.	WITHOUT_CLASSIFICATION	0.9999994382240579	WITHOUT_CLASSIFICATION	5.617759421487121E-7	TEST
// union subclass support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999987393793801	WITHOUT_CLASSIFICATION	1.2606206199094421E-6	TEST
// Skip 'DISTINCT' and 'ALL', so we return the first expression node.	WITHOUT_CLASSIFICATION	0.9999997379356753	WITHOUT_CLASSIFICATION	2.6206432475901603E-7	TEST
// Create SQL_TOKEN nodes for the columns.	WITHOUT_CLASSIFICATION	0.9999993005653063	WITHOUT_CLASSIFICATION	6.994346937846127E-7	TEST
// Generate the property select tokens.	WITHOUT_CLASSIFICATION	0.9999980645238079	WITHOUT_CLASSIFICATION	1.9354761921976814E-6	TEST
// Get the function name node.	WITHOUT_CLASSIFICATION	0.9999995680365612	WITHOUT_CLASSIFICATION	4.3196343875800924E-7	TEST
// Method expressions in a SELECT should always be considered scalar.	WITHOUT_CLASSIFICATION	0.999999988803462	WITHOUT_CLASSIFICATION	1.1196537999286515E-8	TEST
// If this is 'elements' then create a new FROM element.	WITHOUT_CLASSIFICATION	0.9999948563884484	WITHOUT_CLASSIFICATION	5.143611551591142E-6	TEST
// Not elements(x)	WITHOUT_CLASSIFICATION	0.9999946761034657	WITHOUT_CLASSIFICATION	5.323896534322672E-6	TEST
// Dialect function	WITHOUT_CLASSIFICATION	0.9999992587000003	WITHOUT_CLASSIFICATION	7.412999997011664E-7	TEST
// Collection 'property function'	WITHOUT_CLASSIFICATION	0.9999996013020525	WITHOUT_CLASSIFICATION	3.986979474676957E-7	TEST
// If the constant is an IDENT, figure out what it means...	WITHOUT_CLASSIFICATION	0.9999991176019555	WITHOUT_CLASSIFICATION	8.823980444833857E-7	TEST
// IDENT is a class alias in the FROM.	WITHOUT_CLASSIFICATION	0.9999921774880771	WITHOUT_CLASSIFICATION	7.822511922766736E-6	TEST
// Resolve to an identity column.	WITHOUT_CLASSIFICATION	0.9999996185744976	WITHOUT_CLASSIFICATION	3.81425502330896E-7	TEST
// Otherwise, it's a literal.	WITHOUT_CLASSIFICATION	0.9999949941285253	WITHOUT_CLASSIFICATION	5.0058714746717194E-6	TEST
// the name of an entity class	WITHOUT_CLASSIFICATION	0.9999996720206438	WITHOUT_CLASSIFICATION	3.2797935626944086E-7	TEST
//the class discriminator value	WITHOUT_CLASSIFICATION	0.9999971986207052	WITHOUT_CLASSIFICATION	2.8013792947963677E-6	TEST
// Chop off the rest of the tree.	WITHOUT_CLASSIFICATION	0.9999657940595332	WITHOUT_CLASSIFICATION	3.420594046681549E-5	TEST
// Add a space before the display text.	WITHOUT_CLASSIFICATION	0.9999995895525786	WITHOUT_CLASSIFICATION	4.1044742140887476E-7	TEST
// Find or create the WHERE clause	WITHOUT_CLASSIFICATION	0.9999994203265687	WITHOUT_CLASSIFICATION	5.796734312112234E-7	TEST
// child == parent.getFirstChild()	WITHOUT_CLASSIFICATION	0.9999996065599634	WITHOUT_CLASSIFICATION	3.934400365507476E-7	TEST
// Find or create the WHERE clause	WITHOUT_CLASSIFICATION	0.9999994203265687	WITHOUT_CLASSIFICATION	5.796734312112234E-7	TEST
// Filter conditions need to be inserted before the HQL where condition and the // theta join node.  This is because org.hibernate.loader.Loader binds the filter parameters first, // then it binds all the HQL query parameters, see org.hibernate.loader.Loader.processFilterParameters().	WITHOUT_CLASSIFICATION	0.9999998088501312	WITHOUT_CLASSIFICATION	1.9114986885451215E-7	TEST
// Put the FILTERS node before the HQL condition and theta joins	WITHOUT_CLASSIFICATION	0.9999999004450352	WITHOUT_CLASSIFICATION	9.955496482318935E-8	TEST
// add the current fragment to the FILTERS node	WITHOUT_CLASSIFICATION	0.9999988977721227	WITHOUT_CLASSIFICATION	1.102227877328416E-6	TEST
// Create a new THETA_JOINS node as a parent of all filters	WITHOUT_CLASSIFICATION	0.9999998721370768	WITHOUT_CLASSIFICATION	1.2786292325994133E-7	TEST
// Put the THETA_JOINS node before the HQL condition, after the filters.	WITHOUT_CLASSIFICATION	0.9999997129248498	WITHOUT_CLASSIFICATION	2.8707515018355133E-7	TEST
// add the current fragment to the THETA_JOINS node	WITHOUT_CLASSIFICATION	0.9999988383077655	WITHOUT_CLASSIFICATION	1.1616922344131787E-6	TEST
// First, try to get the persister using the given name directly.	WITHOUT_CLASSIFICATION	0.9999952673170504	WITHOUT_CLASSIFICATION	4.732682949676527E-6	TEST
// unable to locate it using this name	WITHOUT_CLASSIFICATION	0.9999978682171465	WITHOUT_CLASSIFICATION	2.13178285349045E-6	TEST
// If that didn't work, try using the 'import' name.	WITHOUT_CLASSIFICATION	0.9999949383280663	WITHOUT_CLASSIFICATION	5.0616719336432655E-6	TEST
// Implicit joins use theta style (WHERE pk = fk), explicit joins use JOIN (after from)	WITHOUT_CLASSIFICATION	0.9999975013092207	WITHOUT_CLASSIFICATION	2.498690779189811E-6	TEST
// locate the registered function by the given name	WITHOUT_CLASSIFICATION	0.9999993217239462	WITHOUT_CLASSIFICATION	6.782760536799583E-7	TEST
// determine the type of the first argument...	WITHOUT_CLASSIFICATION	0.9999996772761248	WITHOUT_CLASSIFICATION	3.2272387511847306E-7	TEST
// Use the DOT node to emit the first column name. // Create the column names, folled by the column aliases.	WITHOUT_CLASSIFICATION	0.9999979122145316	WITHOUT_CLASSIFICATION	2.08778546839801E-6	TEST
// Note: this simply constructs a "raw" SQL_TOKEN representing the // where fragment and injects this into the tree.  This "works"; // however it is probably not the best long-term solution. // // At some point we probably want to apply an additional grammar to // properly tokenize this where fragment into constituent parts // focused on the operators embedded within the fragment.	WITHOUT_CLASSIFICATION	0.9999996753659118	WITHOUT_CLASSIFICATION	3.246340881702565E-7	TEST
// Append the text of the current node.	WITHOUT_CLASSIFICATION	0.9999993433750752	WITHOUT_CLASSIFICATION	6.566249247908574E-7	TEST
// If the node has a first child, recurse into the first child.	WITHOUT_CLASSIFICATION	0.9999996779351215	WITHOUT_CLASSIFICATION	3.220648785120442E-7	TEST
// If there is a second child (RHS), recurse into that child.	WITHOUT_CLASSIFICATION	0.9999996002893978	WITHOUT_CLASSIFICATION	3.997106022606699E-7	TEST
// Iterate through the alias,JoinSequence pairs and generate SQL token nodes.	WITHOUT_CLASSIFICATION	0.9999991574363042	WITHOUT_CLASSIFICATION	8.425636959245581E-7	TEST
// If the from element represents a JOIN_FRAGMENT and it is // a theta-style join, convert its type from JOIN_FRAGMENT // to FROM_FRAGMENT	WITHOUT_CLASSIFICATION	0.9999990144236437	WITHOUT_CLASSIFICATION	9.85576356295434E-7	TEST
// this is used during SqlGenerator processing	WITHOUT_CLASSIFICATION	0.9999962871523195	WITHOUT_CLASSIFICATION	3.712847680464081E-6	TEST
// If there is a FROM fragment and the FROM element is an explicit, then add the from part.	WITHOUT_CLASSIFICATION	0.9999490426704416	WITHOUT_CLASSIFICATION	5.0957329558321835E-5	TEST
/*&& StringHelper.isNotEmpty( frag )*/	WITHOUT_CLASSIFICATION	0.9999963675789256	WITHOUT_CLASSIFICATION	3.6324210744590187E-6	TEST
// The FROM fragment will probably begin with ', '.  Remove this if it is present.	WITHOUT_CLASSIFICATION	0.9999649830586358	WITHOUT_CLASSIFICATION	3.501694136424699E-5	TEST
// This uses a PathExpressionParser but notice that compound paths are not valid, // only bare names and simple paths:	WITHOUT_CLASSIFICATION	0.9999999752606039	WITHOUT_CLASSIFICATION	2.473939609739432E-8	TEST
// SELECT p FROM p IN CLASS eg.Person ORDER BY p.Name, p.Address, p	WITHOUT_CLASSIFICATION	0.9999960792393309	WITHOUT_CLASSIFICATION	3.9207606691297885E-6	TEST
// The reason for this is SQL doesn't let you sort by an expression you are // not returning in the result set.	WITHOUT_CLASSIFICATION	0.999997337031833	WITHOUT_CLASSIFICATION	2.6629681670482063E-6	TEST
//named query parameter	WITHOUT_CLASSIFICATION	0.9999899105578247	WITHOUT_CLASSIFICATION	1.0089442175196599E-5	TEST
//default mode	WITHOUT_CLASSIFICATION	0.9999929389874558	WITHOUT_CLASSIFICATION	7.061012544147222E-6	TEST
//QueryJoinFragment join = q.createJoinFragment(useThetaStyleJoin);	WITHOUT_CLASSIFICATION	0.999998988301319	WITHOUT_CLASSIFICATION	1.011698680993667E-6	TEST
//reset the dotcount (but not the path) //after reset!	WITHOUT_CLASSIFICATION	0.999987798266255	WITHOUT_CLASSIFICATION	1.2201733745017926E-5	TEST
//after reset!	WITHOUT_CLASSIFICATION	0.9999465525704593	WITHOUT_CLASSIFICATION	5.344742954071474E-5	TEST
// we don't need to worry about any condition in the ON clause // here (toFromFragmentString), since anything in the ON condition // is already applied to the whole query	WITHOUT_CLASSIFICATION	0.9999999197301042	WITHOUT_CLASSIFICATION	8.026989576659534E-8	TEST
// bit_length feels a bit broken to me. We have to cast to char in order to // pass when a numeric value is supplied. But of course the answers given will // be wildly different for these two datatypes. 1234.5678 will be 9 bytes as // a char string but will be 8 or 16 bytes as a true numeric. // Jay Nance 2006-09-22	WITHOUT_CLASSIFICATION	0.9999995360070896	WITHOUT_CLASSIFICATION	4.6399291041575287E-7	TEST
// dotcount>=2	WITHOUT_CLASSIFICATION	0.9999989624227507	WITHOUT_CLASSIFICATION	1.0375772493152682E-6	TEST
// Do the corresponding RHS	WITHOUT_CLASSIFICATION	0.9999993652414606	WITHOUT_CLASSIFICATION	6.347585393433166E-7	TEST
//if its "id"	WITHOUT_CLASSIFICATION	0.9999864333498982	WITHOUT_CLASSIFICATION	1.3566650101672141E-5	TEST
//or its the id property name	WITHOUT_CLASSIFICATION	0.9999877024659904	WITHOUT_CLASSIFICATION	1.2297534009473154E-5	TEST
//join = q.createJoinFragment(useThetaStyleJoin);	WITHOUT_CLASSIFICATION	0.9999993258863884	WITHOUT_CLASSIFICATION	6.741136115458023E-7	TEST
//important!!	WITHOUT_CLASSIFICATION	0.9999706097616444	WITHOUT_CLASSIFICATION	2.939023835557283E-5	TEST
//String[] keyCols = collPersister.getKeyColumnNames();	WITHOUT_CLASSIFICATION	0.9999941223840116	WITHOUT_CLASSIFICATION	5.877615988402692E-6	TEST
// an association	WITHOUT_CLASSIFICATION	0.9999958147805736	WITHOUT_CLASSIFICATION	4.1852194263290225E-6	TEST
//allow index() function:	WITHOUT_CLASSIFICATION	0.9999987414630118	WITHOUT_CLASSIFICATION	1.2585369882681673E-6	TEST
// here assume SQLServer2005 using snapshot isolation, which does not have this problem	WITHOUT_CLASSIFICATION	0.9999992341558182	WITHOUT_CLASSIFICATION	7.658441817805684E-7	TEST
// The reason for this is SQL doesn't let you sort by an expression you are // not returning in the result set.	WITHOUT_CLASSIFICATION	0.999997337031833	WITHOUT_CLASSIFICATION	2.6629681670482063E-6	TEST
//many-to-many	WITHOUT_CLASSIFICATION	0.9999664346794086	WITHOUT_CLASSIFICATION	3.3565320591283116E-5	TEST
// collections of values	WITHOUT_CLASSIFICATION	0.9999999253994687	WITHOUT_CLASSIFICATION	7.460053129513234E-8	TEST
//opening paren in new Foo ( ... )	WITHOUT_CLASSIFICATION	0.9999973825329712	WITHOUT_CLASSIFICATION	2.6174670288643422E-6	TEST
//if we are inside a new Result(), but not inside a nested function	WITHOUT_CLASSIFICATION	0.9999993393998221	WITHOUT_CLASSIFICATION	6.606001778865688E-7	TEST
//special case	WITHOUT_CLASSIFICATION	0.9999968551431468	WITHOUT_CLASSIFICATION	3.1448568531777654E-6	TEST
// the name of an SQL function	WITHOUT_CLASSIFICATION	0.999999525538748	WITHOUT_CLASSIFICATION	4.7446125184419646E-7	TEST
//null child could occur for no from clause in a filter	WITHOUT_CLASSIFICATION	0.9999996644142036	WITHOUT_CLASSIFICATION	3.3558579631518646E-7	TEST
//this is basically a copy/paste of OrderByParser ... might be worth refactoring	WITHOUT_CLASSIFICATION	0.9999951450131433	WITHOUT_CLASSIFICATION	4.854986856690504E-6	TEST
// SELECT p FROM p IN CLASS eg.Person GROUP BY p.Name, p.Address, p	WITHOUT_CLASSIFICATION	0.9999972877839538	WITHOUT_CLASSIFICATION	2.712216046218277E-6	TEST
// return aliases not supported in classic translator!	WITHOUT_CLASSIFICATION	0.9999996061862191	WITHOUT_CLASSIFICATION	3.938137809368463E-7	TEST
//register collection role	WITHOUT_CLASSIFICATION	0.9999956706745314	WITHOUT_CLASSIFICATION	4.329325468498995E-6	TEST
// The keyword used to specify an identity column, if identity column key generation is supported.	WITHOUT_CLASSIFICATION	0.9999988124020482	WITHOUT_CLASSIFICATION	1.1875979517286668E-6	TEST
//.getElementPropertyMapping();	WITHOUT_CLASSIFICATION	0.9999635199415886	WITHOUT_CLASSIFICATION	3.648005841138697E-5	TEST
//crossJoins.add(name);	WITHOUT_CLASSIFICATION	0.9999946003193982	WITHOUT_CLASSIFICATION	5.399680601717813E-6	TEST
//ie no select clause in HQL	WITHOUT_CLASSIFICATION	0.9999997673068417	WITHOUT_CLASSIFICATION	2.3269315820247674E-7	TEST
// initialize the Set of queried identifier spaces (ie. tables)	WITHOUT_CLASSIFICATION	0.999999485900636	WITHOUT_CLASSIFICATION	5.140993639762708E-7	TEST
//ie. no select clause	WITHOUT_CLASSIFICATION	0.9999992488415124	WITHOUT_CLASSIFICATION	7.511584876746609E-7	TEST
//there _was_ a select clause	WITHOUT_CLASSIFICATION	0.999998589459163	WITHOUT_CLASSIFICATION	1.4105408369175256E-6	TEST
// return the concrete type, or the underlying type if a concrete type // was not specified	WITHOUT_CLASSIFICATION	0.9999999548137111	WITHOUT_CLASSIFICATION	4.51862889687382E-8	TEST
//many-to-many	WITHOUT_CLASSIFICATION	0.9999664346794086	WITHOUT_CLASSIFICATION	3.3565320591283116E-5	TEST
//q.addCollection(collectionName, collectionRole);	WITHOUT_CLASSIFICATION	0.9999988347000559	WITHOUT_CLASSIFICATION	1.1652999440693302E-6	TEST
// classic parser does not support bulk manipulation statements	WITHOUT_CLASSIFICATION	0.9999999039787786	WITHOUT_CLASSIFICATION	9.602122140972277E-8	TEST
// can't cache this stuff either (per-invocation)	WITHOUT_CLASSIFICATION	0.999999884813841	WITHOUT_CLASSIFICATION	1.1518615901062374E-7	TEST
// unfortunately this stuff can't be cached because // it is per-invocation, not constant for the // QueryTranslator instance	WITHOUT_CLASSIFICATION	0.999999912775505	WITHOUT_CLASSIFICATION	8.72244949695645E-8	TEST
// This is the legacy behaviour for HQL queries...	WITHOUT_CLASSIFICATION	0.9999858400063635	WITHOUT_CLASSIFICATION	1.4159993636465453E-5	TEST
// not known!	WITHOUT_CLASSIFICATION	0.9999967612992829	WITHOUT_CLASSIFICATION	3.2387007170424253E-6	TEST
// not known!	WITHOUT_CLASSIFICATION	0.9999967612992829	WITHOUT_CLASSIFICATION	3.2387007170424253E-6	TEST
// we have the form: trim(trimSource) //      so we trim leading and trailing spaces // EARLY EXIT!!!!	WITHOUT_CLASSIFICATION	0.9999991898424404	WITHOUT_CLASSIFICATION	8.101575595121441E-7	TEST
// not known!	WITHOUT_CLASSIFICATION	0.9999967612992829	WITHOUT_CLASSIFICATION	3.2387007170424253E-6	TEST
// not known!	WITHOUT_CLASSIFICATION	0.9999967612992829	WITHOUT_CLASSIFICATION	3.2387007170424253E-6	TEST
//Need this, since join condition can appear inside parens!	WITHOUT_CLASSIFICATION	0.9999959880587973	WITHOUT_CLASSIFICATION	4.011941202746332E-6	TEST
//tokens that close a sub expression //tokens that open a sub expression //tokens that would indicate a sub expression is a boolean expression	WITHOUT_CLASSIFICATION	0.9999974247025125	WITHOUT_CLASSIFICATION	2.5752974874200547E-6	TEST
//expressionTerminators.add(","); // deliberately excluded	WITHOUT_CLASSIFICATION	0.9999995967030785	WITHOUT_CLASSIFICATION	4.0329692153929203E-7	TEST
//expressionOpeners.add(","); // deliberately excluded	WITHOUT_CLASSIFICATION	0.9999997802838282	WITHOUT_CLASSIFICATION	2.1971617181438517E-7	TEST
// we have the form: trim(from trimSource). //      This is functionally equivalent to trim(trimSource) // EARLY EXIT!!!!	WITHOUT_CLASSIFICATION	0.9999990492513392	WITHOUT_CLASSIFICATION	9.507486608522791E-7	TEST
// otherwise, a trim-specification and/or a trim-character // have been specified;  we need to decide which options // are present and "do the right thing" // should leading trim-characters be trimmed? // should trailing trim-characters be trimmed? // the trim-character (what is to be trimmed off?) // the trim-source (from where should it be trimmed?)	WITHOUT_CLASSIFICATION	0.9999999079350435	WITHOUT_CLASSIFICATION	9.206495653090115E-8	TEST
//Inside a BETWEEN ... AND ... expression	WITHOUT_CLASSIFICATION	0.9999975505922859	WITHOUT_CLASSIFICATION	2.4494077139845315E-6	TEST
//were an odd or even number of NOTs encountered //the join string built up by compound paths inside this expression //a flag indicating if the subexpression is known to be boolean	WITHOUT_CLASSIFICATION	0.9999983260706647	WITHOUT_CLASSIFICATION	1.673929335209373E-6	TEST
//ie. a many-to-many	WITHOUT_CLASSIFICATION	0.999993282110704	WITHOUT_CLASSIFICATION	6.717889295999254E-6	TEST
//Cope with [,]	WITHOUT_CLASSIFICATION	0.9999838320991713	WITHOUT_CLASSIFICATION	1.616790082868543E-5	TEST
//Cope with a continued path expression (ie. ].baz)	WITHOUT_CLASSIFICATION	0.9999997047734918	WITHOUT_CLASSIFICATION	2.9522650824381437E-7	TEST
//NOTE: early return	WITHOUT_CLASSIFICATION	0.999986242981857	WITHOUT_CLASSIFICATION	1.3757018143042228E-5	TEST
//Cope with a subselect	WITHOUT_CLASSIFICATION	0.9999978808925479	WITHOUT_CLASSIFICATION	2.1191074520425533E-6	TEST
//Cope with special cases of AND, NOT, ()	WITHOUT_CLASSIFICATION	0.999981926554084	WITHOUT_CLASSIFICATION	1.8073445916053852E-5	TEST
//Close extra brackets we opened	WITHOUT_CLASSIFICATION	0.9999986823699106	WITHOUT_CLASSIFICATION	1.3176300894030071E-6	TEST
//take note when this is a boolean expression	WITHOUT_CLASSIFICATION	0.9999570295779218	WITHOUT_CLASSIFICATION	4.297042207831376E-5	TEST
// assumes that types are all of span 1	WITHOUT_CLASSIFICATION	0.999997937866196	WITHOUT_CLASSIFICATION	2.062133804026127E-6	TEST
//process a token, mapping OO path expressions to SQL expressions	WITHOUT_CLASSIFICATION	0.999997520967716	WITHOUT_CLASSIFICATION	2.479032283894115E-6	TEST
//Open any extra brackets we might need.	WITHOUT_CLASSIFICATION	0.9999729190939066	WITHOUT_CLASSIFICATION	2.7080906093351308E-5	TEST
//Cope with special cases of AND, NOT, )	WITHOUT_CLASSIFICATION	0.999979792182216	WITHOUT_CLASSIFICATION	2.0207817783993784E-5	TEST
// the next one up must also be	WITHOUT_CLASSIFICATION	0.9999962999926957	WITHOUT_CLASSIFICATION	3.7000073043363716E-6	TEST
// Add any joins	WITHOUT_CLASSIFICATION	0.9999985802630785	WITHOUT_CLASSIFICATION	1.4197369214503212E-6	TEST
// assumes that types are all of span 1	WITHOUT_CLASSIFICATION	0.999997937866196	WITHOUT_CLASSIFICATION	2.062133804026127E-6	TEST
//named query parameter	WITHOUT_CLASSIFICATION	0.9999899105578247	WITHOUT_CLASSIFICATION	1.0089442175196599E-5	TEST
//path expression	WITHOUT_CLASSIFICATION	0.9999973060628197	WITHOUT_CLASSIFICATION	2.69393718038064E-6	TEST
// saves / updates don't cascade to uninitialized collections	WITHOUT_CLASSIFICATION	0.9999980877905666	WITHOUT_CLASSIFICATION	1.912209433415299E-6	TEST
// persists don't cascade to uninitialized collections	WITHOUT_CLASSIFICATION	0.999999117877714	WITHOUT_CLASSIFICATION	8.82122286043448E-7	TEST
//anything else	WITHOUT_CLASSIFICATION	0.9999881014815709	WITHOUT_CLASSIFICATION	1.1898518429008427E-5	TEST
// the path expression continues after a ]	WITHOUT_CLASSIFICATION	0.9999995709828432	WITHOUT_CLASSIFICATION	4.290171567594408E-7	TEST
// careful with this!	WITHOUT_CLASSIFICATION	0.9999977859605105	WITHOUT_CLASSIFICATION	2.214039489421115E-6	TEST
// the path expression ends at the ]	WITHOUT_CLASSIFICATION	0.999998102179377	WITHOUT_CLASSIFICATION	1.8978206230857606E-6	TEST
// "finish off" the join	WITHOUT_CLASSIFICATION	0.9999964290396224	WITHOUT_CLASSIFICATION	3.570960377697275E-6	TEST
//NOTICE: no " or . since they are part of (compound) identifiers	WITHOUT_CLASSIFICATION	0.9999992073344407	WITHOUT_CLASSIFICATION	7.92665559250158E-7	TEST
//cannot instantiate	WITHOUT_CLASSIFICATION	0.9999977942357401	WITHOUT_CLASSIFICATION	2.2057642600243226E-6	TEST
// start by looking for HQL keywords...	WITHOUT_CLASSIFICATION	0.9999956211416484	WITHOUT_CLASSIFICATION	4.378858351584843E-6	TEST
// inner joins can be abbreviated to 'join'	WITHOUT_CLASSIFICATION	0.9999989422147072	WITHOUT_CLASSIFICATION	1.0577852928332082E-6	TEST
// 'outer' is optional and is ignored	WITHOUT_CLASSIFICATION	0.9999967561014627	WITHOUT_CLASSIFICATION	3.2438985372587098E-6	TEST
// now anything that is not a HQL keyword	WITHOUT_CLASSIFICATION	0.9999972872711722	WITHOUT_CLASSIFICATION	2.712728827915545E-6	TEST
// process the "old" HQL style where aliases appear _first_ // ie. using the IN or IN CLASS constructions	WITHOUT_CLASSIFICATION	0.9999999691257035	WITHOUT_CLASSIFICATION	3.0874296463055724E-8	TEST
// treat it as a classname	WITHOUT_CLASSIFICATION	0.9999998651645448	WITHOUT_CLASSIFICATION	1.3483545526080495E-7	TEST
// treat it as a path expression	WITHOUT_CLASSIFICATION	0.999999571955417	WITHOUT_CLASSIFICATION	4.2804458311400636E-7	TEST
// starts with the name of a mapped class (new style)	WITHOUT_CLASSIFICATION	0.9999997780518348	WITHOUT_CLASSIFICATION	2.2194816511061645E-7	TEST
// starts with a path expression (new style)	WITHOUT_CLASSIFICATION	0.9999995985159659	WITHOUT_CLASSIFICATION	4.014840341057259E-7	TEST
//allow ODMG OQL style: from Person p, p.cars c	WITHOUT_CLASSIFICATION	0.999991075366207	WITHOUT_CLASSIFICATION	8.924633793046226E-6	TEST
//handle quoted strings	WITHOUT_CLASSIFICATION	0.99998266709953	WITHOUT_CLASSIFICATION	1.7332900469997144E-5	TEST
// Object insertions, updates, and deletions have list semantics because // they must happen in the right order so as to respect referential // integrity	WITHOUT_CLASSIFICATION	0.9999991366269557	WITHOUT_CLASSIFICATION	8.633730442435755E-7	TEST
// "finish off" the join	WITHOUT_CLASSIFICATION	0.9999964290396224	WITHOUT_CLASSIFICATION	3.570960377697275E-6	TEST
//ignore whitespace	WITHOUT_CLASSIFICATION	0.9999961717361995	WITHOUT_CLASSIFICATION	3.828263800538707E-6	TEST
//do replacements	WITHOUT_CLASSIFICATION	0.9999989218555926	WITHOUT_CLASSIFICATION	1.0781444073167344E-6	TEST
//handle HQL2 collection syntax	WITHOUT_CLASSIFICATION	0.9999991734117533	WITHOUT_CLASSIFICATION	8.265882468159926E-7	TEST
// uuid.hex is deprecated	WITHOUT_CLASSIFICATION	0.9999962810337006	WITHOUT_CLASSIFICATION	3.7189662992825936E-6	TEST
// AbstractSelectingDelegate impl ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999953010757564	WITHOUT_CLASSIFICATION	4.698924243627851E-6	TEST
//hilo params	WITHOUT_CLASSIFICATION	0.9999915272676179	WITHOUT_CLASSIFICATION	8.472732382164586E-6	TEST
//sql = query;	WITHOUT_CLASSIFICATION	0.9999936876220454	WITHOUT_CLASSIFICATION	6.3123779545870796E-6	TEST
// performance opt	WITHOUT_CLASSIFICATION	0.9999995661939642	WITHOUT_CLASSIFICATION	4.3380603579109156E-7	TEST
//sql = update;	WITHOUT_CLASSIFICATION	0.9999931281711835	WITHOUT_CLASSIFICATION	6.871828816527737E-6	TEST
//hilo config	WITHOUT_CLASSIFICATION	0.999996981355125	WITHOUT_CLASSIFICATION	3.0186448749220544E-6	TEST
// so we "clock over" on the first invocation	WITHOUT_CLASSIFICATION	0.9999999214423326	WITHOUT_CLASSIFICATION	7.855766736168203E-8	TEST
// don't allow comments on these insert statements as comments totally // blow up the Oracle getGeneratedKeys "support" :(	WITHOUT_CLASSIFICATION	0.9999941956506408	WITHOUT_CLASSIFICATION	5.804349359131761E-6	TEST
//abort the save (the object is already saved by a circular cascade)	WITHOUT_CLASSIFICATION	0.9999970320989898	WITHOUT_CLASSIFICATION	2.9679010101446432E-6	TEST
//throw new IdentifierGenerationException("save associated object first, or disable cascade for inverse association");	WITHOUT_CLASSIFICATION	0.9999998064553338	WITHOUT_CLASSIFICATION	1.9354466630850767E-7	TEST
// intentionally empty	WITHOUT_CLASSIFICATION	0.9999990309162337	WITHOUT_CLASSIFICATION	9.690837663139552E-7	TEST
//do nothing to avoid a lazy property initialization	WITHOUT_CLASSIFICATION	0.9999985076786273	WITHOUT_CLASSIFICATION	1.4923213726386238E-6	TEST
//keep the behavior consistent even for boundary usages	WITHOUT_CLASSIFICATION	0.9999923658916697	WITHOUT_CLASSIFICATION	7.634108330244562E-6	TEST
// so we "clock over" on the first invocation	WITHOUT_CLASSIFICATION	0.9999999214423326	WITHOUT_CLASSIFICATION	7.855766736168203E-8	TEST
// do nothing until we hit the rsult set containing the generated id	WITHOUT_CLASSIFICATION	0.9999996248832165	WITHOUT_CLASSIFICATION	3.7511678358472205E-7	TEST
/* COLUMN and TABLE should be renamed but it would break the public API */	WITHOUT_CLASSIFICATION	0.9999991414861168	WITHOUT_CLASSIFICATION	8.585138832619483E-7	TEST
// Loaded entity instances, by EntityKey	WITHOUT_CLASSIFICATION	0.9999994762723148	WITHOUT_CLASSIFICATION	5.237276852472626E-7	TEST
// if the given name is un-qualified we may neen to qualify it	WITHOUT_CLASSIFICATION	0.9999941687905295	WITHOUT_CLASSIFICATION	5.831209470453799E-6	TEST
// the default...	WITHOUT_CLASSIFICATION	0.9999991569091287	WITHOUT_CLASSIFICATION	8.43090871354061E-7	TEST
// unfortunately not really safe to normalize this // to 1 as an initial value like we do the others // because we would not be able to control this if // we are using a sequence...	WITHOUT_CLASSIFICATION	0.9999998727497388	WITHOUT_CLASSIFICATION	1.2725026119878495E-7	TEST
// intentionally empty	WITHOUT_CLASSIFICATION	0.9999990309162337	WITHOUT_CLASSIFICATION	9.690837663139552E-7	TEST
// Identity map of CollectionEntry instances, by the collection wrapper	WITHOUT_CLASSIFICATION	0.9999999278786582	WITHOUT_CLASSIFICATION	7.212134177435133E-8	TEST
// general purpose parameters ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999985761122395	WITHOUT_CLASSIFICATION	1.4238877604605226E-6	TEST
// table-specific parameters ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999991505434185	WITHOUT_CLASSIFICATION	8.494565815087486E-7	TEST
// Configurable implementation ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999988675855116	WITHOUT_CLASSIFICATION	1.1324144884332656E-6	TEST
// IdentifierGenerator implementation ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999917513281893	WITHOUT_CLASSIFICATION	8.248671810626496E-6	TEST
// PersistentIdentifierGenerator implementation ~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999920735215789	WITHOUT_CLASSIFICATION	7.92647842111261E-6	TEST
// prepare and execute the insert	WITHOUT_CLASSIFICATION	0.999998619166556	WITHOUT_CLASSIFICATION	1.3808334440547763E-6	TEST
// prepare and execute the insert	WITHOUT_CLASSIFICATION	0.999998619166556	WITHOUT_CLASSIFICATION	1.3808334440547763E-6	TEST
//fetch the generated id in a separate query	WITHOUT_CLASSIFICATION	0.9999972272834543	WITHOUT_CLASSIFICATION	2.772716545691785E-6	TEST
// we just hit the last position	WITHOUT_CLASSIFICATION	0.9999984810257508	WITHOUT_CLASSIFICATION	1.5189742491589068E-6	TEST
// scroll ahead	WITHOUT_CLASSIFICATION	0.9999994625831514	WITHOUT_CLASSIFICATION	5.374168485821231E-7	TEST
// scroll backward	WITHOUT_CLASSIFICATION	0.999999263374905	WITHOUT_CLASSIFICATION	7.366250949653527E-7	TEST
// we have not yet hit the last result...	WITHOUT_CLASSIFICATION	0.9999913375129965	WITHOUT_CLASSIFICATION	8.662487003561079E-6	TEST
// Constructors ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999985550036321	WITHOUT_CLASSIFICATION	1.4449963678911758E-6	TEST
// State ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999923865948125	WITHOUT_CLASSIFICATION	7.6134051875948874E-6	TEST
// Criteria impl ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999918402802241	WITHOUT_CLASSIFICATION	8.159719775862337E-6	TEST
// do this when all the properties are updateable since there is // a certain likelihood that the information will already be // snapshot-cached.	WITHOUT_CLASSIFICATION	0.9999981366416222	WITHOUT_CLASSIFICATION	1.8633583778653523E-6	TEST
// Inner classes ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999916363827807	WITHOUT_CLASSIFICATION	8.363617219222358E-6	TEST
// Constructors ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999985550036321	WITHOUT_CLASSIFICATION	1.4449963678911758E-6	TEST
// State ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999923865948125	WITHOUT_CLASSIFICATION	7.6134051875948874E-6	TEST
// Criteria impl ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999918402802241	WITHOUT_CLASSIFICATION	8.159719775862337E-6	TEST
// Caches	WITHOUT_CLASSIFICATION	0.9999982354997399	WITHOUT_CLASSIFICATION	1.7645002601291671E-6	TEST
//Generators:	WITHOUT_CLASSIFICATION	0.9999815366807494	WITHOUT_CLASSIFICATION	1.846331925068055E-5	TEST
// cache region is defined by the root-class in the hierarchy...	WITHOUT_CLASSIFICATION	0.9999996436356079	WITHOUT_CLASSIFICATION	3.5636439201286155E-7	TEST
//check if the detached object being merged is the parent	WITHOUT_CLASSIFICATION	0.9999912619355066	WITHOUT_CLASSIFICATION	8.738064493441315E-6	TEST
// after *all* persisters and named queries are registered	WITHOUT_CLASSIFICATION	0.9999973582493537	WITHOUT_CLASSIFICATION	2.6417506463675714E-6	TEST
// if we get here, it is possible that we have a proxy 'in the way' of the merge map resolution... // 	WITHOUT_CLASSIFICATION	0.99999647588884	WITHOUT_CLASSIFICATION	3.5241111599219104E-6	TEST
//JNDI + Serialization:	WITHOUT_CLASSIFICATION	0.9999954632938869	WITHOUT_CLASSIFICATION	4.536706113056416E-6	TEST
//checking for named queries	WITHOUT_CLASSIFICATION	0.9999860721731235	WITHOUT_CLASSIFICATION	1.3927826876582463E-5	TEST
//stats	WITHOUT_CLASSIFICATION	0.9999573881284128	WITHOUT_CLASSIFICATION	4.2611871587092615E-5	TEST
// EntityNotFoundDelegate	WITHOUT_CLASSIFICATION	0.9999959875217254	WITHOUT_CLASSIFICATION	4.012478274613145E-6	TEST
// Check named HQL queries	WITHOUT_CLASSIFICATION	0.9999994720556549	WITHOUT_CLASSIFICATION	5.279443450951797E-7	TEST
// this will throw an error if there's something wrong.	WITHOUT_CLASSIFICATION	0.9999867403629622	WITHOUT_CLASSIFICATION	1.3259637037935406E-5	TEST
//prevents this session from adding things to cache	WITHOUT_CLASSIFICATION	0.999997824280792	WITHOUT_CLASSIFICATION	2.175719207963665E-6	TEST
// from javax.naming.Referenceable	WITHOUT_CLASSIFICATION	0.9999995953013432	WITHOUT_CLASSIFICATION	4.046986567678782E-7	TEST
// look for the instance by uuid	WITHOUT_CLASSIFICATION	0.999997438113044	WITHOUT_CLASSIFICATION	2.561886955985289E-6	TEST
//for a dynamic-class	WITHOUT_CLASSIFICATION	0.9999965240223717	WITHOUT_CLASSIFICATION	3.4759776281379592E-6	TEST
//test this entity to see if we must query it	WITHOUT_CLASSIFICATION	0.9990882717699842	WITHOUT_CLASSIFICATION	9.117282300157791E-4	TEST
//NOTE EARLY EXIT	WITHOUT_CLASSIFICATION	0.999930515211146	WITHOUT_CLASSIFICATION	6.948478885406917E-5	TEST
// for backward-compatability	WITHOUT_CLASSIFICATION	0.9999993019495926	WITHOUT_CLASSIFICATION	6.980504072750236E-7	TEST
// ignore this error for now	WITHOUT_CLASSIFICATION	0.9999967145625785	WITHOUT_CLASSIFICATION	3.2854374215188573E-6	TEST
//to stop the class from being unloaded	WITHOUT_CLASSIFICATION	0.9999967183068121	WITHOUT_CLASSIFICATION	3.2816931877551754E-6	TEST
// in case we were deserialized in a different JVM, look for an instance with the same name // (alternatively we could do an actual JNDI lookup here....)	WITHOUT_CLASSIFICATION	0.9999963950975423	WITHOUT_CLASSIFICATION	3.6049024576829228E-6	TEST
//must add to JNDI _after_ adding to HashMaps, because some JNDI servers use serialization	WITHOUT_CLASSIFICATION	0.9999970821224468	WITHOUT_CLASSIFICATION	2.9178775531766807E-6	TEST
// Make sure this is a defined parameter and check the incoming value type	WITHOUT_CLASSIFICATION	0.9999988524100514	WITHOUT_CLASSIFICATION	1.14758994862573E-6	TEST
// for each of the defined parameters, make sure its value // has been set	WITHOUT_CLASSIFICATION	0.9999985991910812	WITHOUT_CLASSIFICATION	1.400808918794433E-6	TEST
//we never need to apply locks to the SQL	WITHOUT_CLASSIFICATION	0.9999898642513535	WITHOUT_CLASSIFICATION	1.0135748646462504E-5	TEST
// inserts ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999869021932225	WITHOUT_CLASSIFICATION	1.3097806777537362E-5	TEST
// deletes ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999767158238312	WITHOUT_CLASSIFICATION	2.3284176168876243E-5	TEST
// during deserialization, we need to reconnect all proxies and // collections to this session, as well as the EntityEntry and // CollectionEntry instances; these associations are transient // because serialization is used for different things.	WITHOUT_CLASSIFICATION	0.9999999921436932	WITHOUT_CLASSIFICATION	7.856306749736024E-9	TEST
// updates ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999679227553404	WITHOUT_CLASSIFICATION	3.2077244659537724E-5	TEST
// loading ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999906854476364	WITHOUT_CLASSIFICATION	9.314552363592151E-6	TEST
//final boolean forceCacheRefresh,	WITHOUT_CLASSIFICATION	0.9999851282592251	WITHOUT_CLASSIFICATION	1.4871740774867605E-5	TEST
//final boolean forceCacheRefresh,	WITHOUT_CLASSIFICATION	0.9999851282592251	WITHOUT_CLASSIFICATION	1.4871740774867605E-5	TEST
// first, try to load it from the temp PC associated to this SS	WITHOUT_CLASSIFICATION	0.9999954473288528	WITHOUT_CLASSIFICATION	4.552671147156522E-6	TEST
// if the metadata allowed proxy creation and caller did not request forceful eager loading, // generate a proxy	WITHOUT_CLASSIFICATION	0.9999980117822119	WITHOUT_CLASSIFICATION	1.9882177881673026E-6	TEST
// otherwise immediately materialize it	WITHOUT_CLASSIFICATION	0.9999860284431062	WITHOUT_CLASSIFICATION	1.3971556893704003E-5	TEST
/////////////////////////////////////////////////////////////////////////////////////////////////////	WITHOUT_CLASSIFICATION	0.9998743376002098	WITHOUT_CLASSIFICATION	1.2566239979016445E-4	TEST
// no auto-flushing to support in stateless session	WITHOUT_CLASSIFICATION	0.9999992170199798	WITHOUT_CLASSIFICATION	7.829800202247416E-7	TEST
//after setting values to object, entityMode	WITHOUT_CLASSIFICATION	0.9999970264076125	WITHOUT_CLASSIFICATION	2.973592387555477E-6	TEST
//for EJB3	WITHOUT_CLASSIFICATION	0.9999652800131659	WITHOUT_CLASSIFICATION	3.471998683412225E-5	TEST
// just ignore	WITHOUT_CLASSIFICATION	0.9999983194313345	WITHOUT_CLASSIFICATION	1.6805686654443075E-6	TEST
// do a check	WITHOUT_CLASSIFICATION	0.9999995958368203	WITHOUT_CLASSIFICATION	4.041631796666755E-7	TEST
// saveOrUpdate() operations ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.999998668202609	WITHOUT_CLASSIFICATION	1.3317973910699284E-6	TEST
// update() operations ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999984052957394	WITHOUT_CLASSIFICATION	1.5947042606233654E-6	TEST
// lock() operations ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999996518544174	WITHOUT_CLASSIFICATION	3.481455825820114E-7	TEST
// persist() operations ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999990464462505	WITHOUT_CLASSIFICATION	9.53553749631133E-7	TEST
// persistOnFlush() operations ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999992510479094	WITHOUT_CLASSIFICATION	7.489520905444876E-7	TEST
// merge() operations ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.999998962872737	WITHOUT_CLASSIFICATION	1.0371272629363295E-6	TEST
// saveOrUpdateCopy() operations ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999993490323906	WITHOUT_CLASSIFICATION	6.509676093328678E-7	TEST
// delete() operations ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999993506790129	WITHOUT_CLASSIFICATION	6.493209870696336E-7	TEST
// load()/get() operations ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999995452914525	WITHOUT_CLASSIFICATION	4.547085474463746E-7	TEST
// refresh() operations ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999988065919354	WITHOUT_CLASSIFICATION	1.1934080645047456E-6	TEST
// replicate() operations ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999994604498346	WITHOUT_CLASSIFICATION	5.395501654725019E-7	TEST
// do not auto-flush while outside a transaction	WITHOUT_CLASSIFICATION	0.9999999840609552	WITHOUT_CLASSIFICATION	1.593904469308967E-8	TEST
// this is an internal error of some sort...	WITHOUT_CLASSIFICATION	0.9999820865318414	WITHOUT_CLASSIFICATION	1.7913468158551428E-5	TEST
//stops flush being called multiple times if this method is recursively called	WITHOUT_CLASSIFICATION	0.9999512502202929	WITHOUT_CLASSIFICATION	4.8749779707196354E-5	TEST
//only collections belonging to deleted entities are allowed to be dereferenced in the case of orphan delete	WITHOUT_CLASSIFICATION	0.9999999171043528	WITHOUT_CLASSIFICATION	8.289564724773505E-8	TEST
// if it was previously unreferenced, we need to flush in order to // get its state into the database in order to execute query	WITHOUT_CLASSIFICATION	0.9999999098463858	WITHOUT_CLASSIFICATION	9.015361416620889E-8	TEST
// not for internal use:	WITHOUT_CLASSIFICATION	0.9999971479159353	WITHOUT_CLASSIFICATION	2.8520840646662143E-6	TEST
// otherwise, we only need to flush if there are in-memory changes // to the queried tables	WITHOUT_CLASSIFICATION	0.9999996845365223	WITHOUT_CLASSIFICATION	3.154634776582419E-7	TEST
// might need to run a different filter entirely after the flush // because the collection role may have changed	WITHOUT_CLASSIFICATION	0.999998789995461	WITHOUT_CLASSIFICATION	1.2100045389391501E-6	TEST
//stops flush being called multiple times if this method is recursively called	WITHOUT_CLASSIFICATION	0.9999512502202929	WITHOUT_CLASSIFICATION	4.8749779707196354E-5	TEST
//stops flush being called multiple times if this method is recursively called	WITHOUT_CLASSIFICATION	0.9999512502202929	WITHOUT_CLASSIFICATION	4.8749779707196354E-5	TEST
//if it is initialized, see if the underlying //instance is contained, since we need to  //account for the fact that it might have been //evicted	WITHOUT_CLASSIFICATION	0.9999495321598565	WITHOUT_CLASSIFICATION	5.046784014352703E-5	TEST
// basically just an adapted copy of find(CriteriaImpl)	WITHOUT_CLASSIFICATION	0.9999956221831682	WITHOUT_CLASSIFICATION	4.377816831839486E-6	TEST
// it is possible for this method to be called during flush processing, // so make certain that we do not accidently initialize an uninitialized proxy	WITHOUT_CLASSIFICATION	0.9999076975373765	WITHOUT_CLASSIFICATION	9.230246262358287E-5	TEST
// nothing to do in a stateful session	WITHOUT_CLASSIFICATION	0.9999994908510373	WITHOUT_CLASSIFICATION	5.091489626569402E-7	TEST
// ignore	WITHOUT_CLASSIFICATION	0.9999983654098049	WITHOUT_CLASSIFICATION	1.6345901950501815E-6	TEST
// ignore this error for now	WITHOUT_CLASSIFICATION	0.9999967145625785	WITHOUT_CLASSIFICATION	3.2854374215188573E-6	TEST
// we need to writeObject() on this since interceptor is user defined	WITHOUT_CLASSIFICATION	0.9999993604823155	WITHOUT_CLASSIFICATION	6.395176845107752E-7	TEST
// the old-time stand-by...	WITHOUT_CLASSIFICATION	0.999998955761934	WITHOUT_CLASSIFICATION	1.044238066075784E-6	TEST
// parameter bind values...	WITHOUT_CLASSIFICATION	0.9999987152257326	WITHOUT_CLASSIFICATION	1.2847742673795348E-6	TEST
// Parameter handling code ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999978045085537	WITHOUT_CLASSIFICATION	2.1954914462059574E-6	TEST
// prepend value and type list with null for any positions before the wanted position.	WITHOUT_CLASSIFICATION	0.9999983973658204	WITHOUT_CLASSIFICATION	1.602634179572007E-6	TEST
// Execution methods ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999993884224398	WITHOUT_CLASSIFICATION	6.1157756025536E-7	TEST
// we have a CGLIB enhanced entity	WITHOUT_CLASSIFICATION	0.9999991107307904	WITHOUT_CLASSIFICATION	8.892692095227123E-7	TEST
// we have a CGLIB enhanced entity	WITHOUT_CLASSIFICATION	0.9999991107307904	WITHOUT_CLASSIFICATION	8.892692095227123E-7	TEST
// we have a Javassist enhanced entity	WITHOUT_CLASSIFICATION	0.9999948624683769	WITHOUT_CLASSIFICATION	5.137531623107333E-6	TEST
// we have a Javassist enhanced entity	WITHOUT_CLASSIFICATION	0.9999948624683769	WITHOUT_CLASSIFICATION	5.137531623107333E-6	TEST
// FieldInterceptor impl ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999667362149597	WITHOUT_CLASSIFICATION	3.3263785040380226E-5	TEST
// subclass accesses ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999950209098849	WITHOUT_CLASSIFICATION	4.9790901150568505E-6	TEST
//let's assume that there is only one lazy fetch group, for now!	WITHOUT_CLASSIFICATION	0.9999902720481387	WITHOUT_CLASSIFICATION	9.727951861175946E-6	TEST
// FieldHandler impl ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9998530895559525	WITHOUT_CLASSIFICATION	1.469104440474296E-4	TEST
// should *not* need to grow beyond the size of the total number of columns in the rs	WITHOUT_CLASSIFICATION	0.9999999212066001	WITHOUT_CLASSIFICATION	7.879339984045632E-8	TEST
// should probably no-op commit/rollback here, at least in JTA scenarios	WITHOUT_CLASSIFICATION	0.9999996705517362	WITHOUT_CLASSIFICATION	3.294482637244082E-7	TEST
// Base Expectation impls ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.999999571030774	WITHOUT_CLASSIFICATION	4.2896922607799454E-7	TEST
// Various Expectation instances ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999999412623987	WITHOUT_CLASSIFICATION	5.8737601412063114E-8	TEST
// explicitly perform no checking...	WITHOUT_CLASSIFICATION	0.9999995143360868	WITHOUT_CLASSIFICATION	4.856639131442944E-7	TEST
// used from testsuite	WITHOUT_CLASSIFICATION	0.9997780957571956	WITHOUT_CLASSIFICATION	2.2190424280437508E-4	TEST
// assume we are in an auto-commit state	WITHOUT_CLASSIFICATION	0.9999969190628026	WITHOUT_CLASSIFICATION	3.080937197350434E-6	TEST
/*package*/	WITHOUT_CLASSIFICATION	0.9999826414449617	WITHOUT_CLASSIFICATION	1.7358555038213658E-5	TEST
// register synch; stats.connect()	WITHOUT_CLASSIFICATION	0.9999995006941282	WITHOUT_CLASSIFICATION	4.993058718433173E-7	TEST
//noncritical, swallow and let the other propagate!	WITHOUT_CLASSIFICATION	0.9999944937476157	WITHOUT_CLASSIFICATION	5.5062523843366196E-6	TEST
// calls executeBatch()	WITHOUT_CLASSIFICATION	0.9999992051858717	WITHOUT_CLASSIFICATION	7.948141283068847E-7	TEST
//no big deal	WITHOUT_CLASSIFICATION	0.9999976156371924	WITHOUT_CLASSIFICATION	2.384362807666529E-6	TEST
// no big deal	WITHOUT_CLASSIFICATION	0.9999997062991737	WITHOUT_CLASSIFICATION	2.937008263288581E-7	TEST
// no big deal	WITHOUT_CLASSIFICATION	0.9999997062991737	WITHOUT_CLASSIFICATION	2.937008263288581E-7	TEST
// sybase driver (jConnect) throwing NPE here in certain // cases, but we'll just handle the general "unexpected" case	WITHOUT_CLASSIFICATION	0.9999984097776923	WITHOUT_CLASSIFICATION	1.5902223076598255E-6	TEST
// see explanation above...	WITHOUT_CLASSIFICATION	0.9999998916774019	WITHOUT_CLASSIFICATION	1.0832259816113596E-7	TEST
// If we are in the process of releasing, no sense // checking for aggressive-release possibility.	WITHOUT_CLASSIFICATION	0.9999998565361793	WITHOUT_CLASSIFICATION	1.4346382065201968E-7	TEST
// EARLY EXIT!!!!	WITHOUT_CLASSIFICATION	0.9999946712388197	WITHOUT_CLASSIFICATION	5.3287611803786965E-6	TEST
// ResultSet impl ("overridden") ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999973155682642	WITHOUT_CLASSIFICATION	2.6844317358235368E-6	TEST
// ResultSet impl (delegated) ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999666945708788	WITHOUT_CLASSIFICATION	3.330542912113245E-5	TEST
// refer to comment in StatefulPersistenceContext.addCollection()	WITHOUT_CLASSIFICATION	0.9999999174769948	WITHOUT_CLASSIFICATION	8.252300520906484E-8	TEST
// ConnectionManager.Callback implementation ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999992321944041	WITHOUT_CLASSIFICATION	7.678055958581903E-7	TEST
// Note : success = false, because we don't know the outcome of the transaction	WITHOUT_CLASSIFICATION	0.9999999069151257	WITHOUT_CLASSIFICATION	9.308487436687957E-8	TEST
// we already have a callback registered; either a local // (org.hibernate.Transaction) transaction has accepted // callback responsibilities, or we have previously // registered a transaction synch.	WITHOUT_CLASSIFICATION	0.9999999535859176	WITHOUT_CLASSIFICATION	4.6414082357617576E-8	TEST
// the configured transaction-factory says it only supports // local callback mode, so no sense attempting to register a // JTA Synchronization	WITHOUT_CLASSIFICATION	0.9999999976566003	WITHOUT_CLASSIFICATION	2.3433996144163E-9	TEST
// transactions marked for rollback-only cause some TM impls to throw exceptions	WITHOUT_CLASSIFICATION	0.9999998077064542	WITHOUT_CLASSIFICATION	1.9229354576109307E-7	TEST
// serialization ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999994115734522	WITHOUT_CLASSIFICATION	5.884265477574293E-7	TEST
//postInitialize() will be called after initialization	WITHOUT_CLASSIFICATION	0.9999884260844845	WITHOUT_CLASSIFICATION	1.157391551558723E-5	TEST
// cannot handle single quotes	WITHOUT_CLASSIFICATION	0.9999928489371754	WITHOUT_CLASSIFICATION	7.151062824515319E-6	TEST
// todo : for 4.0 //	WITHOUT_CLASSIFICATION	0.999995354507742	WITHOUT_CLASSIFICATION	4.645492258047602E-6	TEST
// note that for sequential scrolling, we make the assumption that // the first persister element is the "root entity"	WITHOUT_CLASSIFICATION	0.9999887942389307	WITHOUT_CLASSIFICATION	1.1205761069404283E-5	TEST
// don't even bother trying to read further	WITHOUT_CLASSIFICATION	0.9999966766139627	WITHOUT_CLASSIFICATION	3.323386037127125E-6	TEST
// don't even bother trying to read any further	WITHOUT_CLASSIFICATION	0.9999966999153953	WITHOUT_CLASSIFICATION	3.3000846046658734E-6	TEST
// position cursor to the last row	WITHOUT_CLASSIFICATION	0.9999997596569146	WITHOUT_CLASSIFICATION	2.403430855067513E-7	TEST
// sequentially read the result set in reverse until we recognize // a change in the key value.  At that point, we are pointed at // the last physical sequential row for the logical row in which // we are interested in processing	WITHOUT_CLASSIFICATION	0.9999967040808546	WITHOUT_CLASSIFICATION	3.2959191452401114E-6	TEST
// Read backwards until we read past the first physical sequential // row with the key we are interested in loading	WITHOUT_CLASSIFICATION	0.9999905500018057	WITHOUT_CLASSIFICATION	9.449998194227193E-6	TEST
// Finally, read ahead one row to position result set cursor // at the first physical row we are interested in loading	WITHOUT_CLASSIFICATION	0.9999984341568888	WITHOUT_CLASSIFICATION	1.5658431111996434E-6	TEST
// now get an existing proxy for each row element (if there is one)	WITHOUT_CLASSIFICATION	0.9999960353021746	WITHOUT_CLASSIFICATION	3.964697825426356E-6	TEST
// force the proxy to resolve itself	WITHOUT_CLASSIFICATION	0.9999985930328987	WITHOUT_CLASSIFICATION	1.4069671012288946E-6	TEST
// this is equivalent to the old behavior...	WITHOUT_CLASSIFICATION	0.9999759863648962	WITHOUT_CLASSIFICATION	2.401363510387952E-5	TEST
//if null, owner will be retrieved from session	WITHOUT_CLASSIFICATION	0.9999994251816083	WITHOUT_CLASSIFICATION	5.748183916382826E-7	TEST
//final String queryString, 	WITHOUT_CLASSIFICATION	0.9999950915853053	WITHOUT_CLASSIFICATION	4.908414694647234E-6	TEST
// if it was a reference to self, don't need to nullify // unless we are using native id generation, in which // case we definitely need to nullify	WITHOUT_CLASSIFICATION	0.9999999690138518	WITHOUT_CLASSIFICATION	3.098614811718842E-8	TEST
//end of array, start filling again from start	WITHOUT_CLASSIFICATION	0.9999924150328632	WITHOUT_CLASSIFICATION	7.584967136902527E-6	TEST
// in an effort to avoid concurrent-modification-exceptions (from // potential recursive calls back through here as a result of the // eventual call to PersistentCollection#endRead), we scan the // internal loadingCollections map for matches and store those matches // in a temp collection.  the temp collection is then used to "drive" // the #endRead processing.	WITHOUT_CLASSIFICATION	0.9999999408365322	WITHOUT_CLASSIFICATION	5.9163467730750363E-8	TEST
//we can reuse it for each row	WITHOUT_CLASSIFICATION	0.9999968904473482	WITHOUT_CLASSIFICATION	3.109552651725085E-6	TEST
//can't reuse in this case	WITHOUT_CLASSIFICATION	0.9999961430169033	WITHOUT_CLASSIFICATION	3.856983096586674E-6	TEST
// First we need to suspend any current JTA transaction and obtain // a JDBC connection	WITHOUT_CLASSIFICATION	0.9999999730345851	WITHOUT_CLASSIFICATION	2.6965414918897482E-8	TEST
//getResultList(results);	WITHOUT_CLASSIFICATION	0.9999633560192409	WITHOUT_CLASSIFICATION	3.664398075912383E-5	TEST
//if we only returned one entity, query by key is more efficient	WITHOUT_CLASSIFICATION	0.9999982040620947	WITHOUT_CLASSIFICATION	1.7959379052543847E-6	TEST
// a collection loaded in the current session // can not possibly be the collection belonging // to the entity passed to update()	WITHOUT_CLASSIFICATION	0.9999999661804821	WITHOUT_CLASSIFICATION	3.381951784347054E-8	TEST
// handle empty collection	WITHOUT_CLASSIFICATION	0.9999997524952943	WITHOUT_CLASSIFICATION	2.4750470576731945E-7	TEST
// else no collection element, but also no owner	WITHOUT_CLASSIFICATION	0.99999997511569	WITHOUT_CLASSIFICATION	2.4884309892665936E-8	TEST
//handle empty collections	WITHOUT_CLASSIFICATION	0.9999993854392928	WITHOUT_CLASSIFICATION	6.145607071102038E-7	TEST
// else this is not a collection initializer (and empty collections will // be detected by looking for the owner's identifier in the result set)	WITHOUT_CLASSIFICATION	0.9999998564590792	WITHOUT_CLASSIFICATION	1.4354092080216053E-7	TEST
// validate() instances of Validatable	WITHOUT_CLASSIFICATION	0.9999995674751585	WITHOUT_CLASSIFICATION	4.325248415826067E-7	TEST
// if we know there is exactly 1 row, we can skip. // it would be great if we could _always_ skip this; // it is a problem for <key-many-to-one>	WITHOUT_CLASSIFICATION	0.9999998233535644	WITHOUT_CLASSIFICATION	1.7664643552814426E-7	TEST
// remove all collections for the entity from the session-level cache	WITHOUT_CLASSIFICATION	0.999999970247671	WITHOUT_CLASSIFICATION	2.9752329100346676E-8	TEST
//null version means the object is in the process of being loaded somewhere else in the ResultSet	WITHOUT_CLASSIFICATION	0.9999995652577089	WITHOUT_CLASSIFICATION	4.347422910286508E-7	TEST
//problematic for <key-many-to-one>!	WITHOUT_CLASSIFICATION	0.9999960700175807	WITHOUT_CLASSIFICATION	3.929982419300952E-6	TEST
//use the id passed in	WITHOUT_CLASSIFICATION	0.9999737859384613	WITHOUT_CLASSIFICATION	2.6214061538582813E-5	TEST
//do nothing	WITHOUT_CLASSIFICATION	0.9999886284524299	WITHOUT_CLASSIFICATION	1.137154757016675E-5	TEST
// prefer re-generation of identity!	WITHOUT_CLASSIFICATION	0.9999998952479731	WITHOUT_CLASSIFICATION	1.0475202702917293E-7	TEST
//no point doing this if NONE was requested	WITHOUT_CLASSIFICATION	0.9993718642269999	WITHOUT_CLASSIFICATION	6.281357730001408E-4	TEST
//If the object is already loaded, return the loaded one	WITHOUT_CLASSIFICATION	0.9999990664658427	WITHOUT_CLASSIFICATION	9.335341573648065E-7	TEST
//its already loaded so don't need to hydrate it	WITHOUT_CLASSIFICATION	0.9999962995273517	WITHOUT_CLASSIFICATION	3.7004726483209826E-6	TEST
// cascade the refresh prior to refreshing this entity	WITHOUT_CLASSIFICATION	0.9999989226783405	WITHOUT_CLASSIFICATION	1.0773216595112769E-6	TEST
//the load() which takes an entity does not pass an entityName	WITHOUT_CLASSIFICATION	0.9999719366084862	WITHOUT_CLASSIFICATION	2.8063391513917354E-5	TEST
//we only check the version when _upgrading_ lock modes	WITHOUT_CLASSIFICATION	0.9999992987312832	WITHOUT_CLASSIFICATION	7.012687167016731E-7	TEST
// look for a proxy	WITHOUT_CLASSIFICATION	0.9999979358899538	WITHOUT_CLASSIFICATION	2.064110046254153E-6	TEST
//we need to upgrade the lock mode to the mode requested	WITHOUT_CLASSIFICATION	0.9999045014931106	WITHOUT_CLASSIFICATION	9.549850688931759E-5	TEST
//its the given optional object	WITHOUT_CLASSIFICATION	0.9999986349188964	WITHOUT_CLASSIFICATION	1.365081103611046E-6	TEST
// instantiate a new instance	WITHOUT_CLASSIFICATION	0.9999997937411186	WITHOUT_CLASSIFICATION	2.0625888151290795E-7	TEST
//need to hydrate it.	WITHOUT_CLASSIFICATION	0.999968148088757	WITHOUT_CLASSIFICATION	3.185191124304414E-5	TEST
// return a newly loaded object	WITHOUT_CLASSIFICATION	0.9999998707140392	WITHOUT_CLASSIFICATION	1.292859607837614E-7	TEST
//will be ignored, using the existing Entry instead	WITHOUT_CLASSIFICATION	0.9999981175887308	WITHOUT_CLASSIFICATION	1.8824112691747311E-6	TEST
// key is an entity involved with the operation performed by the listener; // value can be either a copy of the entity or the entity itself	WITHOUT_CLASSIFICATION	0.9999998240702642	WITHOUT_CLASSIFICATION	1.7592973587436456E-7	TEST
//materialize associations (and initialize the object) later	WITHOUT_CLASSIFICATION	0.9999968859231446	WITHOUT_CLASSIFICATION	3.1140768553384396E-6	TEST
// Get the persister for the _subclass_	WITHOUT_CLASSIFICATION	0.9999853476660278	WITHOUT_CLASSIFICATION	1.4652333972325709E-5	TEST
// ok in normal Hibernate usage to delete a detached entity; JPA however // forbids it, thus this is a hook for HEM to affect this behavior	WITHOUT_CLASSIFICATION	0.9999998929188532	WITHOUT_CLASSIFICATION	1.0708114684907814E-7	TEST
// the entry will be removed after the flush, and will no longer // override the stale snapshot // This is now handled by removeEntity() in EntityDeleteAction //persistenceContext.removeDatabaseSnapshot(key);	WITHOUT_CLASSIFICATION	0.9999999614113622	WITHOUT_CLASSIFICATION	3.8588637732861385E-8	TEST
//addInitializedCollection(collection, persister, id);	WITHOUT_CLASSIFICATION	0.9999951584757841	WITHOUT_CLASSIFICATION	4.841524215804113E-6	TEST
//EARLY EXIT!	WITHOUT_CLASSIFICATION	0.9999736381539537	WITHOUT_CLASSIFICATION	2.6361846046264446E-5	TEST
//EARLY EXIT!	WITHOUT_CLASSIFICATION	0.9999736381539537	WITHOUT_CLASSIFICATION	2.6361846046264446E-5	TEST
/*|| oj.getJoinable().consumesCollectionAlias() */	WITHOUT_CLASSIFICATION	0.9999996335194297	WITHOUT_CLASSIFICATION	3.664805703619682E-7	TEST
// here we do not bother with the discriminator.	WITHOUT_CLASSIFICATION	0.9999960164652313	WITHOUT_CLASSIFICATION	3.983534768787767E-6	TEST
// Code to handle subclasses of topClass	WITHOUT_CLASSIFICATION	0.9999991916404181	WITHOUT_CLASSIFICATION	8.083595818777622E-7	TEST
//woops we got an instance of another class hierarchy branch	WITHOUT_CLASSIFICATION	0.9999971391714352	WITHOUT_CLASSIFICATION	2.8608285647860576E-6	TEST
// we can go straight to the first required row	WITHOUT_CLASSIFICATION	0.9999996066301031	WITHOUT_CLASSIFICATION	3.9336989687326416E-7	TEST
// we need to step through the rows one row at a time (slow)	WITHOUT_CLASSIFICATION	0.9999993093121675	WITHOUT_CLASSIFICATION	6.906878325300115E-7	TEST
// synchronized to avoid multi-thread access issues; defined as method synch to avoid // potential deadlock issues due to nature of code.	WITHOUT_CLASSIFICATION	0.9999999237696211	WITHOUT_CLASSIFICATION	7.623037889236275E-8	TEST
// Allows various loaders (ok mainly the QueryLoader :) to check // whether scrolling of their result set should be allowed. // // By default it is allowed.	WITHOUT_CLASSIFICATION	0.9999999473429231	WITHOUT_CLASSIFICATION	5.265707701738112E-8	TEST
//before adding to collection!	WITHOUT_CLASSIFICATION	0.9999994237383708	WITHOUT_CLASSIFICATION	5.762616292574443E-7	TEST
// if the current depth is 0, the root thing being loaded is the // many-to-many collection itself.  Here, it is alright to use // an inner join...	WITHOUT_CLASSIFICATION	0.999999851888905	WITHOUT_CLASSIFICATION	1.481110950362191E-7	TEST
//operations which cascade as far as the collection also cascade to collection elements	WITHOUT_CLASSIFICATION	0.9999998104261177	WITHOUT_CLASSIFICATION	1.895738822821782E-7	TEST
// simple, because we can't have a one-to-one or a collection  // (or even a property-ref) in a composite-element:	WITHOUT_CLASSIFICATION	0.9999999413390603	WITHOUT_CLASSIFICATION	5.8660939641810286E-8	TEST
//a composite key	WITHOUT_CLASSIFICATION	0.9999958320378632	WITHOUT_CLASSIFICATION	4.167962136702314E-6	TEST
// if no batch, use "foo = ? and bar = ?"	WITHOUT_CLASSIFICATION	0.9999998144358375	WITHOUT_CLASSIFICATION	1.8556416254758842E-7	TEST
//it must be a collection fetch	WITHOUT_CLASSIFICATION	0.9999978748357815	WITHOUT_CLASSIFICATION	2.125164218520913E-6	TEST
// needed later for many-to-many/filter application	WITHOUT_CLASSIFICATION	0.9999992532381731	WITHOUT_CLASSIFICATION	7.467618269736434E-7	TEST
/*&& etype.isReferenceToPrimaryKey()*/	WITHOUT_CLASSIFICATION	0.9999981323601416	WITHOUT_CLASSIFICATION	1.8676398584395903E-6	TEST
// it might still need to apply a collection ordering based on a // many-to-many defined order-by...	WITHOUT_CLASSIFICATION	0.999999974480312	WITHOUT_CLASSIFICATION	2.5519687960946814E-8	TEST
// if a composite key, use "( (foo = ? and bar = ?) or (foo = ? and bar = ?) )" for batching //TODO: unnecessary for databases with ANSI-style joins	WITHOUT_CLASSIFICATION	0.9999931061103655	WITHOUT_CLASSIFICATION	6.893889634409404E-6	TEST
// belong to other persister // belong to other persister	WITHOUT_CLASSIFICATION	0.9999910059691663	WITHOUT_CLASSIFICATION	8.994030833755041E-6	TEST
// we found it	WITHOUT_CLASSIFICATION	0.9999987144889921	WITHOUT_CLASSIFICATION	1.2855110078539928E-6	TEST
//we can use an inner join for the many-to-many	WITHOUT_CLASSIFICATION	0.9999904528279089	WITHOUT_CLASSIFICATION	9.547172091114644E-6	TEST
//disable a join back to this same association	WITHOUT_CLASSIFICATION	0.9999979223422629	WITHOUT_CLASSIFICATION	2.0776577370686774E-6	TEST
//NOTE: unlike all other Loaders, this one is NOT //      multithreaded, or cacheable!!	WITHOUT_CLASSIFICATION	0.9999088718471045	WITHOUT_CLASSIFICATION	9.112815289551504E-5	TEST
//the user visible aliases, which are unknown to the superclass, //these are not the actual "physical" SQL aliases	WITHOUT_CLASSIFICATION	0.9999997386431894	WITHOUT_CLASSIFICATION	2.613568106566079E-7	TEST
//root entity comes *last*	WITHOUT_CLASSIFICATION	0.9999985813077223	WITHOUT_CLASSIFICATION	1.4186922776415992E-6	TEST
//deliberately ignore return value!	WITHOUT_CLASSIFICATION	0.999997111299791	WITHOUT_CLASSIFICATION	2.888700209122076E-6	TEST
//alias may be null //EARLY EXIT	WITHOUT_CLASSIFICATION	0.999989640544603	WITHOUT_CLASSIFICATION	1.0359455396905865E-5	TEST
// if it is a compound path	WITHOUT_CLASSIFICATION	0.9999996052667646	WITHOUT_CLASSIFICATION	3.947332354345027E-7	TEST
// otherwise assume the parent is the the criteria that created us	WITHOUT_CLASSIFICATION	0.9999986425597095	WITHOUT_CLASSIFICATION	1.3574402905878878E-6	TEST
// if its the root criteria, we are done	WITHOUT_CLASSIFICATION	0.999999463714221	WITHOUT_CLASSIFICATION	5.362857789114205E-7	TEST
// otherwise, recurse	WITHOUT_CLASSIFICATION	0.999998346784629	WITHOUT_CLASSIFICATION	1.6532153711122533E-6	TEST
//the criteria instance	WITHOUT_CLASSIFICATION	0.9999980368655629	WITHOUT_CLASSIFICATION	1.9631344371447035E-6	TEST
// the entity name	WITHOUT_CLASSIFICATION	0.9999989874768779	WITHOUT_CLASSIFICATION	1.0125231222212597E-6	TEST
//not found in inner query , try the outer query	WITHOUT_CLASSIFICATION	0.9999509698284702	WITHOUT_CLASSIFICATION	4.903017152971879E-5	TEST
//not found in inner query , try the outer query	WITHOUT_CLASSIFICATION	0.9999509698284702	WITHOUT_CLASSIFICATION	4.903017152971879E-5	TEST
//it refers to an alias of a projection	WITHOUT_CLASSIFICATION	0.9999983664718575	WITHOUT_CLASSIFICATION	1.6335281425774788E-6	TEST
//should never happen, i think	WITHOUT_CLASSIFICATION	0.999995017024198	WITHOUT_CLASSIFICATION	4.98297580197153E-6	TEST
// Detect discriminator values...	WITHOUT_CLASSIFICATION	0.9999986649485787	WITHOUT_CLASSIFICATION	1.3350514212768815E-6	TEST
// Convert the string value into the proper type.	WITHOUT_CLASSIFICATION	0.9999985118838832	WITHOUT_CLASSIFICATION	1.4881161168429676E-6	TEST
// and the qualifier is not the alias of this criteria //      -> check to see if we belong to some criteria other //          than the one that created us	WITHOUT_CLASSIFICATION	0.999999895527421	WITHOUT_CLASSIFICATION	1.0447257899494366E-7	TEST
//it does not refer to an alias of a projection, //look for a property	WITHOUT_CLASSIFICATION	0.9999984294194199	WITHOUT_CLASSIFICATION	1.5705805800625637E-6	TEST
// Otherwise, this is an ordinary value.	WITHOUT_CLASSIFICATION	0.9999814566736152	WITHOUT_CLASSIFICATION	1.854332638486204E-5	TEST
// Currently *not* cachable if autodiscover types is in effect (e.g. "select * ...")	WITHOUT_CLASSIFICATION	0.9999998972802697	WITHOUT_CLASSIFICATION	1.027197303139445E-7	TEST
//	WITHOUT_CLASSIFICATION	0.9999527008540617	WITHOUT_CLASSIFICATION	4.729914593835468E-5	TEST
// this is only needed (afaict) for ResultTransformer processing...	WITHOUT_CLASSIFICATION	0.9999973191594766	WITHOUT_CLASSIFICATION	2.680840523221865E-6	TEST
// determine if the collection elements are entities...	WITHOUT_CLASSIFICATION	0.9999999232931513	WITHOUT_CLASSIFICATION	7.670684867748012E-8	TEST
// build an array with indices equal to the total number // of actual returns in the result Hibernate will return // for this query (scalars + non-scalars)	WITHOUT_CLASSIFICATION	0.9999993995171262	WITHOUT_CLASSIFICATION	6.004828737153113E-7	TEST
// replace {....} with corresponding column aliases	WITHOUT_CLASSIFICATION	0.9999995247661186	WITHOUT_CLASSIFICATION	4.7523388136412554E-7	TEST
// No additional open braces found in the string, append the // rest of the string in its entirty and quit this loop	WITHOUT_CLASSIFICATION	0.9999989960476015	WITHOUT_CLASSIFICATION	1.0039523986156896E-6	TEST
// apend everything up until the next encountered open brace	WITHOUT_CLASSIFICATION	0.9999993662097968	WITHOUT_CLASSIFICATION	6.33790203198146E-7	TEST
// it is a simple table alias {foo}	WITHOUT_CLASSIFICATION	0.9999954010891507	WITHOUT_CLASSIFICATION	4.5989108492985105E-6	TEST
// passing through anything we do not know : to support jdbc escape sequences HB-898	WITHOUT_CLASSIFICATION	0.9999994818748027	WITHOUT_CLASSIFICATION	5.181251972659804E-7	TEST
// passing through anything we do not know : to support jdbc escape sequences HB-898	WITHOUT_CLASSIFICATION	0.9999994818748027	WITHOUT_CLASSIFICATION	5.181251972659804E-7	TEST
// The current alias is referencing the collection to be eagerly fetched	WITHOUT_CLASSIFICATION	0.9999988101728556	WITHOUT_CLASSIFICATION	1.1898271443077053E-6	TEST
// it is a property reference {foo.bar}	WITHOUT_CLASSIFICATION	0.9999996433957643	WITHOUT_CLASSIFICATION	3.5660423568286945E-7	TEST
// Possibly handle :something parameters for the query ?	WITHOUT_CLASSIFICATION	0.9999746726779077	WITHOUT_CLASSIFICATION	2.5327322092291657E-5	TEST
// Let return-propertys override whatever the persister has for aliases.	WITHOUT_CLASSIFICATION	0.9999977938640954	WITHOUT_CLASSIFICATION	2.2061359046027247E-6	TEST
//	WITHOUT_CLASSIFICATION	0.9999527008540617	WITHOUT_CLASSIFICATION	4.729914593835468E-5	TEST
/*package*/	WITHOUT_CLASSIFICATION	0.9999826414449617	WITHOUT_CLASSIFICATION	1.7358555038213658E-5	TEST
//NOTE: EARLY EXIT!	WITHOUT_CLASSIFICATION	0.9999035822220526	WITHOUT_CLASSIFICATION	9.641777794744581E-5	TEST
//	WITHOUT_CLASSIFICATION	0.9999527008540617	WITHOUT_CLASSIFICATION	4.729914593835468E-5	TEST
// Now, process the returns	WITHOUT_CLASSIFICATION	0.9999981935293013	WITHOUT_CLASSIFICATION	1.8064706987029024E-6	TEST
//	WITHOUT_CLASSIFICATION	0.9999527008540617	WITHOUT_CLASSIFICATION	4.729914593835468E-5	TEST
// already been processed...	WITHOUT_CLASSIFICATION	0.9999984405452312	WITHOUT_CLASSIFICATION	1.5594547686756448E-6	TEST
// already been processed...	WITHOUT_CLASSIFICATION	0.9999984405452312	WITHOUT_CLASSIFICATION	1.5594547686756448E-6	TEST
// Make sure the owner alias is known...	WITHOUT_CLASSIFICATION	0.9999876943338877	WITHOUT_CLASSIFICATION	1.2305666112241966E-5	TEST
// first, break down the returns into maps keyed by alias // so that role returns can be more easily resolved to their owners	WITHOUT_CLASSIFICATION	0.9999992881823698	WITHOUT_CLASSIFICATION	7.118176301168975E-7	TEST
//	WITHOUT_CLASSIFICATION	0.9999527008540617	WITHOUT_CLASSIFICATION	4.729914593835468E-5	TEST
// If this return's alias has not been processed yet, do so b4 further processing of this return	WITHOUT_CLASSIFICATION	0.9999966233647692	WITHOUT_CLASSIFICATION	3.376635230708517E-6	TEST
//	WITHOUT_CLASSIFICATION	0.9999527008540617	WITHOUT_CLASSIFICATION	4.729914593835468E-5	TEST
// for merging of versioned entities, we consider the version having // been changed only when: // 1) the two version values are different; //      *AND* // 2) The target actually represents database state! // // This second condition is a special case which allows // an entity to be merged during the same transaction // (though during a seperate operation) in which it was // originally persisted/saved	WITHOUT_CLASSIFICATION	0.9999999996967018	WITHOUT_CLASSIFICATION	3.0329818176184335E-10	TEST
// this is the second pass through on a merge op, so here we limit the // replacement to associations types (value types were already replaced // during the first pass)	WITHOUT_CLASSIFICATION	0.9999997466841041	WITHOUT_CLASSIFICATION	2.5331589593684505E-7	TEST
//EARLY EXIT	WITHOUT_CLASSIFICATION	0.9999713616258873	WITHOUT_CLASSIFICATION	2.8638374112663208E-5	TEST
// cascade-save to collections AFTER the collection owner was saved	WITHOUT_CLASSIFICATION	0.9999999780355253	WITHOUT_CLASSIFICATION	2.1964474762875432E-8	TEST
// Initialize the error handling delegate.	WITHOUT_CLASSIFICATION	0.9999623430019219	WITHOUT_CLASSIFICATION	3.765699807821786E-5	TEST
// Use the delegate.	WITHOUT_CLASSIFICATION	0.9999977312872448	WITHOUT_CLASSIFICATION	2.2687127551499246E-6	TEST
// currently only the Hibernate-supplied DbTimestampType is supported here	WITHOUT_CLASSIFICATION	0.9999702099238389	WITHOUT_CLASSIFICATION	2.979007616107324E-5	TEST
// This is called when it's time to fully resolve a path expression.	WITHOUT_CLASSIFICATION	0.9999967022404358	WITHOUT_CLASSIFICATION	3.297759564236414E-6	TEST
// make a new one	WITHOUT_CLASSIFICATION	0.9999966019359791	WITHOUT_CLASSIFICATION	3.398064020874967E-6	TEST
// not so sure this is even valid subtree.  but if it was, it'd // represent two unrelated table references...	WITHOUT_CLASSIFICATION	0.9999997177884156	WITHOUT_CLASSIFICATION	2.822115845096948E-7	TEST
// (NOT (GT a b) ) => (LE a b)	WITHOUT_CLASSIFICATION	0.9999859584160439	WITHOUT_CLASSIFICATION	1.4041583956126113E-5	TEST
//private Type[] sqlResultTypes;	WITHOUT_CLASSIFICATION	0.9999930402079306	WITHOUT_CLASSIFICATION	6.959792069494174E-6	TEST
//include the discriminator and class-level where, but not filters	WITHOUT_CLASSIFICATION	0.999997652963402	WITHOUT_CLASSIFICATION	2.3470365979079937E-6	TEST
//sqlResultTypes = selectClause.getSqlResultTypes();	WITHOUT_CLASSIFICATION	0.9999987862536032	WITHOUT_CLASSIFICATION	1.2137463968575456E-6	TEST
//by default	WITHOUT_CLASSIFICATION	0.9999960369930393	WITHOUT_CLASSIFICATION	3.963006960611405E-6	TEST
// This is now handled earlier in this method.	WITHOUT_CLASSIFICATION	0.9999564720200088	WITHOUT_CLASSIFICATION	4.352797999112155E-5	TEST
// -- Loader implementation --	WITHOUT_CLASSIFICATION	0.9999991754768739	WITHOUT_CLASSIFICATION	8.245231261431409E-7	TEST
// -- Loader overrides --	WITHOUT_CLASSIFICATION	0.9999987077716482	WITHOUT_CLASSIFICATION	1.2922283517364315E-6	TEST
// (NOT (IS_NULL a b) ) => (IS_NOT_NULL a b)	WITHOUT_CLASSIFICATION	0.9999824081825748	WITHOUT_CLASSIFICATION	1.7591817425200148E-5	TEST
//NONE, because its the requested lock mode, not the actual! 	WITHOUT_CLASSIFICATION	0.9999754523732117	WITHOUT_CLASSIFICATION	2.4547626788290406E-5	TEST
// meant to handle dynamic instantiation queries...	WITHOUT_CLASSIFICATION	0.9999997106049983	WITHOUT_CLASSIFICATION	2.8939500174369234E-7	TEST
// --- Query translator methods ---	WITHOUT_CLASSIFICATION	0.9999989927192046	WITHOUT_CLASSIFICATION	1.0072807954159611E-6	TEST
// -- Implementation private methods --	WITHOUT_CLASSIFICATION	0.9999990145019748	WITHOUT_CLASSIFICATION	9.854980250796472E-7	TEST
//deduplicate unique constraints sharing the same columns //this is needed by Hibernate Annotations since it creates automagically // unique constraints for the user	WITHOUT_CLASSIFICATION	0.999999649201908	WITHOUT_CLASSIFICATION	3.5079809200254455E-7	TEST
// Try to find out the name of the primary key to create it as identity if the IdentityGenerator is used	WITHOUT_CLASSIFICATION	0.9999987383975446	WITHOUT_CLASSIFICATION	1.2616024553925426E-6	TEST
// to support dialects that have their own identity data type	WITHOUT_CLASSIFICATION	0.9999997738620384	WITHOUT_CLASSIFICATION	2.2613796159432654E-7	TEST
// Prepare the left hand side and get the data type.	WITHOUT_CLASSIFICATION	0.9999983283318604	WITHOUT_CLASSIFICATION	1.6716681396109098E-6	TEST
//used also for generation of FK names!	WITHOUT_CLASSIFICATION	0.9999982417061469	WITHOUT_CLASSIFICATION	1.758293853102483E-6	TEST
//usually useless	WITHOUT_CLASSIFICATION	0.9999554082296201	WITHOUT_CLASSIFICATION	4.459177037974294E-5	TEST
// added this caching as I noticed that getType() is being called multiple times...	WITHOUT_CLASSIFICATION	0.9999971538698924	WITHOUT_CLASSIFICATION	2.8461301075997305E-6	TEST
//do not add unique constraint on DB not supporting unique and nullable columns	WITHOUT_CLASSIFICATION	0.9999997142483984	WITHOUT_CLASSIFICATION	2.857516015331181E-7	TEST
//for backward compatibility, disable this:	WITHOUT_CLASSIFICATION	0.9999970770209394	WITHOUT_CLASSIFICATION	2.9229790605396E-6	TEST
//may be final //may be final //may be final	WITHOUT_CLASSIFICATION	0.9999794670104086	WITHOUT_CLASSIFICATION	2.0532989591379814E-5	TEST
//may be final	WITHOUT_CLASSIFICATION	0.9999924622292273	WITHOUT_CLASSIFICATION	7.537770772663675E-6	TEST
// may be final	WITHOUT_CLASSIFICATION	0.9999981231225045	WITHOUT_CLASSIFICATION	1.8768774954802848E-6	TEST
// Custom SQL	WITHOUT_CLASSIFICATION	0.999997750023705	WITHOUT_CLASSIFICATION	2.2499762950410554E-6	TEST
//Primary key constraint	WITHOUT_CLASSIFICATION	0.9999991285688328	WITHOUT_CLASSIFICATION	8.714311672137769E-7	TEST
// the root of the incoming property path matched one // of the embedded composite identifier properties	WITHOUT_CLASSIFICATION	0.999999792176892	WITHOUT_CLASSIFICATION	2.078231079337294E-7	TEST
// ignore it...	WITHOUT_CLASSIFICATION	0.9999994482020628	WITHOUT_CLASSIFICATION	5.517979372227707E-7	TEST
//flat recursive algorithm	WITHOUT_CLASSIFICATION	0.9999984331048988	WITHOUT_CLASSIFICATION	1.5668951013055747E-6	TEST
//an identifier mapper => getKey will be included in the getNonDuplicatedPropertyIterator() //and checked later, so it needs to be excluded	WITHOUT_CLASSIFICATION	0.9999978449845365	WITHOUT_CLASSIFICATION	2.155015463519315E-6	TEST
//if the hibernate-mapping did not specify a schema/catalog, use the defaults //specified by properties - but note that if the schema/catalog were specified //in hibernate-mapping, or as params, they will already be initialized and //will override the values set here (they are in identifierGeneratorProperties)	WITHOUT_CLASSIFICATION	0.9999998009749896	WITHOUT_CLASSIFICATION	1.9902501047644823E-7	TEST
//pass the entity-name, if not a collection-id	WITHOUT_CLASSIFICATION	0.9999996022998563	WITHOUT_CLASSIFICATION	3.977001437270846E-7	TEST
// Custom SQL	WITHOUT_CLASSIFICATION	0.999997750023705	WITHOUT_CLASSIFICATION	2.2499762950410554E-6	TEST
//Primary key constraint	WITHOUT_CLASSIFICATION	0.9999991285688328	WITHOUT_CLASSIFICATION	8.714311672137769E-7	TEST
//pass the column name (a generated id almost always has a single column)	WITHOUT_CLASSIFICATION	0.9999924008961328	WITHOUT_CLASSIFICATION	7.599103867112213E-6	TEST
//needed to satisfy KeyValue	WITHOUT_CLASSIFICATION	0.9999950536810415	WITHOUT_CLASSIFICATION	4.946318958518504E-6	TEST
// empty means no scoping	WITHOUT_CLASSIFICATION	0.9999998379493188	WITHOUT_CLASSIFICATION	1.6205068112437295E-7	TEST
// index should be last column listed	WITHOUT_CLASSIFICATION	0.9999975260322277	WITHOUT_CLASSIFICATION	2.4739677723673225E-6	TEST
//if it is a formula index, use the element columns in the PK	WITHOUT_CLASSIFICATION	0.999999694141668	WITHOUT_CLASSIFICATION	3.058583320575171E-7	TEST
// don't create a unique key, 'cos some // databases don't like a UK on nullable // columns	WITHOUT_CLASSIFICATION	0.9999997685549441	WITHOUT_CLASSIFICATION	2.3144505579017023E-7	TEST
/*ArrayList list = new ArrayList();	WITHOUT_CLASSIFICATION	0.9999882765683743	WITHOUT_CLASSIFICATION	1.1723431625783296E-5	TEST
// }	WITHOUT_CLASSIFICATION	0.9999942747442806	WITHOUT_CLASSIFICATION	5.7252557194097895E-6	TEST
// no foreign key element of for a one-to-many	WITHOUT_CLASSIFICATION	0.9999993394749968	WITHOUT_CLASSIFICATION	6.605250031733745E-7	TEST
//TODO: we could just return all false...	WITHOUT_CLASSIFICATION	0.999873037858089	WITHOUT_CLASSIFICATION	1.269621419109562E-4	TEST
// the case of a foreign key to something other than the pk is handled in createPropertyRefConstraints	WITHOUT_CLASSIFICATION	0.9999992150979345	WITHOUT_CLASSIFICATION	7.849020654119075E-7	TEST
//TODO: we could just return all false...	WITHOUT_CLASSIFICATION	0.999873037858089	WITHOUT_CLASSIFICATION	1.269621419109562E-4	TEST
// if the property mapping consists of all formulas,  // make it non-updateable	WITHOUT_CLASSIFICATION	0.9999991599428696	WITHOUT_CLASSIFICATION	8.400571303787324E-7	TEST
//columnUpdateability.length==0 ||	WITHOUT_CLASSIFICATION	0.9999956146822083	WITHOUT_CLASSIFICATION	4.385317791719558E-6	TEST
// if the property mapping consists of all formulas,  // make it insertable	WITHOUT_CLASSIFICATION	0.9999981722959016	WITHOUT_CLASSIFICATION	1.8277040984174502E-6	TEST
// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ // stuff that is Tuplizer-centric ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ // ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999960359991337	WITHOUT_CLASSIFICATION	3.96400086631562E-6	TEST
// expected type is intrinsic here...	WITHOUT_CLASSIFICATION	0.9999897001384933	WITHOUT_CLASSIFICATION	1.0299861506601806E-5	TEST
//}	WITHOUT_CLASSIFICATION	0.9999670237120217	WITHOUT_CLASSIFICATION	3.297628797833846E-5	TEST
//}	WITHOUT_CLASSIFICATION	0.9999670237120217	WITHOUT_CLASSIFICATION	3.297628797833846E-5	TEST
//return memberPersister.getPropertyType(propertyName);	WITHOUT_CLASSIFICATION	0.9999850562914155	WITHOUT_CLASSIFICATION	1.4943708584547484E-5	TEST
//return memberPersister.toColumns(alias, propertyName);	WITHOUT_CLASSIFICATION	0.9999925976984672	WITHOUT_CLASSIFICATION	7.402301532860172E-6	TEST
//return memberPersister.getType();	WITHOUT_CLASSIFICATION	0.9999856283832912	WITHOUT_CLASSIFICATION	1.4371616708909963E-5	TEST
/*&& !indexIsFormula*/	WITHOUT_CLASSIFICATION	0.99999620216322	WITHOUT_CLASSIFICATION	3.797836779950159E-6	TEST
//	WITHOUT_CLASSIFICATION	0.9999527008540617	WITHOUT_CLASSIFICATION	4.729914593835468E-5	TEST
//instanceof AssociationType;	WITHOUT_CLASSIFICATION	0.999999547986504	WITHOUT_CLASSIFICATION	4.520134959889064E-7	TEST
// we need to determine the best way to know that two joinables // represent a single many-to-many...	WITHOUT_CLASSIFICATION	0.999996834057692	WITHOUT_CLASSIFICATION	3.165942307915338E-6	TEST
//strip leading ','	WITHOUT_CLASSIFICATION	0.9999900838480498	WITHOUT_CLASSIFICATION	9.916151950282095E-6	TEST
//public boolean isSubselectLoadable();	WITHOUT_CLASSIFICATION	0.9999956986846904	WITHOUT_CLASSIFICATION	4.301315309659747E-6	TEST
// KEY	WITHOUT_CLASSIFICATION	0.9999912793216115	WITHOUT_CLASSIFICATION	8.720678388459407E-6	TEST
//columns	WITHOUT_CLASSIFICATION	0.999988095524341	WITHOUT_CLASSIFICATION	1.1904475659149829E-5	TEST
//SQL statements	WITHOUT_CLASSIFICATION	0.9999959540295187	WITHOUT_CLASSIFICATION	4.045970481320352E-6	TEST
//extra information about the element type	WITHOUT_CLASSIFICATION	0.9999984294470293	WITHOUT_CLASSIFICATION	1.570552970588356E-6	TEST
//types	WITHOUT_CLASSIFICATION	0.9999662830702731	WITHOUT_CLASSIFICATION	3.371692972676622E-5	TEST
// custom sql	WITHOUT_CLASSIFICATION	0.99999882760168	WITHOUT_CLASSIFICATION	1.1723983199310204E-6	TEST
//private final String unquotedIdentifierColumnName;	WITHOUT_CLASSIFICATION	0.9999949136982572	WITHOUT_CLASSIFICATION	5.086301742767446E-6	TEST
// dynamic filters specifically for many-to-many inside the collection	WITHOUT_CLASSIFICATION	0.9999998310197658	WITHOUT_CLASSIFICATION	1.6898023415112738E-7	TEST
// dynamic filters for the collection	WITHOUT_CLASSIFICATION	0.9999990561607064	WITHOUT_CLASSIFICATION	9.438392936004467E-7	TEST
// NativeSQL: collect key column and auto-aliases	WITHOUT_CLASSIFICATION	0.9999956930417412	WITHOUT_CLASSIFICATION	4.306958258901668E-6	TEST
//unquotedKeyColumnNames = StringHelper.unQuote(keyColumnAliases);	WITHOUT_CLASSIFICATION	0.9999935811954475	WITHOUT_CLASSIFICATION	6.418804552499828E-6	TEST
//ELEMENT	WITHOUT_CLASSIFICATION	0.9998476989929197	WITHOUT_CLASSIFICATION	1.523010070803226E-4	TEST
// NativeSQL: collect element column and auto-aliases	WITHOUT_CLASSIFICATION	0.9999969749449105	WITHOUT_CLASSIFICATION	3.025055089613095E-6	TEST
// INDEX AND ROW SELECT	WITHOUT_CLASSIFICATION	0.9999793665519954	WITHOUT_CLASSIFICATION	2.0633448004621638E-5	TEST
// NativeSQL: collect index column and auto-aliases	WITHOUT_CLASSIFICATION	0.9999988462108713	WITHOUT_CLASSIFICATION	1.1537891287043498E-6	TEST
//unquotedIdentifierColumnName = identifierColumnAlias;	WITHOUT_CLASSIFICATION	0.9999929134485378	WITHOUT_CLASSIFICATION	7.086551462218694E-6	TEST
//unquotedIdentifierColumnName = null;	WITHOUT_CLASSIFICATION	0.9999921965689714	WITHOUT_CLASSIFICATION	7.803431028644881E-6	TEST
//GENERATE THE SQL:	WITHOUT_CLASSIFICATION	0.9999736673144268	WITHOUT_CLASSIFICATION	2.633268557323885E-5	TEST
// for non-arrays, we don't need to know the element class //elementType.returnedClass();	WITHOUT_CLASSIFICATION	0.9999998847720398	WITHOUT_CLASSIFICATION	1.1522796016617876E-7	TEST
//not all classpersisters implement PropertyMapping!	WITHOUT_CLASSIFICATION	0.9999266655336922	WITHOUT_CLASSIFICATION	7.333446630775332E-5	TEST
// Handle any filters applied to this collection	WITHOUT_CLASSIFICATION	0.9999976530460376	WITHOUT_CLASSIFICATION	2.3469539623583184E-6	TEST
// Handle any filters applied to this collection for many-to-many	WITHOUT_CLASSIFICATION	0.9999964456866925	WITHOUT_CLASSIFICATION	3.5543133075570352E-6	TEST
//if there is a user-specified loader, return that //TODO: filters!?	WITHOUT_CLASSIFICATION	0.9997711606960736	WITHOUT_CLASSIFICATION	2.2883930392639845E-4	TEST
// Take care of any entities that might have // been evicted!	WITHOUT_CLASSIFICATION	0.9999814113727881	WITHOUT_CLASSIFICATION	1.8588627211918052E-5	TEST
//strip leading ','	WITHOUT_CLASSIFICATION	0.9999900838480498	WITHOUT_CLASSIFICATION	9.916151950282095E-6	TEST
// Run a subquery loader	WITHOUT_CLASSIFICATION	0.9999996392303511	WITHOUT_CLASSIFICATION	3.607696489477712E-7	TEST
//needed by arrays	WITHOUT_CLASSIFICATION	0.9999919116738331	WITHOUT_CLASSIFICATION	8.088326166999836E-6	TEST
//TODO: something with formulas...	WITHOUT_CLASSIFICATION	0.9984098588488807	WITHOUT_CLASSIFICATION	0.0015901411511193906	TEST
//an assertion	WITHOUT_CLASSIFICATION	0.9998422439768292	WITHOUT_CLASSIFICATION	1.577560231708305E-4	TEST
// Remove all the old entries	WITHOUT_CLASSIFICATION	0.9999989359904737	WITHOUT_CLASSIFICATION	1.064009526292442E-6	TEST
//create all the new entries	WITHOUT_CLASSIFICATION	0.9999987501614281	WITHOUT_CLASSIFICATION	1.2498385719103179E-6	TEST
/*&& !indexIsFormula*/	WITHOUT_CLASSIFICATION	0.99999620216322	WITHOUT_CLASSIFICATION	3.797836779950159E-6	TEST
/*&& !indexIsFormula*/	WITHOUT_CLASSIFICATION	0.99999620216322	WITHOUT_CLASSIFICATION	3.797836779950159E-6	TEST
//delete all the deleted entries	WITHOUT_CLASSIFICATION	0.9999865151649374	WITHOUT_CLASSIFICATION	1.3484835062678853E-5	TEST
//insert all the new entries	WITHOUT_CLASSIFICATION	0.9999854488830426	WITHOUT_CLASSIFICATION	1.4551116957406281E-5	TEST
//==elementType ??	WITHOUT_CLASSIFICATION	0.999989720037296	WITHOUT_CLASSIFICATION	1.0279962703950274E-5	TEST
//update all the modified entries	WITHOUT_CLASSIFICATION	0.9999783225527734	WITHOUT_CLASSIFICATION	2.1677447226687276E-5	TEST
//identifier collections not supported for 1-to-many	WITHOUT_CLASSIFICATION	0.9999990413779721	WITHOUT_CLASSIFICATION	9.586220278243742E-7	TEST
// update removed rows fks to null	WITHOUT_CLASSIFICATION	0.9999966988259604	WITHOUT_CLASSIFICATION	3.3011740396684113E-6	TEST
// will still be issued when it used to be null	WITHOUT_CLASSIFICATION	0.9999960629133922	WITHOUT_CLASSIFICATION	3.937086607916394E-6	TEST
// now update all changed or added rows fks	WITHOUT_CLASSIFICATION	0.9999982546468845	WITHOUT_CLASSIFICATION	1.7453531154320066E-6	TEST
//	WITHOUT_CLASSIFICATION	0.9999527008540617	WITHOUT_CLASSIFICATION	4.729914593835468E-5	TEST
//use suffix for the entity columns	WITHOUT_CLASSIFICATION	0.9999987513152017	WITHOUT_CLASSIFICATION	1.248684798340796E-6	TEST
// the class hierarchy structure	WITHOUT_CLASSIFICATION	0.9999983066519236	WITHOUT_CLASSIFICATION	1.6933480764764218E-6	TEST
//private final String rootTableName;	WITHOUT_CLASSIFICATION	0.9999948394950052	WITHOUT_CLASSIFICATION	5.160504994826141E-6	TEST
//INITIALIZATION:	WITHOUT_CLASSIFICATION	0.9998657990285995	WITHOUT_CLASSIFICATION	1.3420097140059474E-4	TEST
//Custom SQL	WITHOUT_CLASSIFICATION	0.9999869334281313	WITHOUT_CLASSIFICATION	1.3066571868700582E-5	TEST
// the class hierarchy structure	WITHOUT_CLASSIFICATION	0.9999983066519236	WITHOUT_CLASSIFICATION	1.6933480764764218E-6	TEST
// Execute the SQL:	WITHOUT_CLASSIFICATION	0.9999988213537573	WITHOUT_CLASSIFICATION	1.1786462427272429E-6	TEST
// This could also just be true all the time...	WITHOUT_CLASSIFICATION	0.9999970182189791	WITHOUT_CLASSIFICATION	2.98178102087357E-6	TEST
//chop the last union (all)	WITHOUT_CLASSIFICATION	0.9999945635588486	WITHOUT_CLASSIFICATION	5.436441151365179E-6	TEST
//TODO: check this....	WITHOUT_CLASSIFICATION	0.9991580922663881	WITHOUT_CLASSIFICATION	8.419077336119602E-4	TEST
//INITIALIZATION:	WITHOUT_CLASSIFICATION	0.9998657990285995	WITHOUT_CLASSIFICATION	1.3420097140059474E-4	TEST
// properties of this class, including inherited properties	WITHOUT_CLASSIFICATION	0.9999990023726337	WITHOUT_CLASSIFICATION	9.976273662091284E-7	TEST
// the closure of all properties in the entire hierarchy including // subclasses and superclasses of this class	WITHOUT_CLASSIFICATION	0.999999777414615	WITHOUT_CLASSIFICATION	2.2258538504928882E-7	TEST
// the closure of all columns used by the entire hierarchy including // subclasses and superclasses of this class	WITHOUT_CLASSIFICATION	0.9999997865709287	WITHOUT_CLASSIFICATION	2.1342907124631924E-7	TEST
// subclass discrimination works by assigning particular // values to certain combinations of null primary key // values in the outer join using an SQL CASE	WITHOUT_CLASSIFICATION	0.9999999777289034	WITHOUT_CLASSIFICATION	2.227109663516477E-8	TEST
//MULTITABLES	WITHOUT_CLASSIFICATION	0.9999296562484052	WITHOUT_CLASSIFICATION	7.03437515946875E-5	TEST
// Custom sql	WITHOUT_CLASSIFICATION	0.9999977018620211	WITHOUT_CLASSIFICATION	2.2981379789217285E-6	TEST
// subclass closure properties	WITHOUT_CLASSIFICATION	0.9999996134972197	WITHOUT_CLASSIFICATION	3.865027803401414E-7	TEST
// SUBCLASSES	WITHOUT_CLASSIFICATION	0.9999970346817872	WITHOUT_CLASSIFICATION	2.965318212713767E-6	TEST
//( (Column) model.getTable().getPrimaryKey().getColumnIterator().next() ).getName();	WITHOUT_CLASSIFICATION	0.9999819383170135	WITHOUT_CLASSIFICATION	1.8061682986400243E-5	TEST
//( (Column) sc.getTable().getPrimaryKey().getColumnIterator().next() ).getName();	WITHOUT_CLASSIFICATION	0.9999899433539778	WITHOUT_CLASSIFICATION	1.0056646022253262E-5	TEST
// don't need subclass tables, because they can't appear in conditions	WITHOUT_CLASSIFICATION	0.9999999674369084	WITHOUT_CLASSIFICATION	3.2563091481181985E-8	TEST
// special case where we need to force incloude all subclass joins	WITHOUT_CLASSIFICATION	0.9999998191831667	WITHOUT_CLASSIFICATION	1.808168331818313E-7	TEST
// the class hierarchy structure	WITHOUT_CLASSIFICATION	0.9999983066519236	WITHOUT_CLASSIFICATION	1.6933480764764218E-6	TEST
// properties of this class, including inherited properties	WITHOUT_CLASSIFICATION	0.9999990023726337	WITHOUT_CLASSIFICATION	9.976273662091284E-7	TEST
// the closure of all columns used by the entire hierarchy including // subclasses and superclasses of this class	WITHOUT_CLASSIFICATION	0.9999997865709287	WITHOUT_CLASSIFICATION	2.1342907124631924E-7	TEST
//get em on the second pass!	WITHOUT_CLASSIFICATION	0.9999971610114448	WITHOUT_CLASSIFICATION	2.83898855520951E-6	TEST
// now look up the object we are really interested in! // (this lets us correctly handle proxies and multi-row // or multi-column queries)	WITHOUT_CLASSIFICATION	0.9999945504537509	WITHOUT_CLASSIFICATION	5.449546249184166E-6	TEST
// discriminator column	WITHOUT_CLASSIFICATION	0.9999994725807092	WITHOUT_CLASSIFICATION	5.274192907190759E-7	TEST
//INITIALIZATION:	WITHOUT_CLASSIFICATION	0.9998657990285995	WITHOUT_CLASSIFICATION	1.3420097140059474E-4	TEST
//private final Map propertyTableNumbersByName = new HashMap();	WITHOUT_CLASSIFICATION	0.9999984198439883	WITHOUT_CLASSIFICATION	1.5801560116838924E-6	TEST
// CLASS + TABLE	WITHOUT_CLASSIFICATION	0.9999957767261156	WITHOUT_CLASSIFICATION	4.223273884464809E-6	TEST
// DISCRIMINATOR	WITHOUT_CLASSIFICATION	0.9999857634155818	WITHOUT_CLASSIFICATION	1.4236584418213871E-5	TEST
// PROPERTIES	WITHOUT_CLASSIFICATION	0.9999918385121593	WITHOUT_CLASSIFICATION	8.161487840657556E-6	TEST
// SUBCLASSES	WITHOUT_CLASSIFICATION	0.9999970346817872	WITHOUT_CLASSIFICATION	2.965318212713767E-6	TEST
// Execute the SQL:	WITHOUT_CLASSIFICATION	0.9999988213537573	WITHOUT_CLASSIFICATION	1.1786462427272429E-6	TEST
// JOINS	WITHOUT_CLASSIFICATION	0.9999894059095861	WITHOUT_CLASSIFICATION	1.0594090413854537E-5	TEST
//propertyTableNumbersByName.put( prop.getName(), join );	WITHOUT_CLASSIFICATION	0.9999804298843459	WITHOUT_CLASSIFICATION	1.95701156540817E-5	TEST
//Access cached SQL	WITHOUT_CLASSIFICATION	0.9999917314365162	WITHOUT_CLASSIFICATION	8.268563483858128E-6	TEST
//figure out which tables need to be fetched	WITHOUT_CLASSIFICATION	0.9999918748378204	WITHOUT_CLASSIFICATION	8.125162179734707E-6	TEST
//figure out which columns are needed	WITHOUT_CLASSIFICATION	0.999999170226772	WITHOUT_CLASSIFICATION	8.297732280599237E-7	TEST
//figure out which formulas are needed	WITHOUT_CLASSIFICATION	0.999998556638312	WITHOUT_CLASSIFICATION	1.4433616879092541E-6	TEST
//render the SQL	WITHOUT_CLASSIFICATION	0.9999941573918987	WITHOUT_CLASSIFICATION	5.8426081012494015E-6	TEST
// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ // stuff that is Tuplizer-centric ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ // ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999960359991337	WITHOUT_CLASSIFICATION	3.96400086631562E-6	TEST
// moved up from AbstractEntityPersister ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999992984288345	WITHOUT_CLASSIFICATION	7.015711654230264E-7	TEST
// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999683638219775	WITHOUT_CLASSIFICATION	3.1636178022498625E-5	TEST
// The optional SQL string defined in the where attribute	WITHOUT_CLASSIFICATION	0.9999998415059558	WITHOUT_CLASSIFICATION	1.5849404413746155E-7	TEST
//information about lazy properties of this class	WITHOUT_CLASSIFICATION	0.9999990402474079	WITHOUT_CLASSIFICATION	9.597525920668452E-7	TEST
//information about all properties in class hierarchy	WITHOUT_CLASSIFICATION	0.9999991685407753	WITHOUT_CLASSIFICATION	8.314592247362837E-7	TEST
//information about all columns/formulas in class hierarchy	WITHOUT_CLASSIFICATION	0.9999995603903533	WITHOUT_CLASSIFICATION	4.3960964666536983E-7	TEST
// dynamic filters attached to the class-level	WITHOUT_CLASSIFICATION	0.9999990820887766	WITHOUT_CLASSIFICATION	9.179112232258737E-7	TEST
// SQL strings	WITHOUT_CLASSIFICATION	0.9999989055872612	WITHOUT_CLASSIFICATION	1.0944127387659843E-6	TEST
// for objects that came in via update()	WITHOUT_CLASSIFICATION	0.9999988025418713	WITHOUT_CLASSIFICATION	1.1974581286582298E-6	TEST
// PROPERTIES	WITHOUT_CLASSIFICATION	0.9999918385121593	WITHOUT_CLASSIFICATION	8.161487840657556E-6	TEST
// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999683638219775	WITHOUT_CLASSIFICATION	3.1636178022498625E-5	TEST
// IDENTIFIER	WITHOUT_CLASSIFICATION	0.999971103371477	WITHOUT_CLASSIFICATION	2.889662852300769E-5	TEST
// VERSION	WITHOUT_CLASSIFICATION	0.9999918908825604	WITHOUT_CLASSIFICATION	8.109117439714044E-6	TEST
//WHERE STRING	WITHOUT_CLASSIFICATION	0.9999600695824189	WITHOUT_CLASSIFICATION	3.99304175811099E-5	TEST
// SUBCLASS PROPERTY CLOSURE	WITHOUT_CLASSIFICATION	0.9999958066869943	WITHOUT_CLASSIFICATION	4.193313005647565E-6	TEST
//before add :-)	WITHOUT_CLASSIFICATION	0.9999927490302313	WITHOUT_CLASSIFICATION	7.250969768644493E-6	TEST
// Handle any filters applied to the class level	WITHOUT_CLASSIFICATION	0.9999927606835157	WITHOUT_CLASSIFICATION	7.23931648424464E-6	TEST
// only one-to-one is lazy fetched	WITHOUT_CLASSIFICATION	0.9999973202039226	WITHOUT_CLASSIFICATION	2.679796077513574E-6	TEST
//note early exit here:	WITHOUT_CLASSIFICATION	0.9998698104331533	WITHOUT_CLASSIFICATION	1.3018956684675406E-4	TEST
// object have been loaded with setReadOnly(true); HHH-2236	WITHOUT_CLASSIFICATION	0.9999996657163855	WITHOUT_CLASSIFICATION	3.3428361450895084E-7	TEST
// NOTE: this assumes something about how propertySelectFragment is implemented by the subclass!	WITHOUT_CLASSIFICATION	0.999316606292246	WITHOUT_CLASSIFICATION	6.833937077540969E-4	TEST
//strip leading ", "	WITHOUT_CLASSIFICATION	0.9999911199557615	WITHOUT_CLASSIFICATION	8.88004423846406E-6	TEST
//if there is no resulting row, return null	WITHOUT_CLASSIFICATION	0.9999787298943199	WITHOUT_CLASSIFICATION	2.1270105679991286E-5	TEST
//otherwise return the "hydrated" state (ie. associations are not resolved)	WITHOUT_CLASSIFICATION	0.9999989447629373	WITHOUT_CLASSIFICATION	1.055237062750505E-6	TEST
//null owner ok??	WITHOUT_CLASSIFICATION	0.9999744420505781	WITHOUT_CLASSIFICATION	2.5557949421911484E-5	TEST
// null sql means that the only lazy properties // are shared PK one-to-one associations which are // handled differently in the Type#nullSafeGet code...	WITHOUT_CLASSIFICATION	0.9999999788493682	WITHOUT_CLASSIFICATION	2.1150631806038465E-8	TEST
// Create a new FROM node for the referenced class.	WITHOUT_CLASSIFICATION	0.999999787382601	WITHOUT_CLASSIFICATION	2.1261739899868945E-7	TEST
// the difficulty here is exactly what do we update in order to // force the version to be incremented in the db...	WITHOUT_CLASSIFICATION	0.9999991123709072	WITHOUT_CLASSIFICATION	8.876290927426887E-7	TEST
// performance op to avoid the array search	WITHOUT_CLASSIFICATION	0.9999996935757958	WITHOUT_CLASSIFICATION	3.064242041710985E-7	TEST
// properly handle property-ref-based associations	WITHOUT_CLASSIFICATION	0.9999992242067489	WITHOUT_CLASSIFICATION	7.757932509976385E-7	TEST
//Enable for HHH-440, which we don't like:	WITHOUT_CLASSIFICATION	0.9999908948771692	WITHOUT_CLASSIFICATION	9.105122830754262E-6	TEST
// ALIASES	WITHOUT_CLASSIFICATION	0.9999955487112686	WITHOUT_CLASSIFICATION	4.451288731438834E-6	TEST
// aliases named identifier ( alias.idname )	WITHOUT_CLASSIFICATION	0.9999980817746414	WITHOUT_CLASSIFICATION	1.918225358605757E-6	TEST
// aliases for composite-id's	WITHOUT_CLASSIFICATION	0.9999989179724809	WITHOUT_CLASSIFICATION	1.0820275190642927E-6	TEST
// Fetch embedded identifiers propertynames from the "virtual" identifier component	WITHOUT_CLASSIFICATION	0.9999998173938737	WITHOUT_CLASSIFICATION	1.8260612634118455E-7	TEST
// embedded composite ids ( alias.idname1, alias.idname2 )	WITHOUT_CLASSIFICATION	0.9999998072516997	WITHOUT_CLASSIFICATION	1.927483002759938E-7	TEST
// TODO: skip formulas?	WITHOUT_CLASSIFICATION	0.9990143769319748	WITHOUT_CLASSIFICATION	9.856230680252744E-4	TEST
//don't need filters for the static loaders	WITHOUT_CLASSIFICATION	0.9999924909201784	WITHOUT_CLASSIFICATION	7.509079821659262E-6	TEST
//do two passes, for collection property-ref!	WITHOUT_CLASSIFICATION	0.999995403852476	WITHOUT_CLASSIFICATION	4.596147524023764E-6	TEST
// select the correct row by either pk or rowid	WITHOUT_CLASSIFICATION	0.9999985983996338	WITHOUT_CLASSIFICATION	1.4016003662083454E-6	TEST
//TODO: eventually, rowIdName[j]	WITHOUT_CLASSIFICATION	0.9992099094133781	WITHOUT_CLASSIFICATION	7.900905866219205E-4	TEST
// this is a property of the table, which we are updating	WITHOUT_CLASSIFICATION	0.999999705038268	WITHOUT_CLASSIFICATION	2.9496173203667867E-7	TEST
// special shortcut for id properties, skip the join! // this must only occur at the _end_ of a path expression	WITHOUT_CLASSIFICATION	0.999999014407517	WITHOUT_CLASSIFICATION	9.855924829755554E-7	TEST
// we are using "all" or "dirty" property-based optimistic locking	WITHOUT_CLASSIFICATION	0.9999996311033058	WITHOUT_CLASSIFICATION	3.688966941933807E-7	TEST
// nothing to do; even if the operand is a parameter, no way we could // infer an appropriate expected type here	WITHOUT_CLASSIFICATION	0.9999988903711863	WITHOUT_CLASSIFICATION	1.1096288136536692E-6	TEST
// this property belongs on the table and is to be inserted	WITHOUT_CLASSIFICATION	0.999983473173504	WITHOUT_CLASSIFICATION	1.6526826496021972E-5	TEST
// add normal properties	WITHOUT_CLASSIFICATION	0.99999948048447	WITHOUT_CLASSIFICATION	5.195155300050454E-7	TEST
// add the discriminator	WITHOUT_CLASSIFICATION	0.9999991742559478	WITHOUT_CLASSIFICATION	8.257440521217381E-7	TEST
// more specifically : "? [op] datetime" //      1) if the operator is MINUS, the param needs to be of //          some datetime type //      2) if the operator is PLUS, the param needs to be of //          some numeric type	WITHOUT_CLASSIFICATION	0.9999994144269989	WITHOUT_CLASSIFICATION	5.855730010924122E-7	TEST
// add normal properties	WITHOUT_CLASSIFICATION	0.99999948048447	WITHOUT_CLASSIFICATION	5.195155300050454E-7	TEST
// this property belongs on the table and is to be inserted	WITHOUT_CLASSIFICATION	0.999983473173504	WITHOUT_CLASSIFICATION	1.6526826496021972E-5	TEST
// add the discriminator	WITHOUT_CLASSIFICATION	0.9999991742559478	WITHOUT_CLASSIFICATION	8.257440521217381E-7	TEST
// add the primary key	WITHOUT_CLASSIFICATION	0.9999946163915193	WITHOUT_CLASSIFICATION	5.383608480675344E-6	TEST
// delegate already handles PK columns	WITHOUT_CLASSIFICATION	0.9999989696873652	WITHOUT_CLASSIFICATION	1.0303126347262297E-6	TEST
// we can't batch joined inserts, *especially* not if it is an identity insert; // nor can we batch statements where the expectation is based on an output param	WITHOUT_CLASSIFICATION	0.9999999692609206	WITHOUT_CLASSIFICATION	3.073907934129654E-8	TEST
// Render the SQL query	WITHOUT_CLASSIFICATION	0.9999990576580802	WITHOUT_CLASSIFICATION	9.423419199687423E-7	TEST
// Write the values of fields onto the prepared statement - we MUST use the state at the time the // insert was issued (cos of foreign key constraints). Not necessarily the object's current state	WITHOUT_CLASSIFICATION	0.9999998781346002	WITHOUT_CLASSIFICATION	1.218653997554124E-7	TEST
// TODO : shouldnt inserts be Expectations.NONE?	WITHOUT_CLASSIFICATION	0.9999521137925741	WITHOUT_CLASSIFICATION	4.7886207425948646E-5	TEST
//don't bother trying to update, we know there is no row there yet	WITHOUT_CLASSIFICATION	0.9999513157888451	WITHOUT_CLASSIFICATION	4.868421115484941E-5	TEST
//if all fields are null, we might need to delete existing row	WITHOUT_CLASSIFICATION	0.9999907701978991	WITHOUT_CLASSIFICATION	9.229802100854598E-6	TEST
//there is probably a row there, so try to update //if no rows were updated, we will find out	WITHOUT_CLASSIFICATION	0.9999951999465582	WITHOUT_CLASSIFICATION	4.800053441808704E-6	TEST
//note: updates to joined tables can't be batched...	WITHOUT_CLASSIFICATION	0.9999181969559117	WITHOUT_CLASSIFICATION	8.180304408835832E-5	TEST
// starting index	WITHOUT_CLASSIFICATION	0.9999995349513706	WITHOUT_CLASSIFICATION	4.6504862938146934E-7	TEST
//Now write the values of fields onto the prepared statement	WITHOUT_CLASSIFICATION	0.999995222558941	WITHOUT_CLASSIFICATION	4.777441058964685E-6	TEST
// Write any appropriate versioning conditional parameters	WITHOUT_CLASSIFICATION	0.9999999202095002	WITHOUT_CLASSIFICATION	7.979049975768855E-8	TEST
//Render the SQL query	WITHOUT_CLASSIFICATION	0.9999945084827766	WITHOUT_CLASSIFICATION	5.491517223461382E-6	TEST
// Do the key. The key is immutable so we can use the _current_ object state - not necessarily // the state at the time the delete was issued	WITHOUT_CLASSIFICATION	0.9999998545585588	WITHOUT_CLASSIFICATION	1.4544144127727591E-7	TEST
// We should use the _current_ object state (ie. after any updates that occurred during flush)	WITHOUT_CLASSIFICATION	0.9999970530005134	WITHOUT_CLASSIFICATION	2.946999486563418E-6	TEST
// this property belongs to the table and it is not specifically // excluded from optimistic locking by optimistic-lock="false"	WITHOUT_CLASSIFICATION	0.9999995440992281	WITHOUT_CLASSIFICATION	4.559007718753794E-7	TEST
//note: dirtyFields==null means we had no snapshot, and we couldn't get one using select-before-update //	WITHOUT_CLASSIFICATION	0.9999993832476036	WITHOUT_CLASSIFICATION	6.167523963214011E-7	TEST
// more specifically : "datetime [op] ?" //      1) if the operator is MINUS, we really cannot determine //          the expected type as either another datetime or //          numeric would be valid //      2) if the operator is PLUS, the param needs to be of //          some numeric type	WITHOUT_CLASSIFICATION	0.9999998185892821	WITHOUT_CLASSIFICATION	1.8141071783150574E-7	TEST
// For the case of dynamic-update="true", we need to generate the UPDATE SQL	WITHOUT_CLASSIFICATION	0.9999989053427771	WITHOUT_CLASSIFICATION	1.0946572228232118E-6	TEST
// don't need to check laziness (dirty checking algorithm handles that)	WITHOUT_CLASSIFICATION	0.9999979408409791	WITHOUT_CLASSIFICATION	2.0591590208139585E-6	TEST
// For the case of dynamic-update="false", or no snapshot, we use the static SQL	WITHOUT_CLASSIFICATION	0.9999999576096658	WITHOUT_CLASSIFICATION	4.239033422585987E-8	TEST
// if not "get", then try "is"	WITHOUT_CLASSIFICATION	0.9999944538039586	WITHOUT_CLASSIFICATION	5.546196041433276E-6	TEST
// Now update only the tables with dirty properties (and the table with the version number)	WITHOUT_CLASSIFICATION	0.9999996754952003	WITHOUT_CLASSIFICATION	3.245047996035757E-7	TEST
// For the case of dynamic-insert="true", we need to generate the INSERT SQL	WITHOUT_CLASSIFICATION	0.9999969412213799	WITHOUT_CLASSIFICATION	3.0587786200770124E-6	TEST
// For the case of dynamic-insert="true", we need to generate the INSERT SQL	WITHOUT_CLASSIFICATION	0.9999969412213799	WITHOUT_CLASSIFICATION	3.0587786200770124E-6	TEST
// For the case of dynamic-insert="false", use the static SQL	WITHOUT_CLASSIFICATION	0.9999997889955833	WITHOUT_CLASSIFICATION	2.1100441671432832E-7	TEST
// For the case of dynamic-insert="false", use the static SQL	WITHOUT_CLASSIFICATION	0.9999997889955833	WITHOUT_CLASSIFICATION	2.1100441671432832E-7	TEST
// not supported	WITHOUT_CLASSIFICATION	0.9999976014686485	WITHOUT_CLASSIFICATION	2.3985313515379387E-6	TEST
// this property belongs to the table and it is not specifically // excluded from optimistic locking by optimistic-lock="false"	WITHOUT_CLASSIFICATION	0.9999995440992281	WITHOUT_CLASSIFICATION	4.559007718753794E-7	TEST
// we need to utilize dynamic delete statements	WITHOUT_CLASSIFICATION	0.9999993155066907	WITHOUT_CLASSIFICATION	6.84493309221611E-7	TEST
// otherwise, utilize the static delete statements	WITHOUT_CLASSIFICATION	0.9999996608042917	WITHOUT_CLASSIFICATION	3.3919570825930555E-7	TEST
//just a performance opt!	WITHOUT_CLASSIFICATION	0.999997548808698	WITHOUT_CLASSIFICATION	2.4511913020175945E-6	TEST
//just a performance opt!	WITHOUT_CLASSIFICATION	0.999997548808698	WITHOUT_CLASSIFICATION	2.4511913020175945E-6	TEST
//all joins join to the pk of the driving table	WITHOUT_CLASSIFICATION	0.9999949486251091	WITHOUT_CLASSIFICATION	5.051374890930556E-6	TEST
//notice that we skip the first table; it is the driving table!	WITHOUT_CLASSIFICATION	0.9999975173122223	WITHOUT_CLASSIFICATION	2.482687777763527E-6	TEST
//we can inner join to superclass tables (the row MUST be there) //we can never inner join to subclass tables	WITHOUT_CLASSIFICATION	0.9999994435402906	WITHOUT_CLASSIFICATION	5.564597093490612E-7	TEST
//skip the driving table	WITHOUT_CLASSIFICATION	0.9999944816500943	WITHOUT_CLASSIFICATION	5.518349905732476E-6	TEST
//get 'em in the right order (not that it really matters)	WITHOUT_CLASSIFICATION	0.9999895088917323	WITHOUT_CLASSIFICATION	1.0491108267593226E-5	TEST
// here, we work under the following assumptions: //      ------------ valid cases -------------------------------------- //      1) datetime + {something other than datetime} : always results //              in a datetime ( db will catch invalid conversions ) //      2) datetime - datetime : always results in a DOUBLE //      3) datetime - {something other than datetime} : always results //              in a datetime ( db will catch invalid conversions ) //      ------------ invalid cases ------------------------------------ //      4) datetime + datetime //      5) {something other than datetime} - datetime //      6) datetime * {any type} //      7) datetime / {any type} //      8) {any type} / datetime // doing so allows us to properly handle parameters as either the left // or right side here in the majority of cases	WITHOUT_CLASSIFICATION	0.9999999935004201	WITHOUT_CLASSIFICATION	6.499579959997379E-9	TEST
//render the where and from parts	WITHOUT_CLASSIFICATION	0.9999842204749733	WITHOUT_CLASSIFICATION	1.5779525026637928E-5	TEST
//we *could* regerate this inside each called method!	WITHOUT_CLASSIFICATION	0.9999987039773596	WITHOUT_CLASSIFICATION	1.2960226404205554E-6	TEST
//now render the joins	WITHOUT_CLASSIFICATION	0.9999954344876096	WITHOUT_CLASSIFICATION	4.565512390397523E-6	TEST
// This will add the new from element to the origin.	WITHOUT_CLASSIFICATION	0.9999970740729495	WITHOUT_CLASSIFICATION	2.925927050555203E-6	TEST
//now render the select clause	WITHOUT_CLASSIFICATION	0.9999995206436461	WITHOUT_CLASSIFICATION	4.79356353896612E-7	TEST
//now tie it all together	WITHOUT_CLASSIFICATION	0.9999879001255828	WITHOUT_CLASSIFICATION	1.209987441713712E-5	TEST
//insert/update/delete SQL	WITHOUT_CLASSIFICATION	0.9999917549836645	WITHOUT_CLASSIFICATION	8.245016335552268E-6	TEST
//select SQL	WITHOUT_CLASSIFICATION	0.9999941958892468	WITHOUT_CLASSIFICATION	5.804110753315435E-6	TEST
//no need to check laziness, dirty checking handles that	WITHOUT_CLASSIFICATION	0.9999857691498617	WITHOUT_CLASSIFICATION	1.4230850138148784E-5	TEST
// Fully resolve the map reference, create implicit joins.	WITHOUT_CLASSIFICATION	0.9999855141643431	WITHOUT_CLASSIFICATION	1.4485835656819268E-5	TEST
// temporary ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999944732408018	WITHOUT_CLASSIFICATION	5.526759198144751E-6	TEST
// The basic implementation is to simply use the node's text	WITHOUT_CLASSIFICATION	0.9999956082874862	WITHOUT_CLASSIFICATION	4.391712513826349E-6	TEST
// for dialects which are known to not support ANSI-SQL row-value-constructor syntax, // we should mutate the tree.	WITHOUT_CLASSIFICATION	0.9999999227738222	WITHOUT_CLASSIFICATION	7.722617784867589E-8	TEST
// Due to the complexity in initializing the SelectClause, do not generate one here. // If it is not found; simply return null... // // Also, do not cache since it gets generated well after we are created.	WITHOUT_CLASSIFICATION	0.9999981346890763	WITHOUT_CLASSIFICATION	1.8653109236960975E-6	TEST
// check the version unsaved-value, if appropriate	WITHOUT_CLASSIFICATION	0.9999999296823981	WITHOUT_CLASSIFICATION	7.031760186275952E-8	TEST
// let this take precedence if defined, since it works for // assigned identifiers	WITHOUT_CLASSIFICATION	0.9999923694529774	WITHOUT_CLASSIFICATION	7.630547022536512E-6	TEST
// check the id unsaved-value	WITHOUT_CLASSIFICATION	0.9999994240266518	WITHOUT_CLASSIFICATION	5.759733481825017E-7	TEST
// check to see if it is in the second-level cache	WITHOUT_CLASSIFICATION	0.9999997808331771	WITHOUT_CLASSIFICATION	2.1916682292612468E-7	TEST
///////////////////////////////////////////////////////////////////////	WITHOUT_CLASSIFICATION	0.9998743376002098	WITHOUT_CLASSIFICATION	1.2566239979016445E-4	TEST
// For property references generate <tablealias>.<columnname> as <projectionalias>	WITHOUT_CLASSIFICATION	0.9999993807499309	WITHOUT_CLASSIFICATION	6.192500691139648E-7	TEST
// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999683638219775	WITHOUT_CLASSIFICATION	3.1636178022498625E-5	TEST
//if there is no resulting row, return null	WITHOUT_CLASSIFICATION	0.9999787298943199	WITHOUT_CLASSIFICATION	2.1270105679991286E-5	TEST
//force immediate execution of the insert	WITHOUT_CLASSIFICATION	0.9999973225418551	WITHOUT_CLASSIFICATION	2.677458144964569E-6	TEST
// If this from element is a collection and the path is a collection property (maxIndex, etc.) then // generate a sub-query.	WITHOUT_CLASSIFICATION	0.9999996878435449	WITHOUT_CLASSIFICATION	3.121564551935159E-7	TEST
// entities ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999921275136288	WITHOUT_CLASSIFICATION	7.872486371247395E-6	TEST
// collections ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999995632214974	WITHOUT_CLASSIFICATION	4.367785025831521E-7	TEST
//cannot occur	WITHOUT_CLASSIFICATION	0.9999942378097854	WITHOUT_CLASSIFICATION	5.762190214548696E-6	TEST
//cannot occur	WITHOUT_CLASSIFICATION	0.9999942378097854	WITHOUT_CLASSIFICATION	5.762190214548696E-6	TEST
// only carry on if the method has no parameters	WITHOUT_CLASSIFICATION	0.9999998141215598	WITHOUT_CLASSIFICATION	1.8587844022602997E-7	TEST
// try "get"	WITHOUT_CLASSIFICATION	0.9999973168987123	WITHOUT_CLASSIFICATION	2.6831012877251376E-6	TEST
// do nothing...	WITHOUT_CLASSIFICATION	0.9999986073007955	WITHOUT_CLASSIFICATION	1.3926992045975516E-6	TEST
// do nothing...	WITHOUT_CLASSIFICATION	0.9999986073007955	WITHOUT_CLASSIFICATION	1.3926992045975516E-6	TEST
// should be safe to only ever expect EntityPersister references here	WITHOUT_CLASSIFICATION	0.9999960608152092	WITHOUT_CLASSIFICATION	3.939184790708202E-6	TEST
// this page intentionally left blank :)	WITHOUT_CLASSIFICATION	0.999992132783601	WITHOUT_CLASSIFICATION	7.867216399034388E-6	TEST
// do not do anything	WITHOUT_CLASSIFICATION	0.9999969750558941	WITHOUT_CLASSIFICATION	3.0249441058547272E-6	TEST
//	WITHOUT_CLASSIFICATION	0.9999527008540617	WITHOUT_CLASSIFICATION	4.729914593835468E-5	TEST
// ignore	WITHOUT_CLASSIFICATION	0.9999983654098049	WITHOUT_CLASSIFICATION	1.6345901950501815E-6	TEST
//cant instantiate	WITHOUT_CLASSIFICATION	0.9999966896934827	WITHOUT_CLASSIFICATION	3.3103065173205513E-6	TEST
//if it is a property of an embedded component, invoke on the "identifier"	WITHOUT_CLASSIFICATION	0.9999995880137643	WITHOUT_CLASSIFICATION	4.1198623571585383E-7	TEST
// otherwise:	WITHOUT_CLASSIFICATION	0.9999954928441416	WITHOUT_CLASSIFICATION	4.5071558584527285E-6	TEST
// skip finalize methods	WITHOUT_CLASSIFICATION	0.9999967306247719	WITHOUT_CLASSIFICATION	3.2693752280942137E-6	TEST
// note: interfaces is assumed to already contain HibernateProxy.class	WITHOUT_CLASSIFICATION	0.9999998496958526	WITHOUT_CLASSIFICATION	1.5030414727805468E-7	TEST
// note: interfaces is assumed to already contain HibernateProxy.class	WITHOUT_CLASSIFICATION	0.9999998496958526	WITHOUT_CLASSIFICATION	1.5030414727805468E-7	TEST
// HHH-2481 make sure the callback gets cleared, otherwise the instance stays in a static thread local.	WITHOUT_CLASSIFICATION	0.999999795800846	WITHOUT_CLASSIFICATION	2.041991539881467E-7	TEST
// while constructor is running	WITHOUT_CLASSIFICATION	0.9999987688275288	WITHOUT_CLASSIFICATION	1.2311724712012118E-6	TEST
// while constructor is running	WITHOUT_CLASSIFICATION	0.9999987688275288	WITHOUT_CLASSIFICATION	1.2311724712012118E-6	TEST
// note: interface is assumed to already contain HibernateProxy.class	WITHOUT_CLASSIFICATION	0.99999990313388	WITHOUT_CLASSIFICATION	9.686611998125087E-8	TEST
// interfaces // arguments	WITHOUT_CLASSIFICATION	0.999999605469345	WITHOUT_CLASSIFICATION	3.9453065504304756E-7	TEST
//TODO!	WITHOUT_CLASSIFICATION	0.9983445766843777	WITHOUT_CLASSIFICATION	0.0016554233156222892	TEST
// Get the caller	WITHOUT_CLASSIFICATION	0.9999967673826442	WITHOUT_CLASSIFICATION	3.232617355841569E-6	TEST
// Get the caller principals	WITHOUT_CLASSIFICATION	0.9999979263864032	WITHOUT_CLASSIFICATION	2.0736135968246494E-6	TEST
//private static final Alias DEFAULT_ALIAS = new Alias(10, null);	WITHOUT_CLASSIFICATION	0.9999998449343293	WITHOUT_CLASSIFICATION	1.550656708077653E-7	TEST
// Needed to bump this up to DotNode, because that is the only thing which currently // knows about the property-ref path in the correct format; it is either this, or // recurse over the DotNodes constructing the property path just like DotNode does // internally	WITHOUT_CLASSIFICATION	0.9999990557858754	WITHOUT_CLASSIFICATION	9.442141245342673E-7	TEST
//if the identifier is quoted, remove the quotes	WITHOUT_CLASSIFICATION	0.9998934440106131	WITHOUT_CLASSIFICATION	1.0655598938692053E-4	TEST
//truncate the identifier to the max alias length, less the suffix length	WITHOUT_CLASSIFICATION	0.999989377502615	WITHOUT_CLASSIFICATION	1.0622497384982714E-5	TEST
//full joins are not supported.. yet!	WITHOUT_CLASSIFICATION	0.9999784909988187	WITHOUT_CLASSIFICATION	2.1509001181280392E-5	TEST
// null is not considered the same type as Integer. //$NON-NLS-1 //$NON-NLS-1	WITHOUT_CLASSIFICATION	0.9999999869040953	WITHOUT_CLASSIFICATION	1.3095904654064655E-8	TEST
// the outerJoinsAfterWhere needs to come before where clause to properly // handle dynamic filters	WITHOUT_CLASSIFICATION	0.9999998601473752	WITHOUT_CLASSIFICATION	1.3985262475194134E-7	TEST
//$NON-NLS-1	WITHOUT_CLASSIFICATION	0.9999837526505527	WITHOUT_CLASSIFICATION	1.6247349447348884E-5	TEST
//$NON-NLS-1	WITHOUT_CLASSIFICATION	0.9999837526505527	WITHOUT_CLASSIFICATION	1.6247349447348884E-5	TEST
//$NON-NLS-1	WITHOUT_CLASSIFICATION	0.9999837526505527	WITHOUT_CLASSIFICATION	1.6247349447348884E-5	TEST
//$NON-NLS-1	WITHOUT_CLASSIFICATION	0.9999837526505527	WITHOUT_CLASSIFICATION	1.6247349447348884E-5	TEST
// strip off any leading 'and' token	WITHOUT_CLASSIFICATION	0.9999956255317474	WITHOUT_CLASSIFICATION	4.374468252626145E-6	TEST
// if the condition is not already there...	WITHOUT_CLASSIFICATION	0.9999997349154465	WITHOUT_CLASSIFICATION	2.6508455350561915E-7	TEST
//dontSpace.add("'");	WITHOUT_CLASSIFICATION	0.9999951738305642	WITHOUT_CLASSIFICATION	4.82616943571891E-6	TEST
//for MySQL	WITHOUT_CLASSIFICATION	0.999959546752847	WITHOUT_CLASSIFICATION	4.045324715302742E-5	TEST
//HashMap columnsUnique = new HashMap();	WITHOUT_CLASSIFICATION	0.9999986940341924	WITHOUT_CLASSIFICATION	1.3059658075850243E-6	TEST
//null caused some problems	WITHOUT_CLASSIFICATION	0.9999988097370356	WITHOUT_CLASSIFICATION	1.1902629644030263E-6	TEST
/*package*/	WITHOUT_CLASSIFICATION	0.9999826414449617	WITHOUT_CLASSIFICATION	1.7358555038213658E-5	TEST
//not sure if this would ever be null but wanted to be careful	WITHOUT_CLASSIFICATION	0.9999967624654355	WITHOUT_CLASSIFICATION	3.237534564666323E-6	TEST
//even on inverse="true"	WITHOUT_CLASSIFICATION	0.9999973836163742	WITHOUT_CLASSIFICATION	2.6163836257632833E-6	TEST
/*package*/	WITHOUT_CLASSIFICATION	0.9999826414449617	WITHOUT_CLASSIFICATION	1.7358555038213658E-5	TEST
/*package*/	WITHOUT_CLASSIFICATION	0.9999826414449617	WITHOUT_CLASSIFICATION	1.7358555038213658E-5	TEST
// If true then execute db updates, otherwise just generate and display updates	WITHOUT_CLASSIFICATION	0.9999893068718773	WITHOUT_CLASSIFICATION	1.0693128122612679E-5	TEST
// we only release the connection	WITHOUT_CLASSIFICATION	0.9999999369503997	WITHOUT_CLASSIFICATION	6.30496003312239E-8	TEST
// deprecated option...	WITHOUT_CLASSIFICATION	0.9999998802877181	WITHOUT_CLASSIFICATION	1.1971228190364648E-7	TEST
//if an exception occurs during flush, user must call rollback()	WITHOUT_CLASSIFICATION	0.9999984945189436	WITHOUT_CLASSIFICATION	1.5054810564196404E-6	TEST
//actually, this last test is probably unnecessary, since  //beforeCompletion() doesn't get called during rollback	WITHOUT_CLASSIFICATION	0.9991177107711081	WITHOUT_CLASSIFICATION	8.822892288918451E-4	TEST
// this one only really needed for badly-behaved applications! // (if the TransactionManager has a Sychronization registered, // its a noop) // (actually we do need it for downgrading locks)	WITHOUT_CLASSIFICATION	0.9999999176521092	WITHOUT_CLASSIFICATION	8.234789079550469E-8	TEST
// Create an DotNode AST for the path and resolve it.	WITHOUT_CLASSIFICATION	0.9999907892746112	WITHOUT_CLASSIFICATION	9.21072538873966E-6	TEST
//if an exception occurs during flush, user must call rollback()	WITHOUT_CLASSIFICATION	0.9999984945189436	WITHOUT_CLASSIFICATION	1.5054810564196404E-6	TEST
//if we could not register a synchronization, //do the before/after completion callbacks //ourself (but we need to let jdbcContext //know that this is what we are going to //do, so it doesn't keep trying to register //synchronizations)	WITHOUT_CLASSIFICATION	0.9999996702889611	WITHOUT_CLASSIFICATION	3.297110389742077E-7	TEST
// swallow it, and continue to roll back JTA transaction	WITHOUT_CLASSIFICATION	0.9999999869762709	WITHOUT_CLASSIFICATION	1.302372910482906E-8	TEST
// so the transaction is already rolled back, by JTA spec	WITHOUT_CLASSIFICATION	0.9999999002243811	WITHOUT_CLASSIFICATION	9.977561882086522E-8	TEST
// this method is a noop if there is a Synchronization!	WITHOUT_CLASSIFICATION	0.9999991377655285	WITHOUT_CLASSIFICATION	8.6223447140094E-7	TEST
// two conditions where we need to transform this to a theta-join syntax: //      1) 'elem' is the "root from-element" in correlated subqueries //      2) The DotNode.useThetaStyleImplicitJoins has been set to true //          and 'elem' represents an implicit join	WITHOUT_CLASSIFICATION	0.9999995503354507	WITHOUT_CLASSIFICATION	4.4966454924886135E-7	TEST
// WebSphere, however, is not a sane JEE/JTA container...	WITHOUT_CLASSIFICATION	0.9999998141489957	WITHOUT_CLASSIFICATION	1.8585100436400362E-7	TEST
// for sane JEE/JTA containers, the transaction itself functions as its identifier...	WITHOUT_CLASSIFICATION	0.9999999822424717	WITHOUT_CLASSIFICATION	1.7757528274733318E-8	TEST
//swallow, the transaction was finished	WITHOUT_CLASSIFICATION	0.9999973904898546	WITHOUT_CLASSIFICATION	2.6095101454420182E-6	TEST
// all AliasToEntityMapResultTransformer are considered equal ~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999999538192552	WITHOUT_CLASSIFICATION	4.6180744816266176E-8	TEST
// Create the join element under the from element.	WITHOUT_CLASSIFICATION	0.9999984808950014	WITHOUT_CLASSIFICATION	1.5191049986440279E-6	TEST
// all DistinctRootEntityResultTransformer are considered equal ~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999999327827511	WITHOUT_CLASSIFICATION	6.721724880112343E-8	TEST
// map of EntityMode -> Tuplizer	WITHOUT_CLASSIFICATION	0.9999982828461683	WITHOUT_CLASSIFICATION	1.717153831625991E-6	TEST
// this is a virtual id property...	WITHOUT_CLASSIFICATION	0.9999963458173707	WITHOUT_CLASSIFICATION	3.6541826293472772E-6	TEST
//this one needed only for guessEntityMode()	WITHOUT_CLASSIFICATION	0.9999837812626924	WITHOUT_CLASSIFICATION	1.621873730765265E-5	TEST
// create our own copy of the user-supplied tuplizer impl map	WITHOUT_CLASSIFICATION	0.9999991495114203	WITHOUT_CLASSIFICATION	8.504885797434111E-7	TEST
// todo : move this to SF per HHH-3517; also see HHH-1907 and ComponentMetamodel	WITHOUT_CLASSIFICATION	0.9999997675049086	WITHOUT_CLASSIFICATION	2.3249509135749934E-7	TEST
// then the pojo tuplizer, using the dynamic-map tuplizer if no pojo representation is available	WITHOUT_CLASSIFICATION	0.9999998073780968	WITHOUT_CLASSIFICATION	1.9262190326897934E-7	TEST
// Build the dynamic-map tuplizer...	WITHOUT_CLASSIFICATION	0.9999966236447544	WITHOUT_CLASSIFICATION	3.376355245547357E-6	TEST
// then dom4j tuplizer, if dom4j representation is available	WITHOUT_CLASSIFICATION	0.9999995107066565	WITHOUT_CLASSIFICATION	4.89293343411369E-7	TEST
// Build the dynamic-map tuplizer...	WITHOUT_CLASSIFICATION	0.9999966236447544	WITHOUT_CLASSIFICATION	3.376355245547357E-6	TEST
// put the "standard" tuplizers into the tuplizer map first	WITHOUT_CLASSIFICATION	0.9999937581676831	WITHOUT_CLASSIFICATION	6.241832316896645E-6	TEST
// found a ctor, but it was not publicly accessible so try to request accessibility	WITHOUT_CLASSIFICATION	0.9999998464132354	WITHOUT_CLASSIFICATION	1.5358676465328038E-7	TEST
//	WITHOUT_CLASSIFICATION	0.9999527008540617	WITHOUT_CLASSIFICATION	4.729914593835468E-5	TEST
// cached for efficiency...	WITHOUT_CLASSIFICATION	0.9999985273548333	WITHOUT_CLASSIFICATION	1.4726451666748987E-6	TEST
//	WITHOUT_CLASSIFICATION	0.9999527008540617	WITHOUT_CLASSIFICATION	4.729914593835468E-5	TEST
//	WITHOUT_CLASSIFICATION	0.9999527008540617	WITHOUT_CLASSIFICATION	4.729914593835468E-5	TEST
//it was not embedded, so the argument is just an id	WITHOUT_CLASSIFICATION	0.9999924301233172	WITHOUT_CLASSIFICATION	7.56987668279458E-6	TEST
// then the pojo tuplizer, using the dynamic-map tuplizer if no pojo representation is available	WITHOUT_CLASSIFICATION	0.9999998073780968	WITHOUT_CLASSIFICATION	1.9262190326897934E-7	TEST
// then dom4j tuplizer, if dom4j representation is available	WITHOUT_CLASSIFICATION	0.9999995107066565	WITHOUT_CLASSIFICATION	4.89293343411369E-7	TEST
// put the "standard" tuplizers into the tuplizer map first	WITHOUT_CLASSIFICATION	0.9999937581676831	WITHOUT_CLASSIFICATION	6.241832316896645E-6	TEST
// then handle any user-defined entity modes...	WITHOUT_CLASSIFICATION	0.9999954832540039	WITHOUT_CLASSIFICATION	4.516745996116633E-6	TEST
//return currentId;	WITHOUT_CLASSIFICATION	0.9999981580061669	WITHOUT_CLASSIFICATION	1.8419938331665388E-6	TEST
//reset the id	WITHOUT_CLASSIFICATION	0.9999736774505678	WITHOUT_CLASSIFICATION	2.6322549432193606E-5	TEST
//	WITHOUT_CLASSIFICATION	0.9999527008540617	WITHOUT_CLASSIFICATION	4.729914593835468E-5	TEST
//reset the version	WITHOUT_CLASSIFICATION	0.9999938126633884	WITHOUT_CLASSIFICATION	6.187336611544382E-6	TEST
// the default is to simply not lazy fetch properties for now...	WITHOUT_CLASSIFICATION	0.9999966679550213	WITHOUT_CLASSIFICATION	3.332044978810267E-6	TEST
// Add the second join, the one that ends in the destination table.	WITHOUT_CLASSIFICATION	0.9999998780615983	WITHOUT_CLASSIFICATION	1.219384016983013E-7	TEST
// temporary ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999944732408018	WITHOUT_CLASSIFICATION	5.526759198144751E-6	TEST
// found a ctor, but it was not publicly accessible so try to request accessibility	WITHOUT_CLASSIFICATION	0.9999998464132354	WITHOUT_CLASSIFICATION	1.5358676465328038E-7	TEST
// determine the id getter and setter methods from the proxy interface (if any) // determine all interfaces needed by the resulting proxy	WITHOUT_CLASSIFICATION	0.9999995402938764	WITHOUT_CLASSIFICATION	4.597061236143612E-7	TEST
//	WITHOUT_CLASSIFICATION	0.9999527008540617	WITHOUT_CLASSIFICATION	4.729914593835468E-5	TEST
//not final because proxy factory creation can fail	WITHOUT_CLASSIFICATION	0.9999998643596258	WITHOUT_CLASSIFICATION	1.356403741769284E-7	TEST
// superclass entity-name	WITHOUT_CLASSIFICATION	0.999999756177817	WITHOUT_CLASSIFICATION	2.43822182964733E-7	TEST
// temporary ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999944732408018	WITHOUT_CLASSIFICATION	5.526759198144751E-6	TEST
// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999683638219775	WITHOUT_CLASSIFICATION	3.1636178022498625E-5	TEST
//init the aliases, after initing the constructornode	WITHOUT_CLASSIFICATION	0.999991558405699	WITHOUT_CLASSIFICATION	8.44159430098057E-6	TEST
// temporary ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999944732408018	WITHOUT_CLASSIFICATION	5.526759198144751E-6	TEST
// legacy behavior (with no abstract attribute specified)	WITHOUT_CLASSIFICATION	0.999999484254206	WITHOUT_CLASSIFICATION	5.157457938487386E-7	TEST
// Get ready to start adding nodes.	WITHOUT_CLASSIFICATION	0.9999982119943945	WITHOUT_CLASSIFICATION	1.7880056055201263E-6	TEST
// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999683638219775	WITHOUT_CLASSIFICATION	3.1636178022498625E-5	TEST
//note: this affects the return value!	WITHOUT_CLASSIFICATION	0.9999900289362884	WITHOUT_CLASSIFICATION	9.971063711627015E-6	TEST
// Need to account for allowable '_' within the variant	WITHOUT_CLASSIFICATION	0.9999246017835652	WITHOUT_CLASSIFICATION	7.539821643469497E-5	TEST
// Add the type to the list of returned sqlResultTypes.	WITHOUT_CLASSIFICATION	0.9999992350394143	WITHOUT_CLASSIFICATION	7.649605855748816E-7	TEST
// Collection Types:	WITHOUT_CLASSIFICATION	0.999999705749337	WITHOUT_CLASSIFICATION	2.9425066289377063E-7	TEST
// convenience methods relating to operations across arrays of types...	WITHOUT_CLASSIFICATION	0.9999999883027038	WITHOUT_CLASSIFICATION	1.1697296328729146E-8	TEST
//lobs cannot be compared	WITHOUT_CLASSIFICATION	0.9999987183267631	WITHOUT_CLASSIFICATION	1.2816732367830657E-6	TEST
//Blobs are ignored by merge()	WITHOUT_CLASSIFICATION	0.9999943716535259	WITHOUT_CLASSIFICATION	5.62834647408326E-6	TEST
//value is the entity name	WITHOUT_CLASSIFICATION	0.9999847107391087	WITHOUT_CLASSIFICATION	1.5289260891368478E-5	TEST
//EARLY EXIT!	WITHOUT_CLASSIFICATION	0.9999736381539537	WITHOUT_CLASSIFICATION	2.6361846046264446E-5	TEST
// generate id select fragment and then property select fragment for // each expression, just like generateSelectFragments().	WITHOUT_CLASSIFICATION	0.9999970070821061	WITHOUT_CLASSIFICATION	2.992917893723115E-6	TEST
//TODO!	WITHOUT_CLASSIFICATION	0.9983445766843777	WITHOUT_CLASSIFICATION	0.0016554233156222892	TEST
//xml is the entity name	WITHOUT_CLASSIFICATION	0.9999878305376387	WITHOUT_CLASSIFICATION	1.2169462361249598E-5	TEST
//special case ... this is the leaf of the containment graph, even though not immutable	WITHOUT_CLASSIFICATION	0.999999399403372	WITHOUT_CLASSIFICATION	6.00596627940346E-7	TEST
//tolerates nulls	WITHOUT_CLASSIFICATION	0.9999804398499076	WITHOUT_CLASSIFICATION	1.956015009246454E-5	TEST
/*sqlResultTypeList,*/	WITHOUT_CLASSIFICATION	0.9999568924153309	WITHOUT_CLASSIFICATION	4.310758466915684E-5	TEST
// metaType is assumed to be single-column type	WITHOUT_CLASSIFICATION	0.999995525410843	WITHOUT_CLASSIFICATION	4.474589156994311E-6	TEST
// Get all the select expressions (that we just generated) and render the select.	WITHOUT_CLASSIFICATION	0.9999995642180947	WITHOUT_CLASSIFICATION	4.35781905434931E-7	TEST
// Look through the FromElement's children to find any collections of values that should be fetched...	WITHOUT_CLASSIFICATION	0.9999998641094499	WITHOUT_CLASSIFICATION	1.3589055009285095E-7	TEST
//return AssociationType.FOREIGN_KEY_TO_PARENT; //this is better but causes a transient object exception...	WITHOUT_CLASSIFICATION	0.9999976662954626	WITHOUT_CLASSIFICATION	2.3337045374189175E-6	TEST
// Use the lower case function name. // Remember whether we're in a SELECT clause or not.	WITHOUT_CLASSIFICATION	0.9999999944801571	WITHOUT_CLASSIFICATION	5.519842921254013E-9	TEST
// IDENT might be the name of a class.	WITHOUT_CLASSIFICATION	0.9999989728058583	WITHOUT_CLASSIFICATION	1.027194141754041E-6	TEST
//TODO!!!	WITHOUT_CLASSIFICATION	0.998357289721412	WITHOUT_CLASSIFICATION	0.001642710278587995	TEST
//st.setTimestamp( index,  new Timestamp( cal.getTimeInMillis() ), cal ); //JDK 1.5 only	WITHOUT_CLASSIFICATION	0.9999975782270442	WITHOUT_CLASSIFICATION	2.4217729557994713E-6	TEST
//st.setDate( index,  new Date( cal.getTimeInMillis() ), cal ); //JDK 1.5 only	WITHOUT_CLASSIFICATION	0.9999992897540336	WITHOUT_CLASSIFICATION	7.102459663495612E-7	TEST
// both are Timestamps	WITHOUT_CLASSIFICATION	0.9999875054732456	WITHOUT_CLASSIFICATION	1.2494526754554911E-5	TEST
// at least one is a plain old Date	WITHOUT_CLASSIFICATION	0.9999798745857327	WITHOUT_CLASSIFICATION	2.012541426734718E-5	TEST
//noop	WITHOUT_CLASSIFICATION	0.9999563774172369	WITHOUT_CLASSIFICATION	4.362258276313625E-5	TEST
// if the corresponding SQL value is NULL, the reader we got is NULL as well	WITHOUT_CLASSIFICATION	0.9999975526063376	WITHOUT_CLASSIFICATION	2.4473936624973622E-6	TEST
// Fetch Reader content up to the end - and put characters in a StringBuffer	WITHOUT_CLASSIFICATION	0.9999998681022331	WITHOUT_CLASSIFICATION	1.3189776700302124E-7	TEST
// Return StringBuffer content as a large String	WITHOUT_CLASSIFICATION	0.9999999495163994	WITHOUT_CLASSIFICATION	5.048360063621906E-8	TEST
//or Types.LONGVARCHAR?	WITHOUT_CLASSIFICATION	0.9999782274294909	WITHOUT_CLASSIFICATION	2.177257050897607E-5	TEST
//Not called at runtime so doesn't matter if its slow :)	WITHOUT_CLASSIFICATION	0.9999907844392689	WITHOUT_CLASSIFICATION	9.215560731073772E-6	TEST
//TODO	WITHOUT_CLASSIFICATION	0.9990977950745953	WITHOUT_CLASSIFICATION	9.022049254047583E-4	TEST
// Chop off the rest of the tree.	WITHOUT_CLASSIFICATION	0.9999657940595332	WITHOUT_CLASSIFICATION	3.420594046681549E-5	TEST
//different nullability rules for pk/fk	WITHOUT_CLASSIFICATION	0.9999823855190634	WITHOUT_CLASSIFICATION	1.761448093662963E-5	TEST
//cache this	WITHOUT_CLASSIFICATION	0.9999913495379578	WITHOUT_CLASSIFICATION	8.65046204225793E-6	TEST
//only really need new array during semiresolve!	WITHOUT_CLASSIFICATION	0.9999976368647552	WITHOUT_CLASSIFICATION	2.3631352448486006E-6	TEST
// Forcefully remove leading ands from where fragments; the grammar will // handle adding them	WITHOUT_CLASSIFICATION	0.9999962276359583	WITHOUT_CLASSIFICATION	3.772364041602645E-6	TEST
//TODO!!!!!!!	WITHOUT_CLASSIFICATION	0.9980786738459403	WITHOUT_CLASSIFICATION	0.001921326154059726	TEST
// Create a new FILTERS node as a parent of all filters	WITHOUT_CLASSIFICATION	0.999999879360338	WITHOUT_CLASSIFICATION	1.2063966210827486E-7	TEST
// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999683638219775	WITHOUT_CLASSIFICATION	3.1636178022498625E-5	TEST
//public Object instantiate(Object parent, SessionImplementor session) throws HibernateException;	WITHOUT_CLASSIFICATION	0.999998782555633	WITHOUT_CLASSIFICATION	1.2174443669410386E-6	TEST
//nothing to do	WITHOUT_CLASSIFICATION	0.9999804192106803	WITHOUT_CLASSIFICATION	1.9580789319782233E-5	TEST
//nothing to do	WITHOUT_CLASSIFICATION	0.9999804192106803	WITHOUT_CLASSIFICATION	1.9580789319782233E-5	TEST
// VersionType impl ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ //      Note : simply returns null for seed() and next() as the only known //      application of binary types for versioning is for use with the //      TIMESTAMP datatype supported by Sybase and SQL Server, which //      are completely db-generated values...	WITHOUT_CLASSIFICATION	0.9999999734761473	WITHOUT_CLASSIFICATION	2.6523852679320446E-8	TEST
//lobs cannot be compared	WITHOUT_CLASSIFICATION	0.9999987183267631	WITHOUT_CLASSIFICATION	1.2816732367830657E-6	TEST
//not really necessary, I guess...	WITHOUT_CLASSIFICATION	0.9999948290572572	WITHOUT_CLASSIFICATION	5.1709427428013535E-6	TEST
//Clobs are ignored by merge() operation	WITHOUT_CLASSIFICATION	0.9999983020811983	WITHOUT_CLASSIFICATION	1.6979188015485233E-6	TEST
// we do not have to worry about queued additions to uninitialized // collections, since they can only occur for inverse collections!	WITHOUT_CLASSIFICATION	0.9999999014369483	WITHOUT_CLASSIFICATION	9.856305168409947E-8	TEST
// collections cannot be compared	WITHOUT_CLASSIFICATION	0.9999999069919979	WITHOUT_CLASSIFICATION	9.300800206152117E-8	TEST
//remember the uk value	WITHOUT_CLASSIFICATION	0.9999811651667947	WITHOUT_CLASSIFICATION	1.883483320525849E-5	TEST
//NOOP	WITHOUT_CLASSIFICATION	0.999849133804585	WITHOUT_CLASSIFICATION	1.5086619541507932E-4	TEST
//processCollectionProperty(token, q.getCollectionPersister(collectionRole), collectionName);	WITHOUT_CLASSIFICATION	0.9999969462289464	WITHOUT_CLASSIFICATION	3.053771053601479E-6	TEST
//we must use the "remembered" uk value, since it is  //not available from the EntityEntry during assembly	WITHOUT_CLASSIFICATION	0.9999968577692707	WITHOUT_CLASSIFICATION	3.1422307293148643E-6	TEST
// collections don't dirty an unversioned parent entity	WITHOUT_CLASSIFICATION	0.9999998153269051	WITHOUT_CLASSIFICATION	1.8467309500282224E-7	TEST
// return false;	WITHOUT_CLASSIFICATION	0.9999995457280526	WITHOUT_CLASSIFICATION	4.542719472898321E-7	TEST
// This just handles a particular case of component // projection, perhaps get rid of it and throw an exception	WITHOUT_CLASSIFICATION	0.9999998169099921	WITHOUT_CLASSIFICATION	1.8309000787778327E-7	TEST
//NOTE: we avoid joining to the next table if the named property is just the foreign key value	WITHOUT_CLASSIFICATION	0.999941548533187	WITHOUT_CLASSIFICATION	5.8451466813000296E-5	TEST
// the key is the owning entity itself, so get the ID from the key	WITHOUT_CLASSIFICATION	0.9999911230437429	WITHOUT_CLASSIFICATION	8.876956256993069E-6	TEST
// if the original is a PersistentCollection, and that original // was not flagged as dirty, then reset the target's dirty flag // here after the copy operation. // </p> // One thing to be careful of here is a "bare" original collection // in which case we should never ever ever reset the dirty flag // on the target because we simply do not know...	WITHOUT_CLASSIFICATION	0.9999998531082084	WITHOUT_CLASSIFICATION	1.468917916904778E-7	TEST
//ignore subselect keywords	WITHOUT_CLASSIFICATION	0.9999981743033507	WITHOUT_CLASSIFICATION	1.825696649385913E-6	TEST
// copy elements into newly empty target collection	WITHOUT_CLASSIFICATION	0.9999999321214069	WITHOUT_CLASSIFICATION	6.787859310973341E-8	TEST
// for a null target, or a target which is the same as the original, we // need to put the merged elements in a new collection	WITHOUT_CLASSIFICATION	0.9999996766581897	WITHOUT_CLASSIFICATION	3.233418102756435E-7	TEST
// by default just use an unanticipated capacity since we don't // know how to extract the capacity to use from original here...	WITHOUT_CLASSIFICATION	0.9999995777051643	WITHOUT_CLASSIFICATION	4.2229483576887046E-7	TEST
// get the elements back into the target making sure to handle dirty flag	WITHOUT_CLASSIFICATION	0.9999977299071603	WITHOUT_CLASSIFICATION	2.2700928398230476E-6	TEST
// check if collection is currently being loaded	WITHOUT_CLASSIFICATION	0.9999997632390165	WITHOUT_CLASSIFICATION	2.3676098359999434E-7	TEST
// check if it is already completely loaded, but unowned	WITHOUT_CLASSIFICATION	0.9999995262162977	WITHOUT_CLASSIFICATION	4.737837023858936E-7	TEST
// cache the actual id of the object, not the value of the // property-ref, which might not be initialized	WITHOUT_CLASSIFICATION	0.9999996247603432	WITHOUT_CLASSIFICATION	3.752396568196083E-7	TEST
//TODO!!!!!!!	WITHOUT_CLASSIFICATION	0.9980786738459403	WITHOUT_CLASSIFICATION	0.001921326154059726	TEST
// create a new collection wrapper, to be initialized later	WITHOUT_CLASSIFICATION	0.9999999118339523	WITHOUT_CLASSIFICATION	8.816604760974111E-8	TEST
// Some JDBC drivers erroneously return an empty array here for a null DB value :/	WITHOUT_CLASSIFICATION	0.9999997731433254	WITHOUT_CLASSIFICATION	2.268566745069302E-7	TEST
// our column span is the number of columns in the PK	WITHOUT_CLASSIFICATION	0.9999997398774753	WITHOUT_CLASSIFICATION	2.601225247330715E-7	TEST
//cannot batch fetch by unique key (property-ref associations)	WITHOUT_CLASSIFICATION	0.9999937236860462	WITHOUT_CLASSIFICATION	6.276313953717022E-6	TEST
// we already know current is not null...	WITHOUT_CLASSIFICATION	0.999999718089807	WITHOUT_CLASSIFICATION	2.819101929622064E-7	TEST
// the ids are fully resolved, so compare them with isDirty(), not isModified()	WITHOUT_CLASSIFICATION	0.9999991497717453	WITHOUT_CLASSIFICATION	8.502282546830146E-7	TEST
//the owner of the association is not the owner of the id	WITHOUT_CLASSIFICATION	0.9999936521348237	WITHOUT_CLASSIFICATION	6.347865176318456E-6	TEST
// ----------------------------------------------------------- Constructors	WITHOUT_CLASSIFICATION	0.9999993230294275	WITHOUT_CLASSIFICATION	6.769705724562068E-7	TEST
// ----------------------------------------------------- Instance Variables	WITHOUT_CLASSIFICATION	0.99999950317184	WITHOUT_CLASSIFICATION	4.968281599697198E-7	TEST
//	WITHOUT_CLASSIFICATION	0.9999527008540617	WITHOUT_CLASSIFICATION	4.729914593835468E-5	TEST
// --------------------------------------------------------- Public Methods	WITHOUT_CLASSIFICATION	0.9999988014750495	WITHOUT_CLASSIFICATION	1.1985249504721293E-6	TEST
// Compare the two maps for equality	WITHOUT_CLASSIFICATION	0.9999983733136468	WITHOUT_CLASSIFICATION	1.6266863531709725E-6	TEST
// Simple tests that require no synchronization	WITHOUT_CLASSIFICATION	0.9999700824514788	WITHOUT_CLASSIFICATION	2.9917548521173112E-5	TEST
//Sybase fail if we don't do that, sigh...	WITHOUT_CLASSIFICATION	0.9999991024449987	WITHOUT_CLASSIFICATION	8.975550013971542E-7	TEST
// Handles things like: // a and b or c // a and ( b or c ) // not a and not b // not ( a and b ) // x between y and z            (overloaded "and") // x in ( a, b, c )             (overloaded brackets) // not not a // a is not null                (overloaded "not") // etc...... // and expressions like // foo = bar                    (maps to: foo.id = bar.id) // foo.Bar = 'foo'              (maps to: foo.bar = 'foo') // foo.Bar.Baz = 1.0            (maps to: foo.bar = bar.id and bar.baz = 1.0) // 1.0 = foo.Bar.Baz            (maps to: bar.baz = 1.0 and foo.Bar = bar.id) // foo.Bar.Baz = a.B.C          (maps to: bar.Baz = b.C and foo.Bar = bar.id and a.B = b.id) // foo.Bar.Baz + a.B.C          (maps to: bar.Baz + b.C and foo.Bar = bar.id and a.B = b.id) // ( foo.Bar.Baz + 1.0 ) < 2.0  (maps to: ( bar.Baz + 1.0 ) < 2.0 and foo.Bar = bar.id)	WITHOUT_CLASSIFICATION	0.999999481511864	WITHOUT_CLASSIFICATION	5.184881359562911E-7	TEST
// release the jdk internal caches everytime to ensure this // plays nicely with destroyable class-loaders	WITHOUT_CLASSIFICATION	0.9999998858262088	WITHOUT_CLASSIFICATION	1.1417379113719693E-7	TEST
// release the jdk internal caches everytime to ensure this // plays nicely with destroyable class-loaders	WITHOUT_CLASSIFICATION	0.9999998858262088	WITHOUT_CLASSIFICATION	1.1417379113719693E-7	TEST
// try to "pretty print" it	WITHOUT_CLASSIFICATION	0.9999992408343128	WITHOUT_CLASSIFICATION	7.591656872332966E-7	TEST
// otherwise, just dump it	WITHOUT_CLASSIFICATION	0.9999954699544645	WITHOUT_CLASSIFICATION	4.530045535523448E-6	TEST
//its an interface so we can't really tell anything...	WITHOUT_CLASSIFICATION	0.9999870301795282	WITHOUT_CLASSIFICATION	1.2969820471853898E-5	TEST
//its an interface so we can't really tell anything...	WITHOUT_CLASSIFICATION	0.9999870301795282	WITHOUT_CLASSIFICATION	1.2969820471853898E-5	TEST
// use default behavior	WITHOUT_CLASSIFICATION	0.9999996086890003	WITHOUT_CLASSIFICATION	3.913109997250894E-7	TEST
//NOTE: early return	WITHOUT_CLASSIFICATION	0.999986242981857	WITHOUT_CLASSIFICATION	1.3757018143042228E-5	TEST
// the MRU cache used to keep hard references to the most recently used query plans; // note : LRU here is a bit of a misnomer, it indicates that LRU entries are removed, the // actual kept entries are the MRU entries	WITHOUT_CLASSIFICATION	0.999999586462518	WITHOUT_CLASSIFICATION	4.135374819630936E-7	TEST
// we want to be able to just use the defaults, // if JNDI environment properties are not supplied // so don't put null in anywhere	WITHOUT_CLASSIFICATION	0.9999997100067098	WITHOUT_CLASSIFICATION	2.8999329012711306E-7	TEST
// Clone //-----------------------------------------------------------------------	WITHOUT_CLASSIFICATION	0.9999965606799138	WITHOUT_CLASSIFICATION	3.439320086117505E-6	TEST
// Serialize //-----------------------------------------------------------------------	WITHOUT_CLASSIFICATION	0.99999410879081	WITHOUT_CLASSIFICATION	5.89120918997839E-6	TEST
// stream closed in the finally	WITHOUT_CLASSIFICATION	0.9999994141720235	WITHOUT_CLASSIFICATION	5.858279764435932E-7	TEST
// stream closed in the finally	WITHOUT_CLASSIFICATION	0.9999994141720235	WITHOUT_CLASSIFICATION	5.858279764435932E-7	TEST
// Deserialize //-----------------------------------------------------------------------	WITHOUT_CLASSIFICATION	0.9999842411832525	WITHOUT_CLASSIFICATION	1.5758816747539755E-5	TEST
/* static methods only - hide constructor */	WITHOUT_CLASSIFICATION	0.9999999359298282	WITHOUT_CLASSIFICATION	6.407017181311992E-8	TEST
/*&& !('_'==character)*/	WITHOUT_CLASSIFICATION	0.9999906531241655	WITHOUT_CLASSIFICATION	9.346875834396481E-6	TEST
// returnign null!	WITHOUT_CLASSIFICATION	0.9999995298504188	WITHOUT_CLASSIFICATION	4.701495811893024E-7	TEST
// returnign null!	WITHOUT_CLASSIFICATION	0.9999995298504188	WITHOUT_CLASSIFICATION	4.701495811893024E-7	TEST
// includes last '.'	WITHOUT_CLASSIFICATION	0.9999990384266968	WITHOUT_CLASSIFICATION	9.615733031648032E-7	TEST
// +1 to include the following '.'	WITHOUT_CLASSIFICATION	0.999999219164781	WITHOUT_CLASSIFICATION	7.808352190109914E-7	TEST
// Impl note: takes advantage of the fact that an escpaed single quote // embedded within a quote-block can really be handled as two seperate // quote-blocks for the purposes of this method...	WITHOUT_CLASSIFICATION	0.9999758974766084	WITHOUT_CLASSIFICATION	2.410252339158227E-5	TEST
// first time we find match!	WITHOUT_CLASSIFICATION	0.9999987699884373	WITHOUT_CLASSIFICATION	1.2300115626192837E-6	TEST
// entityNames may now include slashes for the representations //classname may be an inner class	WITHOUT_CLASSIFICATION	0.9999999276612431	WITHOUT_CLASSIFICATION	7.233875688730555E-8	TEST
// wrapped iterators	WITHOUT_CLASSIFICATION	0.9999978183736628	WITHOUT_CLASSIFICATION	2.181626337181228E-6	TEST
// index of current iterator in the wrapped iterators array	WITHOUT_CLASSIFICATION	0.9999995407532639	WITHOUT_CLASSIFICATION	4.5924673610856835E-7	TEST
// the current iterator	WITHOUT_CLASSIFICATION	0.9999978104846055	WITHOUT_CLASSIFICATION	2.189515394548127E-6	TEST
// the last used iterator	WITHOUT_CLASSIFICATION	0.9999956418882252	WITHOUT_CLASSIFICATION	4.35811177474859E-6	TEST
//it was a boolean expression	WITHOUT_CLASSIFICATION	0.9999969283325935	WITHOUT_CLASSIFICATION	3.0716674065760687E-6	TEST
/*public static Object[] clone(Class elementClass, Object[] array) {	WITHOUT_CLASSIFICATION	0.9999987929851549	WITHOUT_CLASSIFICATION	1.2070148451007506E-6	TEST
// call this before any Iterator method to make sure that the current Iterator // is not exhausted	WITHOUT_CLASSIFICATION	0.9998785503949884	WITHOUT_CLASSIFICATION	1.2144960501165657E-4	TEST
//doable if needed	WITHOUT_CLASSIFICATION	0.9999938585212195	WITHOUT_CLASSIFICATION	6.1414787805240916E-6	TEST
// set last used iterator here, in case the user calls remove // before calling hasNext() or next() (although they shouldn't)	WITHOUT_CLASSIFICATION	0.9999984318673091	WITHOUT_CLASSIFICATION	1.568132690985973E-6	TEST
// peek ahead	WITHOUT_CLASSIFICATION	0.9999968138560673	WITHOUT_CLASSIFICATION	3.186143932633437E-6	TEST
// if we reach the end of the string w/o finding the // matching end, that is an exception	WITHOUT_CLASSIFICATION	0.9999991525201931	WITHOUT_CLASSIFICATION	8.474798067618902E-7	TEST
// we have a placeholder, spin forward till we find the end	WITHOUT_CLASSIFICATION	0.9999992586868811	WITHOUT_CLASSIFICATION	7.413131188045973E-7	TEST
// make sure spinning forward did not put us past the end of the buffer...	WITHOUT_CLASSIFICATION	0.9999924976418382	WITHOUT_CLASSIFICATION	7.502358161844423E-6	TEST
// First, try to locate this resource through the current // context classloader.	WITHOUT_CLASSIFICATION	0.9999997938257664	WITHOUT_CLASSIFICATION	2.0617423355063987E-7	TEST
// Next, try to locate this resource through this class's classloader	WITHOUT_CLASSIFICATION	0.999998468414636	WITHOUT_CLASSIFICATION	1.5315853640350031E-6	TEST
// Next, try to locate this resource through the system classloader	WITHOUT_CLASSIFICATION	0.9999983764605574	WITHOUT_CLASSIFICATION	1.6235394425286501E-6	TEST
// Anywhere else we should look?	WITHOUT_CLASSIFICATION	0.9999972426468936	WITHOUT_CLASSIFICATION	2.757353106346755E-6	TEST
// would need an IdentitySet for this!	WITHOUT_CLASSIFICATION	0.9999894418384311	WITHOUT_CLASSIFICATION	1.0558161568899908E-5	TEST
//Arrays.asList doesn't do primitive arrays	WITHOUT_CLASSIFICATION	0.9999968861835756	WITHOUT_CLASSIFICATION	3.113816424332312E-6	TEST
//faster?	WITHOUT_CLASSIFICATION	0.999930778146961	WITHOUT_CLASSIFICATION	6.922185303901758E-5	TEST
// the name of a class	WITHOUT_CLASSIFICATION	0.999999783264687	WITHOUT_CLASSIFICATION	2.1673531305932376E-7	TEST
// Its the listener class name	WITHOUT_CLASSIFICATION	0.999996933393098	WITHOUT_CLASSIFICATION	3.06660690199665E-6	TEST
//allow 9,8,7,6,5,4,3,2,1	WITHOUT_CLASSIFICATION	0.9999769011651601	WITHOUT_CLASSIFICATION	2.3098834839912595E-5	TEST
// default to element set if no elements() specified	WITHOUT_CLASSIFICATION	0.9999997568903092	WITHOUT_CLASSIFICATION	2.43109690730846E-7	TEST
// look for the instance by uuid	WITHOUT_CLASSIFICATION	0.999997438113044	WITHOUT_CLASSIFICATION	2.561886955985289E-6	TEST
// in case we were deserialized in a different JVM, look for an instance with the same name // (alternatively we could do an actual JNDI lookup here....)	WITHOUT_CLASSIFICATION	0.9999963950975423	WITHOUT_CLASSIFICATION	3.6049024576829228E-6	TEST
// first, lets determine whether to apply cglib or javassist based instrumentation...	WITHOUT_CLASSIFICATION	0.9999997943462827	WITHOUT_CLASSIFICATION	2.056537172777538E-7	TEST
// Make sure we don't override previous set values	WITHOUT_CLASSIFICATION	0.9999996849081797	WITHOUT_CLASSIFICATION	3.1509182036886986E-7	TEST
//entirely optional!!	WITHOUT_CLASSIFICATION	0.9999978610162861	WITHOUT_CLASSIFICATION	2.1389837139270867E-6	TEST
// Its the listener instance (or better be)	WITHOUT_CLASSIFICATION	0.9999795984401769	WITHOUT_CLASSIFICATION	2.0401559823099407E-5	TEST
//context.unbind(boundName);	WITHOUT_CLASSIFICATION	0.9999939609921401	WITHOUT_CLASSIFICATION	6.039007859928434E-6	TEST
//readResolveObject	WITHOUT_CLASSIFICATION	0.9999966585242039	WITHOUT_CLASSIFICATION	3.3414757961116203E-6	TEST
//cfg.setProperty("hibernate.show_sql", "true");	WITHOUT_CLASSIFICATION	0.9999982912580407	WITHOUT_CLASSIFICATION	1.7087419592708264E-6	TEST
// Defensive, convenience methods	WITHOUT_CLASSIFICATION	0.9999993189602098	WITHOUT_CLASSIFICATION	6.810397902525007E-7	TEST
// Create the SessionFactory from hibernate.cfg.xml	WITHOUT_CLASSIFICATION	0.999999793557869	WITHOUT_CLASSIFICATION	2.0644213092610507E-7	TEST
// Make sure you log the exception, as it might be swallowed	WITHOUT_CLASSIFICATION	0.9999993327281081	WITHOUT_CLASSIFICATION	6.672718917999306E-7	TEST
// Begin unit of work	WITHOUT_CLASSIFICATION	0.9999967855712544	WITHOUT_CLASSIFICATION	3.2144287456919E-6	TEST
// Write HTML header	WITHOUT_CLASSIFICATION	0.999997570857236	WITHOUT_CLASSIFICATION	2.4291427640436327E-6	TEST
// Handle actions	WITHOUT_CLASSIFICATION	0.9999998298576386	WITHOUT_CLASSIFICATION	1.7014236129239228E-7	TEST
// Print page	WITHOUT_CLASSIFICATION	0.9999991375373899	WITHOUT_CLASSIFICATION	8.624626100697082E-7	TEST
// Write HTML footer	WITHOUT_CLASSIFICATION	0.999995661937516	WITHOUT_CLASSIFICATION	4.338062484016727E-6	TEST
// End unit of work	WITHOUT_CLASSIFICATION	0.9999977873810466	WITHOUT_CLASSIFICATION	2.212618953357327E-6	TEST
// Start the session to be used for this request	WITHOUT_CLASSIFICATION	0.9999916230965479	WITHOUT_CLASSIFICATION	8.376903452086113E-6	TEST
// make the session available to the session factory's "current context"	WITHOUT_CLASSIFICATION	0.9999996506494179	WITHOUT_CLASSIFICATION	3.4935058210636027E-7	TEST
// pass control along to the rest of the processing chain	WITHOUT_CLASSIFICATION	0.9999964069248413	WITHOUT_CLASSIFICATION	3.5930751587049815E-6	TEST
// remove session from "current context"	WITHOUT_CLASSIFICATION	0.999999886900982	WITHOUT_CLASSIFICATION	1.1309901798505226E-7	TEST
// Eager fetch the collection so we can use it detached	WITHOUT_CLASSIFICATION	0.9999999480025156	WITHOUT_CLASSIFICATION	5.199748439242021E-8	TEST
// If we want to handle it bidirectional and detached, we also need to load this // collection with an eager outer-join fetch, this time with Criteria and not HQL:	WITHOUT_CLASSIFICATION	0.9999999020200567	WITHOUT_CLASSIFICATION	9.797994332962765E-8	TEST
/*        Event anEvent = (Event) session                .createCriteria(Event.class).setFetchMode("participants", FetchMode.JOIN)                .add( Expression.eq("id", eventId) )                .uniqueResult(); // Eager fetch the colleciton so we can use it detached        */	WITHOUT_CLASSIFICATION	0.9999999997568612	WITHOUT_CLASSIFICATION	2.4313885160237705E-10	TEST
// End of first unit of work	WITHOUT_CLASSIFICATION	0.9999947182057961	WITHOUT_CLASSIFICATION	5.2817942038301315E-6	TEST
// or bidirectional safety method, setting both sides: aPerson.addToEvent(anEvent);	WITHOUT_CLASSIFICATION	0.999999920905279	WITHOUT_CLASSIFICATION	7.909472104456672E-8	TEST
// Begin second unit of work	WITHOUT_CLASSIFICATION	0.9999996952484043	WITHOUT_CLASSIFICATION	3.0475159582832965E-7	TEST
// Reattachment of aPerson	WITHOUT_CLASSIFICATION	0.9999997702938497	WITHOUT_CLASSIFICATION	2.2970615045156837E-7	TEST
// The getEmailAddresses() might trigger a lazy load of the collection	WITHOUT_CLASSIFICATION	0.9999998005095639	WITHOUT_CLASSIFICATION	1.9949043603455946E-7	TEST
// We need our tm, so get it now and avoid doing other work // if there is a problem	WITHOUT_CLASSIFICATION	0.9999989728153376	WITHOUT_CLASSIFICATION	1.0271846624250792E-6	TEST
// Don't hold the JBC node lock throughout the tx, as that // prevents reads and other updates	WITHOUT_CLASSIFICATION	0.9999993383268054	WITHOUT_CLASSIFICATION	6.616731946076992E-7	TEST
// Don't hold the JBC node lock throughout the tx, as that // prevents reads and other updates	WITHOUT_CLASSIFICATION	0.9999993383268054	WITHOUT_CLASSIFICATION	6.616731946076992E-7	TEST
// JBC put a version in the node when it created as part of // some internal operation. We are always newer, but if // the JBC version is > 1 something odd has happened	WITHOUT_CLASSIFICATION	0.9999999964207803	WITHOUT_CLASSIFICATION	3.5792196238205052E-9	TEST
//swaldman 2006-08-28: define c3p0-style configuration parameters for properties with //                     hibernate-specific overrides to detect and warn about conflicting //                     declarations	WITHOUT_CLASSIFICATION	0.9999999260226403	WITHOUT_CLASSIFICATION	7.397735970015249E-8	TEST
// Not null if the Isolation level has been specified in the configuration file. // Otherwise, it is left to the Driver's default value.	WITHOUT_CLASSIFICATION	0.9999998998388814	WITHOUT_CLASSIFICATION	1.0016111870159859E-7	TEST
// Configured outside of Hibernate (i.e. Servlet container, or Java Bean Container // already has Proxool pools running, and this provider is to just borrow one of these	WITHOUT_CLASSIFICATION	0.9999999559075817	WITHOUT_CLASSIFICATION	4.409241823295188E-8	TEST
// If you're closing down the ConnectionProvider chances are an // is not a real big deal, just warn	WITHOUT_CLASSIFICATION	0.999999936117465	WITHOUT_CLASSIFICATION	6.38825350380794E-8	TEST
// (AS is always optional, for consistency with SQL/OQL)	WITHOUT_CLASSIFICATION	0.999999317020443	WITHOUT_CLASSIFICATION	6.829795569674637E-7	TEST
// process the "new" HQL style where aliases are assigned // _after_ the class name or path expression ie. using // the AS construction	WITHOUT_CLASSIFICATION	0.9999999873314205	WITHOUT_CLASSIFICATION	1.2668579588125519E-8	TEST
// the loaded owner will be set to null after the collection is removed, // so capture its value as the affected owner so it is accessible to // both pre- and post- events	WITHOUT_CLASSIFICATION	0.9999999847212796	WITHOUT_CLASSIFICATION	1.5278720425829268E-8	TEST
// is a primitive type // invokespecial	WITHOUT_CLASSIFICATION	0.9999989998302099	WITHOUT_CLASSIFICATION	1.0001697901359777E-6	TEST
// array of primitive type // do nothing	WITHOUT_CLASSIFICATION	0.9999998553062002	WITHOUT_CLASSIFICATION	1.4469379993938765E-7	TEST
// handle a path expression or class name that // appears at the start, in the "new" HQL // style or an alias that appears at the start // in the "old" HQL style	WITHOUT_CLASSIFICATION	0.999999909081464	WITHOUT_CLASSIFICATION	9.091853607142434E-8	TEST
//handle <=, >=, !=, is not, not between, not in	WITHOUT_CLASSIFICATION	0.999963493226564	WITHOUT_CLASSIFICATION	3.650677343598414E-5	TEST
// The loop ensures atomicity of the // select + update even for no transaction // or read committed isolation level	WITHOUT_CLASSIFICATION	0.9999998291043074	WITHOUT_CLASSIFICATION	1.7089569248952696E-7	TEST
// transfer an explicitly defined entity name // handle the lazy attribute	WITHOUT_CLASSIFICATION	0.9999994209089377	WITHOUT_CLASSIFICATION	5.790910622124823E-7	TEST
//keep the behavior consistent even for boundary usages	WITHOUT_CLASSIFICATION	0.9999923658916697	WITHOUT_CLASSIFICATION	7.634108330244562E-6	TEST
//keep the behavior consistent even for boundary usages	WITHOUT_CLASSIFICATION	0.9999923658916697	WITHOUT_CLASSIFICATION	7.634108330244562E-6	TEST
// get meta's from // <joined-subclass>	WITHOUT_CLASSIFICATION	0.9999993686385685	WITHOUT_CLASSIFICATION	6.313614314737086E-7	TEST
// parameters on the property mapping should // override parameters in the typedef	WITHOUT_CLASSIFICATION	0.9999997612119407	WITHOUT_CLASSIFICATION	2.38788059337833E-7	TEST
//fetch="join" overrides default laziness //fetch="join" overrides default laziness	WITHOUT_CLASSIFICATION	0.9999982632560676	WITHOUT_CLASSIFICATION	1.736743932377033E-6	TEST
//NOTE SPECIAL CASE: // default to join and non-lazy for the "second join" // of the many-to-many	WITHOUT_CLASSIFICATION	0.9999997534568807	WITHOUT_CLASSIFICATION	2.46543119329464E-7	TEST
// so we "clock over" on the first invocation	WITHOUT_CLASSIFICATION	0.9999999214423326	WITHOUT_CLASSIFICATION	7.855766736168203E-8	TEST
// state ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999909275999164	WITHOUT_CLASSIFICATION	9.072400083625501E-6	TEST
//	WITHOUT_CLASSIFICATION	0.9999527008540617	WITHOUT_CLASSIFICATION	4.729914593835468E-5	TEST
//element //index -> id	WITHOUT_CLASSIFICATION	0.9999873360839865	WITHOUT_CLASSIFICATION	1.2663916013557296E-5	TEST
// note that it might be better to iterate the snapshot but this is safe, // assuming the user implements equals() properly, as required by the Set // contract!	WITHOUT_CLASSIFICATION	0.9999975447359215	WITHOUT_CLASSIFICATION	2.4552640784287333E-6	TEST
// collections detect changes made via their public interface and mark // themselves as dirty as a performance optimization	WITHOUT_CLASSIFICATION	0.999999948237803	WITHOUT_CLASSIFICATION	5.176219692436789E-8	TEST
// essentially, if the real session is closed allow any // method call to pass through since the real session // will complain by throwing an appropriate exception; // NOTE that allowing close() above has the same basic effect, //   but we capture that there simply to perform the unbind...	WITHOUT_CLASSIFICATION	0.999998810894935	WITHOUT_CLASSIFICATION	1.189105064994627E-6	TEST
// The default SQLExceptionConverter for all dialects is based on SQLState // since SQLErrorCode is extremely vendor-specific.  Specific Dialects // may override to return whatever is most appropriate for that vendor.	WITHOUT_CLASSIFICATION	0.9999995861064404	WITHOUT_CLASSIFICATION	4.138935596167923E-7	TEST
//only necessary for postgre < 7.4 //http://anoncvs.postgresql.org/cvsweb.cgi/pgsql/doc/src/sgml/ref/create_sequence.sgml	WITHOUT_CLASSIFICATION	0.9999995741614319	WITHOUT_CLASSIFICATION	4.2583856814495735E-7	TEST
// select topic, syntax from information_schema.help // where section like 'Function%' order by section, topic // // see also ->  http://www.h2database.com/html/functions.html	WITHOUT_CLASSIFICATION	0.9999999418085308	WITHOUT_CLASSIFICATION	5.819146914846143E-8	TEST
// registerColumnType(Types.VARBINARY, "CHARACTER($l)"); // registerColumnType(Types.BLOB, "CHARACTER($l)" );  // For use prior to CP 11.0 // registerColumnType(Types.CLOB, "CHARACTER($l)" );	WITHOUT_CLASSIFICATION	0.999999666239893	WITHOUT_CLASSIFICATION	3.337601069527379E-7	TEST
//the BLOB type requires a size arguement - this defaults to //bytes - no arg defaults to 1 whole byte! //other argument mods include K - kilobyte, M - megabyte, G - gigabyte. //refer to the PBdevelopers guide for more info.	WITHOUT_CLASSIFICATION	0.9999991513501595	WITHOUT_CLASSIFICATION	8.486498404812464E-7	TEST
// We must return a valid RDMS/RSA command from this method to // prevent RDMS/RSA from issuing *ERROR 400	WITHOUT_CLASSIFICATION	0.9999992883211735	WITHOUT_CLASSIFICATION	7.116788265545419E-7	TEST
// Oracle driver reports to support getGeneratedKeys(), but they only // support the version taking an array of the names of the columns to // be returned (via its RETURNING clause).  No other driver seems to // support this overloaded version.	WITHOUT_CLASSIFICATION	0.9999999764441442	WITHOUT_CLASSIFICATION	2.3555855856435413E-8	TEST
// add the comment // nest the main query in an outer select // add the rownnumber bit into the outer query select list	WITHOUT_CLASSIFICATION	0.9999973885525215	WITHOUT_CLASSIFICATION	2.6114474784182845E-6	TEST
//	WITHOUT_CLASSIFICATION	0.9999527008540617	WITHOUT_CLASSIFICATION	4.729914593835468E-5	TEST
// Note: For object <-> SQL datatype mappings see: //	WITHOUT_CLASSIFICATION	0.9999995260971105	WITHOUT_CLASSIFICATION	4.7390288944469344E-7	TEST
// TRIM(end_keyword string-expression-1 FROM string-expression-2) // use Hibernate implementation "From" is one of the parameters they pass in position ?3 //registerFunction( "trim", new SQLFunctionTemplate(Hibernate.STRING, "trim(?1 ?2 from ?3)") );	WITHOUT_CLASSIFICATION	0.9999999610489186	WITHOUT_CLASSIFICATION	3.895108145019359E-8	TEST
// Whether this dialect has an Identity clause added to the data type or a completely seperate identity // data type	WITHOUT_CLASSIFICATION	0.9999994048894745	WITHOUT_CLASSIFICATION	5.95110525509368E-7	TEST
// According to both the ANSI-SQL and JPA specs, trim takes a variable number of parameters between 1 and 4. // at least one paramer (trimSource) is required.  From the SQL spec: // // <trim function> ::= //      TRIM <left paren> <trim operands> <right paren> // // <trim operands> ::= //      [ [ <trim specification> ] [ <trim character> ] FROM ] <trim source> // // <trim specification> ::= //      LEADING //      | TRAILING //      | BOTH // // If <trim specification> is omitted, BOTH is assumed. // If <trim character> is omitted, space is assumed	WITHOUT_CLASSIFICATION	0.9999998415833513	WITHOUT_CLASSIFICATION	1.5841664867925002E-7	TEST
/////////////////////////////////////////////////////////////////////// // Prepare persisters and link them up with their cache // region/access-strategy	WITHOUT_CLASSIFICATION	0.999998520722958	WITHOUT_CLASSIFICATION	1.4792770419980352E-6	TEST
//Named Queries:	WITHOUT_CLASSIFICATION	0.9999647688359352	WITHOUT_CLASSIFICATION	3.5231164064800274E-5	TEST
// this will throw an error if there's something wrong.	WITHOUT_CLASSIFICATION	0.9999867403629622	WITHOUT_CLASSIFICATION	1.3259637037935406E-5	TEST
// does not handle arrays (thats ok, cos they can't be lazy) // or newly instantiated collections, so we can do the cast	WITHOUT_CLASSIFICATION	0.999999934539963	WITHOUT_CLASSIFICATION	6.546003692486653E-8	TEST
// collection deletions are a special case since update() can add // deletions of collections not loaded by the session.	WITHOUT_CLASSIFICATION	0.99999996368875	WITHOUT_CLASSIFICATION	3.631125006165699E-8	TEST
// we can do the cast since orphan-delete does not apply to: // 1. newly instantiated collections // 2. arrays (we can't track orphans for detached arrays)	WITHOUT_CLASSIFICATION	0.9999999574105736	WITHOUT_CLASSIFICATION	4.258942647852815E-8	TEST
// if the natural-id is marked as non-mutable, it is not retrieved during a // normal database-snapshot operation...	WITHOUT_CLASSIFICATION	0.9999999386682217	WITHOUT_CLASSIFICATION	6.13317783112291E-8	TEST
// watch out for a case where old is still referenced // somewhere in the object graph! (which is a user error)	WITHOUT_CLASSIFICATION	0.9999992989247422	WITHOUT_CLASSIFICATION	7.010752577814008E-7	TEST
//slice, to get the columns for this component //property	WITHOUT_CLASSIFICATION	0.9999888609317211	WITHOUT_CLASSIFICATION	1.1139068278947764E-5	TEST
//int result = 17; //result = 37 * result + type.hashCode(); //result = 37 * result + ( value==null ? 0 : value.hashCode() ); //return result;	WITHOUT_CLASSIFICATION	0.9999990717089086	WITHOUT_CLASSIFICATION	9.282910915255247E-7	TEST
// The CollectionEntry.isReached() stuff is just to detect any silly users   // who set up circular or shared references between/to collections.	WITHOUT_CLASSIFICATION	0.9999998820432783	WITHOUT_CLASSIFICATION	1.1795672180749736E-7	TEST
// detached collection wrappers that get found + reattached // during flush shouldn't be ignored	WITHOUT_CLASSIFICATION	0.9999999662712385	WITHOUT_CLASSIFICATION	3.372876143141999E-8	TEST
// The unique property value represented here may or may not be // serializable, so we do an explicit check here in order to generate // a better error message	WITHOUT_CLASSIFICATION	0.9999892536228668	WITHOUT_CLASSIFICATION	1.0746377133144412E-5	TEST
// if the version of a newly instantiated object is not the same // as the version seed value, use that as the unsaved-value	WITHOUT_CLASSIFICATION	0.9999999849588154	WITHOUT_CLASSIFICATION	1.504118465392636E-8	TEST
// ie. we never have to null out a reference to // an uninitialized proxy	WITHOUT_CLASSIFICATION	0.9999977905871009	WITHOUT_CLASSIFICATION	2.2094128991558357E-6	TEST
// ignore this row, the collection is in process of // being loaded somewhere further "up" the stack	WITHOUT_CLASSIFICATION	0.9999998049756004	WITHOUT_CLASSIFICATION	1.9502439970277993E-7	TEST
// Entity load contexts ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ // 	WITHOUT_CLASSIFICATION	0.9999996448011307	WITHOUT_CLASSIFICATION	3.5519886934014215E-7	TEST
// should be ok performance-wise to generate new delegate instances for each // request since these are locally stack-scoped.  Besides, it makes the code // much easier to read than the old TransactionHelper stuff...	WITHOUT_CLASSIFICATION	0.999999222599089	WITHOUT_CLASSIFICATION	7.774009110758401E-7	TEST
// this implementation is supposed to tolerate incorrect unsaved-value // mappings, for the purpose of backward-compatibility	WITHOUT_CLASSIFICATION	0.9999953035370248	WITHOUT_CLASSIFICATION	4.6964629750745625E-6	TEST
// this implementation is supposed to tolerate incorrect unsaved-value // mappings, for the purpose of backward-compatibility	WITHOUT_CLASSIFICATION	0.9999953035370248	WITHOUT_CLASSIFICATION	4.6964629750745625E-6	TEST
// wrap up any new collections directly referenced by the object // or its components	WITHOUT_CLASSIFICATION	0.9999999269824754	WITHOUT_CLASSIFICATION	7.301752449741148E-8	TEST
// remove any snapshot, not really for memory management purposes, but // rather because it might now be stale, and there is no longer any  // EntityEntry to take precedence // This is now handled by removeEntity() //session.getPersistenceContext().removeDatabaseSnapshot(key);	WITHOUT_CLASSIFICATION	0.9999991647125245	WITHOUT_CLASSIFICATION	8.352874756606692E-7	TEST
// skip this check for composite-ids relating to dom4j entity-mode; // alternatively, we could add a check to make sure the incoming id value is // an instance of Element...	WITHOUT_CLASSIFICATION	0.9999999268139103	WITHOUT_CLASSIFICATION	7.318608973735209E-8	TEST
// upgrade the lock if necessary: //lock(result, lockMode);	WITHOUT_CLASSIFICATION	0.9999998056125284	WITHOUT_CLASSIFICATION	1.9438747144076627E-7	TEST
// now, any collections that are initialized // inside this block do not get updated - they // are ignored until the next flush	WITHOUT_CLASSIFICATION	0.9999999144351821	WITHOUT_CLASSIFICATION	8.556481799631938E-8	TEST
//we must clone embedded composite identifiers, or  //we will get back the same instance that we pass in	WITHOUT_CLASSIFICATION	0.9999991165787915	WITHOUT_CLASSIFICATION	8.834212085268775E-7	TEST
// Sub-insertions should occur before containing insertion so // Try to do the callback now	WITHOUT_CLASSIFICATION	0.9999999812217703	WITHOUT_CLASSIFICATION	1.877822978400406E-8	TEST
//the entity is not associated with the session, so //try interceptor and unsaved-value	WITHOUT_CLASSIFICATION	0.999997965019193	WITHOUT_CLASSIFICATION	2.0349808070867827E-6	TEST
//scan the query string for class names appearing in the from clause and replace //with all persistent implementors of the class/interface, returning multiple //query strings (make sure we don't pick up a class in the select clause!)	WITHOUT_CLASSIFICATION	0.9999976158052731	WITHOUT_CLASSIFICATION	2.384194726838178E-6	TEST
// save() operations ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999992608980531	WITHOUT_CLASSIFICATION	7.391019469926765E-7	TEST
// evict() operations ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999997285818115	WITHOUT_CLASSIFICATION	2.714181885243092E-7	TEST
//stops flush being called multiple times if this method is recursively called	WITHOUT_CLASSIFICATION	0.9999512502202929	WITHOUT_CLASSIFICATION	4.8749779707196354E-5	TEST
//if it is an uninitialized proxy, pointing //with this session, then when it is accessed, //the underlying instance will be "contained"	WITHOUT_CLASSIFICATION	0.9999916037707393	WITHOUT_CLASSIFICATION	8.396229260700368E-6	TEST
// Generate an explicit join for the root dot node.   The implied joins will be collected and passed up // to the root dot node.	WITHOUT_CLASSIFICATION	0.9999861172440785	WITHOUT_CLASSIFICATION	1.3882755921406401E-5	TEST
// A session is considered to contain an entity only if the entity has // an entry in the session's persistence context and the entry reports // that the entity has not been removed	WITHOUT_CLASSIFICATION	0.9999999847704313	WITHOUT_CLASSIFICATION	1.522956868300237E-8	TEST
// Does the collection referenced by this FromElement // specify an order-by attribute?  If so, attach it to // the query's order-by	WITHOUT_CLASSIFICATION	0.9999998162173487	WITHOUT_CLASSIFICATION	1.8378265120397628E-7	TEST
// ... and the token could be an identifer and the error is // a mismatched token error ...	WITHOUT_CLASSIFICATION	0.9999965719221202	WITHOUT_CLASSIFICATION	3.428077879755277E-6	TEST
// If a where clause was specified in the update/delete query, use it to limit the // returned ids here...	WITHOUT_CLASSIFICATION	0.9999998823055122	WITHOUT_CLASSIFICATION	1.1769448781352611E-7	TEST
//	WITHOUT_CLASSIFICATION	0.9999527008540617	WITHOUT_CLASSIFICATION	4.729914593835468E-5	TEST
// Default implementation: // If this node has a data type, and that data type is not an association, then this is scalar.	WITHOUT_CLASSIFICATION	0.9999804772084385	WITHOUT_CLASSIFICATION	1.9522791561498924E-5	TEST
// Resolve the LHS fully, generate implicit joins.  Pass in the property name so that the resolver can // discover foreign key (id) properties.	WITHOUT_CLASSIFICATION	0.9999982532079461	WITHOUT_CLASSIFICATION	1.7467920538781572E-6	TEST
// If the propertyType is null and there isn't a parent, just // stop now... there was a problem resolving the node anyway.	WITHOUT_CLASSIFICATION	0.9999992867670742	WITHOUT_CLASSIFICATION	7.132329258969108E-7	TEST
//We do not look for an existing join on the same path, because //it makes sense to join twice on the same collection role	WITHOUT_CLASSIFICATION	0.9999997121171542	WITHOUT_CLASSIFICATION	2.8788284586103684E-7	TEST
// our parent is another dot node, meaning we are being further dereferenced. // thus we need to generate a join unless the parent refers to the associated // entity's PK (because 'our' table would know the FK).	WITHOUT_CLASSIFICATION	0.9999983251481945	WITHOUT_CLASSIFICATION	1.6748518054436414E-6	TEST
/*public final Currency getCurrency(int col) throws HibernateException {	WITHOUT_CLASSIFICATION	0.9999974505662301	WITHOUT_CLASSIFICATION	2.5494337699084836E-6	TEST
// here, we have two possibilities: // 	WITHOUT_CLASSIFICATION	0.9999738370336541	WITHOUT_CLASSIFICATION	2.6162966346023493E-5	TEST
// Set the unresolved path in this node and the parent. // Set the text for the parent.	WITHOUT_CLASSIFICATION	0.9999927599907511	WITHOUT_CLASSIFICATION	7.240009248936551E-6	TEST
// Get the first child to be considered.  Sub-classes may do this differently in order to skip nodes that // are not select expressions (e.g. DISTINCT).	WITHOUT_CLASSIFICATION	0.9999999628970091	WITHOUT_CLASSIFICATION	3.710299099454625E-8	TEST
// If this is an entity and the property is the identifier property, then use getIdentifierType(). //      Note that the propertyName.equals( propertyPath ) checks whether we have a component //      key reference, where the component class property name is the same as the //      entity id property name; if the two are not equal, this is the case and //      we'd need to "fall through" to using the property mapping.	WITHOUT_CLASSIFICATION	0.9999991946785388	WITHOUT_CLASSIFICATION	8.053214611652992E-7	TEST
// for a subquery, the alias to use depends on a few things (we // already know this is not an overall SELECT): //      1) if this FROM_ELEMENT represents a correlation to the //          outer-most query //              A) if the outer query represents a multi-table //                  persister, we need to use the given alias //                  in anticipation of one of the multi-table //                  executors being used (as this subquery will //                  actually be used in the "id select" phase //                  of that multi-table executor) //              B) otherwise, we need to use the persister's //                  table name as the column qualification //      2) otherwise (not correlated), use the given alias	WITHOUT_CLASSIFICATION	0.9999999981001507	WITHOUT_CLASSIFICATION	1.899849219840531E-9	TEST
// Not a collection? // Return the entity property mapping.	WITHOUT_CLASSIFICATION	0.9999997969799084	WITHOUT_CLASSIFICATION	2.0302009162648374E-7	TEST
// collection of <many-to-any/> mappings... // used to circumvent the component-collection check below...	WITHOUT_CLASSIFICATION	0.9999999788357381	WITHOUT_CLASSIFICATION	2.116426192908976E-8	TEST
// Otherwise, the destination node was implied by the FROM clause and the FROM clause processor // will automatically add it in the right place.	WITHOUT_CLASSIFICATION	0.9999993432416733	WITHOUT_CLASSIFICATION	6.56758326656883E-7	TEST
// If the first identifier in the path referrs to the class alias (not the class name), then this // is a correlated subselect.  If it's a correlated sub-select, use the existing table alias.  Otherwise // generate a new one.	WITHOUT_CLASSIFICATION	0.9999999675558228	WITHOUT_CLASSIFICATION	3.244417734049894E-8	TEST
// check to see if our "propPath" actually // represents a property on the persister	WITHOUT_CLASSIFICATION	0.9999999104986835	WITHOUT_CLASSIFICATION	8.950131646451836E-8	TEST
// An ident node can represent an index expression if the ident // represents a naked property ref //      *Note: this makes the assumption (which is currently the case //      in the hql-sql grammar) that the ident is first resolved //      itself (addrExpr -> resolve()).  The other option, if that //      changes, is to call resolve from here; but it is //      currently un-needed overhead.	WITHOUT_CLASSIFICATION	0.9999971848602557	WITHOUT_CLASSIFICATION	2.815139744277566E-6	TEST
// This uses a PathExpressionParser but notice that compound paths are not valid, // only bare names and simple paths:	WITHOUT_CLASSIFICATION	0.9999999752606039	WITHOUT_CLASSIFICATION	2.473939609739432E-8	TEST
// If this is an implied join in a FROM clause, then use ANSI-style joining, and set the // flag on the FromElement that indicates that it was implied in the FROM clause itself.	WITHOUT_CLASSIFICATION	0.9999708524173577	WITHOUT_CLASSIFICATION	2.9147582642379107E-5	TEST
//	WITHOUT_CLASSIFICATION	0.9999527008540617	WITHOUT_CLASSIFICATION	4.729914593835468E-5	TEST
// For an explicit many-to-many relationship, add a second join from the intermediate  // (many-to-many) table to the destination table.  Also, make sure that the from element's  // idea of the destination is the destination table.	WITHOUT_CLASSIFICATION	0.9999995500827473	WITHOUT_CLASSIFICATION	4.4991725261864516E-7	TEST
// Reset the node type, because the rest of the system is expecting FROM_FRAGMENT, all we wanted was // for the factory to create the right sub-class.  This might get reset again later on anyway to make the // SQL generation simpler.	WITHOUT_CLASSIFICATION	0.9999988312903204	WITHOUT_CLASSIFICATION	1.1687096796024172E-6	TEST
//explicit = true;	WITHOUT_CLASSIFICATION	0.9999912814697915	WITHOUT_CLASSIFICATION	8.718530208435964E-6	TEST
//sqlResultTypeList.add( type ); // Generate the select expression.	WITHOUT_CLASSIFICATION	0.9999998064603425	WITHOUT_CLASSIFICATION	1.9353965763313055E-7	TEST
// If the expression list has exactly one expression, and the type of the expression is a collection // then this might be a collection function, such as index(c) or size(c).	WITHOUT_CLASSIFICATION	0.9999994708398641	WITHOUT_CLASSIFICATION	5.291601358596564E-7	TEST
// Need to parse off the column qualifiers; this is assuming (which is true as of now) // that this is only used from update and delete HQL statement parsing	WITHOUT_CLASSIFICATION	0.9999913654387604	WITHOUT_CLASSIFICATION	8.63456123961214E-6	TEST
// for regression testing against output from the old parser... // found it easiest to simply reorder the FromElements here into ascending order // in terms of injecting them into the resulting sql ast in orders relative to those // expected by the old parser; this is definitely another of those "only needed // for regression purposes".  The SyntheticAndFactory, then, simply injects them as it // encounters them.	WITHOUT_CLASSIFICATION	0.9999651384405164	WITHOUT_CLASSIFICATION	3.4861559483649504E-5	TEST
// The uber-rule here is that we need to include  subclass joins if // the FromElement is in any way dereferenced by a property from // the subclass table; otherwise we end up with column references // qualified by a non-existent table reference in the resulting SQL...	WITHOUT_CLASSIFICATION	0.999999573288238	WITHOUT_CLASSIFICATION	4.2671176200200734E-7	TEST
// classic translator does not support collection of ordinal // param metadata	WITHOUT_CLASSIFICATION	0.999999961592643	WITHOUT_CLASSIFICATION	3.8407356988434194E-8	TEST
// The following variables are stacks that keep information about each subexpression // in the list of nested subexpressions we are currently processing.	WITHOUT_CLASSIFICATION	0.999999942988251	WITHOUT_CLASSIFICATION	5.701174895097323E-8	TEST
// The loop ensures atomicity of the // select + update even for no transaction // or read committed isolation level	WITHOUT_CLASSIFICATION	0.9999998291043074	WITHOUT_CLASSIFICATION	1.7089569248952696E-7	TEST
// should not be able to reach last without maxPosition being set // unless there are no results	WITHOUT_CLASSIFICATION	0.9999996859889757	WITHOUT_CLASSIFICATION	3.140110242035329E-7	TEST
// we found it in the temp PC.  Should indicate we are in the midst of processing a result set // containing eager fetches via join fetch	WITHOUT_CLASSIFICATION	0.9999999696223677	WITHOUT_CLASSIFICATION	3.03776322487879E-8	TEST
//do not use proxiesByKey, since not all //proxies that point to this session's //instances are in that collection!	WITHOUT_CLASSIFICATION	0.9999999778338787	WITHOUT_CLASSIFICATION	2.216612120040381E-8	TEST
// if there is no TM configured, we will not be able to access // the javax.transaction.Transaction object in order to // register a synch anyway.	WITHOUT_CLASSIFICATION	0.9999999556868225	WITHOUT_CLASSIFICATION	4.431317738546661E-8	TEST
// Since the result set cursor is always left at the first // physical row after the "last processed", we need to jump // back one position to get the key value we are interested // in skipping	WITHOUT_CLASSIFICATION	0.9999990407642395	WITHOUT_CLASSIFICATION	9.592357604924105E-7	TEST
//true if this is a query and we are loading multiple instances of the same collection role //otherwise this is a CollectionInitializer and we are loading up a single collection or batch	WITHOUT_CLASSIFICATION	0.9999986419149551	WITHOUT_CLASSIFICATION	1.3580850449688534E-6	TEST
// we don't need to worry about existing version being uninitialized // because this block isn't called by a re-entrant load (re-entrant // loads _always_ have lock mode NONE)	WITHOUT_CLASSIFICATION	0.9999998724495065	WITHOUT_CLASSIFICATION	1.275504935954311E-7	TEST
// add temp entry so that the next step is circular-reference // safe - only needed because some types don't take proper // advantage of two-phase-load (esp. components)	WITHOUT_CLASSIFICATION	0.999999962394631	WITHOUT_CLASSIFICATION	3.7605368994902576E-8	TEST
// assume we are in an auto-commit state	WITHOUT_CLASSIFICATION	0.9999969190628026	WITHOUT_CLASSIFICATION	3.080937197350434E-6	TEST
// log a message about potential connection leaks	WITHOUT_CLASSIFICATION	0.9999998509620162	WITHOUT_CLASSIFICATION	1.490379839264876E-7	TEST
//	WITHOUT_CLASSIFICATION	0.9999527008540617	WITHOUT_CLASSIFICATION	4.729914593835468E-5	TEST
// this has been shown to happen occasionally in rare cases // when using a transaction manager + transaction-timeout // where the timeout calls back through Hibernate's // registered transaction synchronization on a separate // "reaping" thread.  In cases where that reaping thread // executes through this block at the same time the main // application thread does we can get into situations where // these CMEs occur.  And though it is not "allowed" per-se, // the end result without handling it specifically is infinite // looping.  So here, we simply break the loop	WITHOUT_CLASSIFICATION	0.9999999705657657	WITHOUT_CLASSIFICATION	2.9434234274584284E-8	TEST
// unfortunately this stuff can't be cached because // it is per-invocation, not constant for the // QueryTranslator instance	WITHOUT_CLASSIFICATION	0.999999912775505	WITHOUT_CLASSIFICATION	8.72244949695645E-8	TEST
// can't cache this stuff either (per-invocation) // we are given a map of user-alias -> lock mode // create a new map of sql-alias -> lock mode	WITHOUT_CLASSIFICATION	0.9999999943372582	WITHOUT_CLASSIFICATION	5.662741730855201E-9	TEST
// don't create a unique key, 'cos some // databases don't like a UK on nullable // columns //getCollectionTable().createUniqueKey( getIdentifier().getConstraintColumns() );	WITHOUT_CLASSIFICATION	0.9999999685187839	WITHOUT_CLASSIFICATION	3.14812160497801E-8	TEST
// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ // stuff that is persister-centric and/or EntityInfo-centric ~~~~~~~~~~~~~~ // ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999974995208533	WITHOUT_CLASSIFICATION	2.500479146674057E-6	TEST
//isSet = collection.isSet(); //isSorted = collection.isSorted();	WITHOUT_CLASSIFICATION	0.9999981481811109	WITHOUT_CLASSIFICATION	1.8518188892213573E-6	TEST
//lists, arrays //sets, maps, bags	WITHOUT_CLASSIFICATION	0.9999874377612654	WITHOUT_CLASSIFICATION	1.256223873455641E-5	TEST
// we finish all the "removes" first to take care of possible unique // constraints and so that we can take better advantage of batching	WITHOUT_CLASSIFICATION	0.9999977403586432	WITHOUT_CLASSIFICATION	2.25964135675822E-6	TEST
//use a combination of foreign key columns and pk columns, since //the ordering of removal and addition is not guaranteed when //a child moves from one parent to another	WITHOUT_CLASSIFICATION	0.9999999366775928	WITHOUT_CLASSIFICATION	6.332240714456622E-8	TEST
// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ // stuff that is persister-centric and/or EntityInfo-centric ~~~~~~~~~~~~~~ // ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999974995208533	WITHOUT_CLASSIFICATION	2.500479146674057E-6	TEST
//information about properties of this class, //including inherited properties //(only really needed for updatable/insertable properties)	WITHOUT_CLASSIFICATION	0.999998364121	WITHOUT_CLASSIFICATION	1.6358789999865306E-6	TEST
// all this only really needs to consider properties // of this class, not its subclasses, but since we // are reusing code used for sequential selects, we // use the subclass closure	WITHOUT_CLASSIFICATION	0.9999999908835377	WITHOUT_CLASSIFICATION	9.116462195367129E-9	TEST
// Here we render the select column list based on the properties defined as being generated. // For partial component generation, we currently just re-select the whole component // rather than trying to handle the individual generated portions.	WITHOUT_CLASSIFICATION	0.999999888430928	WITHOUT_CLASSIFICATION	1.1156907187004431E-7	TEST
// this is the root (versioned) table, and we are using version-based // optimistic locking;  if we are not updating the version, also don't // check it (unless this is a "generated" version column)!	WITHOUT_CLASSIFICATION	0.9999999926749504	WITHOUT_CLASSIFICATION	7.325049575026441E-9	TEST
//optimistic-lock="all", include all updatable properties //optimistic-lock="dirty", include all properties we are updating this time	WITHOUT_CLASSIFICATION	0.9999979104236683	WITHOUT_CLASSIFICATION	2.089576331681663E-6	TEST
// this property belongs to the table, and it is not specifically // excluded from optimistic locking by optimistic-lock="false"	WITHOUT_CLASSIFICATION	0.9999996692546985	WITHOUT_CLASSIFICATION	3.307453015360094E-7	TEST
// check to see if the connection is in auto-commit  // mode (no connection means aggressive connection // release outside a JTA transaction context, so MUST // be autocommit mode)	WITHOUT_CLASSIFICATION	0.99999999783237	WITHOUT_CLASSIFICATION	2.167630062769661E-9	TEST
// need to treat this as if it where optimistic-lock="all" (dirty does *not* make sense); // first we need to locate the "loaded" state // // Note, it potentially could be a proxy, so perform the location the safe way...	WITHOUT_CLASSIFICATION	0.9999999920201292	WITHOUT_CLASSIFICATION	7.979870876520291E-9	TEST
// we *always* assume an instance with a null // identifier or no identifier property is unsaved!	WITHOUT_CLASSIFICATION	0.9999994796163009	WITHOUT_CLASSIFICATION	5.203836991290809E-7	TEST
// Need to use the identifier type of the collection owner // since the incoming is value is actually the owner's id. // Using the collection's key type causes problems with // property-ref keys...	WITHOUT_CLASSIFICATION	0.9999982069949593	WITHOUT_CLASSIFICATION	1.7930050406731194E-6	TEST
//allow any identifier quoted with backtick //only recognizes identifiers beginning with a letter	WITHOUT_CLASSIFICATION	0.9999836002004449	WITHOUT_CLASSIFICATION	1.6399799555095757E-5	TEST
//following doesn't handle (null, not null) but unnecessary //since this would mean all rows	WITHOUT_CLASSIFICATION	0.9999898360267614	WITHOUT_CLASSIFICATION	1.0163973238667644E-5	TEST
// IMPL NOTE : due to the delayed population of setters (setters cached // 	WITHOUT_CLASSIFICATION	0.9999995345828886	WITHOUT_CLASSIFICATION	4.6541711141156473E-7	TEST
// we need to dirty check collections, since they can cause an owner // version number increment	WITHOUT_CLASSIFICATION	0.9999999843994014	WITHOUT_CLASSIFICATION	1.5600598597933216E-8	TEST
//return the id, so we can use it to reset the proxy id //return result;	WITHOUT_CLASSIFICATION	0.9999987525090401	WITHOUT_CLASSIFICATION	1.2474909599247781E-6	TEST
//	WITHOUT_CLASSIFICATION	0.9999527008540617	WITHOUT_CLASSIFICATION	4.729914593835468E-5	TEST
// cache the actual id of the object, not the value of the // property-ref, which might not be initialized	WITHOUT_CLASSIFICATION	0.9999996247603432	WITHOUT_CLASSIFICATION	3.752396568196083E-7	TEST
// We now have the value of the property-ref we reference.  However, // we need to dig a little deeper, as that property might also be // an entity type, in which case we need to resolve its identitifier	WITHOUT_CLASSIFICATION	0.999999870621348	WITHOUT_CLASSIFICATION	1.2937865196618363E-7	TEST
// Retrieve the value of the designated column in the current row of this // ResultSet object as a java.io.Reader object	WITHOUT_CLASSIFICATION	0.9999999871596258	WITHOUT_CLASSIFICATION	1.2840374285456934E-8	TEST
//not absolutely necessary, but helps for some //equals()/hashCode() implementations	WITHOUT_CLASSIFICATION	0.9999865048371865	WITHOUT_CLASSIFICATION	1.3495162813367555E-5	TEST
//this should be a call to resolve(), not resolveIdentifier(),  //'cos it might be a property-ref, and we did not cache the //referenced value	WITHOUT_CLASSIFICATION	0.9999997549587409	WITHOUT_CLASSIFICATION	2.450412591007319E-7	TEST
// If we have <tt>not-found="ignore"</tt> association mapped to a // formula, we always need to dirty check it, so we can update the // second-level cache	WITHOUT_CLASSIFICATION	0.9999999348266969	WITHOUT_CLASSIFICATION	6.51733030925834E-8	TEST
// can't just return null here, since that would // cause an owning component to become null	WITHOUT_CLASSIFICATION	0.999999518989752	WITHOUT_CLASSIFICATION	4.810102479669538E-7	TEST
//for arrays, replaceElements() may return a different reference, since //the array length might not match	WITHOUT_CLASSIFICATION	0.9999985361698579	WITHOUT_CLASSIFICATION	1.4638301421916452E-6	TEST
// actual cache of the entries.  soft references are used for both the keys and the // values here since the values pertaining to the MRU entries are kept in a // seperate hard reference cache (to avoid their enqueuement/garbage-collection).	WITHOUT_CLASSIFICATION	0.999999909145068	WITHOUT_CLASSIFICATION	9.085493200087944E-8	TEST
// as soon as we encounter our first letter, return the substring // from that position	WITHOUT_CLASSIFICATION	0.9999997340491052	WITHOUT_CLASSIFICATION	2.659508947154858E-7	TEST
// Note : expected in the syntax: //      type=listenerClass //          ({sep}type=listenerClass)* // where {sep} is any whitespace or comma	WITHOUT_CLASSIFICATION	0.9999988832303249	WITHOUT_CLASSIFICATION	1.1167696751416214E-6	TEST
// isTransactionCallbackRegistered denotes whether any Hibernate // Transaction has registered as a callback against this // JDBCContext; only one such callback is allowed.  Directly // serializing this value causes problems with JDBCTransaction, // or really any Transaction impl where the callback is local // to the Transaction instance itself, since that Transaction // is not serialized along with the JDBCContext.  Thus we // handle that fact here explicitly...	WITHOUT_CLASSIFICATION	0.9999994176390531	WITHOUT_CLASSIFICATION	5.823609468928828E-7	TEST
// note that for sequential scrolling, we make the assumption that // the first persister element is the "root entity"	WITHOUT_CLASSIFICATION	0.9999887942389307	WITHOUT_CLASSIFICATION	1.1205761069404283E-5	TEST
// We call getKeyFromResultSet() here so that we can know the // key value upon which to perform the breaking logic.  However, // it is also then called from getRowFromResultSet() which is certainly // not the most efficient.  But the call here is needed, and there // currently is no other way without refactoring of the doQuery()/getRowFromResultSet() // methods	WITHOUT_CLASSIFICATION	0.9999998711110524	WITHOUT_CLASSIFICATION	1.2888894769697693E-7	TEST
// This check is needed since processing leaves the cursor // after the last physical row for the current logical row; // thus if we are after the last physical row, this might be // caused by either: //      1) scrolling to the last logical row //      2) scrolling past the last logical row // In the latter scenario, the previous logical row // really is the last logical row. // // In all other cases, we should process back two // logical records (the current logic row, plus the // previous logical row).	WITHOUT_CLASSIFICATION	0.9999980025219986	WITHOUT_CLASSIFICATION	1.9974780014742708E-6	TEST
// and perform the load	WITHOUT_CLASSIFICATION	0.999998646526651	WITHOUT_CLASSIFICATION	1.3534733489109218E-6	TEST
//important: reuse the same event instances for performance!	WITHOUT_CLASSIFICATION	0.9999965135744909	WITHOUT_CLASSIFICATION	3.4864255090079023E-6	TEST
//this is a query and we are loading multiple instances of the same collection role	WITHOUT_CLASSIFICATION	0.9999996973600683	WITHOUT_CLASSIFICATION	3.026399315741048E-7	TEST
// we found a collection element in the result set	WITHOUT_CLASSIFICATION	0.999999928609533	WITHOUT_CLASSIFICATION	7.139046697959417E-8	TEST
// we did not find a collection element in the result set, so we // ensure that a collection is created with the owner's identifier, // since what we have is an empty collection	WITHOUT_CLASSIFICATION	0.9999998496326481	WITHOUT_CLASSIFICATION	1.5036735180559455E-7	TEST
// this is a collection initializer, so we must create a collection // for each of the passed-in keys, to account for the possibility // that the collection is empty and has no rows in the result set	WITHOUT_CLASSIFICATION	0.9999964081011735	WITHOUT_CLASSIFICATION	3.5918988266178517E-6	TEST
// grab its state from the ResultSet and keep it in the Session // (but don't yet initialize the object itself) // note that we acquire LockMode.READ even if it was not requested	WITHOUT_CLASSIFICATION	0.9999999426674313	WITHOUT_CLASSIFICATION	5.733256859519754E-8	TEST
// a many-to-many; // decrement currentDepth here to allow join across the association table // without exceeding MAX_FETCH_DEPTH (i.e. the "currentDepth - 1" bit)	WITHOUT_CLASSIFICATION	0.999999754641907	WITHOUT_CLASSIFICATION	2.4535809300698345E-7	TEST
// if not a composite key, use "foo in (?, ?, ?)" for batching // if no batch, and not a composite key, use "foo = ?"	WITHOUT_CLASSIFICATION	0.9999999034019258	WITHOUT_CLASSIFICATION	9.659807420629908E-8	TEST
//the user visible aliases, which are unknown to the superclass, //these are not the actual "physical" SQL aliases	WITHOUT_CLASSIFICATION	0.9999997386431894	WITHOUT_CLASSIFICATION	2.613568106566079E-7	TEST
//first look for a reference to a projection alias	WITHOUT_CLASSIFICATION	0.9999988147538328	WITHOUT_CLASSIFICATION	1.185246167173239E-6	TEST
//first look for a reference to a projection alias	WITHOUT_CLASSIFICATION	0.9999988147538328	WITHOUT_CLASSIFICATION	1.185246167173239E-6	TEST
//it does not refer to an alias of a projection, //look for a property	WITHOUT_CLASSIFICATION	0.9999984294194199	WITHOUT_CLASSIFICATION	1.5705805800625637E-6	TEST
// determine if the collection elements are entities...	WITHOUT_CLASSIFICATION	0.9999999232931513	WITHOUT_CLASSIFICATION	7.670684867748012E-8	TEST
// Let return-propertys override whatever the persister has for aliases.	WITHOUT_CLASSIFICATION	0.9999977938640954	WITHOUT_CLASSIFICATION	2.2061359046027247E-6	TEST
/**	WITHOUT_CLASSIFICATION	0.5443205247184848	WITHOUT_CLASSIFICATION	0.45567947528151515	TEST
// ignore	WITHOUT_CLASSIFICATION	0.9999983654098049	WITHOUT_CLASSIFICATION	1.6345901950501815E-6	TEST
// ignore	WITHOUT_CLASSIFICATION	0.9999983654098049	WITHOUT_CLASSIFICATION	1.6345901950501815E-6	TEST
//        }	WITHOUT_CLASSIFICATION	0.9999939831663531	WITHOUT_CLASSIFICATION	6.016833646915737E-6	TEST
//	WITHOUT_CLASSIFICATION	0.9999527008540617	WITHOUT_CLASSIFICATION	4.729914593835468E-5	TEST
//	WITHOUT_CLASSIFICATION	0.9999527008540617	WITHOUT_CLASSIFICATION	4.729914593835468E-5	TEST
//include the discriminator and class-level where, but not filters	WITHOUT_CLASSIFICATION	0.999997652963402	WITHOUT_CLASSIFICATION	2.3470365979079937E-6	TEST
//	WITHOUT_CLASSIFICATION	0.9999527008540617	WITHOUT_CLASSIFICATION	4.729914593835468E-5	TEST
//NONE, because its the requested lock mode, not the actual! 	WITHOUT_CLASSIFICATION	0.9999754523732117	WITHOUT_CLASSIFICATION	2.4547626788290406E-5	TEST
// at this point we have (drivingSqlAlias) the SQL alias of the driving table // corresponding to the given user alias.  However, the driving table is not // (necessarily) the table against which we want to apply locks.  Mainly, // the exception case here is joined-subclass hierarchies where we instead // want to apply the lock against the root table (for all other strategies, // it just happens that driving and root are the same).	WITHOUT_CLASSIFICATION	0.9999999952672225	WITHOUT_CLASSIFICATION	4.732777510157535E-9	TEST
// the column doesnt exist at all.	WITHOUT_CLASSIFICATION	0.9999980161762978	WITHOUT_CLASSIFICATION	1.983823702093366E-6	TEST
// we have a mapped identifier property and the root of // the incoming property path matched that identifier // property	WITHOUT_CLASSIFICATION	0.9999991178620373	WITHOUT_CLASSIFICATION	8.821379628034853E-7	TEST
// we have an embedded composite identifier	WITHOUT_CLASSIFICATION	0.9999982810213045	WITHOUT_CLASSIFICATION	1.7189786955364877E-6	TEST
// both many-to-one and one-to-one are represented as a // Property.  EntityPersister is relying on this value to // determine "lazy fetch groups" in terms of field-level // interception.  So we need to make sure that we return // true here for the case of many-to-one and one-to-one // with lazy="no-proxy" // // * impl note - lazy="no-proxy" currently forces both // lazy and unwrap to be set to true.  The other case we // are extremely interested in here is that of lazy="proxy" // where lazy is set to true, but unwrap is set to false. // thus we use both here under the assumption that this // return is really only ever used during persister // construction to determine the lazy property/field fetch // groupings.  If that assertion changes then this check // needs to change as well.  Partially, this is an issue with // the overloading of the term "lazy" here...	WITHOUT_CLASSIFICATION	0.999995878011015	WITHOUT_CLASSIFICATION	4.1219889849720156E-6	TEST
// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ // stuff that is tuplizer-centric, but is passed a session ~~~~~~~~~~~~~~~~ // ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999981991737388	WITHOUT_CLASSIFICATION	1.800826261204801E-6	TEST
// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ // stuff that is tuplizer-centric, but is passed a session ~~~~~~~~~~~~~~~~ // ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999981991737388	WITHOUT_CLASSIFICATION	1.800826261204801E-6	TEST
/*rootTableName = persistentClass.getRootTable().getQualifiedName( 	WITHOUT_CLASSIFICATION	0.9999331896849438	WITHOUT_CLASSIFICATION	6.681031505624524E-5	TEST
// SUBCLASSES	WITHOUT_CLASSIFICATION	0.9999970346817872	WITHOUT_CLASSIFICATION	2.965318212713767E-6	TEST
// Custom sql	WITHOUT_CLASSIFICATION	0.9999977018620211	WITHOUT_CLASSIFICATION	2.2981379789217285E-6	TEST
/*protected void initPropertyPaths(	WITHOUT_CLASSIFICATION	0.9999724988830747	WITHOUT_CLASSIFICATION	2.7501116925387703E-5	TEST
// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999683638219775	WITHOUT_CLASSIFICATION	3.1636178022498625E-5	TEST
//Custom SQL (would be better if these were private)	WITHOUT_CLASSIFICATION	0.9999681922764313	WITHOUT_CLASSIFICATION	3.180772356868214E-5	TEST
// moved up from AbstractEntityPersister ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999992984288345	WITHOUT_CLASSIFICATION	7.015711654230264E-7	TEST
// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999683638219775	WITHOUT_CLASSIFICATION	3.1636178022498625E-5	TEST
// aliases for identifier ( alias.id ); skip if the entity defines a non-id property named 'id'	WITHOUT_CLASSIFICATION	0.99999982816903	WITHOUT_CLASSIFICATION	1.7183096988628987E-7	TEST
//decide which ResultSet to get the property value from:	WITHOUT_CLASSIFICATION	0.9999919470666261	WITHOUT_CLASSIFICATION	8.05293337400596E-6	TEST
//note: it is conceptually possible that a UserType could map null to //	WITHOUT_CLASSIFICATION	0.9999982399511096	WITHOUT_CLASSIFICATION	1.7600488903496929E-6	TEST
// the contract of EntityTuplizer.determineConcreteSubclassEntityName says that returning null // is an indication that the specified entity-name (this.getEntityName) should be used.	WITHOUT_CLASSIFICATION	0.9999999834677574	WITHOUT_CLASSIFICATION	1.65322426280191E-8	TEST
// Need to use the identifier type of the collection owner // since the incoming is value is actually the owner's id. // Using the collection's key type causes problems with // property-ref keys...	WITHOUT_CLASSIFICATION	0.9999982069949593	WITHOUT_CLASSIFICATION	1.7930050406731194E-6	TEST
// cache these since they are stateless // this one could even be static...	WITHOUT_CLASSIFICATION	0.9999999569827224	WITHOUT_CLASSIFICATION	4.301727756204306E-8	TEST
//"as" is not in KEYWORDS	WITHOUT_CLASSIFICATION	0.9999690653682879	WITHOUT_CLASSIFICATION	3.0934631712095955E-5	TEST
// --Commented out by Inspection (12/4/04 9:10 AM): public abstract void addCondition(String alias, String[] columns, String condition);	WITHOUT_CLASSIFICATION	0.9999999967375716	WITHOUT_CLASSIFICATION	3.2624284399853373E-9	TEST
//use the id column alias	WITHOUT_CLASSIFICATION	0.9999983859014698	WITHOUT_CLASSIFICATION	1.614098530068645E-6	TEST
//private List aliases = new ArrayList();	WITHOUT_CLASSIFICATION	0.999997920459803	WITHOUT_CLASSIFICATION	2.079540196960988E-6	TEST
//columns.add(columnName); //aliases.add(tableAlias);	WITHOUT_CLASSIFICATION	0.9999960646627698	WITHOUT_CLASSIFICATION	3.935337230154399E-6	TEST
//where fragment must be empty!	WITHOUT_CLASSIFICATION	0.9999700216012402	WITHOUT_CLASSIFICATION	2.997839875987943E-5	TEST
// revert to traditional hibernate behavior of setting initialPoolSize to minPoolSize // unless otherwise specified with a c3p0.*-style parameter.	WITHOUT_CLASSIFICATION	0.9999988995707588	WITHOUT_CLASSIFICATION	1.1004292411471973E-6	TEST
//arbitrary on clause ignored!!	WITHOUT_CLASSIFICATION	0.9999998537345144	WITHOUT_CLASSIFICATION	1.4626548560502503E-7	TEST
// might happen with a managed connection	WITHOUT_CLASSIFICATION	0.9999993932464616	WITHOUT_CLASSIFICATION	6.067535384557185E-7	TEST
// might happen with a managed connection	WITHOUT_CLASSIFICATION	0.9999993932464616	WITHOUT_CLASSIFICATION	6.067535384557185E-7	TEST
//if an exception occurs during flush, user must call rollback()	WITHOUT_CLASSIFICATION	0.9999984945189436	WITHOUT_CLASSIFICATION	1.5054810564196404E-6	TEST
// Essentially: // 1) If we have a local (Hibernate) transaction in progress //      and it already has the UserTransaction cached, use that //      UserTransaction to determine the status. // 2) If a transaction manager has been located, use //      that transaction manager to determine the status. // 3) Finally, as the last resort, try to lookup the //      UserTransaction via JNDI and use that to determine the //      status.	WITHOUT_CLASSIFICATION	0.9999999893240674	WITHOUT_CLASSIFICATION	1.067593263687637E-8	TEST
/*package*/	WITHOUT_CLASSIFICATION	0.9999826414449617	WITHOUT_CLASSIFICATION	1.7358555038213658E-5	TEST
//swallow it (the transaction _was_ successful or successfully rolled back)	WITHOUT_CLASSIFICATION	0.9999970899809717	WITHOUT_CLASSIFICATION	2.9100190283752827E-6	TEST
// ignore it	WITHOUT_CLASSIFICATION	0.9999992121054	WITHOUT_CLASSIFICATION	7.878946000619137E-7	TEST
// we need to dirty check many-to-ones with not-found="ignore" in order  // to update the cache (not the database), since in this case a null // entity reference can lose information	WITHOUT_CLASSIFICATION	0.99999998643455	WITHOUT_CLASSIFICATION	1.3565450005217816E-8	TEST
// create our own copy of the user-supplied tuplizer impl map	WITHOUT_CLASSIFICATION	0.9999991495114203	WITHOUT_CLASSIFICATION	8.504885797434111E-7	TEST
// Regions can get instantiated in the course of normal work (e.g. // a named query region will be created the first time the query is // executed), so suspend any ongoing tx	WITHOUT_CLASSIFICATION	0.9999999995478085	WITHOUT_CLASSIFICATION	4.5219156484150626E-10	TEST
// then handle any user-defined entity modes...	WITHOUT_CLASSIFICATION	0.9999954832540039	WITHOUT_CLASSIFICATION	4.516745996116633E-6	TEST
// Establish the region root node with a non-locking data version	WITHOUT_CLASSIFICATION	0.9999999127991818	WITHOUT_CLASSIFICATION	8.720081826932792E-8	TEST
// temporary ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999944732408018	WITHOUT_CLASSIFICATION	5.526759198144751E-6	TEST
// NOTE : this is being used from the process of shutting down a // SessionFactory. Specific things to consider: // (1) this clearing of the region should not propagate to // other nodes on the cluster (if any); this is the // cache-mode-local option bit... // (2) really just trying a best effort to cleanup after // ourselves; lock failures, etc are not critical here; // this is the fail-silently option bit...	WITHOUT_CLASSIFICATION	0.9999998618943144	WITHOUT_CLASSIFICATION	1.3810568553464188E-7	TEST
// need to extract the component values and check for subtype replacements...	WITHOUT_CLASSIFICATION	0.9999998297788539	WITHOUT_CLASSIFICATION	1.7022114597248686E-7	TEST
// We ignore minimalPutOverride. JBossCache putForExternalRead is // already about as minimal as we can get; it will promptly return // if it discovers that the node we want to write to already exists	WITHOUT_CLASSIFICATION	0.9999999815664079	WITHOUT_CLASSIFICATION	1.843359216884078E-8	TEST
// for now, just "re-flatten" the metamodel since this is temporary stuff anyway (HHH-1907)	WITHOUT_CLASSIFICATION	0.9999996043925042	WITHOUT_CLASSIFICATION	3.956074957944329E-7	TEST
// Configure the cache to use our TM	WITHOUT_CLASSIFICATION	0.9999998509916104	WITHOUT_CLASSIFICATION	1.4900838964548168E-7	TEST
//This solution would allow us to eliminate the owner arg to disassemble(), but //what if the collection was null, and then later had elements added? seems unsafe //session.getPersistenceContext().getCollectionEntry( (PersistentCollection) value ).getKey();	WITHOUT_CLASSIFICATION	0.9999998921489034	WITHOUT_CLASSIFICATION	1.0785109662894054E-7	TEST
// Make sure JBC doesn't look one up	WITHOUT_CLASSIFICATION	0.999997582292209	WITHOUT_CLASSIFICATION	2.4177077910024337E-6	TEST
// some collections are not lazy:	WITHOUT_CLASSIFICATION	0.9999999287668363	WITHOUT_CLASSIFICATION	7.123316377846368E-8	TEST
// Here we don't want to suspend the tx. If we do: // 1) We might be caching query results that reflect uncommitted // changes. No tx == no WL on cache node, so other threads // can prematurely see those query results // 2) No tx == immediate replication. More overhead, plus we // spread issue #1 above around the cluster	WITHOUT_CLASSIFICATION	0.9999997580188242	WITHOUT_CLASSIFICATION	2.4198117575200414E-7	TEST
// return the (fully resolved) identifier value, but do not resolve // to the actual referenced entity instance // NOTE: the owner of the association is not really the owner of the id!	WITHOUT_CLASSIFICATION	0.9999990574153786	WITHOUT_CLASSIFICATION	9.425846213796288E-7	TEST
// Add a zero (or quite low) timeout option so we don't block. // Ignore any TimeoutException. Basically we forego caching the // query result in order to avoid blocking. // Reads are done with suspended tx, so they should not hold the // lock for long.  Not caching the query result is OK, since // any subsequent read will just see the old result with its // out-of-date timestamp; that result will be discarded and the // db query performed again.	WITHOUT_CLASSIFICATION	0.9999999709419061	WITHOUT_CLASSIFICATION	2.9058093897548028E-8	TEST
// Impl note: takes advantage of the fact that an escpaed single quote // embedded within a quote-block can really be handled as two seperate // quote-blocks for the purposes of this method...	WITHOUT_CLASSIFICATION	0.9999758974766084	WITHOUT_CLASSIFICATION	2.410252339158227E-5	TEST
// We have the JBCWriteMutex, so no other *local* thread will  // be trying to write this key.  // It's possible here some remote thread has come in and // changed the values again, but since we are reading the // values to write to JBC right now, we know we are writing // the latest values; i.e. we don't assume that what we cached // in entry.update() above is what we should write to JBC *now*. // Our write could be redundant, i.e. we are writing what // some remote thread just came in an wrote.  There is a chance  // that yet another remote thread will update us, and we'll then // overwrite that later data in JBC.  But, all remote nodes will // ignore that change in their localCache; the only place it  // will live will be in JBC, where it can only effect the  // initial state transfer values on newly joined nodes  // (i.e. populateLocalCache()).	WITHOUT_CLASSIFICATION	0.9999998262118247	WITHOUT_CLASSIFICATION	1.7378817524773074E-7	TEST
// local cache, so we use synchronization	WITHOUT_CLASSIFICATION	0.9999999724992688	WITHOUT_CLASSIFICATION	2.7500731157950928E-8	TEST
// local cache, so we use synchronization	WITHOUT_CLASSIFICATION	0.9999999724992688	WITHOUT_CLASSIFICATION	2.7500731157950928E-8	TEST
// Don't need to lock the cache here, since if someone // else inserted the same pk first, the insert would fail	WITHOUT_CLASSIFICATION	0.9999913034706636	WITHOUT_CLASSIFICATION	8.696529336343022E-6	TEST
// we need to grab the version value from the entity, otherwise // we have issues with generated-version entities that may have // multiple actions queued during the same flush	WITHOUT_CLASSIFICATION	0.9999996984573783	WITHOUT_CLASSIFICATION	3.015426216151819E-7	TEST
// we need to obtain the lock before any actions are // executed, since this may be an inverse="true" // bidirectional association and it is one of the // earlier entity actions which actually updates // the database (this action is resposible for // second-level cache invalidation only)	WITHOUT_CLASSIFICATION	0.99999996517412	WITHOUT_CLASSIFICATION	3.482587985720093E-8	TEST
//postDelete: // After actually deleting a row, record the fact that the instance no longer  // exists on the database (needed for identity-column key generation), and // remove it from the session cache	WITHOUT_CLASSIFICATION	0.9999999881000873	WITHOUT_CLASSIFICATION	1.1899912851779037E-8	TEST
// intentionally empty	WITHOUT_CLASSIFICATION	0.9999990309162337	WITHOUT_CLASSIFICATION	9.690837663139552E-7	TEST
