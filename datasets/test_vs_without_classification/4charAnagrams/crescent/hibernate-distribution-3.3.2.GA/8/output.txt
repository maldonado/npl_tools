//test out the optimizer:	WITHOUT_CLASSIFICATION	0.9992715109732746	WITHOUT_CLASSIFICATION	7.284890267253781E-4	TEST
// aload_0	WITHOUT_CLASSIFICATION	0.9999990598276736	WITHOUT_CLASSIFICATION	9.401723264568565E-7	TEST
// aload_0	WITHOUT_CLASSIFICATION	0.9999990598276736	WITHOUT_CLASSIFICATION	9.401723264568565E-7	TEST
// aload_0	WITHOUT_CLASSIFICATION	0.9999990598276736	WITHOUT_CLASSIFICATION	9.401723264568565E-7	TEST
// aload_0	WITHOUT_CLASSIFICATION	0.9999990598276736	WITHOUT_CLASSIFICATION	9.401723264568565E-7	TEST
// aload_0	WITHOUT_CLASSIFICATION	0.9999990598276736	WITHOUT_CLASSIFICATION	9.401723264568565E-7	TEST
// aload_0	WITHOUT_CLASSIFICATION	0.9999990598276736	WITHOUT_CLASSIFICATION	9.401723264568565E-7	TEST
// aload_0	WITHOUT_CLASSIFICATION	0.9999990598276736	WITHOUT_CLASSIFICATION	9.401723264568565E-7	TEST
// return	WITHOUT_CLASSIFICATION	0.9999997284379243	WITHOUT_CLASSIFICATION	2.7156207572558546E-7	TEST
// return	WITHOUT_CLASSIFICATION	0.9999997284379243	WITHOUT_CLASSIFICATION	2.7156207572558546E-7	TEST
/* | this | bean | args | raw bean | */	WITHOUT_CLASSIFICATION	0.999993736900246	WITHOUT_CLASSIFICATION	6.263099754080335E-6	TEST
// invokeinterface	WITHOUT_CLASSIFICATION	0.9999998818655577	WITHOUT_CLASSIFICATION	1.181344422929812E-7	TEST
// astore 4 // store the raw bean	WITHOUT_CLASSIFICATION	0.999998568800364	WITHOUT_CLASSIFICATION	1.4311996361086266E-6	TEST
/* current stack len = 0 */	WITHOUT_CLASSIFICATION	0.9999997200293869	WITHOUT_CLASSIFICATION	2.799706131209423E-7	TEST
/* current stack len = 0 */	WITHOUT_CLASSIFICATION	0.9999997200293869	WITHOUT_CLASSIFICATION	2.799706131209423E-7	TEST
/* local variables | target obj | each oldvalue | */	WITHOUT_CLASSIFICATION	0.9999995826254977	WITHOUT_CLASSIFICATION	4.1737450227022983E-7	TEST
// invokeinterface // invoke Enabled.getInterceptFieldCallback()	WITHOUT_CLASSIFICATION	0.999999302694431	WITHOUT_CLASSIFICATION	6.973055690533037E-7	TEST
// putfield // new value of the field	WITHOUT_CLASSIFICATION	0.9999957165742589	WITHOUT_CLASSIFICATION	4.2834257410533305E-6	TEST
// reference type	WITHOUT_CLASSIFICATION	0.9999998153483933	WITHOUT_CLASSIFICATION	1.8465160664767472E-7	TEST
// double	WITHOUT_CLASSIFICATION	0.9999994975858788	WITHOUT_CLASSIFICATION	5.024141211335605E-7	TEST
// double	WITHOUT_CLASSIFICATION	0.9999994975858788	WITHOUT_CLASSIFICATION	5.024141211335605E-7	TEST
// long	WITHOUT_CLASSIFICATION	0.9999985436044694	WITHOUT_CLASSIFICATION	1.4563955306390182E-6	TEST
// just decrement the lock, don't recache // (we don't know which transaction won)	WITHOUT_CLASSIFICATION	0.9999999857270425	WITHOUT_CLASSIFICATION	1.4272957625318228E-8	TEST
// decode row selection...	WITHOUT_CLASSIFICATION	0.9999999651495959	WITHOUT_CLASSIFICATION	3.485040413795588E-8	TEST
//disassembled state gets put in a new array (we write to cache by value!)	WITHOUT_CLASSIFICATION	0.9999989984835954	WITHOUT_CLASSIFICATION	1.0015164045926932E-6	TEST
// again, CCS did not have such a concept; but a reasonable // proximity is to clear the cache after transaction *as long as* // the underlying cache is not JTA aware.	WITHOUT_CLASSIFICATION	0.9999999524546048	WITHOUT_CLASSIFICATION	4.75453951350744E-8	TEST
// CHECK	WITHOUT_CLASSIFICATION	0.9999989057229804	WITHOUT_CLASSIFICATION	1.0942770194910299E-6	TEST
// ROW ID	WITHOUT_CLASSIFICATION	0.9999940837322199	WITHOUT_CLASSIFICATION	5.916267780028188E-6	TEST
// COMPOSITE-ID	WITHOUT_CLASSIFICATION	0.9999955570636242	WITHOUT_CLASSIFICATION	4.442936375848009E-6	TEST
// DISCRIMINATOR	WITHOUT_CLASSIFICATION	0.9999944089208249	WITHOUT_CLASSIFICATION	5.591079175073947E-6	TEST
/*	WITHOUT_CLASSIFICATION	0.9998694236363511	WITHOUT_CLASSIFICATION	1.305763636488417E-4	TEST
// DYNAMIC INSERT	WITHOUT_CLASSIFICATION	0.9999978227001838	WITHOUT_CLASSIFICATION	2.177299816279352E-6	TEST
// PERSISTER	WITHOUT_CLASSIFICATION	0.999998075805281	WITHOUT_CLASSIFICATION	1.9241947189566973E-6	TEST
// get meta's from <subclass>	WITHOUT_CLASSIFICATION	0.999999335308056	WITHOUT_CLASSIFICATION	6.64691943955086E-7	TEST
// PROPERTIES	WITHOUT_CLASSIFICATION	0.9999970180913558	WITHOUT_CLASSIFICATION	2.981908644110211E-6	TEST
// PROPERTIES	WITHOUT_CLASSIFICATION	0.9999970180913558	WITHOUT_CLASSIFICATION	2.981908644110211E-6	TEST
// generated properties can *never* be insertable...	WITHOUT_CLASSIFICATION	0.9999994981065468	WITHOUT_CLASSIFICATION	5.018934532279334E-7	TEST
// TABLE	WITHOUT_CLASSIFICATION	0.9999958457919709	WITHOUT_CLASSIFICATION	4.154208029098847E-6	TEST
//by default, natural-ids are "immutable" (constant)	WITHOUT_CLASSIFICATION	0.9999999533623782	WITHOUT_CLASSIFICATION	4.6637621638267594E-8	TEST
// ( (Column) ( (SimpleValue) ic.getIndex() ).getColumnIterator().next() // ).setNullable(false);	WITHOUT_CLASSIFICATION	0.9999998653601112	WITHOUT_CLASSIFICATION	1.346398887635875E-7	TEST
// we found some extends attributes referencing entities which were // not already processed.  here we need to locate all entity-names // and class-names contained in this document itself, making sure // that these get removed from the extendz list such that only // extends names which require us to delay processing (i.e. // external to this document and not yet processed) are contained // in the returned result	WITHOUT_CLASSIFICATION	0.9999992932199012	WITHOUT_CLASSIFICATION	7.067800988506605E-7	TEST
/**	WITHOUT_CLASSIFICATION	0.5445722540774455	WITHOUT_CLASSIFICATION	0.4554277459225545	TEST
//	WITHOUT_CLASSIFICATION	0.9999674909996846	WITHOUT_CLASSIFICATION	3.2509000315333503E-5	TEST
//	WITHOUT_CLASSIFICATION	0.9999674909996846	WITHOUT_CLASSIFICATION	3.2509000315333503E-5	TEST
/**	WITHOUT_CLASSIFICATION	0.5445722540774455	WITHOUT_CLASSIFICATION	0.4554277459225545	TEST
//	WITHOUT_CLASSIFICATION	0.9999674909996846	WITHOUT_CLASSIFICATION	3.2509000315333503E-5	TEST
// If close() is called, guarantee unbind()	WITHOUT_CLASSIFICATION	0.9999996902395951	WITHOUT_CLASSIFICATION	3.0976040495564605E-7	TEST
// if a ThreadLocalSessionContext-bound session happens to get // serialized, to be completely correct, we need to make sure // that unbinding of that session occurs.	WITHOUT_CLASSIFICATION	0.9999958007681526	WITHOUT_CLASSIFICATION	4.199231847313591E-6	TEST
// on the inverse, it makes sense that if a ThreadLocalSessionContext- // bound session then gets deserialized to go ahead and re-bind it to // the ThreadLocalSessionContext session map.	WITHOUT_CLASSIFICATION	0.9999999744483096	WITHOUT_CLASSIFICATION	2.5551690531384E-8	TEST
//cannot be instantiated	WITHOUT_CLASSIFICATION	0.9999977388988194	WITHOUT_CLASSIFICATION	2.26110118060596E-6	TEST
// 60 second lock timeout	WITHOUT_CLASSIFICATION	0.9999998833238594	WITHOUT_CLASSIFICATION	1.1667614062455375E-7	TEST
// OptimisticCache impl ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999963618646944	WITHOUT_CLASSIFICATION	3.6381353055414514E-6	TEST
// Cache impl ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999971945201643	WITHOUT_CLASSIFICATION	2.805479835635532E-6	TEST
//	WITHOUT_CLASSIFICATION	0.9999674909996846	WITHOUT_CLASSIFICATION	3.2509000315333503E-5	TEST
// do the put outside the scope of the JTA txn	WITHOUT_CLASSIFICATION	0.9999999274353596	WITHOUT_CLASSIFICATION	7.256464041874352E-8	TEST
//ignore!	WITHOUT_CLASSIFICATION	0.9999874865782961	WITHOUT_CLASSIFICATION	1.2513421703885438E-5	TEST
// tree cache in optimistic mode seems to have as very difficult // time with remove calls on non-existent nodes (NPEs)...	WITHOUT_CLASSIFICATION	0.9999999240529346	WITHOUT_CLASSIFICATION	7.594706545499716E-8	TEST
//60 seconds	WITHOUT_CLASSIFICATION	0.9999988876465054	WITHOUT_CLASSIFICATION	1.1123534946642977E-6	TEST
//ignore!	WITHOUT_CLASSIFICATION	0.9999874865782961	WITHOUT_CLASSIFICATION	1.2513421703885438E-5	TEST
//60 seconds	WITHOUT_CLASSIFICATION	0.9999988876465054	WITHOUT_CLASSIFICATION	1.1123534946642977E-6	TEST
//do the failfast put outside the scope of the JTA txn	WITHOUT_CLASSIFICATION	0.9999996500740296	WITHOUT_CLASSIFICATION	3.499259703976144E-7	TEST
// NOTE : evict() operates locally only (i.e., does not propogate // to any other nodes in the potential cluster).  This is // exactly what is needed when we destroy() here; destroy() is used // as part of the process of shutting down a SessionFactory; thus // these removals should not be propogated	WITHOUT_CLASSIFICATION	0.9957857509067041	WITHOUT_CLASSIFICATION	0.00421424909329594	TEST
//    protected RegionRootListener listener;	WITHOUT_CLASSIFICATION	0.9999994614332017	WITHOUT_CLASSIFICATION	5.385667981997776E-7	TEST
// Establish the region root node with a non-locking data version	WITHOUT_CLASSIFICATION	0.9999996982495911	WITHOUT_CLASSIFICATION	3.017504088719656E-7	TEST
// If we've been blocking for the mutex, perhaps another // thread has already reestablished the root. // In case the node was reestablised via replication, confirm it's  // marked "resident" (a status which doesn't replicate)	WITHOUT_CLASSIFICATION	0.9999992962995393	WITHOUT_CLASSIFICATION	7.037004606572506E-7	TEST
// For pessimistic locking, we just want to toss out our ref // to any old invalid root node and get the latest (may be null)            	WITHOUT_CLASSIFICATION	0.9999911987015186	WITHOUT_CLASSIFICATION	8.801298481354383E-6	TEST
// The rest only matters for optimistic locking, where we // need to establish the proper data version on the region root	WITHOUT_CLASSIFICATION	0.9996519994005725	WITHOUT_CLASSIFICATION	3.480005994274978E-4	TEST
// Don't hold a transactional lock for this 	WITHOUT_CLASSIFICATION	0.9999986843055463	WITHOUT_CLASSIFICATION	1.3156944537847466E-6	TEST
// Make sure the root node for the region exists and  // has a DataVersion that never complains	WITHOUT_CLASSIFICATION	0.9999994755951065	WITHOUT_CLASSIFICATION	5.244048934888124E-7	TEST
// Never evict this node	WITHOUT_CLASSIFICATION	0.9999915666855359	WITHOUT_CLASSIFICATION	8.433314464158032E-6	TEST
// Fix up the resident flag	WITHOUT_CLASSIFICATION	0.9999995749368213	WITHOUT_CLASSIFICATION	4.2506317861162635E-7	TEST
// 60 seconds	WITHOUT_CLASSIFICATION	0.9999998695087844	WITHOUT_CLASSIFICATION	1.304912156440219E-7	TEST
// We ignore minimalPutOverride. JBossCache putForExternalRead is // already about as minimal as we can get; it will promptly return // if it discovers that the node we want to write to already exists	WITHOUT_CLASSIFICATION	0.9999999935328605	WITHOUT_CLASSIFICATION	6.467139486901857E-9	TEST
// no-op. We don't own the cache so we shouldn't stop it.	WITHOUT_CLASSIFICATION	0.9999998332133101	WITHOUT_CLASSIFICATION	1.6678668989814927E-7	TEST
// This should only be possible if the caches are constructor injected 	WITHOUT_CLASSIFICATION	0.9999999781181202	WITHOUT_CLASSIFICATION	2.1881879738310142E-8	TEST
// We only build caches if *none* were passed in.  Passing in // caches counts as a clear statement of exactly what is wanted	WITHOUT_CLASSIFICATION	0.9999998956647344	WITHOUT_CLASSIFICATION	1.0433526567857711E-7	TEST
// Set up the cache factory	WITHOUT_CLASSIFICATION	0.999999957820588	WITHOUT_CLASSIFICATION	4.217941198393752E-8	TEST
// See if the user configured a multiplexer stack	WITHOUT_CLASSIFICATION	0.9999999653899392	WITHOUT_CLASSIFICATION	3.461006083716582E-8	TEST
// Default to collections sharing entity cache if there is one	WITHOUT_CLASSIFICATION	0.9999999783972501	WITHOUT_CLASSIFICATION	2.160274990814086E-8	TEST
// Default to sharing the entity cache if there is one	WITHOUT_CLASSIFICATION	0.9999999272106571	WITHOUT_CLASSIFICATION	7.278934287858853E-8	TEST
// For Timestamps, we default to a separate config	WITHOUT_CLASSIFICATION	0.9999998059727184	WITHOUT_CLASSIFICATION	1.9402728158809596E-7	TEST
// We can't change the TM on a running cache; just check // if the cache has no TM and we're OK with that	WITHOUT_CLASSIFICATION	0.9999995651227064	WITHOUT_CLASSIFICATION	4.348772935940209E-7	TEST
// Configure the cache to use our TM	WITHOUT_CLASSIFICATION	0.9999999875441788	WITHOUT_CLASSIFICATION	1.2455821217446917E-8	TEST
// Make sure JBC doesn't look one up	WITHOUT_CLASSIFICATION	0.9999886681753496	WITHOUT_CLASSIFICATION	1.1331824650363931E-5	TEST
// This method should be implemented assuming it's valid to  // do start/stop/start -- leave state appropriate for another start	WITHOUT_CLASSIFICATION	0.9998852000361064	WITHOUT_CLASSIFICATION	1.1479996389355414E-4	TEST
// Make sure we don't re-release the same cache	WITHOUT_CLASSIFICATION	0.9999998603226958	WITHOUT_CLASSIFICATION	1.3967730424521596E-7	TEST
// We use a different delegate than the non-optimistic superclass default	WITHOUT_CLASSIFICATION	0.9999999691684711	WITHOUT_CLASSIFICATION	3.083152882497067E-8	TEST
// Following methods we don't delegate since they have so little logic // it's clearer to just implement them here	WITHOUT_CLASSIFICATION	0.9999969362242566	WITHOUT_CLASSIFICATION	3.0637757435250825E-6	TEST
// If JBC is using INVALIDATION, we don't want to propagate changes. // We use the Timestamps cache to manage invalidation	WITHOUT_CLASSIFICATION	0.9999994643033576	WITHOUT_CLASSIFICATION	5.356966423357774E-7	TEST
// We don't want to waste effort setting an option if JBC is // already in LOCAL mode. If JBC is REPL_(A)SYNC then check // if they passed an config option to disable query replication	WITHOUT_CLASSIFICATION	0.9999993856676282	WITHOUT_CLASSIFICATION	6.143323717720112E-7	TEST
// Don't hold the JBC node lock throughout the tx, as that // prevents updates // Add a zero (or low) timeout option so we don't block // waiting for tx's that did a put to commit	WITHOUT_CLASSIFICATION	0.999999935892127	WITHOUT_CLASSIFICATION	6.410787301704942E-8	TEST
// Double check the distributed cache	WITHOUT_CLASSIFICATION	0.9999999466475776	WITHOUT_CLASSIFICATION	5.335242240954454E-8	TEST
// Get an exclusive right to update JBC for this key from this node.	WITHOUT_CLASSIFICATION	0.9999997568867132	WITHOUT_CLASSIFICATION	2.431132868415713E-7	TEST
// We ensure ASYNC semantics (JBCACHE-1175)	WITHOUT_CLASSIFICATION	0.9999999845577862	WITHOUT_CLASSIFICATION	1.5442213838699677E-8	TEST
// Initial load from JBC	WITHOUT_CLASSIFICATION	0.9999989890168167	WITHOUT_CLASSIFICATION	1.010983183314783E-6	TEST
// See if we had a 2nd invalidation from the same initial // preinvalidation timestamp. If so, only increment // if the new current value is an increase	WITHOUT_CLASSIFICATION	0.9999997854856368	WITHOUT_CLASSIFICATION	2.1451436320005074E-7	TEST
// We ensure ASYNC semantics (JBCACHE-1175)	WITHOUT_CLASSIFICATION	0.9999999845577862	WITHOUT_CLASSIFICATION	1.5442213838699677E-8	TEST
// If the workspace node has null as well, OK; if not we've // been modified in a non-comparable manner, which we have to // treat as us being newer	WITHOUT_CLASSIFICATION	0.9999998668713017	WITHOUT_CLASSIFICATION	1.3312869834823503E-7	TEST
// The standard comparator types are not Serializable but are singletons	WITHOUT_CLASSIFICATION	0.9999998534246662	WITHOUT_CLASSIFICATION	1.4657533381324104E-7	TEST
// ignore!	WITHOUT_CLASSIFICATION	0.9999994585234017	WITHOUT_CLASSIFICATION	5.414765983642584E-7	TEST
// ignore it	WITHOUT_CLASSIFICATION	0.9999994444668342	WITHOUT_CLASSIFICATION	5.555331657603159E-7	TEST
// construct the cache	WITHOUT_CLASSIFICATION	0.9999999570980382	WITHOUT_CLASSIFICATION	4.2901961780127793E-8	TEST
// local cache, so we use synchronization	WITHOUT_CLASSIFICATION	0.9999999950482154	WITHOUT_CLASSIFICATION	4.951784627224872E-9	TEST
// local cache, so we use synchronization	WITHOUT_CLASSIFICATION	0.9999999950482154	WITHOUT_CLASSIFICATION	4.951784627224872E-9	TEST
//ie. 60 seconds	WITHOUT_CLASSIFICATION	0.9999988274913756	WITHOUT_CLASSIFICATION	1.1725086244177333E-6	TEST
//swaldman 2006-08-28: define c3p0-style configuration parameters for initialPoolSize, which //                     hibernate sensibly lets default to minPoolSize, but we'll let users //                     override it with the c3p0-style property if they want.	WITHOUT_CLASSIFICATION	0.9999997083387927	WITHOUT_CLASSIFICATION	2.9166120724881507E-7	TEST
/*DataSource unpooled = DataSources.unpooledDataSource(	WITHOUT_CLASSIFICATION	0.9999848619449251	WITHOUT_CLASSIFICATION	1.5138055074984937E-5	TEST
// TRUE if the pool is borrowed from the outside, FALSE if we used to create it	WITHOUT_CLASSIFICATION	0.9999999188481534	WITHOUT_CLASSIFICATION	8.1151846604832E-8	TEST
// get a connection from the pool (thru DriverManager, cfr. Proxool doc)	WITHOUT_CLASSIFICATION	0.999999970068287	WITHOUT_CLASSIFICATION	2.993171294341969E-8	TEST
// set the Transaction Isolation if defined	WITHOUT_CLASSIFICATION	0.9999999660170099	WITHOUT_CLASSIFICATION	3.3982990175957904E-8	TEST
// toggle autoCommit to false if set	WITHOUT_CLASSIFICATION	0.9999997059911182	WITHOUT_CLASSIFICATION	2.9400888187606123E-7	TEST
// return the connection	WITHOUT_CLASSIFICATION	0.999999981046645	WITHOUT_CLASSIFICATION	1.8953354939264828E-8	TEST
// Get the configurator files (if available)	WITHOUT_CLASSIFICATION	0.9999999835008767	WITHOUT_CLASSIFICATION	1.64991232987187E-8	TEST
// Default the Proxool alias setting	WITHOUT_CLASSIFICATION	0.9999998277918242	WITHOUT_CLASSIFICATION	1.7220817580211702E-7	TEST
// Validate that an alias name was provided to determine which pool to use	WITHOUT_CLASSIFICATION	0.9999995911727493	WITHOUT_CLASSIFICATION	4.088272506590337E-7	TEST
// Validate that an alias name was provided to determine which pool to use	WITHOUT_CLASSIFICATION	0.9999995911727493	WITHOUT_CLASSIFICATION	4.088272506590337E-7	TEST
// Append the stem to the proxool pool alias	WITHOUT_CLASSIFICATION	0.9999995943248589	WITHOUT_CLASSIFICATION	4.0567514116443394E-7	TEST
// Set the existing pool flag to true	WITHOUT_CLASSIFICATION	0.9999999102412831	WITHOUT_CLASSIFICATION	8.975871682574131E-8	TEST
// Configured using the JAXP Configurator	WITHOUT_CLASSIFICATION	0.9999998072423963	WITHOUT_CLASSIFICATION	1.927576036804502E-7	TEST
// Validate that an alias name was provided to determine which pool to use	WITHOUT_CLASSIFICATION	0.9999995911727493	WITHOUT_CLASSIFICATION	4.088272506590337E-7	TEST
// Append the stem to the proxool pool alias	WITHOUT_CLASSIFICATION	0.9999995943248589	WITHOUT_CLASSIFICATION	4.0567514116443394E-7	TEST
// Append the stem to the proxool pool alias	WITHOUT_CLASSIFICATION	0.9999995943248589	WITHOUT_CLASSIFICATION	4.0567514116443394E-7	TEST
// Configured using the Properties File Configurator	WITHOUT_CLASSIFICATION	0.9999990635101842	WITHOUT_CLASSIFICATION	9.36489815746597E-7	TEST
// Remember Isolation level	WITHOUT_CLASSIFICATION	0.9999996646407913	WITHOUT_CLASSIFICATION	3.353592087005083E-7	TEST
// If the provider was leeching off an existing pool don't close it	WITHOUT_CLASSIFICATION	0.9999989782377208	WITHOUT_CLASSIFICATION	1.0217622791729802E-6	TEST
// We have created the pool ourselves, so shut it down	WITHOUT_CLASSIFICATION	0.9999999018183539	WITHOUT_CLASSIFICATION	9.818164619739113E-8	TEST
// not really a many-to-one association *necessarily*	WITHOUT_CLASSIFICATION	0.9999997391294997	WITHOUT_CLASSIFICATION	2.608705003779165E-7	TEST
// not really a many-to-one association *necessarily*	WITHOUT_CLASSIFICATION	0.9999997391294997	WITHOUT_CLASSIFICATION	2.608705003779165E-7	TEST
//always overwrite nonversioned data	WITHOUT_CLASSIFICATION	0.9999987240886448	WITHOUT_CLASSIFICATION	1.2759113552246873E-6	TEST
//public Currency getCurrency(int col) throws HibernateException;	WITHOUT_CLASSIFICATION	0.999999656787298	WITHOUT_CLASSIFICATION	3.432127019593384E-7	TEST
// default is POJO	WITHOUT_CLASSIFICATION	0.9999996814000328	WITHOUT_CLASSIFICATION	3.1859996725067897E-7	TEST
// use setParameter for null values	WITHOUT_CLASSIFICATION	0.9999995017894324	WITHOUT_CLASSIFICATION	4.982105675830423E-7	TEST
// use setParameter for null values	WITHOUT_CLASSIFICATION	0.9999995017894324	WITHOUT_CLASSIFICATION	4.982105675830423E-7	TEST
//private CacheEntry cacheEntry;	WITHOUT_CLASSIFICATION	0.9999989619047552	WITHOUT_CLASSIFICATION	1.0380952447110407E-6	TEST
// Don't need to lock the cache here, since if someone // else inserted the same pk first, the insert would fail	WITHOUT_CLASSIFICATION	0.999988728062316	WITHOUT_CLASSIFICATION	1.1271937684065666E-5	TEST
//Make 100% certain that this is called before any subsequent ScheduledUpdate.afterTransactionCompletion()!!	WITHOUT_CLASSIFICATION	0.9999376403499036	WITHOUT_CLASSIFICATION	6.235965009630695E-5	TEST
// get the updated snapshot of the entity state by cloning current state; // it is safe to copy in place, since by this time no-one else (should have) // has a reference  to the array	WITHOUT_CLASSIFICATION	0.9999999030905474	WITHOUT_CLASSIFICATION	9.690945256221494E-8	TEST
// this entity defines proeprty generation, so process those generated // values...	WITHOUT_CLASSIFICATION	0.9999996770954497	WITHOUT_CLASSIFICATION	3.2290455039177757E-7	TEST
// have the entity entry perform post-update processing, passing it the // update state and the new version (if one).	WITHOUT_CLASSIFICATION	0.9999986227820662	WITHOUT_CLASSIFICATION	1.3772179337959245E-6	TEST
/*!persister.isCacheInvalidationRequired()*/	WITHOUT_CLASSIFICATION	0.9999970471307574	WITHOUT_CLASSIFICATION	2.9528692425191395E-6	TEST
// need to look it up from the persistence-context	WITHOUT_CLASSIFICATION	0.9999983828215576	WITHOUT_CLASSIFICATION	1.6171784423460368E-6	TEST
//sort first by role name	WITHOUT_CLASSIFICATION	0.9999655473546579	WITHOUT_CLASSIFICATION	3.445264534218942E-5	TEST
//Make 100% certain that this is called before any subsequent ScheduledUpdate.afterTransactionCompletion()!!	WITHOUT_CLASSIFICATION	0.9999376403499036	WITHOUT_CLASSIFICATION	6.235965009630695E-5	TEST
//then by fk	WITHOUT_CLASSIFICATION	0.9999831210928309	WITHOUT_CLASSIFICATION	1.6878907169027604E-5	TEST
// nothing to do	WITHOUT_CLASSIFICATION	0.9999969647621514	WITHOUT_CLASSIFICATION	3.035237848576243E-6	TEST
// nothing to do	WITHOUT_CLASSIFICATION	0.9999969647621514	WITHOUT_CLASSIFICATION	3.035237848576243E-6	TEST
// an existing collection that was either non-empty or uninitialized // is replaced by null or a different collection // (if the collection is uninitialized, hibernate has no way of // knowing if the collection is actually empty without querying the db)	WITHOUT_CLASSIFICATION	0.9999995743173636	WITHOUT_CLASSIFICATION	4.2568263639456093E-7	TEST
// this method is called when a new non-null collection is persisted // or when an existing (non-null) collection is moved to a new owner	WITHOUT_CLASSIFICATION	0.9999995109349645	WITHOUT_CLASSIFICATION	4.890650355259169E-7	TEST
//	WITHOUT_CLASSIFICATION	0.9999674909996846	WITHOUT_CLASSIFICATION	3.2509000315333503E-5	TEST
// we need to grab the version value from the entity, otherwise // we have issues with generated-version entities that may have // multiple actions queued during the same flush	WITHOUT_CLASSIFICATION	0.9999995334135211	WITHOUT_CLASSIFICATION	4.6658647882602625E-7	TEST
//do nothing - we only need to notify the cache...	WITHOUT_CLASSIFICATION	0.9999953612106202	WITHOUT_CLASSIFICATION	4.638789379846522E-6	TEST
//sort first by entity name	WITHOUT_CLASSIFICATION	0.9999868533967243	WITHOUT_CLASSIFICATION	1.3146603275627827E-5	TEST
//then by id	WITHOUT_CLASSIFICATION	0.9999910230921244	WITHOUT_CLASSIFICATION	8.9769078756742E-6	TEST
// to be safe...	WITHOUT_CLASSIFICATION	0.9999995824300366	WITHOUT_CLASSIFICATION	4.175699634168243E-7	TEST
// no transformations took place, so handle it as we would a // non-instrumented class	WITHOUT_CLASSIFICATION	0.9999999867759131	WITHOUT_CLASSIFICATION	1.3224086852203949E-8	TEST
// see if the entry represents a class file	WITHOUT_CLASSIFICATION	0.999999968757399	WITHOUT_CLASSIFICATION	3.1242601042072635E-8	TEST
// see if the entry represents a class file	WITHOUT_CLASSIFICATION	0.999999968757399	WITHOUT_CLASSIFICATION	3.1242601042072635E-8	TEST
// intentionally empty	WITHOUT_CLASSIFICATION	0.9999995680953937	WITHOUT_CLASSIFICATION	4.3190460633227173E-7	TEST
//test out the optimizer:	WITHOUT_CLASSIFICATION	0.9992715109732746	WITHOUT_CLASSIFICATION	7.284890267253781E-4	TEST
// set the name of bulk accessor.	WITHOUT_CLASSIFICATION	0.9999995038122893	WITHOUT_CLASSIFICATION	4.96187710657281E-7	TEST
// aload_0	WITHOUT_CLASSIFICATION	0.9999990598276736	WITHOUT_CLASSIFICATION	9.401723264568565E-7	TEST
// invokespecial	WITHOUT_CLASSIFICATION	0.9999997762295011	WITHOUT_CLASSIFICATION	2.2377049891429404E-7	TEST
// return	WITHOUT_CLASSIFICATION	0.9999997284379243	WITHOUT_CLASSIFICATION	2.7156207572558546E-7	TEST
// aload_1 // load bean	WITHOUT_CLASSIFICATION	0.9999983027363901	WITHOUT_CLASSIFICATION	1.697263609826084E-6	TEST
// checkcast // cast bean	WITHOUT_CLASSIFICATION	0.9999992333860173	WITHOUT_CLASSIFICATION	7.666139827515768E-7	TEST
// astore_3 // store bean	WITHOUT_CLASSIFICATION	0.9999976373227256	WITHOUT_CLASSIFICATION	2.3626772743688094E-6	TEST
// aload_2 // args	WITHOUT_CLASSIFICATION	0.9999996006630819	WITHOUT_CLASSIFICATION	3.9933691813452156E-7	TEST
// iconst_i // continue to aastore // growing stack is 1	WITHOUT_CLASSIFICATION	0.999999692452658	WITHOUT_CLASSIFICATION	3.075473419431278E-7	TEST
// new	WITHOUT_CLASSIFICATION	0.9999984848005687	WITHOUT_CLASSIFICATION	1.5151994311858999E-6	TEST
// dup	WITHOUT_CLASSIFICATION	0.9999982646919344	WITHOUT_CLASSIFICATION	1.7353080655468852E-6	TEST
// aload_3 // load the raw bean	WITHOUT_CLASSIFICATION	0.9999989632189531	WITHOUT_CLASSIFICATION	1.0367810469841013E-6	TEST
// invokeinterface	WITHOUT_CLASSIFICATION	0.9999998818655577	WITHOUT_CLASSIFICATION	1.181344422929812E-7	TEST
// invokevirtual	WITHOUT_CLASSIFICATION	0.9999996621981216	WITHOUT_CLASSIFICATION	3.378018783551052E-7	TEST
// invokevirtual	WITHOUT_CLASSIFICATION	0.9999996621981216	WITHOUT_CLASSIFICATION	3.378018783551052E-7	TEST
// aastore // args	WITHOUT_CLASSIFICATION	0.9999984375118609	WITHOUT_CLASSIFICATION	1.5624881390578298E-6	TEST
/* | this | bean | args | i | raw bean | exception | */	WITHOUT_CLASSIFICATION	0.9999989552895264	WITHOUT_CLASSIFICATION	1.0447104735091692E-6	TEST
// required to exception table // iconst_0 // i	WITHOUT_CLASSIFICATION	0.9999999746124041	WITHOUT_CLASSIFICATION	2.5387596007889816E-8	TEST
// istore_3 // store i	WITHOUT_CLASSIFICATION	0.999995508456811	WITHOUT_CLASSIFICATION	4.4915431890093936E-6	TEST
// aload_1 // load the bean	WITHOUT_CLASSIFICATION	0.999999253632127	WITHOUT_CLASSIFICATION	7.463678730046533E-7	TEST
// checkcast // cast the bean into a raw bean	WITHOUT_CLASSIFICATION	0.9999999329081432	WITHOUT_CLASSIFICATION	6.709185686659877E-8	TEST
/* current stack len = 0 */	WITHOUT_CLASSIFICATION	0.9999997200293869	WITHOUT_CLASSIFICATION	2.799706131209423E-7	TEST
// start region to handling exception (BulkAccessorException)	WITHOUT_CLASSIFICATION	0.9999998064771469	WITHOUT_CLASSIFICATION	1.9352285315073618E-7	TEST
// iinc 3, 1	WITHOUT_CLASSIFICATION	0.9999994549490342	WITHOUT_CLASSIFICATION	5.450509658146602E-7	TEST
// aload 4 // load the raw bean	WITHOUT_CLASSIFICATION	0.9999992397349846	WITHOUT_CLASSIFICATION	7.602650154995906E-7	TEST
// aload_2 // load the args	WITHOUT_CLASSIFICATION	0.9999994154701618	WITHOUT_CLASSIFICATION	5.845298382369887E-7	TEST
// iconst_i	WITHOUT_CLASSIFICATION	0.9999997302314539	WITHOUT_CLASSIFICATION	2.697685460917565E-7	TEST
// aaload	WITHOUT_CLASSIFICATION	0.9999986042027258	WITHOUT_CLASSIFICATION	1.3957972742890232E-6	TEST
// checkcast	WITHOUT_CLASSIFICATION	0.9999993180590807	WITHOUT_CLASSIFICATION	6.819409192405825E-7	TEST
// checkcast (case of primitive type) // invokevirtual (case of primitive type)	WITHOUT_CLASSIFICATION	0.9999997623801596	WITHOUT_CLASSIFICATION	2.3761984030426126E-7	TEST
// checkcast (case of reference type)	WITHOUT_CLASSIFICATION	0.9999996537579121	WITHOUT_CLASSIFICATION	3.4624208789525444E-7	TEST
/* current stack len = 2 */	WITHOUT_CLASSIFICATION	0.9999996601256702	WITHOUT_CLASSIFICATION	3.3987432982378625E-7	TEST
// end region to handling exception (BulkAccessorException)	WITHOUT_CLASSIFICATION	0.9999998952844514	WITHOUT_CLASSIFICATION	1.0471554863887791E-7	TEST
// register in exception table	WITHOUT_CLASSIFICATION	0.9999998678021355	WITHOUT_CLASSIFICATION	1.3219786464431945E-7	TEST
// aload_0	WITHOUT_CLASSIFICATION	0.9999990598276736	WITHOUT_CLASSIFICATION	9.401723264568565E-7	TEST
// aload_0	WITHOUT_CLASSIFICATION	0.9999990598276736	WITHOUT_CLASSIFICATION	9.401723264568565E-7	TEST
// return	WITHOUT_CLASSIFICATION	0.9999997284379243	WITHOUT_CLASSIFICATION	2.7156207572558546E-7	TEST
// return	WITHOUT_CLASSIFICATION	0.9999997284379243	WITHOUT_CLASSIFICATION	2.7156207572558546E-7	TEST
// dup	WITHOUT_CLASSIFICATION	0.9999982646919344	WITHOUT_CLASSIFICATION	1.7353080655468852E-6	TEST
// invokevirtual	WITHOUT_CLASSIFICATION	0.9999996621981216	WITHOUT_CLASSIFICATION	3.378018783551052E-7	TEST
// checkcast	WITHOUT_CLASSIFICATION	0.9999993180590807	WITHOUT_CLASSIFICATION	6.819409192405825E-7	TEST
/* local variables | target obj | each oldvalue | */	WITHOUT_CLASSIFICATION	0.9999995826254977	WITHOUT_CLASSIFICATION	4.1737450227022983E-7	TEST
// astore 5 // store exception	WITHOUT_CLASSIFICATION	0.9999997270686669	WITHOUT_CLASSIFICATION	2.7293133307746065E-7	TEST
// new // BulkAccessorException	WITHOUT_CLASSIFICATION	0.9999998339284902	WITHOUT_CLASSIFICATION	1.6607150974192005E-7	TEST
// aload 5 // load exception	WITHOUT_CLASSIFICATION	0.9999998646960623	WITHOUT_CLASSIFICATION	1.3530393773592072E-7	TEST
// iload_3 // i	WITHOUT_CLASSIFICATION	0.9999987147791563	WITHOUT_CLASSIFICATION	1.2852208437514943E-6	TEST
// invokespecial // BulkAccessorException.<init>	WITHOUT_CLASSIFICATION	0.9999998904532078	WITHOUT_CLASSIFICATION	1.0954679217973791E-7	TEST
// athrow	WITHOUT_CLASSIFICATION	0.999999159234902	WITHOUT_CLASSIFICATION	8.407650979579441E-7	TEST
// WARNING: classfile only	WITHOUT_CLASSIFICATION	0.9999998988427347	WITHOUT_CLASSIFICATION	1.0115726532361473E-7	TEST
//swallow	WITHOUT_CLASSIFICATION	0.9999823814720565	WITHOUT_CLASSIFICATION	1.7618527943439792E-5	TEST
/* local variable | this | */	WITHOUT_CLASSIFICATION	0.9999968124062449	WITHOUT_CLASSIFICATION	3.187593755170237E-6	TEST
// aload_0 // load this	WITHOUT_CLASSIFICATION	0.999995955160674	WITHOUT_CLASSIFICATION	4.044839325985808E-6	TEST
// aload_0 // load this	WITHOUT_CLASSIFICATION	0.999995955160674	WITHOUT_CLASSIFICATION	4.044839325985808E-6	TEST
// getfield // get field "$JAVASSIST_CALLBACK" defined already	WITHOUT_CLASSIFICATION	0.9999994723078759	WITHOUT_CLASSIFICATION	5.276921241313209E-7	TEST
// areturn // return the value of the field	WITHOUT_CLASSIFICATION	0.9999997227705506	WITHOUT_CLASSIFICATION	2.772294494076234E-7	TEST
/* local variables | this | callback | */	WITHOUT_CLASSIFICATION	0.9999967242400506	WITHOUT_CLASSIFICATION	3.2757599493776017E-6	TEST
// aload_1 // load callback	WITHOUT_CLASSIFICATION	0.9999992889031455	WITHOUT_CLASSIFICATION	7.110968546332991E-7	TEST
// putfield // put field "$JAVASSIST_CALLBACK" defined already	WITHOUT_CLASSIFICATION	0.9999996439386792	WITHOUT_CLASSIFICATION	3.560613208071015E-7	TEST
// case of non-static field	WITHOUT_CLASSIFICATION	0.9999998994079534	WITHOUT_CLASSIFICATION	1.0059204658167155E-7	TEST
// getfield // get each field	WITHOUT_CLASSIFICATION	0.9999981284134193	WITHOUT_CLASSIFICATION	1.8715865806807422E-6	TEST
// invokeinterface // invoke Enabled.getInterceptFieldCallback()	WITHOUT_CLASSIFICATION	0.999999302694431	WITHOUT_CLASSIFICATION	6.973055690533037E-7	TEST
// ifnonnull	WITHOUT_CLASSIFICATION	0.9999995998805096	WITHOUT_CLASSIFICATION	4.0011949049391567E-7	TEST
// *return // each type	WITHOUT_CLASSIFICATION	0.999999941610671	WITHOUT_CLASSIFICATION	5.8389329040474546E-8	TEST
// *return // each type	WITHOUT_CLASSIFICATION	0.999999941610671	WITHOUT_CLASSIFICATION	5.8389329040474546E-8	TEST
// *store_1 // each type	WITHOUT_CLASSIFICATION	0.9999997106510243	WITHOUT_CLASSIFICATION	2.8934897575604517E-7	TEST
// ldc // name of the field	WITHOUT_CLASSIFICATION	0.9999985807484092	WITHOUT_CLASSIFICATION	1.4192515908134062E-6	TEST
// *load_1 // each type	WITHOUT_CLASSIFICATION	0.9999998516964155	WITHOUT_CLASSIFICATION	1.4830358460540762E-7	TEST
// invokeinterface // invoke Callback.read*() // each type	WITHOUT_CLASSIFICATION	0.9999999499308865	WITHOUT_CLASSIFICATION	5.0069113602485565E-8	TEST
// int	WITHOUT_CLASSIFICATION	0.999999253184231	WITHOUT_CLASSIFICATION	7.468157689736353E-7	TEST
// return	WITHOUT_CLASSIFICATION	0.9999997284379243	WITHOUT_CLASSIFICATION	2.7156207572558546E-7	TEST
// dup	WITHOUT_CLASSIFICATION	0.9999982646919344	WITHOUT_CLASSIFICATION	1.7353080655468852E-6	TEST
// invokeinterface	WITHOUT_CLASSIFICATION	0.9999998818655577	WITHOUT_CLASSIFICATION	1.181344422929812E-7	TEST
// checkcast	WITHOUT_CLASSIFICATION	0.9999993180590807	WITHOUT_CLASSIFICATION	6.819409192405825E-7	TEST
// checkcast	WITHOUT_CLASSIFICATION	0.9999993180590807	WITHOUT_CLASSIFICATION	6.819409192405825E-7	TEST
// invokeinterface // enabled.getInterceptFieldCallback()	WITHOUT_CLASSIFICATION	0.9999993619052381	WITHOUT_CLASSIFICATION	6.380947619606432E-7	TEST
// invokeinterface // enabled.getInterceptFieldCallback()	WITHOUT_CLASSIFICATION	0.9999993619052381	WITHOUT_CLASSIFICATION	6.380947619606432E-7	TEST
// ifnonnull (label1)	WITHOUT_CLASSIFICATION	0.9999997840020316	WITHOUT_CLASSIFICATION	2.1599796836176276E-7	TEST
// *load_1	WITHOUT_CLASSIFICATION	0.9999991407068183	WITHOUT_CLASSIFICATION	8.592931818367845E-7	TEST
// *load_1	WITHOUT_CLASSIFICATION	0.9999991407068183	WITHOUT_CLASSIFICATION	8.592931818367845E-7	TEST
// putfield	WITHOUT_CLASSIFICATION	0.9999986298359199	WITHOUT_CLASSIFICATION	1.3701640801264256E-6	TEST
// return ;	WITHOUT_CLASSIFICATION	0.999999792486206	WITHOUT_CLASSIFICATION	2.0751379411863957E-7	TEST
// ldc // field name	WITHOUT_CLASSIFICATION	0.9999977702815868	WITHOUT_CLASSIFICATION	2.2297184133119307E-6	TEST
// getfield // old value of the field	WITHOUT_CLASSIFICATION	0.9999919196923335	WITHOUT_CLASSIFICATION	8.080307666612577E-6	TEST
// invokeinterface // callback.write*(..)	WITHOUT_CLASSIFICATION	0.9999999369000584	WITHOUT_CLASSIFICATION	6.309994164352997E-8	TEST
// reference type	WITHOUT_CLASSIFICATION	0.9999998153483933	WITHOUT_CLASSIFICATION	1.8465160664767472E-7	TEST
// reference type	WITHOUT_CLASSIFICATION	0.9999998153483933	WITHOUT_CLASSIFICATION	1.8465160664767472E-7	TEST
// not array	WITHOUT_CLASSIFICATION	0.9999995028101005	WITHOUT_CLASSIFICATION	4.971898994280389E-7	TEST
// array of reference type	WITHOUT_CLASSIFICATION	0.9999998351467879	WITHOUT_CLASSIFICATION	1.6485321203898528E-7	TEST
// boolean	WITHOUT_CLASSIFICATION	0.9999992280511991	WITHOUT_CLASSIFICATION	7.71948800782723E-7	TEST
// byte	WITHOUT_CLASSIFICATION	0.999998291039171	WITHOUT_CLASSIFICATION	1.7089608288660008E-6	TEST
// char	WITHOUT_CLASSIFICATION	0.9999995573944523	WITHOUT_CLASSIFICATION	4.426055477278479E-7	TEST
// short	WITHOUT_CLASSIFICATION	0.9999955114321994	WITHOUT_CLASSIFICATION	4.488567800580884E-6	TEST
// double	WITHOUT_CLASSIFICATION	0.9999994975858788	WITHOUT_CLASSIFICATION	5.024141211335605E-7	TEST
// float	WITHOUT_CLASSIFICATION	0.9999989671530721	WITHOUT_CLASSIFICATION	1.0328469279089065E-6	TEST
// float	WITHOUT_CLASSIFICATION	0.9999989671530721	WITHOUT_CLASSIFICATION	1.0328469279089065E-6	TEST
// long	WITHOUT_CLASSIFICATION	0.9999985436044694	WITHOUT_CLASSIFICATION	1.4563955306390182E-6	TEST
// long	WITHOUT_CLASSIFICATION	0.9999985436044694	WITHOUT_CLASSIFICATION	1.4563955306390182E-6	TEST
// bad type	WITHOUT_CLASSIFICATION	0.9999992985830063	WITHOUT_CLASSIFICATION	7.014169937046802E-7	TEST
// bad type	WITHOUT_CLASSIFICATION	0.9999992985830063	WITHOUT_CLASSIFICATION	7.014169937046802E-7	TEST
// boolean, byte, char, int, short	WITHOUT_CLASSIFICATION	0.999999691684521	WITHOUT_CLASSIFICATION	3.0831547905725054E-7	TEST
// boolean, byte, char, int, short	WITHOUT_CLASSIFICATION	0.999999691684521	WITHOUT_CLASSIFICATION	3.0831547905725054E-7	TEST
// reference type	WITHOUT_CLASSIFICATION	0.9999998153483933	WITHOUT_CLASSIFICATION	1.8465160664767472E-7	TEST
// double	WITHOUT_CLASSIFICATION	0.9999994975858788	WITHOUT_CLASSIFICATION	5.024141211335605E-7	TEST
// float	WITHOUT_CLASSIFICATION	0.9999989671530721	WITHOUT_CLASSIFICATION	1.0328469279089065E-6	TEST
// float	WITHOUT_CLASSIFICATION	0.9999989671530721	WITHOUT_CLASSIFICATION	1.0328469279089065E-6	TEST
// long	WITHOUT_CLASSIFICATION	0.9999985436044694	WITHOUT_CLASSIFICATION	1.4563955306390182E-6	TEST
// bad type	WITHOUT_CLASSIFICATION	0.9999992985830063	WITHOUT_CLASSIFICATION	7.014169937046802E-7	TEST
// bad type	WITHOUT_CLASSIFICATION	0.9999992985830063	WITHOUT_CLASSIFICATION	7.014169937046802E-7	TEST
// boolean, byte, char, int, short	WITHOUT_CLASSIFICATION	0.999999691684521	WITHOUT_CLASSIFICATION	3.0831547905725054E-7	TEST
// skip finalize methods	WITHOUT_CLASSIFICATION	0.9999991921960952	WITHOUT_CLASSIFICATION	8.078039048139549E-7	TEST
//Mainly for OSCache	WITHOUT_CLASSIFICATION	0.9999977625946292	WITHOUT_CLASSIFICATION	2.237405370837596E-6	TEST
//decrement the lock	WITHOUT_CLASSIFICATION	0.9999980836137937	WITHOUT_CLASSIFICATION	1.916386206256385E-6	TEST
// create new lock that times out immediately	WITHOUT_CLASSIFICATION	0.9999998360760219	WITHOUT_CLASSIFICATION	1.639239781835517E-7	TEST
//recache the updated state	WITHOUT_CLASSIFICATION	0.9999987571184376	WITHOUT_CLASSIFICATION	1.2428815624315462E-6	TEST
// noop	WITHOUT_CLASSIFICATION	0.9999984599693854	WITHOUT_CLASSIFICATION	1.5400306146245406E-6	TEST
//null clientLock is remotely possible but will never happen in practice	WITHOUT_CLASSIFICATION	0.999994896785505	WITHOUT_CLASSIFICATION	5.103214494934764E-6	TEST
// we really could refresh the item if it // is not a lock, but it might be slower //return freshTimestamp < txTimestamp	WITHOUT_CLASSIFICATION	0.9999992673358881	WITHOUT_CLASSIFICATION	7.326641118753741E-7	TEST
//by requiring <, we rely on lock timeout in the case of an unsuccessful update!	WITHOUT_CLASSIFICATION	0.9999992093104363	WITHOUT_CLASSIFICATION	7.906895636350526E-7	TEST
// the user provided resulttransformer, not the one used with "select new". Here to avoid mangling // transformed/non-transformed results.	WITHOUT_CLASSIFICATION	0.9999996490574214	WITHOUT_CLASSIFICATION	3.509425785782191E-7	TEST
// disassemble positional parameters	WITHOUT_CLASSIFICATION	0.9999991377013961	WITHOUT_CLASSIFICATION	8.622986039081791E-7	TEST
// disassemble named parameters	WITHOUT_CLASSIFICATION	0.999997682264855	WITHOUT_CLASSIFICATION	2.3177351450102827E-6	TEST
//ie. 60 seconds	WITHOUT_CLASSIFICATION	0.9999988274913756	WITHOUT_CLASSIFICATION	1.1725086244177333E-6	TEST
// noop	WITHOUT_CLASSIFICATION	0.9999984599693854	WITHOUT_CLASSIFICATION	1.5400306146245406E-6	TEST
//noop	WITHOUT_CLASSIFICATION	0.9999662491669086	WITHOUT_CLASSIFICATION	3.3750833091375006E-5	TEST
//noop	WITHOUT_CLASSIFICATION	0.9999662491669086	WITHOUT_CLASSIFICATION	3.3750833091375006E-5	TEST
// this is called from SettingsFactory irregardless; trivial to simply disregard	WITHOUT_CLASSIFICATION	0.9999983598088251	WITHOUT_CLASSIFICATION	1.640191174912542E-6	TEST
// Do nothing; subclasses may override.	WITHOUT_CLASSIFICATION	0.999999414266872	WITHOUT_CLASSIFICATION	5.857331280948046E-7	TEST
// Do nothing; subclasses may override.	WITHOUT_CLASSIFICATION	0.999999414266872	WITHOUT_CLASSIFICATION	5.857331280948046E-7	TEST
//throw new UnsupportedOperationException("Can't write to a readonly object");	WITHOUT_CLASSIFICATION	0.9999999536955338	WITHOUT_CLASSIFICATION	4.630446621392095E-8	TEST
//assembled state gets put in a new array (we read from cache by value!)	WITHOUT_CLASSIFICATION	0.9999971156270349	WITHOUT_CLASSIFICATION	2.8843729651709346E-6	TEST
//persister.setIdentifier(result, id); //before calling interceptor, for consistency with normal load	WITHOUT_CLASSIFICATION	0.999999503314782	WITHOUT_CLASSIFICATION	4.966852179240127E-7	TEST
// no-op; CCS did not have such a concept	WITHOUT_CLASSIFICATION	0.9999998835447097	WITHOUT_CLASSIFICATION	1.16455290318838E-7	TEST
// no-op; CCS did not have such a concept	WITHOUT_CLASSIFICATION	0.9999998835447097	WITHOUT_CLASSIFICATION	1.16455290318838E-7	TEST
// again, CCS did not have such a concept; but a reasonable // proximity is to clear the cache after transaction *as long as* // the underlying cache is not JTA aware.	WITHOUT_CLASSIFICATION	0.9999999524546048	WITHOUT_CLASSIFICATION	4.75453951350744E-8	TEST
// again, CCS did not have such a concept; however a reasonable // proximity is to clear the cache.  For non-transaction aware // caches, we will also do a clear at the end of the transaction	WITHOUT_CLASSIFICATION	0.9999999977983106	WITHOUT_CLASSIFICATION	2.201689321905512E-9	TEST
// again, CCS did not have such a concept; however a reasonable // proximity is to clear the cache.  For non-transaction aware // caches, we will also do a clear at the end of the transaction	WITHOUT_CLASSIFICATION	0.9999999977983106	WITHOUT_CLASSIFICATION	2.201689321905512E-9	TEST
// classes mentioned in extends not available - so put it in queue	WITHOUT_CLASSIFICATION	0.999999753467	WITHOUT_CLASSIFICATION	2.465330000354073E-7	TEST
// get meta's from <hibernate-mapping>	WITHOUT_CLASSIFICATION	0.9999958829298444	WITHOUT_CLASSIFICATION	4.1170701556318055E-6	TEST
// get meta's from <class>	WITHOUT_CLASSIFICATION	0.999998682680445	WITHOUT_CLASSIFICATION	1.3173195550242497E-6	TEST
// DB-OBJECTNAME	WITHOUT_CLASSIFICATION	0.9999965839296591	WITHOUT_CLASSIFICATION	3.4160703409127726E-6	TEST
// MUTABLE	WITHOUT_CLASSIFICATION	0.9999984421207193	WITHOUT_CLASSIFICATION	1.5578792806515902E-6	TEST
// WHERE	WITHOUT_CLASSIFICATION	0.9999977743042587	WITHOUT_CLASSIFICATION	2.225695741292813E-6	TEST
// CHECK	WITHOUT_CLASSIFICATION	0.9999989057229804	WITHOUT_CLASSIFICATION	1.0942770194910299E-6	TEST
// POLYMORPHISM	WITHOUT_CLASSIFICATION	0.9999979379558169	WITHOUT_CLASSIFICATION	2.0620441830864666E-6	TEST
// TODO:	WITHOUT_CLASSIFICATION	0.9987213607062505	WITHOUT_CLASSIFICATION	0.0012786392937495482	TEST
// ID	WITHOUT_CLASSIFICATION	0.9999936032021512	WITHOUT_CLASSIFICATION	6.3967978487509135E-6	TEST
// VERSION / TIMESTAMP	WITHOUT_CLASSIFICATION	0.9999922914165695	WITHOUT_CLASSIFICATION	7.708583430556769E-6	TEST
// DISCRIMINATOR	WITHOUT_CLASSIFICATION	0.9999944089208249	WITHOUT_CLASSIFICATION	5.591079175073947E-6	TEST
// Primary key constraint	WITHOUT_CLASSIFICATION	0.9999999666273109	WITHOUT_CLASSIFICATION	3.337268908915271E-8	TEST
// this is either a <version/> tag with no type attribute, // or a <timestamp/> tag	WITHOUT_CLASSIFICATION	0.9999856528576526	WITHOUT_CLASSIFICATION	1.4347142347427514E-5	TEST
// for version properties marked as being generated, make sure they are "always" // generated; aka, "insert" is invalid; this is dis-allowed by the DTD, // but just to make sure...	WITHOUT_CLASSIFICATION	0.9999421071179109	WITHOUT_CLASSIFICATION	5.789288208923596E-5	TEST
// DISCRIMINATOR	WITHOUT_CLASSIFICATION	0.9999944089208249	WITHOUT_CLASSIFICATION	5.591079175073947E-6	TEST
// ( (Column) discrim.getColumnIterator().next() ).setType(type);	WITHOUT_CLASSIFICATION	0.9999999749438654	WITHOUT_CLASSIFICATION	2.505613473474314E-8	TEST
// go ahead and set the lazy here, since pojo.proxy can override it.	WITHOUT_CLASSIFICATION	0.9999999444134732	WITHOUT_CLASSIFICATION	5.558652681578395E-8	TEST
// DYNAMIC UPDATE	WITHOUT_CLASSIFICATION	0.999998115102603	WITHOUT_CLASSIFICATION	1.8848973970366208E-6	TEST
// IMPORT	WITHOUT_CLASSIFICATION	0.9999934083389408	WITHOUT_CLASSIFICATION	6.591661059263841E-6	TEST
// BATCH SIZE	WITHOUT_CLASSIFICATION	0.9999987949875957	WITHOUT_CLASSIFICATION	1.2050124043059383E-6	TEST
// SELECT BEFORE UPDATE	WITHOUT_CLASSIFICATION	0.9999971261015747	WITHOUT_CLASSIFICATION	2.873898425303943E-6	TEST
// OPTIMISTIC LOCK MODE	WITHOUT_CLASSIFICATION	0.999991999661005	WITHOUT_CLASSIFICATION	8.000338995068727E-6	TEST
// PERSISTER	WITHOUT_CLASSIFICATION	0.999998075805281	WITHOUT_CLASSIFICATION	1.9241947189566973E-6	TEST
// CUSTOM SQL	WITHOUT_CLASSIFICATION	0.9999965282524479	WITHOUT_CLASSIFICATION	3.4717475520218186E-6	TEST
// get meta's from <subclass>	WITHOUT_CLASSIFICATION	0.999999335308056	WITHOUT_CLASSIFICATION	6.64691943955086E-7	TEST
// properties	WITHOUT_CLASSIFICATION	0.9999974303832181	WITHOUT_CLASSIFICATION	2.569616781923162E-6	TEST
// joined subclasses	WITHOUT_CLASSIFICATION	0.999999829620765	WITHOUT_CLASSIFICATION	1.703792350846376E-7	TEST
// KEY	WITHOUT_CLASSIFICATION	0.9999975613184018	WITHOUT_CLASSIFICATION	2.438681598206043E-6	TEST
// CHECK	WITHOUT_CLASSIFICATION	0.9999989057229804	WITHOUT_CLASSIFICATION	1.0942770194910299E-6	TEST
// CUSTOM SQL	WITHOUT_CLASSIFICATION	0.9999965282524479	WITHOUT_CLASSIFICATION	3.4717475520218186E-6	TEST
// properties	WITHOUT_CLASSIFICATION	0.9999974303832181	WITHOUT_CLASSIFICATION	2.569616781923162E-6	TEST
// KEY	WITHOUT_CLASSIFICATION	0.9999975613184018	WITHOUT_CLASSIFICATION	2.438681598206043E-6	TEST
// model.getKey().setType( new Type( model.getIdentifier() ) );	WITHOUT_CLASSIFICATION	0.9999998318815522	WITHOUT_CLASSIFICATION	1.6811844786790678E-7	TEST
// TABLENAME	WITHOUT_CLASSIFICATION	0.9999942255304317	WITHOUT_CLASSIFICATION	5.774469568268661E-6	TEST
// join.getKey().setType( new Type( lazz.getIdentifier() ) );	WITHOUT_CLASSIFICATION	0.9999999430312425	WITHOUT_CLASSIFICATION	5.696875761319375E-8	TEST
// PROPERTIES	WITHOUT_CLASSIFICATION	0.9999970180913558	WITHOUT_CLASSIFICATION	2.981908644110211E-6	TEST
// COLUMN(S)	WITHOUT_CLASSIFICATION	0.9999973746223865	WITHOUT_CLASSIFICATION	2.625377613545536E-6	TEST
// column index	WITHOUT_CLASSIFICATION	0.9999999275839266	WITHOUT_CLASSIFICATION	7.241607346275594E-8	TEST
//column unique-key	WITHOUT_CLASSIFICATION	0.9999944547055983	WITHOUT_CLASSIFICATION	5.545294401628522E-6	TEST
// automatically makes a column with the default name if none is specifed by XML	WITHOUT_CLASSIFICATION	0.9999976972542902	WITHOUT_CLASSIFICATION	2.3027457098842326E-6	TEST
// for an any	WITHOUT_CLASSIFICATION	0.9999975678329698	WITHOUT_CLASSIFICATION	2.4321670302593672E-6	TEST
// insertable simply because that is the user did not specify // anything; just override it	WITHOUT_CLASSIFICATION	0.999999622383662	WITHOUT_CLASSIFICATION	3.776163379975354E-7	TEST
// the user specifically supplied insert="true", // which constitutes an illegal combo	WITHOUT_CLASSIFICATION	0.9999972258575517	WITHOUT_CLASSIFICATION	2.774142448398438E-6	TEST
// properties generated on update can never be updateable...	WITHOUT_CLASSIFICATION	0.9999976711008449	WITHOUT_CLASSIFICATION	2.3288991550234936E-6	TEST
// updateable only because the user did not specify  // anything; just override it	WITHOUT_CLASSIFICATION	0.9999999598508681	WITHOUT_CLASSIFICATION	4.014913186358802E-8	TEST
// the user specifically supplied update="true", // which constitutes an illegal combo	WITHOUT_CLASSIFICATION	0.9999984326674451	WITHOUT_CLASSIFICATION	1.5673325549095164E-6	TEST
// ROLENAME	WITHOUT_CLASSIFICATION	0.9999976632256977	WITHOUT_CLASSIFICATION	2.3367743021923857E-6	TEST
// FETCH STRATEGY	WITHOUT_CLASSIFICATION	0.9999984893900754	WITHOUT_CLASSIFICATION	1.5106099246804556E-6	TEST
// TABLE	WITHOUT_CLASSIFICATION	0.9999958457919709	WITHOUT_CLASSIFICATION	4.154208029098847E-6	TEST
//tableName = mappings.getNamingStrategy().propertyToTableName( className, path );	WITHOUT_CLASSIFICATION	0.9999775479877947	WITHOUT_CLASSIFICATION	2.245201220531269E-5	TEST
// SORT	WITHOUT_CLASSIFICATION	0.9999964431819885	WITHOUT_CLASSIFICATION	3.5568180114774735E-6	TEST
// CUSTOM SQL	WITHOUT_CLASSIFICATION	0.9999965282524479	WITHOUT_CLASSIFICATION	3.4717475520218186E-6	TEST
// unsorted, natural, comparator.class.name	WITHOUT_CLASSIFICATION	0.9999991260509179	WITHOUT_CLASSIFICATION	8.739490821458817E-7	TEST
// ORPHAN DELETE (used for programmer error detection)	WITHOUT_CLASSIFICATION	0.9999998812792619	WITHOUT_CLASSIFICATION	1.1872073811347732E-7	TEST
// set up second pass	WITHOUT_CLASSIFICATION	0.9999997677684928	WITHOUT_CLASSIFICATION	2.3223150731135136E-7	TEST
// an "embedded" component (composite ids and unique) // note that this does not handle nested components	WITHOUT_CLASSIFICATION	0.9998784805503396	WITHOUT_CLASSIFICATION	1.215194496603826E-4	TEST
// a nested composite element	WITHOUT_CLASSIFICATION	0.9999961438917373	WITHOUT_CLASSIFICATION	3.85610826277454E-6	TEST
// for an any // we will have to use reflection	WITHOUT_CLASSIFICATION	0.9999997819021827	WITHOUT_CLASSIFICATION	2.180978172575522E-7	TEST
//NOTE SPECIAL CASE: // one-to-one constrained=false cannot be proxied, // so default to join and non-lazy	WITHOUT_CLASSIFICATION	0.9999999920873238	WITHOUT_CLASSIFICATION	7.9126762874333E-9	TEST
// use old (HB 2.1) defaults if outer-join is specified	WITHOUT_CLASSIFICATION	0.9999999000551631	WITHOUT_CLASSIFICATION	9.994483687476954E-8	TEST
//lazy = !join;	WITHOUT_CLASSIFICATION	0.9999968123397738	WITHOUT_CLASSIFICATION	3.1876602262561562E-6	TEST
// GENERATOR	WITHOUT_CLASSIFICATION	0.9999958828792571	WITHOUT_CLASSIFICATION	4.117120742893566E-6	TEST
// ID UNSAVED-VALUE	WITHOUT_CLASSIFICATION	0.9999971546157655	WITHOUT_CLASSIFICATION	2.8453842343422823E-6	TEST
// VERSION UNSAVED-VALUE	WITHOUT_CLASSIFICATION	0.9999959881438484	WITHOUT_CLASSIFICATION	4.0118561516226585E-6	TEST
// not necessarily a *unique* property reference	WITHOUT_CLASSIFICATION	0.9999997778815769	WITHOUT_CLASSIFICATION	2.2211842319915087E-7	TEST
// ( (Column) ( (SimpleValue) ic.getIndex() ).getColumnIterator().next() // ).setNullable(false);	WITHOUT_CLASSIFICATION	0.9999998653601112	WITHOUT_CLASSIFICATION	1.346398887635875E-7	TEST
// contained elements:	WITHOUT_CLASSIFICATION	0.9999999452484515	WITHOUT_CLASSIFICATION	5.475154849685557E-8	TEST
// for non-inverse one-to-many, with a not-null fk, add a backref!	WITHOUT_CLASSIFICATION	0.9999999066048234	WITHOUT_CLASSIFICATION	9.339517663515163E-8	TEST
// Bind the where	WITHOUT_CLASSIFICATION	0.999996121064282	WITHOUT_CLASSIFICATION	3.878935717990859E-6	TEST
// Bind the order-by	WITHOUT_CLASSIFICATION	0.9999995704738253	WITHOUT_CLASSIFICATION	4.295261747329139E-7	TEST
// Bind the filters	WITHOUT_CLASSIFICATION	0.9999997155179204	WITHOUT_CLASSIFICATION	2.8448207957396423E-7	TEST
// overriding inherited meta attribute. HBX-621 & HBX-793	WITHOUT_CLASSIFICATION	0.9999997026677797	WITHOUT_CLASSIFICATION	2.9733222030640944E-7	TEST
// first, iterate over all elements capable of defining an extends attribute // collecting all found extends references if they cannot be resolved // against the already processed mappings.	WITHOUT_CLASSIFICATION	0.999999967337827	WITHOUT_CLASSIFICATION	3.2662172957455034E-8	TEST
// mappings might contain either the "raw" extends name (in the case of // an entity-name mapping) or a FQN (in the case of a POJO mapping).	WITHOUT_CLASSIFICATION	0.9999995070769332	WITHOUT_CLASSIFICATION	4.929230667784676E-7	TEST
//+ "_" + referencedColumnName not used for backward compatibility	WITHOUT_CLASSIFICATION	0.999999847510594	WITHOUT_CLASSIFICATION	1.5248940592513558E-7	TEST
//SessionFactory name:	WITHOUT_CLASSIFICATION	0.9999952352271344	WITHOUT_CLASSIFICATION	4.764772865567024E-6	TEST
//JDBC and connection settings:	WITHOUT_CLASSIFICATION	0.9999992685085812	WITHOUT_CLASSIFICATION	7.314914187107324E-7	TEST
//JDBC and connection settings:	WITHOUT_CLASSIFICATION	0.9999992685085812	WITHOUT_CLASSIFICATION	7.314914187107324E-7	TEST
//Interrogate JDBC metadata	WITHOUT_CLASSIFICATION	0.9999755653671799	WITHOUT_CLASSIFICATION	2.443463282005092E-5	TEST
// user supplied JDBC connections	WITHOUT_CLASSIFICATION	0.9999999641218557	WITHOUT_CLASSIFICATION	3.587814438390586E-8	TEST
//use dialect default properties	WITHOUT_CLASSIFICATION	0.9999980277539591	WITHOUT_CLASSIFICATION	1.9722460409271395E-6	TEST
// Transaction settings:	WITHOUT_CLASSIFICATION	0.9999998325379893	WITHOUT_CLASSIFICATION	1.6746201079529014E-7	TEST
//SQL Generation settings:	WITHOUT_CLASSIFICATION	0.9999990604467179	WITHOUT_CLASSIFICATION	9.395532820501761E-7	TEST
//Query parser settings:	WITHOUT_CLASSIFICATION	0.9999980362106126	WITHOUT_CLASSIFICATION	1.9637893875037376E-6	TEST
// Second-level / query cache:	WITHOUT_CLASSIFICATION	0.9999999103504572	WITHOUT_CLASSIFICATION	8.964954274007583E-8	TEST
// The cache provider is needed when we either have second-level cache enabled // or query cache enabled.  Note that useSecondLevelCache is enabled by default	WITHOUT_CLASSIFICATION	0.999935028711489	WITHOUT_CLASSIFICATION	6.497128851097107E-5	TEST
//SQL Exception converter:	WITHOUT_CLASSIFICATION	0.9999982447088772	WITHOUT_CLASSIFICATION	1.755291122853667E-6	TEST
//Statistics and logging:	WITHOUT_CLASSIFICATION	0.9999964879543101	WITHOUT_CLASSIFICATION	3.5120456899712423E-6	TEST
//	WITHOUT_CLASSIFICATION	0.9999674909996846	WITHOUT_CLASSIFICATION	3.2509000315333503E-5	TEST
//	WITHOUT_CLASSIFICATION	0.9999674909996846	WITHOUT_CLASSIFICATION	3.2509000315333503E-5	TEST
//Schema export:	WITHOUT_CLASSIFICATION	0.9999974839915609	WITHOUT_CLASSIFICATION	2.516008439042201E-6	TEST
//	WITHOUT_CLASSIFICATION	0.9999674909996846	WITHOUT_CLASSIFICATION	3.2509000315333503E-5	TEST
// legacy behavior, apply the bridge...	WITHOUT_CLASSIFICATION	0.9999991926170895	WITHOUT_CLASSIFICATION	8.073829104654955E-7	TEST
// maybe a concrete SQLpropertyresult type, but Map is exactly what is required at the moment	WITHOUT_CLASSIFICATION	0.9999985013551134	WITHOUT_CLASSIFICATION	1.4986448866554056E-6	TEST
//if dotted and not load-collection nor return-join //regular property	WITHOUT_CLASSIFICATION	0.9999995310466374	WITHOUT_CLASSIFICATION	4.6895336258946753E-7	TEST
//	WITHOUT_CLASSIFICATION	0.9999674909996846	WITHOUT_CLASSIFICATION	3.2509000315333503E-5	TEST
// public getters ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999986023123536	WITHOUT_CLASSIFICATION	1.3976876463177386E-6	TEST
//	WITHOUT_CLASSIFICATION	0.9999674909996846	WITHOUT_CLASSIFICATION	3.2509000315333503E-5	TEST
// package protected setters ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999986576995085	WITHOUT_CLASSIFICATION	1.342300491559196E-6	TEST
//	WITHOUT_CLASSIFICATION	0.9999674909996846	WITHOUT_CLASSIFICATION	3.2509000315333503E-5	TEST
//	WITHOUT_CLASSIFICATION	0.9999674909996846	WITHOUT_CLASSIFICATION	3.2509000315333503E-5	TEST
// using local since the inheritedMetas at this point is not the correct map since it is always the empty map	WITHOUT_CLASSIFICATION	0.9999999697994064	WITHOUT_CLASSIFICATION	3.0200593514560114E-8	TEST
//	WITHOUT_CLASSIFICATION	0.9999674909996846	WITHOUT_CLASSIFICATION	3.2509000315333503E-5	TEST
//	WITHOUT_CLASSIFICATION	0.9999674909996846	WITHOUT_CLASSIFICATION	3.2509000315333503E-5	TEST
//	WITHOUT_CLASSIFICATION	0.9999674909996846	WITHOUT_CLASSIFICATION	3.2509000315333503E-5	TEST
//	WITHOUT_CLASSIFICATION	0.9999674909996846	WITHOUT_CLASSIFICATION	3.2509000315333503E-5	TEST
// if doc is null, then for whatever reason, the cached file cannot be used...	WITHOUT_CLASSIFICATION	0.9999997331550032	WITHOUT_CLASSIFICATION	2.668449968658734E-7	TEST
// drop them in reverse order in case db needs it done that way...	WITHOUT_CLASSIFICATION	0.9999997494882565	WITHOUT_CLASSIFICATION	2.505117434620444E-7	TEST
//	WITHOUT_CLASSIFICATION	0.9999674909996846	WITHOUT_CLASSIFICATION	3.2509000315333503E-5	TEST
// This method may be called many times!!	WITHOUT_CLASSIFICATION	0.999996424068835	WITHOUT_CLASSIFICATION	3.5759311649842242E-6	TEST
//	WITHOUT_CLASSIFICATION	0.9999674909996846	WITHOUT_CLASSIFICATION	3.2509000315333503E-5	TEST
//	WITHOUT_CLASSIFICATION	0.9999674909996846	WITHOUT_CLASSIFICATION	3.2509000315333503E-5	TEST
// found	WITHOUT_CLASSIFICATION	0.9999987860736944	WITHOUT_CLASSIFICATION	1.2139263055123947E-6	TEST
// found	WITHOUT_CLASSIFICATION	0.9999987860736944	WITHOUT_CLASSIFICATION	1.2139263055123947E-6	TEST
//	WITHOUT_CLASSIFICATION	0.9999674909996846	WITHOUT_CLASSIFICATION	3.2509000315333503E-5	TEST
//	WITHOUT_CLASSIFICATION	0.9999674909996846	WITHOUT_CLASSIFICATION	3.2509000315333503E-5	TEST
//<String, String>	WITHOUT_CLASSIFICATION	0.9999963239243608	WITHOUT_CLASSIFICATION	3.67607563931145E-6	TEST
//<String, String>	WITHOUT_CLASSIFICATION	0.9999963239243608	WITHOUT_CLASSIFICATION	3.67607563931145E-6	TEST
//+ "_" + referencedColumnName not used for backward compatibility	WITHOUT_CLASSIFICATION	0.999999847510594	WITHOUT_CLASSIFICATION	1.5248940592513558E-7	TEST
//Set USE_REFLECTION_OPTIMIZER to false to fix HHH-227	WITHOUT_CLASSIFICATION	0.9999980363113216	WITHOUT_CLASSIFICATION	1.963688678485966E-6	TEST
//orphan delete not supported for EntityMode.DOM4J	WITHOUT_CLASSIFICATION	0.9999907790722399	WITHOUT_CLASSIFICATION	9.220927760202503E-6	TEST
//element = XMLHelper.generateDom4jElement( persister.getNodeName() );	WITHOUT_CLASSIFICATION	0.9999707481714725	WITHOUT_CLASSIFICATION	2.9251828527523974E-5	TEST
// intentionally empty	WITHOUT_CLASSIFICATION	0.9999995680953937	WITHOUT_CLASSIFICATION	4.3190460633227173E-7	TEST
//orphan delete not supported for EntityMode.DOM4J	WITHOUT_CLASSIFICATION	0.9999907790722399	WITHOUT_CLASSIFICATION	9.220927760202503E-6	TEST
//element = XMLHelper.generateDom4jElement( persister.getNodeName() );	WITHOUT_CLASSIFICATION	0.9999707481714725	WITHOUT_CLASSIFICATION	2.9251828527523974E-5	TEST
//needed for SOAP libraries, etc	WITHOUT_CLASSIFICATION	0.9999941632117909	WITHOUT_CLASSIFICATION	5.836788209045915E-6	TEST
//maintain correct duplication if loaded in a cartesian product	WITHOUT_CLASSIFICATION	0.9999985839914223	WITHOUT_CLASSIFICATION	1.4160085777052858E-6	TEST
// the element has been removed from the set	WITHOUT_CLASSIFICATION	0.9999981379328999	WITHOUT_CLASSIFICATION	1.8620671000287957E-6	TEST
// the element has changed	WITHOUT_CLASSIFICATION	0.999998691421262	WITHOUT_CLASSIFICATION	1.3085787380068555E-6	TEST
//Careful: these methods do not initialize the collection.	WITHOUT_CLASSIFICATION	0.9999980454626616	WITHOUT_CLASSIFICATION	1.954537338421428E-6	TEST
//needed so that we remove this collection from the second-level cache	WITHOUT_CLASSIFICATION	0.999999439830025	WITHOUT_CLASSIFICATION	5.601699749295318E-7	TEST
// override on some subclasses	WITHOUT_CLASSIFICATION	0.9999997429600199	WITHOUT_CLASSIFICATION	2.570399801703754E-7	TEST
//override on some subclasses	WITHOUT_CLASSIFICATION	0.9999977460552186	WITHOUT_CLASSIFICATION	2.253944781424234E-6	TEST
//do this bit after setting initialized to true or it will recurse	WITHOUT_CLASSIFICATION	0.9999831909576843	WITHOUT_CLASSIFICATION	1.680904231576059E-5	TEST
// short-circuit(s) // no new elements, the old list contains only Orphans // no old elements, so no Orphans neither	WITHOUT_CLASSIFICATION	0.9999999767248817	WITHOUT_CLASSIFICATION	2.3275118317251568E-8	TEST
// create the collection holding the Orphans	WITHOUT_CLASSIFICATION	0.9999998648195924	WITHOUT_CLASSIFICATION	1.3518040771205061E-7	TEST
// collect EntityIdentifier(s) of the *current* elements - add them into a HashSet for fast access	WITHOUT_CLASSIFICATION	0.9999999931093126	WITHOUT_CLASSIFICATION	6.890687408324005E-9	TEST
// iterate over the *old* list	WITHOUT_CLASSIFICATION	0.9999991241786187	WITHOUT_CLASSIFICATION	8.758213812782216E-7	TEST
/*(array==null) ? tempList.size() :*/	WITHOUT_CLASSIFICATION	0.9999791612144806	WITHOUT_CLASSIFICATION	2.0838785519339885E-5	TEST
// intentionally empty	WITHOUT_CLASSIFICATION	0.9999995680953937	WITHOUT_CLASSIFICATION	4.3190460633227173E-7	TEST
/*(array==null) ? tempList.get(i) :*/	WITHOUT_CLASSIFICATION	0.9999844399094097	WITHOUT_CLASSIFICATION	1.5560090590429838E-5	TEST
//write(); -- doesn't	WITHOUT_CLASSIFICATION	0.9999542877551207	WITHOUT_CLASSIFICATION	4.571224487931578E-5	TEST
//write(); -- doesn't	WITHOUT_CLASSIFICATION	0.9999542877551207	WITHOUT_CLASSIFICATION	4.571224487931578E-5	TEST
// amazingly, these two will work because AbstractCollection // uses iterator() to fill the array	WITHOUT_CLASSIFICATION	0.9999999944401504	WITHOUT_CLASSIFICATION	5.559849583014238E-9	TEST
//needed for SOAP libraries, etc	WITHOUT_CLASSIFICATION	0.9999941632117909	WITHOUT_CLASSIFICATION	5.836788209045915E-6	TEST
// finally, what it's all about...	WITHOUT_CLASSIFICATION	0.9999996156598386	WITHOUT_CLASSIFICATION	3.8434016132065424E-7	TEST
// note that if we load this collection from a cartesian product // the multiplicity would be broken ... so use an idbag instead	WITHOUT_CLASSIFICATION	0.9999985203481723	WITHOUT_CLASSIFICATION	1.4796518277748736E-6	TEST
// Anyway, here we implement <set> semantics for a // <one-to-many> <bag>!	WITHOUT_CLASSIFICATION	0.9999989687554476	WITHOUT_CLASSIFICATION	1.0312445524978892E-6	TEST
//a shortcut if its location didn't change!	WITHOUT_CLASSIFICATION	0.9999974911983983	WITHOUT_CLASSIFICATION	2.508801601752714E-6	TEST
//search for it //note that this code is incorrect for other than one-to-many	WITHOUT_CLASSIFICATION	0.9999940819706062	WITHOUT_CLASSIFICATION	5.9180293937405695E-6	TEST
//needed for SOAP libraries, etc	WITHOUT_CLASSIFICATION	0.9999941632117909	WITHOUT_CLASSIFICATION	5.836788209045915E-6	TEST
//a shortcut if its location didn't change!	WITHOUT_CLASSIFICATION	0.9999974911983983	WITHOUT_CLASSIFICATION	2.508801601752714E-6	TEST
//search for it //note that this code is incorrect for other than one-to-many	WITHOUT_CLASSIFICATION	0.9999940819706062	WITHOUT_CLASSIFICATION	5.9180293937405695E-6	TEST
/*public boolean equals(Object other) {	WITHOUT_CLASSIFICATION	0.9999866621934654	WITHOUT_CLASSIFICATION	1.3337806534579514E-5	TEST
// List OPERATIONS:	WITHOUT_CLASSIFICATION	0.9999987068955837	WITHOUT_CLASSIFICATION	1.2931044163778132E-6	TEST
//pad with nulls from the current last element up to the new index	WITHOUT_CLASSIFICATION	0.9999989822325405	WITHOUT_CLASSIFICATION	1.017767459537525E-6	TEST
//needed for SOAP libraries, etc	WITHOUT_CLASSIFICATION	0.9999941632117909	WITHOUT_CLASSIFICATION	5.836788209045915E-6	TEST
//needed for SOAP libraries, etc	WITHOUT_CLASSIFICATION	0.9999941632117909	WITHOUT_CLASSIFICATION	5.836788209045915E-6	TEST
// from Map	WITHOUT_CLASSIFICATION	0.9999974960150155	WITHOUT_CLASSIFICATION	2.5039849844433E-6	TEST
// from SortedMap	WITHOUT_CLASSIFICATION	0.9999971150080632	WITHOUT_CLASSIFICATION	2.884991936771794E-6	TEST
//inject the data	WITHOUT_CLASSIFICATION	0.9999989505616242	WITHOUT_CLASSIFICATION	1.0494383757440757E-6	TEST
// cannot be instantiated	WITHOUT_CLASSIFICATION	0.9999998250685913	WITHOUT_CLASSIFICATION	1.7493140865464417E-7	TEST
//default pool size 20	WITHOUT_CLASSIFICATION	0.9999981488518344	WITHOUT_CLASSIFICATION	1.8511481657149478E-6	TEST
// trying via forName() first to be as close to DriverManager's semantics	WITHOUT_CLASSIFICATION	0.999999573851619	WITHOUT_CLASSIFICATION	4.2614838102351463E-7	TEST
// if debug level is enabled, then log the password, otherwise mask it	WITHOUT_CLASSIFICATION	0.9999923041763139	WITHOUT_CLASSIFICATION	7.695823686069194E-6	TEST
// register a cleanup synch	WITHOUT_CLASSIFICATION	0.9999999117260359	WITHOUT_CLASSIFICATION	8.8273964210054E-8	TEST
// wrap the session in the transaction-protection proxy	WITHOUT_CLASSIFICATION	0.9999999830804841	WITHOUT_CLASSIFICATION	1.691951597862961E-8	TEST
// then bind it	WITHOUT_CLASSIFICATION	0.9999978648476708	WITHOUT_CLASSIFICATION	2.1351523290727513E-6	TEST
// try to make sure we don't wrap and already wrapped session	WITHOUT_CLASSIFICATION	0.9999993039102832	WITHOUT_CLASSIFICATION	6.96089716705481E-7	TEST
// allow these to go through the the real session no matter what	WITHOUT_CLASSIFICATION	0.9999994526410272	WITHOUT_CLASSIFICATION	5.473589728397436E-7	TEST
// limit the methods available if no transaction is active	WITHOUT_CLASSIFICATION	0.9999999785453332	WITHOUT_CLASSIFICATION	2.14546668522822E-8	TEST
// allow these (deprecated) methods to pass through	WITHOUT_CLASSIFICATION	0.9999997085097553	WITHOUT_CLASSIFICATION	2.914902448017828E-7	TEST
// serialization ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999997931506549	WITHOUT_CLASSIFICATION	2.0684934499514932E-7	TEST
// We could register the session against the transaction even though it is // not started, but we'd have no guarentee of ever getting the map // entries cleaned up (aside from spawning threads).	WITHOUT_CLASSIFICATION	0.9999999730699239	WITHOUT_CLASSIFICATION	2.6930076126971987E-8	TEST
//cannot be instantiated	WITHOUT_CLASSIFICATION	0.9999977388988194	WITHOUT_CLASSIFICATION	2.26110118060596E-6	TEST
//private String propertyName;	WITHOUT_CLASSIFICATION	0.9999722280558538	WITHOUT_CLASSIFICATION	2.7771944146177068E-5	TEST
/*public PropertyProjection project() {	WITHOUT_CLASSIFICATION	0.9999945047525753	WITHOUT_CLASSIFICATION	5.49524742470345E-6	TEST
//String[] fk = StringHelper.qualify( "collection_", cp.getKeyColumnNames() );	WITHOUT_CLASSIFICATION	0.9999998921103375	WITHOUT_CLASSIFICATION	1.0788966252850981E-7	TEST
//" collection_ where " +	WITHOUT_CLASSIFICATION	0.9999966348271333	WITHOUT_CLASSIFICATION	3.3651728667435205E-6	TEST
//unsupported	WITHOUT_CLASSIFICATION	0.9999781624252505	WITHOUT_CLASSIFICATION	2.183757474939286E-5	TEST
//unsupported	WITHOUT_CLASSIFICATION	0.9999781624252505	WITHOUT_CLASSIFICATION	2.183757474939286E-5	TEST
//cannot be instantiated	WITHOUT_CLASSIFICATION	0.9999977388988194	WITHOUT_CLASSIFICATION	2.26110118060596E-6	TEST
//the following two lines were added to ensure that this.params is not null, which //can happen with two-deep nested subqueries	WITHOUT_CLASSIFICATION	0.9999847921100155	WITHOUT_CLASSIFICATION	1.5207889984514701E-5	TEST
//with two-deep subqueries, the same alias would get generated for //both using the old method (criteriaQuery.generateSQLAlias()), so //that is now used as a fallback if the main criteria alias isn't set	WITHOUT_CLASSIFICATION	0.9999989901880706	WITHOUT_CLASSIFICATION	1.0098119293808682E-6	TEST
//implicit polymorphism not supported (would need a union)	WITHOUT_CLASSIFICATION	0.9998490514094589	WITHOUT_CLASSIFICATION	1.5094859054106581E-4	TEST
//pull off the last ", "	WITHOUT_CLASSIFICATION	0.9999933445786555	WITHOUT_CLASSIFICATION	6.65542134453258E-6	TEST
//$NON-NLS-1	WITHOUT_CLASSIFICATION	0.9999909060918462	WITHOUT_CLASSIFICATION	9.093908153803133E-6	TEST
// we have the form: trim(trimSource) //      so we trim leading and trailing spaces	WITHOUT_CLASSIFICATION	0.9999998232541304	WITHOUT_CLASSIFICATION	1.7674586959666207E-7	TEST
// we have the form: trim(from trimSource). //      This is functionally equivalent to trim(trimSource)	WITHOUT_CLASSIFICATION	0.9999997180161768	WITHOUT_CLASSIFICATION	2.8198382312243103E-7	TEST
// NOT_SUPPORTED_SHOULD_USE_JDBC3_PreparedStatement.getGeneratedKeys_method	WITHOUT_CLASSIFICATION	0.9999988710339814	WITHOUT_CLASSIFICATION	1.1289660185626377E-6	TEST
// potentialTrimCharacterArgIndex = 1 assumes that a // trim-specification has been specified.  we handle the // exception to that explicitly	WITHOUT_CLASSIFICATION	0.9999999680815225	WITHOUT_CLASSIFICATION	3.1918477477271347E-8	TEST
// Overridden informational metadata ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999996463793784	WITHOUT_CLASSIFICATION	3.5362062156873624E-7	TEST
// Oracle did add support for ANSI CASE statements in 9i	WITHOUT_CLASSIFICATION	0.9999998675803624	WITHOUT_CLASSIFICATION	1.3241963766283618E-7	TEST
// the standard SQL function name is current_timestamp...	WITHOUT_CLASSIFICATION	0.9999993259344192	WITHOUT_CLASSIFICATION	6.740655808373469E-7	TEST
// Informix doesn't have a bit type	WITHOUT_CLASSIFICATION	0.999979556690858	WITHOUT_CLASSIFICATION	2.0443309141926776E-5	TEST
// or BYTE // or TEXT? // or MONEY	WITHOUT_CLASSIFICATION	0.9999723335807691	WITHOUT_CLASSIFICATION	2.7666419230923328E-5	TEST
// strip table-owner because Informix always returns constraint names as "<table-owner>.<constraint-name>"	WITHOUT_CLASSIFICATION	0.9999999969517356	WITHOUT_CLASSIFICATION	3.0482643220146193E-9	TEST
// build the map of standard ANSI SQL aggregation functions ~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999999731191139	WITHOUT_CLASSIFICATION	2.6880886012808215E-8	TEST
//pre H3.2 behavior: super.getReturnType(ct, m);	WITHOUT_CLASSIFICATION	0.9999941477230765	WITHOUT_CLASSIFICATION	5.852276923579959E-6	TEST
// finally use the sqltype if == on Hibernate types did not find a match.	WITHOUT_CLASSIFICATION	0.9999996284535689	WITHOUT_CLASSIFICATION	3.715464310279225E-7	TEST
//because numeric can be anything	WITHOUT_CLASSIFICATION	0.9999993347681239	WITHOUT_CLASSIFICATION	6.652318761868564E-7	TEST
// constructors and factory methods ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999999451549071	WITHOUT_CLASSIFICATION	5.484509287344796E-8	TEST
// standard sql92 functions (can be overridden by subclasses)	WITHOUT_CLASSIFICATION	0.999999955148079	WITHOUT_CLASSIFICATION	4.4851920906141465E-8	TEST
//map second/minute/hour/day/month/year to ANSI extract(), override on subclasses	WITHOUT_CLASSIFICATION	0.9999999258944464	WITHOUT_CLASSIFICATION	7.410555355400036E-8	TEST
// register hibernate types for default use in scalar sqlquery type auto detection	WITHOUT_CLASSIFICATION	0.9999998141403286	WITHOUT_CLASSIFICATION	1.8585967148655295E-7	TEST
// database type mapping support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999991014047281	WITHOUT_CLASSIFICATION	8.985952718462764E-7	TEST
// hibernate type mapping support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999889431565997	WITHOUT_CLASSIFICATION	1.1056843400236335E-5	TEST
// keyword support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999974874905475	WITHOUT_CLASSIFICATION	2.512509452402386E-6	TEST
// native identifier generatiion ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999993880313013	WITHOUT_CLASSIFICATION	6.11968698677481E-7	TEST
// IDENTITY support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999892567189436	WITHOUT_CLASSIFICATION	1.0743281056420603E-5	TEST
// SEQUENCE support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999977706715163	WITHOUT_CLASSIFICATION	2.2293284837368446E-6	TEST
// GUID support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999959114955773	WITHOUT_CLASSIFICATION	4.088504422721168E-6	TEST
// limit/offset support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999989477262856	WITHOUT_CLASSIFICATION	1.0522737144206978E-6	TEST
// by default we report no support	WITHOUT_CLASSIFICATION	0.9999996598126434	WITHOUT_CLASSIFICATION	3.401873566605768E-7	TEST
// by default we report no support for NOWAIT lock semantics	WITHOUT_CLASSIFICATION	0.9999995821132205	WITHOUT_CLASSIFICATION	4.1788677952820007E-7	TEST
// table support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999979603814325	WITHOUT_CLASSIFICATION	2.039618567520083E-6	TEST
// temporary table support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999972642093892	WITHOUT_CLASSIFICATION	2.735790610852859E-6	TEST
// callable statement support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999996797424615	WITHOUT_CLASSIFICATION	3.202575385817081E-7	TEST
// current timestamp support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999976749994286	WITHOUT_CLASSIFICATION	2.3250005714877515E-6	TEST
// SQLException support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999998598987428	WITHOUT_CLASSIFICATION	1.4010125713573555E-7	TEST
// miscellaneous support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.999999545533616	WITHOUT_CLASSIFICATION	4.544663839383844E-7	TEST
// identifier quoting support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.999998379135383	WITHOUT_CLASSIFICATION	1.620864616992668E-6	TEST
// DDL support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999960558399955	WITHOUT_CLASSIFICATION	3.944160004520427E-6	TEST
// grrr... for differentiation of mysql storage engines	WITHOUT_CLASSIFICATION	0.9999995878545502	WITHOUT_CLASSIFICATION	4.121454497460237E-7	TEST
// Informational metadata ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999994296618208	WITHOUT_CLASSIFICATION	5.703381792797935E-7	TEST
// return false here, as most databases do not properly support this construct...	WITHOUT_CLASSIFICATION	0.9999954057026513	WITHOUT_CLASSIFICATION	4.594297348638808E-6	TEST
// Mckoi has no known variation of a "SELECT ... FOR UPDATE" syntax...	WITHOUT_CLASSIFICATION	0.9999999763329999	WITHOUT_CLASSIFICATION	2.366700002561147E-8	TEST
// Oracle8 and previous define only a "DATE" type which //      is used to represent all aspects of date/time	WITHOUT_CLASSIFICATION	0.9999999830390205	WITHOUT_CLASSIFICATION	1.696097949579135E-8	TEST
//starts with 1, implicitly	WITHOUT_CLASSIFICATION	0.9999333332450155	WITHOUT_CLASSIFICATION	6.666675498443E-5	TEST
//" cascade";	WITHOUT_CLASSIFICATION	0.9999983062968842	WITHOUT_CLASSIFICATION	1.693703115766543E-6	TEST
//trim off the length/precision/scale	WITHOUT_CLASSIFICATION	0.9999991356001554	WITHOUT_CLASSIFICATION	8.643998445611504E-7	TEST
/*public boolean dropTemporaryTableAfterUse() {	WITHOUT_CLASSIFICATION	0.9999958425075356	WITHOUT_CLASSIFICATION	4.157492464358155E-6	TEST
// CHECK VIOLATION	WITHOUT_CLASSIFICATION	0.9999990568154685	WITHOUT_CLASSIFICATION	9.43184531620485E-7	TEST
// UNIQUE VIOLATION	WITHOUT_CLASSIFICATION	0.9999973182592721	WITHOUT_CLASSIFICATION	2.681740728027211E-6	TEST
// FOREIGN KEY VIOLATION	WITHOUT_CLASSIFICATION	0.9999943945490826	WITHOUT_CLASSIFICATION	5.605450917396433E-6	TEST
// Overridden informational metadata ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999996463793784	WITHOUT_CLASSIFICATION	3.5362062156873624E-7	TEST
// NOT NULL VIOLATION	WITHOUT_CLASSIFICATION	0.9999773152823896	WITHOUT_CLASSIFICATION	2.268471761033347E-5	TEST
// ALL OTHER	WITHOUT_CLASSIFICATION	0.9999983087565155	WITHOUT_CLASSIFICATION	1.6912434844352222E-6	TEST
// Register the type of the out param - PostgreSQL uses Types.OTHER	WITHOUT_CLASSIFICATION	0.9999991335257159	WITHOUT_CLASSIFICATION	8.664742841574348E-7	TEST
// seems to not really... //	WITHOUT_CLASSIFICATION	0.9999995365809832	WITHOUT_CLASSIFICATION	4.634190168386524E-7	TEST
// seems to have spotty LOB suppport	WITHOUT_CLASSIFICATION	0.9999955290816975	WITHOUT_CLASSIFICATION	4.470918302545584E-6	TEST
// HHH-2300	WITHOUT_CLASSIFICATION	0.9999975361172657	WITHOUT_CLASSIFICATION	2.463882734341976E-6	TEST
// ignore (probably H2 not in the classpath)	WITHOUT_CLASSIFICATION	0.9999999480233205	WITHOUT_CLASSIFICATION	5.1976679545452177E-8	TEST
// Numeric Functions ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999997923563799	WITHOUT_CLASSIFICATION	2.0764362004538456E-7	TEST
// String Functions ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.999999878853289	WITHOUT_CLASSIFICATION	1.2114671105801337E-7	TEST
// Time and Date Functions ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999968267598955	WITHOUT_CLASSIFICATION	3.1732401045348007E-6	TEST
// System Functions ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999995414875593	WITHOUT_CLASSIFICATION	4.585124406270687E-7	TEST
// not null is implicit	WITHOUT_CLASSIFICATION	0.9999886871248003	WITHOUT_CLASSIFICATION	1.1312875199758368E-5	TEST
// 23000: Check constraint violation: {0} // 23001: Unique index or primary key violation: {0}	WITHOUT_CLASSIFICATION	0.9999999946339458	WITHOUT_CLASSIFICATION	5.366054117526088E-9	TEST
// Display the dialect version.	WITHOUT_CLASSIFICATION	0.9999997364458532	WITHOUT_CLASSIFICATION	2.6355414677745973E-7	TEST
// The RDMS concat() function only supports 2 parameters	WITHOUT_CLASSIFICATION	0.9999997315607905	WITHOUT_CLASSIFICATION	2.6843920952754697E-7	TEST
// Dialect method overrides ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999992162211451	WITHOUT_CLASSIFICATION	7.83778855007287E-7	TEST
// Original Dialect.java returns " for update";	WITHOUT_CLASSIFICATION	0.9999998754775619	WITHOUT_CLASSIFICATION	1.245224381314696E-7	TEST
// Verify the state of this new method in Hibernate 3.0 Dialect.java	WITHOUT_CLASSIFICATION	0.9999994018943645	WITHOUT_CLASSIFICATION	5.981056353785169E-7	TEST
// Origial Dialect.java returns true;	WITHOUT_CLASSIFICATION	0.9999999088745596	WITHOUT_CLASSIFICATION	9.112544049556732E-8	TEST
// The keyword used to specify a nullable column.	WITHOUT_CLASSIFICATION	0.999999967914986	WITHOUT_CLASSIFICATION	3.208501406080854E-8	TEST
// *** Sequence methods - start. The RDMS dialect needs these	WITHOUT_CLASSIFICATION	0.9999828564060119	WITHOUT_CLASSIFICATION	1.714359398804513E-5	TEST
// methods to make it possible to use the Native Id generator	WITHOUT_CLASSIFICATION	0.9999996047479264	WITHOUT_CLASSIFICATION	3.9525207368041426E-7	TEST
// The where clause was added to eliminate this statement from Brute Force Searches.	WITHOUT_CLASSIFICATION	0.9999996122609035	WITHOUT_CLASSIFICATION	3.8773909648400607E-7	TEST
// *** Sequence methods - end	WITHOUT_CLASSIFICATION	0.999999197098576	WITHOUT_CLASSIFICATION	8.029014240776327E-7	TEST
// Overridden informational metadata ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999996463793784	WITHOUT_CLASSIFICATION	3.5362062156873624E-7	TEST
//starts with 1, implicitly	WITHOUT_CLASSIFICATION	0.9999333332450155	WITHOUT_CLASSIFICATION	6.666675498443E-5	TEST
// We must return a valid RDMS/RSA command from this method to // prevent RDMS/RSA from issuing *ERROR 400	WITHOUT_CLASSIFICATION	0.9999985562179161	WITHOUT_CLASSIFICATION	1.4437820838510758E-6	TEST
// Used with DROP TABLE to delete all records in the table.	WITHOUT_CLASSIFICATION	0.9999999647207516	WITHOUT_CLASSIFICATION	3.527924844422151E-8	TEST
// RDMS supports the UNION ALL clause.	WITHOUT_CLASSIFICATION	0.9999996102075455	WITHOUT_CLASSIFICATION	3.897924544715441E-7	TEST
// RDMS has no known variation of a "SELECT ... FOR UPDATE" syntax...	WITHOUT_CLASSIFICATION	0.9999998392350041	WITHOUT_CLASSIFICATION	1.6076499584952537E-7	TEST
// Multi-param dialect functions...	WITHOUT_CLASSIFICATION	0.9999999320994736	WITHOUT_CLASSIFICATION	6.790052634879154E-8	TEST
// function templates	WITHOUT_CLASSIFICATION	0.9999993307456093	WITHOUT_CLASSIFICATION	6.692543907565817E-7	TEST
//not null is implicit	WITHOUT_CLASSIFICATION	0.9999123334274964	WITHOUT_CLASSIFICATION	8.766657250356228E-5	TEST
// this assumes schema support, which is present in 1.8.0 and later...	WITHOUT_CLASSIFICATION	0.9999995378030082	WITHOUT_CLASSIFICATION	4.621969918240568E-7	TEST
// HSQLDB only supports READ_UNCOMMITTED transaction isolation	WITHOUT_CLASSIFICATION	0.9999999907203366	WITHOUT_CLASSIFICATION	9.279663356492854E-9	TEST
// Multi-param string dialect functions...	WITHOUT_CLASSIFICATION	0.9999999542896858	WITHOUT_CLASSIFICATION	4.571031423161447E-8	TEST
// Multi-param numeric dialect functions...	WITHOUT_CLASSIFICATION	0.9999999693231769	WITHOUT_CLASSIFICATION	3.0676823096561594E-8	TEST
// Multi-param date dialect functions...	WITHOUT_CLASSIFICATION	0.9999999058205836	WITHOUT_CLASSIFICATION	9.417941639562655E-8	TEST
// simple nullability constraint	WITHOUT_CLASSIFICATION	0.9999999677167932	WITHOUT_CLASSIFICATION	3.2283206897557845E-8	TEST
// Overridden informational metadata ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999996463793784	WITHOUT_CLASSIFICATION	3.5362062156873624E-7	TEST
// Overridden informational metadata ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999996463793784	WITHOUT_CLASSIFICATION	3.5362062156873624E-7	TEST
// not final-static to avoid possible classcast exceptions if using different oracle drivers.	WITHOUT_CLASSIFICATION	0.9999999871121783	WITHOUT_CLASSIFICATION	1.2887821764964953E-8	TEST
//	WITHOUT_CLASSIFICATION	0.9999674909996846	WITHOUT_CLASSIFICATION	3.2509000315333503E-5	TEST
// TimesTen has no BLOB/CLOB support, but these types may be suitable  // for some applications. The length is limited to 4 million bytes.	WITHOUT_CLASSIFICATION	0.999991300191675	WITHOUT_CLASSIFICATION	8.699808324935655E-6	TEST
// new methods in dialect3	WITHOUT_CLASSIFICATION	0.9999998848700103	WITHOUT_CLASSIFICATION	1.1512998972052693E-7	TEST
/*public boolean supportsForUpdateNowait() {	WITHOUT_CLASSIFICATION	0.9999946190632995	WITHOUT_CLASSIFICATION	5.380936700551551E-6	TEST
// TimesTen has no known variation of a "SELECT ... FOR UPDATE" syntax...	WITHOUT_CLASSIFICATION	0.9999998398835092	WITHOUT_CLASSIFICATION	1.6011649078257343E-7	TEST
// iterate entries ordered by capacity to find first fit	WITHOUT_CLASSIFICATION	0.9999996963917319	WITHOUT_CLASSIFICATION	3.036082681876412E-7	TEST
// add new ordered map	WITHOUT_CLASSIFICATION	0.999997881933349	WITHOUT_CLASSIFICATION	2.1180666509144466E-6	TEST
//	WITHOUT_CLASSIFICATION	0.9999674909996846	WITHOUT_CLASSIFICATION	3.2509000315333503E-5	TEST
// Overridden informational metadata ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999996463793784	WITHOUT_CLASSIFICATION	3.5362062156873624E-7	TEST
//	WITHOUT_CLASSIFICATION	0.9999674909996846	WITHOUT_CLASSIFICATION	3.2509000315333503E-5	TEST
// sql server just returns automatically	WITHOUT_CLASSIFICATION	0.9999999021212562	WITHOUT_CLASSIFICATION	9.787874375345576E-8	TEST
//	WITHOUT_CLASSIFICATION	0.9999674909996846	WITHOUT_CLASSIFICATION	3.2509000315333503E-5	TEST
//registerColumnType data types	WITHOUT_CLASSIFICATION	0.9999969086336983	WITHOUT_CLASSIFICATION	3.0913663017164143E-6	TEST
// hibernate seems to ignore this type...	WITHOUT_CLASSIFICATION	0.9999934540252822	WITHOUT_CLASSIFICATION	6.545974717857881E-6	TEST
// IBID for current_time and current_date	WITHOUT_CLASSIFICATION	0.9999988067131974	WITHOUT_CLASSIFICATION	1.1932868025409214E-6	TEST
// Tell hibernate to use getBytes instead of getBinaryStream	WITHOUT_CLASSIFICATION	0.9999979907915162	WITHOUT_CLASSIFICATION	2.0092084838876843E-6	TEST
// No batch statements	WITHOUT_CLASSIFICATION	0.9999994288228125	WITHOUT_CLASSIFICATION	5.711771876821739E-7	TEST
/*	WITHOUT_CLASSIFICATION	0.9998694236363511	WITHOUT_CLASSIFICATION	1.305763636488417E-4	TEST
//no pointbase BIT	WITHOUT_CLASSIFICATION	0.9999989123276258	WITHOUT_CLASSIFICATION	1.0876723742047454E-6	TEST
//no pointbase TINYINT	WITHOUT_CLASSIFICATION	0.9999971815488796	WITHOUT_CLASSIFICATION	2.8184511204280052E-6	TEST
// Pointbase has no known variation of a "SELECT ... FOR UPDATE" syntax...	WITHOUT_CLASSIFICATION	0.9999999740579162	WITHOUT_CLASSIFICATION	2.5942083780576094E-8	TEST
//starts with 1, implicitly	WITHOUT_CLASSIFICATION	0.9999333332450155	WITHOUT_CLASSIFICATION	6.666675498443E-5	TEST
// The current_timestamp is more accurate, but only known to be supported // in SQL Server 7.0 and later (i.e., Sybase not known to support it at all)	WITHOUT_CLASSIFICATION	0.999999452578187	WITHOUT_CLASSIFICATION	5.474218130639691E-7	TEST
// SQL Server (at least up through 2005) does not support defining // cascade delete constraints which can circel back to the mutating // table	WITHOUT_CLASSIFICATION	0.9999999875804788	WITHOUT_CLASSIFICATION	1.241952118038275E-8	TEST
// here assume SQLServer2005 using snapshot isolation, which does not have this problem	WITHOUT_CLASSIFICATION	0.9999750104544071	WITHOUT_CLASSIFICATION	2.4989545592914757E-5	TEST
//	WITHOUT_CLASSIFICATION	0.9999674909996846	WITHOUT_CLASSIFICATION	3.2509000315333503E-5	TEST
//	WITHOUT_CLASSIFICATION	0.9999674909996846	WITHOUT_CLASSIFICATION	3.2509000315333503E-5	TEST
//	WITHOUT_CLASSIFICATION	0.9999674909996846	WITHOUT_CLASSIFICATION	3.2509000315333503E-5	TEST
//starts with 1, implicitly	WITHOUT_CLASSIFICATION	0.9999333332450155	WITHOUT_CLASSIFICATION	6.666675498443E-5	TEST
/* package-private */	WITHOUT_CLASSIFICATION	0.9999992174035106	WITHOUT_CLASSIFICATION	7.825964894061801E-7	TEST
// sql server just returns automatically	WITHOUT_CLASSIFICATION	0.9999999021212562	WITHOUT_CLASSIFICATION	9.787874375345576E-8	TEST
//Sybase BIT type does not support null values	WITHOUT_CLASSIFICATION	0.9999696179003493	WITHOUT_CLASSIFICATION	3.0382099650633494E-5	TEST
//	WITHOUT_CLASSIFICATION	0.9999674909996846	WITHOUT_CLASSIFICATION	3.2509000315333503E-5	TEST
// Overridden informational metadata ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999996463793784	WITHOUT_CLASSIFICATION	3.5362062156873624E-7	TEST
//	WITHOUT_CLASSIFICATION	0.9999674909996846	WITHOUT_CLASSIFICATION	3.2509000315333503E-5	TEST
//not null ... (start with 1) is implicit	WITHOUT_CLASSIFICATION	0.9992986051060946	WITHOUT_CLASSIFICATION	7.013948939054205E-4	TEST
// Overridden informational metadata ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999996463793784	WITHOUT_CLASSIFICATION	3.5362062156873624E-7	TEST
// Oracle driver reports to support getGeneratedKeys(), but they only // support the version taking an array of the names of the columns to // be returned (via its RETURNING clause).  No other driver seems to // support this overloaded version.	WITHOUT_CLASSIFICATION	0.9999998022708521	WITHOUT_CLASSIFICATION	1.9772914787129656E-7	TEST
// Multi-param string dialect functions...	WITHOUT_CLASSIFICATION	0.9999999542896858	WITHOUT_CLASSIFICATION	4.571031423161447E-8	TEST
// Multi-param numeric dialect functions...	WITHOUT_CLASSIFICATION	0.9999999693231769	WITHOUT_CLASSIFICATION	3.0676823096561594E-8	TEST
// Multi-param date dialect functions...	WITHOUT_CLASSIFICATION	0.9999999058205836	WITHOUT_CLASSIFICATION	9.417941639562655E-8	TEST
// add another (inner) nested select // add the main query // close off the inner nested select	WITHOUT_CLASSIFICATION	0.9999943760410588	WITHOUT_CLASSIFICATION	5.623958941294835E-6	TEST
// add the main query	WITHOUT_CLASSIFICATION	0.9999987898452974	WITHOUT_CLASSIFICATION	1.2101547025182184E-6	TEST
//add the restriction to the outer select	WITHOUT_CLASSIFICATION	0.9999976284873481	WITHOUT_CLASSIFICATION	2.3715126519550097E-6	TEST
// This assumes you will want to ignore any update counts 	WITHOUT_CLASSIFICATION	0.9999985657038832	WITHOUT_CLASSIFICATION	1.4342961168124584E-6	TEST
// You may still have other ResultSets or update counts left to process here  // but you can't do it now or the ResultSet you just got will be closed 	WITHOUT_CLASSIFICATION	0.9999977252683332	WITHOUT_CLASSIFICATION	2.2747316668325596E-6	TEST
// Overridden informational metadata ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999996463793784	WITHOUT_CLASSIFICATION	3.5362062156873624E-7	TEST
//starts with 1, implicitly	WITHOUT_CLASSIFICATION	0.9999333332450155	WITHOUT_CLASSIFICATION	6.666675498443E-5	TEST
// simple nullability constraint	WITHOUT_CLASSIFICATION	0.9999999677167932	WITHOUT_CLASSIFICATION	3.2283206897557845E-8	TEST
// not final-static to avoid possible classcast exceptions if using different oracle drivers.	WITHOUT_CLASSIFICATION	0.9999999871121783	WITHOUT_CLASSIFICATION	1.2887821764964953E-8	TEST
//	WITHOUT_CLASSIFICATION	0.9999674909996846	WITHOUT_CLASSIFICATION	3.2509000315333503E-5	TEST
// features which change between 8i, 9i, and 10g ~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999998652793112	WITHOUT_CLASSIFICATION	1.3472068883307973E-7	TEST
// features which remain constant across 8i, 9i, and 10g ~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999999864727843	WITHOUT_CLASSIFICATION	1.3527215688132392E-8	TEST
// binary %Stream // character %Stream	WITHOUT_CLASSIFICATION	0.9999996464274485	WITHOUT_CLASSIFICATION	3.535725514860263E-7	TEST
//getDefaultProperties().setProperty(Environment.STATEMENT_BATCH_SIZE, NO_BATCH);	WITHOUT_CLASSIFICATION	0.9999961921110839	WITHOUT_CLASSIFICATION	3.8078889160964415E-6	TEST
// hibernate impelemnts cast in Dialect.java	WITHOUT_CLASSIFICATION	0.9999977090858244	WITHOUT_CLASSIFICATION	2.2909141755802568E-6	TEST
// aggregate functions shouldn't be registered, right? //registerFunction( "list", new StandardSQLFunction("list",Hibernate.STRING) ); // stopped on $list	WITHOUT_CLASSIFICATION	0.999999963192675	WITHOUT_CLASSIFICATION	3.680732497331157E-8	TEST
// DDL support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999960558399955	WITHOUT_CLASSIFICATION	3.944160004520427E-6	TEST
// below is for Cache' that don't have str in 2007.1 there is str and we register str directly	WITHOUT_CLASSIFICATION	0.999998310520411	WITHOUT_CLASSIFICATION	1.6894795889475342E-6	TEST
// note that %string is deprecated	WITHOUT_CLASSIFICATION	0.9999986653212979	WITHOUT_CLASSIFICATION	1.3346787020769582E-6	TEST
// %upper is deprecated	WITHOUT_CLASSIFICATION	0.9999989399937562	WITHOUT_CLASSIFICATION	1.0600062437906118E-6	TEST
// The syntax used to add a foreign key constraint to a table.	WITHOUT_CLASSIFICATION	0.9999999849522685	WITHOUT_CLASSIFICATION	1.504773154599411E-8	TEST
// identifier-commalist	WITHOUT_CLASSIFICATION	0.9999998834103755	WITHOUT_CLASSIFICATION	1.1658962451256605E-7	TEST
// IDENTITY support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999892567189436	WITHOUT_CLASSIFICATION	1.0743281056420603E-5	TEST
// SEQUENCE support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999977706715163	WITHOUT_CLASSIFICATION	2.2293284837368446E-6	TEST
// temporary table support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999972642093892	WITHOUT_CLASSIFICATION	2.735790610852859E-6	TEST
// identifier-commalist	WITHOUT_CLASSIFICATION	0.9999998834103755	WITHOUT_CLASSIFICATION	1.1658962451256605E-7	TEST
// The syntax used to add a column to a table	WITHOUT_CLASSIFICATION	0.9999999624268914	WITHOUT_CLASSIFICATION	3.757310868606755E-8	TEST
// Completely optional cascading drop clause.	WITHOUT_CLASSIFICATION	0.9999998976442974	WITHOUT_CLASSIFICATION	1.0235570261189371E-7	TEST
// lock acquisition support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.999999732590779	WITHOUT_CLASSIFICATION	2.6740922098029835E-7	TEST
// LIMIT support (ala TOP) ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999946330137551	WITHOUT_CLASSIFICATION	5.36698624492919E-6	TEST
// InterSystems Cache' does not current support "SELECT ... FOR UPDATE" syntax... // Set your transaction mode to READ_COMMITTED before using	WITHOUT_CLASSIFICATION	0.999999941290198	WITHOUT_CLASSIFICATION	5.870980207683407E-8	TEST
// Overridden informational metadata ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999996463793784	WITHOUT_CLASSIFICATION	3.5362062156873624E-7	TEST
// Overridden informational metadata ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999996463793784	WITHOUT_CLASSIFICATION	3.5362062156873624E-7	TEST
/*<String>*/	WITHOUT_CLASSIFICATION	0.999990463136804	WITHOUT_CLASSIFICATION	9.536863196030111E-6	TEST
// callable statement support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999996797424615	WITHOUT_CLASSIFICATION	3.202575385817081E-7	TEST
// miscellaneous support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.999999545533616	WITHOUT_CLASSIFICATION	4.544663839383844E-7	TEST
// The keyword used to specify a nullable column.	WITHOUT_CLASSIFICATION	0.999999967914986	WITHOUT_CLASSIFICATION	3.208501406080854E-8	TEST
// Does the LIMIT clause come at the start of the SELECT statement, rather than at the end?	WITHOUT_CLASSIFICATION	0.9999997552341859	WITHOUT_CLASSIFICATION	2.447658140843696E-7	TEST
// Does the LIMIT clause take a "maximum" row number instead of a total number of returned rows?	WITHOUT_CLASSIFICATION	0.999999751118717	WITHOUT_CLASSIFICATION	2.488812830373305E-7	TEST
// The name of the SQL function that transforms a string to lowercase	WITHOUT_CLASSIFICATION	0.9999999916044494	WITHOUT_CLASSIFICATION	8.395550509796527E-9	TEST
// Create an OuterJoinGenerator for this dialect.	WITHOUT_CLASSIFICATION	0.9999983694549832	WITHOUT_CLASSIFICATION	1.6305450167472738E-6	TEST
// The keyword used to insert a row without specifying // any column values	WITHOUT_CLASSIFICATION	0.999999406310335	WITHOUT_CLASSIFICATION	5.936896650253206E-7	TEST
//registerFunction( "trim", new StandardSQLFunction( "trim", Hibernate.STRING ) );	WITHOUT_CLASSIFICATION	0.999999871130754	WITHOUT_CLASSIFICATION	1.2886924594535323E-7	TEST
//skip the FROM keyword in params	WITHOUT_CLASSIFICATION	0.999992741032842	WITHOUT_CLASSIFICATION	7.258967158003521E-6	TEST
/*package*/	WITHOUT_CLASSIFICATION	0.9999887318780084	WITHOUT_CLASSIFICATION	1.1268121991544273E-5	TEST
// potentialTrimCharacterArgIndex = 1 assumes that a // trim-specification has been specified.  we handle the // exception to that explicitly	WITHOUT_CLASSIFICATION	0.9999999680815225	WITHOUT_CLASSIFICATION	3.1918477477271347E-8	TEST
// SQLFunction implementation	WITHOUT_CLASSIFICATION	0.9999999025151667	WITHOUT_CLASSIFICATION	9.748483332182471E-8	TEST
// conceivable that the dialect ctor could throw HibernateExceptions, so don't re-wrap	WITHOUT_CLASSIFICATION	0.9999999889797405	WITHOUT_CLASSIFICATION	1.1020259393850078E-8	TEST
// register the standard dialect resolver	WITHOUT_CLASSIFICATION	0.9999993341879129	WITHOUT_CLASSIFICATION	6.658120870902643E-7	TEST
// register resolvers set via Environment property	WITHOUT_CLASSIFICATION	0.9999969358014208	WITHOUT_CLASSIFICATION	3.0641985791904124E-6	TEST
// kept for backward compatibility until after the 3.1beta5 release of HA	WITHOUT_CLASSIFICATION	0.9999996105618696	WITHOUT_CLASSIFICATION	3.894381303749879E-7	TEST
//cache the hashcode	WITHOUT_CLASSIFICATION	0.9999984136427512	WITHOUT_CLASSIFICATION	1.5863572488065612E-6	TEST
// the CascadingAction contract ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999999647430531	WITHOUT_CLASSIFICATION	3.525694688932855E-8	TEST
// the CascadingAction implementations ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999997426243703	WITHOUT_CLASSIFICATION	2.573756296472891E-7	TEST
// delete does cascade to uninitialized collections	WITHOUT_CLASSIFICATION	0.9999996355187026	WITHOUT_CLASSIFICATION	3.6448129729539537E-7	TEST
// orphans should be deleted during delete	WITHOUT_CLASSIFICATION	0.99999906162795	WITHOUT_CLASSIFICATION	9.383720499648647E-7	TEST
/*(LockMode) anything*/	WITHOUT_CLASSIFICATION	0.9999925994533129	WITHOUT_CLASSIFICATION	7.4005466871606E-6	TEST
// lock doesn't cascade to uninitialized collections	WITHOUT_CLASSIFICATION	0.9999988079985407	WITHOUT_CLASSIFICATION	1.1920014593390267E-6	TEST
// refresh doesn't cascade to uninitialized collections	WITHOUT_CLASSIFICATION	0.9999991285496332	WITHOUT_CLASSIFICATION	8.714503668553875E-7	TEST
// evicts don't cascade to uninitialized collections	WITHOUT_CLASSIFICATION	0.9999996191785238	WITHOUT_CLASSIFICATION	3.8082147618699676E-7	TEST
// saves / updates don't cascade to uninitialized collections	WITHOUT_CLASSIFICATION	0.9999987405609362	WITHOUT_CLASSIFICATION	1.2594390638697706E-6	TEST
// orphans should be deleted during save/update	WITHOUT_CLASSIFICATION	0.9999988591227955	WITHOUT_CLASSIFICATION	1.1408772044017287E-6	TEST
// for deprecated saveOrUpdateCopy()	WITHOUT_CLASSIFICATION	0.9999995391518208	WITHOUT_CLASSIFICATION	4.608481790972808E-7	TEST
// persists don't cascade to uninitialized collections	WITHOUT_CLASSIFICATION	0.9999992102725161	WITHOUT_CLASSIFICATION	7.897274837908219E-7	TEST
//a proxy cannot be transient and it breaks ForeignKeys.isTransient	WITHOUT_CLASSIFICATION	0.9999991148359094	WITHOUT_CLASSIFICATION	8.851640906395339E-7	TEST
// replicate does cascade to uninitialized collections	WITHOUT_CLASSIFICATION	0.9999995173942111	WITHOUT_CLASSIFICATION	4.826057889286615E-7	TEST
// static helper methods ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999997263819546	WITHOUT_CLASSIFICATION	2.7361804539449796E-7	TEST
// handles arrays and newly instantiated collections	WITHOUT_CLASSIFICATION	0.9999999335479368	WITHOUT_CLASSIFICATION	6.645206320800753E-8	TEST
// Actually the semantics of the next three are really "Bag" // Note that, unlike objects, collection insertions, updates, // deletions are not really remembered between flushes. We // just re-use the same Lists for convenience.	WITHOUT_CLASSIFICATION	0.9999990434765421	WITHOUT_CLASSIFICATION	9.565234579244652E-7	TEST
// Add these directly to the executions queue	WITHOUT_CLASSIFICATION	0.9999999620920116	WITHOUT_CLASSIFICATION	3.790798841520664E-8	TEST
// continue loop	WITHOUT_CLASSIFICATION	0.999999960629241	WITHOUT_CLASSIFICATION	3.9370759100954874E-8	TEST
//sort the updates by fk	WITHOUT_CLASSIFICATION	0.9998484157370338	WITHOUT_CLASSIFICATION	1.5158426296625686E-4	TEST
//sort the updates by pk	WITHOUT_CLASSIFICATION	0.9998279077952199	WITHOUT_CLASSIFICATION	1.720922047801668E-4	TEST
// the mapping of entity names to their latest batch numbers.	WITHOUT_CLASSIFICATION	0.9999968042249818	WITHOUT_CLASSIFICATION	3.195775018165231E-6	TEST
// the map of batch numbers to EntityInsertAction lists	WITHOUT_CLASSIFICATION	0.9999999126395673	WITHOUT_CLASSIFICATION	8.736043260657542E-8	TEST
//optimize the hash size to eliminate a rehash.	WITHOUT_CLASSIFICATION	0.9999936239075644	WITHOUT_CLASSIFICATION	6.37609243565825E-6	TEST
// the list of entity names that indicate the batch number	WITHOUT_CLASSIFICATION	0.9999999260686171	WITHOUT_CLASSIFICATION	7.393138286918122E-8	TEST
// remove the current element from insertions. It will be added back later.	WITHOUT_CLASSIFICATION	0.9999998075831918	WITHOUT_CLASSIFICATION	1.9241680802327764E-7	TEST
// the entity associated with the current action.	WITHOUT_CLASSIFICATION	0.9999995733594566	WITHOUT_CLASSIFICATION	4.2664054338332976E-7	TEST
// There is already an existing batch for this type of entity. // Check to see if the latest batch is acceptable.	WITHOUT_CLASSIFICATION	0.9999860121782812	WITHOUT_CLASSIFICATION	1.3987821718740101E-5	TEST
// now rebuild the insertions list. There is a batch for each entry in the name list.	WITHOUT_CLASSIFICATION	0.9999997692747975	WITHOUT_CLASSIFICATION	2.3072520243962475E-7	TEST
// the current batch number is the latest batch for this entity type.	WITHOUT_CLASSIFICATION	0.9999836816587144	WITHOUT_CLASSIFICATION	1.6318341285530905E-5	TEST
// loop through all the associations of the current entity and make sure that they are processed // before the current batch number	WITHOUT_CLASSIFICATION	0.9999998366696039	WITHOUT_CLASSIFICATION	1.633303961167387E-7	TEST
// find the batch number associated with the current association, if any.	WITHOUT_CLASSIFICATION	0.999999559557148	WITHOUT_CLASSIFICATION	4.4044285193072484E-7	TEST
// create a new batch for this type. The batch number is the number of current batches.	WITHOUT_CLASSIFICATION	0.9999988637870515	WITHOUT_CLASSIFICATION	1.1362129485375025E-6	TEST
// loop through all the associated entities and make sure they have been // processed before the latest // batch associated with this entity type.	WITHOUT_CLASSIFICATION	0.9989092914082701	WITHOUT_CLASSIFICATION	0.0010907085917298265	TEST
// since this entity will now be processed in the latest possible batch, // we can be assured that it will come after all other associations, // there's not need to continue checking.	WITHOUT_CLASSIFICATION	0.9999960375316735	WITHOUT_CLASSIFICATION	3.96246832645959E-6	TEST
//cascade to current collection elements	WITHOUT_CLASSIFICATION	0.9999999210973277	WITHOUT_CLASSIFICATION	7.890267219980086E-8	TEST
//not really necessary, but good for consistency...	WITHOUT_CLASSIFICATION	0.9999986853823016	WITHOUT_CLASSIFICATION	1.314617698377092E-6	TEST
// we can't cascade to non-embedded elements	WITHOUT_CLASSIFICATION	0.9999999682392431	WITHOUT_CLASSIFICATION	3.176075685058234E-8	TEST
//a newly instantiated collection can't have orphans	WITHOUT_CLASSIFICATION	0.999999134550492	WITHOUT_CLASSIFICATION	8.654495079936452E-7	TEST
// handle orphaned entities!!	WITHOUT_CLASSIFICATION	0.9999984383375408	WITHOUT_CLASSIFICATION	1.5616624592750425E-6	TEST
// Loaded entity instances, by EntityUniqueKey	WITHOUT_CLASSIFICATION	0.9999999650692691	WITHOUT_CLASSIFICATION	3.493073091615968E-8	TEST
// Identity map of EntityEntry instances, by the entity instance	WITHOUT_CLASSIFICATION	0.9999999528734179	WITHOUT_CLASSIFICATION	4.712658205621691E-8	TEST
// Entity proxies, by EntityKey	WITHOUT_CLASSIFICATION	0.9999993994769516	WITHOUT_CLASSIFICATION	6.005230484259036E-7	TEST
// Snapshots of current database state for entities // that have *not* been loaded	WITHOUT_CLASSIFICATION	0.9999998743820558	WITHOUT_CLASSIFICATION	1.2561794426049105E-7	TEST
// Identity map of array holder ArrayHolder instances, by the array instance	WITHOUT_CLASSIFICATION	0.999999945177803	WITHOUT_CLASSIFICATION	5.4822197082709915E-8	TEST
// Collection wrappers, by the CollectionKey //key=CollectionKey, value=PersistentCollection	WITHOUT_CLASSIFICATION	0.9999999335290414	WITHOUT_CLASSIFICATION	6.647095858246228E-8	TEST
// Set of EntityKeys of deleted objects	WITHOUT_CLASSIFICATION	0.9999999584206203	WITHOUT_CLASSIFICATION	4.1579379575181604E-8	TEST
// properties that we have tried to load, and not found in the database	WITHOUT_CLASSIFICATION	0.9999999095943815	WITHOUT_CLASSIFICATION	9.040561851711442E-8	TEST
// A list of collection wrappers that were instantiating during result set // processing, that we will need to initialize at the end of the query	WITHOUT_CLASSIFICATION	0.9999998766463086	WITHOUT_CLASSIFICATION	1.2335369136402625E-7	TEST
// A container for collections we load up when the owning entity is not // yet loaded ... for now, this is purely transient!	WITHOUT_CLASSIFICATION	0.999999903759633	WITHOUT_CLASSIFICATION	9.624036694387128E-8	TEST
// Downgrade locks	WITHOUT_CLASSIFICATION	0.9999998748491881	WITHOUT_CLASSIFICATION	1.2515081204281946E-7	TEST
// any earlier proxy takes precedence	WITHOUT_CLASSIFICATION	0.999999322295795	WITHOUT_CLASSIFICATION	6.777042049502341E-7	TEST
//unwrap the object	WITHOUT_CLASSIFICATION	0.9999992898945058	WITHOUT_CLASSIFICATION	7.101054942291483E-7	TEST
//initialize + unwrap the object	WITHOUT_CLASSIFICATION	0.9999976547539373	WITHOUT_CLASSIFICATION	2.345246062751609E-6	TEST
//return the proxied object	WITHOUT_CLASSIFICATION	0.9999988603185455	WITHOUT_CLASSIFICATION	1.1396814544909536E-6	TEST
//overwrite old proxy	WITHOUT_CLASSIFICATION	0.9999886267011435	WITHOUT_CLASSIFICATION	1.1373298856374993E-5	TEST
// early exit...	WITHOUT_CLASSIFICATION	0.9999996706226267	WITHOUT_CLASSIFICATION	3.293773732797779E-7	TEST
// or should it actually throw an exception?	WITHOUT_CLASSIFICATION	0.9999995086949156	WITHOUT_CLASSIFICATION	4.913050843756752E-7	TEST
//treat it just like a new collection	WITHOUT_CLASSIFICATION	0.9999996911785378	WITHOUT_CLASSIFICATION	3.088214621584401E-7	TEST
//do this work only at the very highest level of the load //don't let this method be called recursively	WITHOUT_CLASSIFICATION	0.9999917900313317	WITHOUT_CLASSIFICATION	8.209968668392316E-6	TEST
//note that each iteration of the loop may add new elements	WITHOUT_CLASSIFICATION	0.9999997613233352	WITHOUT_CLASSIFICATION	2.3867666475990284E-7	TEST
//it might be an unwrapped collection reference! //try to find a wrapper (slowish)	WITHOUT_CLASSIFICATION	0.9999994055664495	WITHOUT_CLASSIFICATION	5.944335504674822E-7	TEST
/*public boolean isNonExistant(EntityKey key) {	WITHOUT_CLASSIFICATION	0.9999963081354737	WITHOUT_CLASSIFICATION	3.6918645264058343E-6	TEST
/*public boolean isNonExistant(EntityUniqueKey key) {	WITHOUT_CLASSIFICATION	0.9999952797387907	WITHOUT_CLASSIFICATION	4.72026120931174E-6	TEST
// iterate all the entities currently associated with the persistence context.	WITHOUT_CLASSIFICATION	0.9999994572648387	WITHOUT_CLASSIFICATION	5.427351612793508E-7	TEST
// does this entity entry pertain to the entity persister in which we are interested (owner)?	WITHOUT_CLASSIFICATION	0.999999303820903	WITHOUT_CLASSIFICATION	6.961790969963661E-7	TEST
//check if the managed object is the parent	WITHOUT_CLASSIFICATION	0.9999903087863311	WITHOUT_CLASSIFICATION	9.691213668909362E-6	TEST
// otherwise, the proxy was pruned during the serialization process	WITHOUT_CLASSIFICATION	0.9999995501612032	WITHOUT_CLASSIFICATION	4.498387968429381E-7	TEST
// adds remove as a sort-of alias for delete...	WITHOUT_CLASSIFICATION	0.9999990644876083	WITHOUT_CLASSIFICATION	9.355123916766458E-7	TEST
//bad cast	WITHOUT_CLASSIFICATION	0.9999924192382953	WITHOUT_CLASSIFICATION	7.58076170467335E-6	TEST
//return lhsPersister.getSubclassPropertyColumnNames(property);	WITHOUT_CLASSIFICATION	0.9999933012192153	WITHOUT_CLASSIFICATION	6.698780784669525E-6	TEST
//property-refs for associations defined on a //component are not supported, so no need to slice	WITHOUT_CLASSIFICATION	0.9999897921121054	WITHOUT_CLASSIFICATION	1.0207887894694016E-5	TEST
//if there is no property-ref, assume the join //is to the subclass table (ie. the table of the //subclass that the association belongs to)	WITHOUT_CLASSIFICATION	0.9999978229495751	WITHOUT_CLASSIFICATION	2.177050424929381E-6	TEST
//handle a property-ref	WITHOUT_CLASSIFICATION	0.9999825934665458	WITHOUT_CLASSIFICATION	1.740653345416515E-5	TEST
/*NativeSQLQueryReturn*/	WITHOUT_CLASSIFICATION	0.9999944805163082	WITHOUT_CLASSIFICATION	5.519483691761302E-6	TEST
//final boolean forceCacheRefresh,	WITHOUT_CLASSIFICATION	0.9999960173042384	WITHOUT_CLASSIFICATION	3.982695761611708E-6	TEST
// why is all others non final ?	WITHOUT_CLASSIFICATION	0.9999995976197953	WITHOUT_CLASSIFICATION	4.023802046851121E-7	TEST
//this.forceCacheRefresh = forceCacheRefresh;	WITHOUT_CLASSIFICATION	0.9999960141691016	WITHOUT_CLASSIFICATION	3.985830898421021E-6	TEST
// HELLA IMPORTANT OPTIMIZATION!!!	WITHOUT_CLASSIFICATION	0.999992577780848	WITHOUT_CLASSIFICATION	7.422219151942597E-6	TEST
/*return that.type.equals(type) && 	WITHOUT_CLASSIFICATION	0.9999883849008677	WITHOUT_CLASSIFICATION	1.1615099132319517E-5	TEST
//Must occur after resolving identifiers!	WITHOUT_CLASSIFICATION	0.9999903054870684	WITHOUT_CLASSIFICATION	9.694512931693395E-6	TEST
//take a snapshot	WITHOUT_CLASSIFICATION	0.9999795119801053	WITHOUT_CLASSIFICATION	2.0488019894700536E-5	TEST
// do a check	WITHOUT_CLASSIFICATION	0.9999998427497193	WITHOUT_CLASSIFICATION	1.5725028074463642E-7	TEST
// the owning entity may have been deleted and its identifier unset due to // identifier-rollback; in which case, try to look up its identifier from // the persistence context	WITHOUT_CLASSIFICATION	0.9999999491510482	WITHOUT_CLASSIFICATION	5.0848951966930595E-8	TEST
// do the work	WITHOUT_CLASSIFICATION	0.9999991711573596	WITHOUT_CLASSIFICATION	8.288426404125083E-7	TEST
// We've been here before	WITHOUT_CLASSIFICATION	0.9999587072689086	WITHOUT_CLASSIFICATION	4.1292731091504546E-5	TEST
// it is or was referenced _somewhere_	WITHOUT_CLASSIFICATION	0.9999972591891627	WITHOUT_CLASSIFICATION	2.740810837312729E-6	TEST
// do the work	WITHOUT_CLASSIFICATION	0.9999991711573596	WITHOUT_CLASSIFICATION	8.288426404125083E-7	TEST
// if either its role changed,	WITHOUT_CLASSIFICATION	0.9999998099964298	WITHOUT_CLASSIFICATION	1.9000357029409406E-7	TEST
// or its key changed	WITHOUT_CLASSIFICATION	0.9999995873032094	WITHOUT_CLASSIFICATION	4.126967906227175E-7	TEST
// we will need to create new entries	WITHOUT_CLASSIFICATION	0.9999997045873658	WITHOUT_CLASSIFICATION	2.9541263425268485E-7	TEST
// we will need to remove ye olde entries	WITHOUT_CLASSIFICATION	0.9999977187616576	WITHOUT_CLASSIFICATION	2.2812383423906476E-6	TEST
// force initialize!	WITHOUT_CLASSIFICATION	0.9999997705556679	WITHOUT_CLASSIFICATION	2.2944433210977548E-7	TEST
// else if it's elements changed	WITHOUT_CLASSIFICATION	0.9999997591767672	WITHOUT_CLASSIFICATION	2.4082323280029333E-7	TEST
//ATTRIBUTES MAINTAINED BETWEEN FLUSH CYCLES	WITHOUT_CLASSIFICATION	0.9999535394895906	WITHOUT_CLASSIFICATION	4.6460510409280703E-5	TEST
// session-start/post-flush persistent state	WITHOUT_CLASSIFICATION	0.9999993674596452	WITHOUT_CLASSIFICATION	6.325403547449165E-7	TEST
// allow the CollectionSnapshot to be serialized	WITHOUT_CLASSIFICATION	0.9999999167021242	WITHOUT_CLASSIFICATION	8.329787585766981E-8	TEST
// ATTRIBUTES USED ONLY DURING FLUSH CYCLE	WITHOUT_CLASSIFICATION	0.9999966185836828	WITHOUT_CLASSIFICATION	3.381416317143494E-6	TEST
// "current" means the reference that was found during flush() 	WITHOUT_CLASSIFICATION	0.9999999173571339	WITHOUT_CLASSIFICATION	8.26428660958233E-8	TEST
// "loaded" means the reference that is consistent  // with the current database state	WITHOUT_CLASSIFICATION	0.9999999433165346	WITHOUT_CLASSIFICATION	5.6683465259396446E-8	TEST
// during flush, we navigate the object graph to // collections and decide what to do with them	WITHOUT_CLASSIFICATION	0.9999999511325444	WITHOUT_CLASSIFICATION	4.886745559811336E-8	TEST
// if we instantiate a collection during the flush() process, // we must ignore it for the rest of the flush()	WITHOUT_CLASSIFICATION	0.999999807572608	WITHOUT_CLASSIFICATION	1.92427392074689E-7	TEST
// new collections that get found + wrapped // during flush shouldn't be ignored	WITHOUT_CLASSIFICATION	0.9999998917059351	WITHOUT_CLASSIFICATION	1.0829406498076452E-7	TEST
//a newly wrapped collection is NOT dirty (or we get unnecessary version updates)	WITHOUT_CLASSIFICATION	0.9999422780643904	WITHOUT_CLASSIFICATION	5.772193560972026E-5	TEST
//collection.clearDirty()	WITHOUT_CLASSIFICATION	0.999997515356864	WITHOUT_CLASSIFICATION	2.484643136008148E-6	TEST
//collection.clearDirty()	WITHOUT_CLASSIFICATION	0.999997515356864	WITHOUT_CLASSIFICATION	2.484643136008148E-6	TEST
// detached collections that get found + reattached // during flush shouldn't be ignored	WITHOUT_CLASSIFICATION	0.9999999378781574	WITHOUT_CLASSIFICATION	6.212184256509364E-8	TEST
//optimization	WITHOUT_CLASSIFICATION	0.9999892959730082	WITHOUT_CLASSIFICATION	1.0704026991729225E-5	TEST
//optimization //optimization	WITHOUT_CLASSIFICATION	0.999993399033292	WITHOUT_CLASSIFICATION	6.6009667080164095E-6	TEST
//re-snapshot	WITHOUT_CLASSIFICATION	0.999979742879927	WITHOUT_CLASSIFICATION	2.0257120073092988E-5	TEST
// for convenience to save some lookups	WITHOUT_CLASSIFICATION	0.9999998279118091	WITHOUT_CLASSIFICATION	1.7208819083874497E-7	TEST
//NOTE: this is not updated when properties are fetched lazily!	WITHOUT_CLASSIFICATION	0.9994156578306109	WITHOUT_CLASSIFICATION	5.843421693891179E-4	TEST
//memory optimization	WITHOUT_CLASSIFICATION	0.9999964228344039	WITHOUT_CLASSIFICATION	3.577165596049658E-6	TEST
// use the id value of a newly instantiated instance as the unsaved-value	WITHOUT_CLASSIFICATION	0.9999999754467402	WITHOUT_CLASSIFICATION	2.4553259858508137E-8	TEST
// copied from Session:	WITHOUT_CLASSIFICATION	0.9999992672764764	WITHOUT_CLASSIFICATION	7.327235235324166E-7	TEST
// this should not happen since the DTD prevents it	WITHOUT_CLASSIFICATION	0.9999993679271776	WITHOUT_CLASSIFICATION	6.320728223915191E-7	TEST
// JoinProcessor needs to know if the where clause fragment came from a dynamic filter or not so it // can put the where clause fragment in the right place in the SQL AST.   'hasFilterCondition' keeps track // of that fact.	WITHOUT_CLASSIFICATION	0.9999999876770536	WITHOUT_CLASSIFICATION	1.2322946448299892E-8	TEST
// the current join represents the join between a many-to-many association table // and its "target" table.  Here we need to apply any additional filters // defined specifically on the many-to-many	WITHOUT_CLASSIFICATION	0.999999884028631	WITHOUT_CLASSIFICATION	1.1597136899767887E-7	TEST
//check basic level one nullablilty	WITHOUT_CLASSIFICATION	0.999999168964039	WITHOUT_CLASSIFICATION	8.310359611110364E-7	TEST
//values is not null and is checkable, we'll look deeper	WITHOUT_CLASSIFICATION	0.9999885137183255	WITHOUT_CLASSIFICATION	1.1486281674589023E-5	TEST
//for non null args, check for components and elements containing components	WITHOUT_CLASSIFICATION	0.9999998382347106	WITHOUT_CLASSIFICATION	1.6176528942843637E-7	TEST
//cache the hashcode	WITHOUT_CLASSIFICATION	0.9999984136427512	WITHOUT_CLASSIFICATION	1.5863572488065612E-6	TEST
//persistent collections may have components	WITHOUT_CLASSIFICATION	0.9999890611608728	WITHOUT_CLASSIFICATION	1.0938839127181095E-5	TEST
//check for all components values in the collection	WITHOUT_CLASSIFICATION	0.9999998500679999	WITHOUT_CLASSIFICATION	1.4993200016432084E-7	TEST
/* will check current level if some of them are not null	WITHOUT_CLASSIFICATION	0.999995722891352	WITHOUT_CLASSIFICATION	4.277108647968151E-6	TEST
//do the test	WITHOUT_CLASSIFICATION	0.9976909450732577	WITHOUT_CLASSIFICATION	0.002309054926742274	TEST
// if its an uninitialized proxy it can't be transient	WITHOUT_CLASSIFICATION	0.9999997007709973	WITHOUT_CLASSIFICATION	2.992290026605858E-7	TEST
//unwrap it	WITHOUT_CLASSIFICATION	0.9999965261655505	WITHOUT_CLASSIFICATION	3.473834449502485E-6	TEST
// See if the entity is already bound to this session, if not look at the // entity identifier and assume that the entity is persistent if the // id is not "unsaved" (that is, we rely on foreign keys to keep // database integrity)	WITHOUT_CLASSIFICATION	0.9999998814408453	WITHOUT_CLASSIFICATION	1.185591546941748E-7	TEST
// an unfetched association can only point to // an entity that already exists in the db	WITHOUT_CLASSIFICATION	0.9999999914206605	WITHOUT_CLASSIFICATION	8.579339365049694E-9	TEST
// let the interceptor inspect the instance to decide	WITHOUT_CLASSIFICATION	0.9999999748947438	WITHOUT_CLASSIFICATION	2.5105256240319653E-8	TEST
// let the persister inspect the instance to decide	WITHOUT_CLASSIFICATION	0.9999998910946623	WITHOUT_CLASSIFICATION	1.0890533774388976E-7	TEST
// we use the assumed value, if there is one, to avoid hitting // the database	WITHOUT_CLASSIFICATION	0.9999994843079729	WITHOUT_CLASSIFICATION	5.156920270966826E-7	TEST
// hit the database, after checking the session cache for a snapshot	WITHOUT_CLASSIFICATION	0.999999488052918	WITHOUT_CLASSIFICATION	5.119470818301444E-7	TEST
// context-entity-identifier returns null explicitly if the entity // is not associated with the persistence context; so make some // deeper checks...	WITHOUT_CLASSIFICATION	0.9999968527276732	WITHOUT_CLASSIFICATION	3.147272326779545E-6	TEST
//int count = 0;	WITHOUT_CLASSIFICATION	0.9999992452192451	WITHOUT_CLASSIFICATION	7.547807549364548E-7	TEST
//the first key found after the given key	WITHOUT_CLASSIFICATION	0.9999542708167666	WITHOUT_CLASSIFICATION	4.5729183233433826E-5	TEST
//checkForEnd = false;	WITHOUT_CLASSIFICATION	0.9999981654121818	WITHOUT_CLASSIFICATION	1.834587818204082E-6	TEST
//count++;	WITHOUT_CLASSIFICATION	0.9999931742776569	WITHOUT_CLASSIFICATION	6.82572234310782E-6	TEST
//end of array, start filling again from start	WITHOUT_CLASSIFICATION	0.9999961254627215	WITHOUT_CLASSIFICATION	3.874537278436415E-6	TEST
//we ran out of keys to try	WITHOUT_CLASSIFICATION	0.9999982487027145	WITHOUT_CLASSIFICATION	1.7512972854849207E-6	TEST
//first element of array is reserved for the actual instance we are loading!	WITHOUT_CLASSIFICATION	0.9999994622379949	WITHOUT_CLASSIFICATION	5.377620050686076E-7	TEST
//the first id found after the given id	WITHOUT_CLASSIFICATION	0.9999572843513131	WITHOUT_CLASSIFICATION	4.271564868688092E-5	TEST
//we ran out of ids to try	WITHOUT_CLASSIFICATION	0.9999994561937825	WITHOUT_CLASSIFICATION	5.438062175928517E-7	TEST
// look for existing collection as part of the persistence context	WITHOUT_CLASSIFICATION	0.9999992641321185	WITHOUT_CLASSIFICATION	7.358678815616362E-7	TEST
// ignore this row of results! Note the early exit	WITHOUT_CLASSIFICATION	0.9999965420151337	WITHOUT_CLASSIFICATION	3.4579848663569208E-6	TEST
// initialize this collection	WITHOUT_CLASSIFICATION	0.9999994637780786	WITHOUT_CLASSIFICATION	5.362219215128899E-7	TEST
// create one	WITHOUT_CLASSIFICATION	0.9999998181230147	WITHOUT_CLASSIFICATION	1.818769852351486E-7	TEST
// warning: can cause a recursive calls! (proxy initialization)	WITHOUT_CLASSIFICATION	0.9999999774176644	WITHOUT_CLASSIFICATION	2.2582335453650863E-8	TEST
// there were no queued additions // and the role has a cache	WITHOUT_CLASSIFICATION	0.9999998794450904	WITHOUT_CLASSIFICATION	1.2055490965496947E-7	TEST
// and this is not a forced initialization during flush	WITHOUT_CLASSIFICATION	0.9999984345710583	WITHOUT_CLASSIFICATION	1.565428941815868E-6	TEST
// some filters affecting the collection are enabled on the session, so do not do the put into the cache.	WITHOUT_CLASSIFICATION	0.9999999795702657	WITHOUT_CLASSIFICATION	2.0429734335223112E-8	TEST
// cleanup code ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.999999828570119	WITHOUT_CLASSIFICATION	1.7142988095463867E-7	TEST
// loading collection xrefs ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.999999888718581	WITHOUT_CLASSIFICATION	1.1128141899022511E-7	TEST
// Collection load contexts ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999999433553837	WITHOUT_CLASSIFICATION	5.664461636959883E-8	TEST
// simple cache of param metadata based on query string.  Ideally, the // original "user-supplied query" string should be used to retreive this // metadata (i.e., not the para-list-expanded query string) to avoid // unnecessary cache entries. // Used solely for caching param metadata for native-sql queries, see // getSQLParameterMetadata() for a discussion as to why...	WITHOUT_CLASSIFICATION	0.9999999530613778	WITHOUT_CLASSIFICATION	4.6938622293432224E-8	TEST
// the cache of the actual plans...	WITHOUT_CLASSIFICATION	0.999999863402473	WITHOUT_CLASSIFICATION	1.365975268970919E-7	TEST
/*package*/	WITHOUT_CLASSIFICATION	0.9999887318780084	WITHOUT_CLASSIFICATION	1.1268121991544273E-5	TEST
/*package*/	WITHOUT_CLASSIFICATION	0.9999887318780084	WITHOUT_CLASSIFICATION	1.1268121991544273E-5	TEST
// assumes that types are all of span 1	WITHOUT_CLASSIFICATION	0.9999998323824336	WITHOUT_CLASSIFICATION	1.6761756645533513E-7	TEST
// for native-sql queries, the param metadata is determined outside // any relation to a query plan, because query plan creation and/or // retreival for a native-sql query depends on all of the return // types having been set, which might not be the case up-front when // param metadata would be most useful	WITHOUT_CLASSIFICATION	0.9999999791024045	WITHOUT_CLASSIFICATION	2.0897595486796174E-8	TEST
// don't care...	WITHOUT_CLASSIFICATION	0.9999997496520417	WITHOUT_CLASSIFICATION	2.503479582256417E-7	TEST
// Recognition code ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999998782033986	WITHOUT_CLASSIFICATION	1.2179660137387362E-7	TEST
// don't care...	WITHOUT_CLASSIFICATION	0.9999997496520417	WITHOUT_CLASSIFICATION	2.503479582256417E-7	TEST
// NOTE : firstRow is zero-based	WITHOUT_CLASSIFICATION	0.9999745490719749	WITHOUT_CLASSIFICATION	2.54509280251319E-5	TEST
// break the outer loop !!!	WITHOUT_CLASSIFICATION	0.9999986731380898	WITHOUT_CLASSIFICATION	1.3268619102138356E-6	TEST
// named parameter	WITHOUT_CLASSIFICATION	0.9999989590531421	WITHOUT_CLASSIFICATION	1.0409468579445509E-6	TEST
// could be either an ordinal or JPA-positional parameter	WITHOUT_CLASSIFICATION	0.9999998113310744	WITHOUT_CLASSIFICATION	1.8866892564305712E-7	TEST
// a peek ahead showed this as an JPA-positional parameter	WITHOUT_CLASSIFICATION	0.999998636127816	WITHOUT_CLASSIFICATION	1.3638721838881625E-6	TEST
// make sure this "name" is an integral	WITHOUT_CLASSIFICATION	0.9999895830158599	WITHOUT_CLASSIFICATION	1.0416984139998185E-5	TEST
// pre-determine and cache the hashcode	WITHOUT_CLASSIFICATION	0.9999994366186767	WITHOUT_CLASSIFICATION	5.633813231649267E-7	TEST
// perform the actual work	WITHOUT_CLASSIFICATION	0.9999991427951612	WITHOUT_CLASSIFICATION	8.572048386576987E-7	TEST
// if everything went ok, commit the transaction and close the obtained // connection handle...	WITHOUT_CLASSIFICATION	0.9999999671272389	WITHOUT_CLASSIFICATION	3.287276101132731E-8	TEST
// at some point the processing went bad, so we need to: //      1) make sure the connection handle gets released //      2) try to cleanup the JTA context as much as possible	WITHOUT_CLASSIFICATION	0.9999993256071499	WITHOUT_CLASSIFICATION	6.743928501388953E-7	TEST
// finally handle the exception	WITHOUT_CLASSIFICATION	0.9999996999138119	WITHOUT_CLASSIFICATION	3.000861880485231E-7	TEST
// a "detached" collection that belonged to a different entity	WITHOUT_CLASSIFICATION	0.9999999984595734	WITHOUT_CLASSIFICATION	1.5404265027243412E-9	TEST
//saveOrUpdateCopy() is deprecated!	WITHOUT_CLASSIFICATION	0.9999903644549074	WITHOUT_CLASSIFICATION	9.635545092564625E-6	TEST
// collectionPersister should not be null, but we don't want to throw // an exception if it is null	WITHOUT_CLASSIFICATION	0.9999999393328268	WITHOUT_CLASSIFICATION	6.06671731571215E-8	TEST
// otherwise a null or brand new collection // this will also (inefficiently) handle arrays, which // have no snapshot, so we can't do any better //processArrayOrNewCollection(collection, type);	WITHOUT_CLASSIFICATION	0.9999996441803802	WITHOUT_CLASSIFICATION	3.5581961975172354E-7	TEST
// a "detached" collection that originally belonged to the same entity	WITHOUT_CLASSIFICATION	0.9999999982697106	WITHOUT_CLASSIFICATION	1.7302894075706775E-9	TEST
//do nothing	WITHOUT_CLASSIFICATION	0.9999872101641989	WITHOUT_CLASSIFICATION	1.2789835801183941E-5	TEST
//do nothing	WITHOUT_CLASSIFICATION	0.9999872101641989	WITHOUT_CLASSIFICATION	1.2789835801183941E-5	TEST
//Force a substitution!	WITHOUT_CLASSIFICATION	0.9999993630216408	WITHOUT_CLASSIFICATION	6.369783591063424E-7	TEST
// The user requested a "greater" (i.e. more restrictive) form of // pessimistic lock	WITHOUT_CLASSIFICATION	0.9999860633415931	WITHOUT_CLASSIFICATION	1.3936658406858614E-5	TEST
// the database now holds a lock + the object is flushed from the cache, // so release the soft lock	WITHOUT_CLASSIFICATION	0.9999999853316235	WITHOUT_CLASSIFICATION	1.4668376601312921E-8	TEST
// now update the object .. has to be outside the main if block above (because of collections)	WITHOUT_CLASSIFICATION	0.9999999891405049	WITHOUT_CLASSIFICATION	1.0859494993204258E-8	TEST
// Search for collections by reachability, updating their role. // We don't want to touch collections reachable from a deleted object	WITHOUT_CLASSIFICATION	0.9999999810580658	WITHOUT_CLASSIFICATION	1.8941934241979036E-8	TEST
// this is a situation where the entity id is assigned by a post-insert generator // and was saved outside the transaction forcing it to be delayed	WITHOUT_CLASSIFICATION	0.9999983883652618	WITHOUT_CLASSIFICATION	1.6116347382070724E-6	TEST
// NOTE: we need to do the wrap here even if its not "dirty", // because collections need wrapping but changes to _them_ // don't dirty the container. Also, for versioned data, we // need to wrap before calling searchForDirtyCollections	WITHOUT_CLASSIFICATION	0.9999980123518659	WITHOUT_CLASSIFICATION	1.9876481340369E-6	TEST
//grab its state saved at deletion	WITHOUT_CLASSIFICATION	0.9999985498119474	WITHOUT_CLASSIFICATION	1.4501880526285632E-6	TEST
// grab its current state	WITHOUT_CLASSIFICATION	0.9999998981904537	WITHOUT_CLASSIFICATION	1.0180954633670191E-7	TEST
// schedule the update // note that we intentionally do _not_ pass in currentPersistentState!	WITHOUT_CLASSIFICATION	0.9999999335755492	WITHOUT_CLASSIFICATION	6.64244508727161E-8	TEST
// substitutes into values by side-effect	WITHOUT_CLASSIFICATION	0.9999998543693432	WITHOUT_CLASSIFICATION	1.4563065661507367E-7	TEST
// give the Interceptor a chance to process property values, if the properties // were modified by the Interceptor, we need to set them back to the object	WITHOUT_CLASSIFICATION	0.9999992349047935	WITHOUT_CLASSIFICATION	7.650952065200384E-7	TEST
// compare to cached state (ignoring collections unless versioned)	WITHOUT_CLASSIFICATION	0.9999999629284813	WITHOUT_CLASSIFICATION	3.7071518617700684E-8	TEST
// if it was dirtied by a collection only	WITHOUT_CLASSIFICATION	0.9999999469109063	WITHOUT_CLASSIFICATION	5.308909368740926E-8	TEST
// increment the version number (if necessary)	WITHOUT_CLASSIFICATION	0.9999999052990349	WITHOUT_CLASSIFICATION	9.470096501295014E-8	TEST
// check nullability but do not perform command execute // we'll use scheduled updates for that.	WITHOUT_CLASSIFICATION	0.9999999160636454	WITHOUT_CLASSIFICATION	8.393635461106204E-8	TEST
//give the Interceptor a chance to modify property values	WITHOUT_CLASSIFICATION	0.9999988582970639	WITHOUT_CLASSIFICATION	1.141702936110031E-6	TEST
//now we might need to recalculate the dirtyProperties array	WITHOUT_CLASSIFICATION	0.9999984433173892	WITHOUT_CLASSIFICATION	1.5566826109049847E-6	TEST
//use the current version	WITHOUT_CLASSIFICATION	0.99999968100806	WITHOUT_CLASSIFICATION	3.189919400134119E-7	TEST
// Interceptor returned null, so do the dirtycheck ourself, if possible	WITHOUT_CLASSIFICATION	0.9999999892797768	WITHOUT_CLASSIFICATION	1.0720223042906366E-8	TEST
// object loaded by update()	WITHOUT_CLASSIFICATION	0.99999868886818	WITHOUT_CLASSIFICATION	1.3111318199952952E-6	TEST
// dirty check against the usual snapshot of the entity	WITHOUT_CLASSIFICATION	0.9999999052156714	WITHOUT_CLASSIFICATION	9.478432855832579E-8	TEST
// dirty check against the database snapshot, if possible/necessary	WITHOUT_CLASSIFICATION	0.9999999101447509	WITHOUT_CLASSIFICATION	8.985524922308104E-8	TEST
// the Interceptor handled the dirty checking	WITHOUT_CLASSIFICATION	0.9999995041023468	WITHOUT_CLASSIFICATION	4.95897653075692E-7	TEST
//even process null collections	WITHOUT_CLASSIFICATION	0.9999984534540153	WITHOUT_CLASSIFICATION	1.5465459846334308E-6	TEST
// get the id from the object	WITHOUT_CLASSIFICATION	0.9999987513460057	WITHOUT_CLASSIFICATION	1.248653994322439E-6	TEST
//always do an INSERT, and let it fail by constraint violation	WITHOUT_CLASSIFICATION	0.9999998473152505	WITHOUT_CLASSIFICATION	1.5268474946045098E-7	TEST
//what is the version on the database?	WITHOUT_CLASSIFICATION	0.9999908822354451	WITHOUT_CLASSIFICATION	9.117764554887788E-6	TEST
/// HHH-2378	WITHOUT_CLASSIFICATION	0.9999954209217866	WITHOUT_CLASSIFICATION	4.579078213352022E-6	TEST
//will result in a SQL UPDATE:	WITHOUT_CLASSIFICATION	0.999997672283918	WITHOUT_CLASSIFICATION	2.3277160819784814E-6	TEST
//else do nothing (don't even reassociate object!)	WITHOUT_CLASSIFICATION	0.9999918422626818	WITHOUT_CLASSIFICATION	8.15773731821141E-6	TEST
// no existing row - do an insert	WITHOUT_CLASSIFICATION	0.9999995762232664	WITHOUT_CLASSIFICATION	4.237767336931633E-7	TEST
//refresh() does not pass an entityName	WITHOUT_CLASSIFICATION	0.9999589085461217	WITHOUT_CLASSIFICATION	4.109145387836076E-5	TEST
//do not return a proxy! //(this option indicates we are initializing a proxy)	WITHOUT_CLASSIFICATION	0.9999968619942524	WITHOUT_CLASSIFICATION	3.1380057477183344E-6	TEST
//return a proxy if appropriate	WITHOUT_CLASSIFICATION	0.9999981895062983	WITHOUT_CLASSIFICATION	1.8104937016983005E-6	TEST
// return existing object or initialized proxy (unless deleted)	WITHOUT_CLASSIFICATION	0.9999996856952325	WITHOUT_CLASSIFICATION	3.1430476750870177E-7	TEST
// return new uninitialized proxy	WITHOUT_CLASSIFICATION	0.99999923434271	WITHOUT_CLASSIFICATION	7.656572900315222E-7	TEST
// this object was already loaded	WITHOUT_CLASSIFICATION	0.9999992415070442	WITHOUT_CLASSIFICATION	7.584929557078456E-7	TEST
// Entity was found in second-level cache...	WITHOUT_CLASSIFICATION	0.9999999749072115	WITHOUT_CLASSIFICATION	2.509278852935462E-8	TEST
// make it circular-reference safe	WITHOUT_CLASSIFICATION	0.9999998468454411	WITHOUT_CLASSIFICATION	1.5315455894159598E-7	TEST
// intializes result by side-effect	WITHOUT_CLASSIFICATION	0.9999998921755531	WITHOUT_CLASSIFICATION	1.0782444685755065E-7	TEST
// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ // Pre-flushing section // ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999998552829351	WITHOUT_CLASSIFICATION	1.447170649204005E-7	TEST
//some statistics	WITHOUT_CLASSIFICATION	0.9999968896899829	WITHOUT_CLASSIFICATION	3.1103100170823552E-6	TEST
//safe from concurrent modification because of how entryList() is implemented on IdentityMap	WITHOUT_CLASSIFICATION	0.9999997013321109	WITHOUT_CLASSIFICATION	2.9866788915879796E-7	TEST
// Initialize dirty flags for arrays + collections with composite elements // and reset reached, doupdate, etc.	WITHOUT_CLASSIFICATION	0.9999999501512276	WITHOUT_CLASSIFICATION	4.9848772499145536E-8	TEST
// Among other things, updateReachables() will recursively load all // collections that are moving roles. This might cause entities to // be loaded.	WITHOUT_CLASSIFICATION	0.9999999379923	WITHOUT_CLASSIFICATION	6.200769995667837E-8	TEST
// So this needs to be safe from concurrent modification problems. // It is safe because of how IdentityMap implements entrySet()	WITHOUT_CLASSIFICATION	0.9999999315009818	WITHOUT_CLASSIFICATION	6.849901819052894E-8	TEST
// Update the status of the object and if necessary, schedule an update	WITHOUT_CLASSIFICATION	0.9999995835828402	WITHOUT_CLASSIFICATION	4.1641715976488175E-7	TEST
// Schedule updates to collections:	WITHOUT_CLASSIFICATION	0.9999997558019325	WITHOUT_CLASSIFICATION	2.4419806756562627E-7	TEST
// we need to lock the collection caches before // executing entity inserts/updates in order to // account for bidi associations	WITHOUT_CLASSIFICATION	0.9999994704364583	WITHOUT_CLASSIFICATION	5.295635415960471E-7	TEST
// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ // Post-flushing section // ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999995826559915	WITHOUT_CLASSIFICATION	4.17344008398236E-7	TEST
//the database has changed now, so the subselect results need to be invalidated	WITHOUT_CLASSIFICATION	0.9999866077035146	WITHOUT_CLASSIFICATION	1.339229648537577E-5	TEST
//if the collection is dereferenced, remove from the session cache //iter.remove(); //does not work, since the entrySet is not backed by the set	WITHOUT_CLASSIFICATION	0.9999996033875591	WITHOUT_CLASSIFICATION	3.9661244088491656E-7	TEST
//otherwise recreate the mapping between the collection and its key	WITHOUT_CLASSIFICATION	0.9999971440135672	WITHOUT_CLASSIFICATION	2.855986432865188E-6	TEST
//get a snapshot	WITHOUT_CLASSIFICATION	0.9999931934237478	WITHOUT_CLASSIFICATION	6.806576252142114E-6	TEST
/* package-private */	WITHOUT_CLASSIFICATION	0.9999992174035106	WITHOUT_CLASSIFICATION	7.825964894061801E-7	TEST
/* package-private */	WITHOUT_CLASSIFICATION	0.9999992174035106	WITHOUT_CLASSIFICATION	7.825964894061801E-7	TEST
// key is an entity involved with the operation performed by the listener; // value is a flag indicating if the listener explicitly operates on the entity	WITHOUT_CLASSIFICATION	0.9999832767610336	WITHOUT_CLASSIFICATION	1.672323896640006E-5	TEST
// EARLY EXIT!!!	WITHOUT_CLASSIFICATION	0.9999982521516995	WITHOUT_CLASSIFICATION	1.7478483005337444E-6	TEST
//ie. the entity came in from update()	WITHOUT_CLASSIFICATION	0.9999986938193037	WITHOUT_CLASSIFICATION	1.306180696305439E-6	TEST
// before any callbacks, etc, so subdeletions see that this deletion happened first	WITHOUT_CLASSIFICATION	0.9999999388219406	WITHOUT_CLASSIFICATION	6.117805948409821E-8	TEST
// Ensures that containing deletions happen before sub-deletions	WITHOUT_CLASSIFICATION	0.999999979440851	WITHOUT_CLASSIFICATION	2.0559149131660863E-8	TEST
//	WITHOUT_CLASSIFICATION	0.9999674909996846	WITHOUT_CLASSIFICATION	3.2509000315333503E-5	TEST
// cascade-delete to collections BEFORE the collection owner is deleted	WITHOUT_CLASSIFICATION	0.9999998944634736	WITHOUT_CLASSIFICATION	1.0553652638626049E-7	TEST
// cascade-delete to many-to-one AFTER the parent was deleted	WITHOUT_CLASSIFICATION	0.9999997704108124	WITHOUT_CLASSIFICATION	2.2958918760552183E-7	TEST
// if it is an initialized proxy, let cascade // handle it later on	WITHOUT_CLASSIFICATION	0.9999959463404415	WITHOUT_CLASSIFICATION	4.053659558497702E-6	TEST
//assign the requested id to the proxy, *before* //reassociating the proxy	WITHOUT_CLASSIFICATION	0.9999509674191613	WITHOUT_CLASSIFICATION	4.903258083870133E-5	TEST
// an uninitialized proxy, noop, don't even need to // return an id, since it is never a save()	WITHOUT_CLASSIFICATION	0.9999978349461801	WITHOUT_CLASSIFICATION	2.1650538199140075E-6	TEST
//initialize properties of the event:	WITHOUT_CLASSIFICATION	0.9999500233236228	WITHOUT_CLASSIFICATION	4.9976676377081565E-5	TEST
//return the id in the event object	WITHOUT_CLASSIFICATION	0.9999992371016904	WITHOUT_CLASSIFICATION	7.628983094940964E-7	TEST
//TRANSIENT or DELETED	WITHOUT_CLASSIFICATION	0.9999600173052313	WITHOUT_CLASSIFICATION	3.9982694768683114E-5	TEST
// use the id assigned to the instance	WITHOUT_CLASSIFICATION	0.9999999381861726	WITHOUT_CLASSIFICATION	6.181382740259378E-8	TEST
// assume this is a newly instantiated transient object // which should be saved rather than updated	WITHOUT_CLASSIFICATION	0.9999963415607227	WITHOUT_CLASSIFICATION	3.658439277292837E-6	TEST
// this is a transient object with existing persistent state not loaded by the session	WITHOUT_CLASSIFICATION	0.999997433165538	WITHOUT_CLASSIFICATION	2.566834461951924E-6	TEST
// a collection loaded in the current session // can not possibly be the collection belonging // to the entity passed to update()	WITHOUT_CLASSIFICATION	0.999999996070214	WITHOUT_CLASSIFICATION	3.929786019568711E-9	TEST
//cachedState,	WITHOUT_CLASSIFICATION	0.9999944018547916	WITHOUT_CLASSIFICATION	5.598145208405619E-6	TEST
//assume true, since we don't really know, and it doesn't matter	WITHOUT_CLASSIFICATION	0.9999914836636238	WITHOUT_CLASSIFICATION	8.516336376203533E-6	TEST
//a "detached" collection!	WITHOUT_CLASSIFICATION	0.9999995844740137	WITHOUT_CLASSIFICATION	4.155259863776928E-7	TEST
// if the collection belonged to a different entity, // clean up the existing state of the collection	WITHOUT_CLASSIFICATION	0.9999999967997105	WITHOUT_CLASSIFICATION	3.2002894846490087E-9	TEST
//log.debug( "calling onLoad()" );	WITHOUT_CLASSIFICATION	0.9999989057144828	WITHOUT_CLASSIFICATION	1.0942855172618525E-6	TEST
//EARLY EXIT!	WITHOUT_CLASSIFICATION	0.9999867670632953	WITHOUT_CLASSIFICATION	1.323293670468655E-5	TEST
// note: performExecutions() clears all collectionXxxxtion  // collections (the collection actions) in the session	WITHOUT_CLASSIFICATION	0.9999999917820188	WITHOUT_CLASSIFICATION	8.21798125464009E-9	TEST
// if no array holder we found an unwrappered array (this can't occur, // because we now always call wrap() before getting to here) // return (ah==null) ? true : searchForDirtyCollections(ah, type);	WITHOUT_CLASSIFICATION	0.9999999489173336	WITHOUT_CLASSIFICATION	5.108266642508232E-8	TEST
// if not wrappered yet, its dirty (this can't occur, because // we now always call wrap() before getting to here) // return ( ! (obj instanceof PersistentCollection) ) ? //true : searchForDirtyCollections( (PersistentCollection) obj, type );	WITHOUT_CLASSIFICATION	0.9999999596310206	WITHOUT_CLASSIFICATION	4.036897940143403E-8	TEST
//we need to check even if it was not initialized, because of delayed adds!	WITHOUT_CLASSIFICATION	0.9999964221520888	WITHOUT_CLASSIFICATION	3.577847911291238E-6	TEST
//NOTE: EARLY EXIT!	WITHOUT_CLASSIFICATION	0.9999412628166803	WITHOUT_CLASSIFICATION	5.873718331965756E-5	TEST
// find any entities that are still transient after retry	WITHOUT_CLASSIFICATION	0.9999998546964709	WITHOUT_CLASSIFICATION	1.4530352907267138E-7	TEST
//EARLY EXIT!	WITHOUT_CLASSIFICATION	0.9999867670632953	WITHOUT_CLASSIFICATION	1.323293670468655E-5	TEST
// Check the persistence context for an entry relating to this // entity to be merged...	WITHOUT_CLASSIFICATION	0.9999997057615326	WITHOUT_CLASSIFICATION	2.9423846729346607E-7	TEST
// we have specialized case of a detached entity from the // perspective of the merge operation.  Specifically, we // have an incoming entity instance which has a corresponding // entry in the current persistence context, but registered // under a different entity instance	WITHOUT_CLASSIFICATION	0.999999989597298	WITHOUT_CLASSIFICATION	1.0402702021723384E-8	TEST
//DELETED	WITHOUT_CLASSIFICATION	0.9998380840035187	WITHOUT_CLASSIFICATION	1.6191599648143025E-4	TEST
//before cascade!	WITHOUT_CLASSIFICATION	0.9999974226265305	WITHOUT_CLASSIFICATION	2.577373469501294E-6	TEST
// cascade first, so that all unsaved objects get their // copy created before we actually copy //cascadeOnMerge(event, persister, entity, copyCache, Cascades.CASCADE_BEFORE_MERGE);	WITHOUT_CLASSIFICATION	0.999999978672257	WITHOUT_CLASSIFICATION	2.1327743042553967E-8	TEST
//this bit is only *really* absolutely necessary for handling //requestedId, but is also good if we merge multiple object //graphs, since it helps ensure uniqueness	WITHOUT_CLASSIFICATION	0.9999880546770694	WITHOUT_CLASSIFICATION	1.19453229306753E-5	TEST
// continue...; we'll find out if it ends up not getting saved later	WITHOUT_CLASSIFICATION	0.9999999761589389	WITHOUT_CLASSIFICATION	2.384106109939099E-8	TEST
// cascade first, so that all unsaved objects get their // copy created before we actually copy	WITHOUT_CLASSIFICATION	0.9999998998540954	WITHOUT_CLASSIFICATION	1.0014590466731863E-7	TEST
// check that entity id = requestedId	WITHOUT_CLASSIFICATION	0.9999986271429862	WITHOUT_CLASSIFICATION	1.3728570138502693E-6	TEST
//before cascade!	WITHOUT_CLASSIFICATION	0.9999974226265305	WITHOUT_CLASSIFICATION	2.577373469501294E-6	TEST
// we got here because we assumed that an instance // with an assigned id was detached, when it was // really persistent	WITHOUT_CLASSIFICATION	0.9999918749350324	WITHOUT_CLASSIFICATION	8.125064967682556E-6	TEST
// cascade first, so that all unsaved objects get their  // copy created before we actually copy	WITHOUT_CLASSIFICATION	0.9999998868643435	WITHOUT_CLASSIFICATION	1.1313565646748323E-7	TEST
//copyValues works by reflection, so explicitly mark the entity instance dirty	WITHOUT_CLASSIFICATION	0.999999801614966	WITHOUT_CLASSIFICATION	1.983850340077317E-7	TEST
//EARLY EXIT	WITHOUT_CLASSIFICATION	0.9999879938027859	WITHOUT_CLASSIFICATION	1.200619721418403E-5	TEST
//source.getBatcher().executeBatch(); //found another way to ensure that all batched joined inserts have been executed	WITHOUT_CLASSIFICATION	0.9999996288950337	WITHOUT_CLASSIFICATION	3.7110496634009257E-7	TEST
// substitutes into values by side-effect	WITHOUT_CLASSIFICATION	0.9999998543693432	WITHOUT_CLASSIFICATION	1.4563065661507367E-7	TEST
//now done in EntityIdentityInsertAction //persister.setIdentifier( entity, id, source.getEntityMode() );	WITHOUT_CLASSIFICATION	0.9999998306460575	WITHOUT_CLASSIFICATION	1.693539424623675E-7	TEST
//source.getPersistenceContext().removeNonExist( new EntityKey( id, persister, source.getEntityMode() ) );	WITHOUT_CLASSIFICATION	0.9999998808984519	WITHOUT_CLASSIFICATION	1.1910154807260648E-7	TEST
//keep the existing version number in the case of replicate!	WITHOUT_CLASSIFICATION	0.9999991951094295	WITHOUT_CLASSIFICATION	8.048905704718552E-7	TEST
// cascade-save to many-to-one BEFORE the parent is saved	WITHOUT_CLASSIFICATION	0.9999997282485583	WITHOUT_CLASSIFICATION	2.7175144168401174E-7	TEST
//pass this as an argument only to avoid double looking	WITHOUT_CLASSIFICATION	0.9999930184272471	WITHOUT_CLASSIFICATION	6.981572752820551E-6	TEST
// the object is persistent	WITHOUT_CLASSIFICATION	0.9999966187566978	WITHOUT_CLASSIFICATION	3.381243302282845E-6	TEST
//the entity is associated with the session, so check its status	WITHOUT_CLASSIFICATION	0.9999972545203081	WITHOUT_CLASSIFICATION	2.745479691909517E-6	TEST
// do nothing for persistent instances	WITHOUT_CLASSIFICATION	0.9999990384564249	WITHOUT_CLASSIFICATION	9.615435751131863E-7	TEST
//ie. e.status==DELETED	WITHOUT_CLASSIFICATION	0.9999935466013987	WITHOUT_CLASSIFICATION	6.453398601215652E-6	TEST
// the object is transient or detached	WITHOUT_CLASSIFICATION	0.9999995535670663	WITHOUT_CLASSIFICATION	4.464329337271321E-7	TEST
//NOTE EARLY EXIT!	WITHOUT_CLASSIFICATION	0.9999657182964122	WITHOUT_CLASSIFICATION	3.428170358774223E-5	TEST
// Private constructor - stops checkstyle from complaining.	WITHOUT_CLASSIFICATION	0.9999999802184357	WITHOUT_CLASSIFICATION	1.978156427474581E-8	TEST
// First, try to find a matching constructor accepting a ViolatedConstraintNameExtracter param...	WITHOUT_CLASSIFICATION	0.9999999390730534	WITHOUT_CLASSIFICATION	6.09269465667133E-8	TEST
// eat it and try next	WITHOUT_CLASSIFICATION	0.999999798989515	WITHOUT_CLASSIFICATION	2.0101048500623494E-7	TEST
// Otherwise, try to use the no-arg constructor	WITHOUT_CLASSIFICATION	0.9999999954948733	WITHOUT_CLASSIFICATION	4.5051266666882335E-9	TEST
// oracle sql-state code for deadlock	WITHOUT_CLASSIFICATION	0.9999997670738007	WITHOUT_CLASSIFICATION	2.329261993643222E-7	TEST
// CollectionPropertyMapping processes everything except 'index'.	WITHOUT_CLASSIFICATION	0.9999986467133741	WITHOUT_CLASSIFICATION	1.3532866257580874E-6	TEST
// remove initial ", "	WITHOUT_CLASSIFICATION	0.9999993802475853	WITHOUT_CLASSIFICATION	6.197524147031565E-7	TEST
// remove initial " and "	WITHOUT_CLASSIFICATION	0.9999994273019486	WITHOUT_CLASSIFICATION	5.726980514028964E-7	TEST
//beforeClassTokens.add("new"); DEFINITELY DON'T HAVE THIS!!	WITHOUT_CLASSIFICATION	0.9999813279467221	WITHOUT_CLASSIFICATION	1.8672053277811525E-5	TEST
//notAfterClassTokens.add(",");	WITHOUT_CLASSIFICATION	0.9999922849922376	WITHOUT_CLASSIFICATION	7.71500776239722E-6	TEST
// just especially for the trivial collection filter	WITHOUT_CLASSIFICATION	0.9999999555625072	WITHOUT_CLASSIFICATION	4.443749285445795E-8	TEST
//update last non-whitespace token, if necessary	WITHOUT_CLASSIFICATION	0.999996979225391	WITHOUT_CLASSIFICATION	3.020774609094384E-6	TEST
// select-range is terminated by declaration of "from"	WITHOUT_CLASSIFICATION	0.999999005636317	WITHOUT_CLASSIFICATION	9.943636829449944E-7	TEST
//scan for next non-whitespace token	WITHOUT_CLASSIFICATION	0.9999939484745843	WITHOUT_CLASSIFICATION	6.051525415600667E-6	TEST
// Note this!!	WITHOUT_CLASSIFICATION	0.9999880499284932	WITHOUT_CLASSIFICATION	1.1950071506719056E-5	TEST
// Error message constants.	WITHOUT_CLASSIFICATION	0.9999999598516851	WITHOUT_CLASSIFICATION	4.0148314929715245E-8	TEST
// handle trace logging ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999990395092462	WITHOUT_CLASSIFICATION	9.60490753869239E-7	TEST
// semantic action handling ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999998111150344	WITHOUT_CLASSIFICATION	1.8888496546681994E-7	TEST
// Handle collection-fiter compilation. // IMPORTANT NOTE: This is modifying the INPUT (HQL) tree, not the output tree!	WITHOUT_CLASSIFICATION	0.9999950096067817	WITHOUT_CLASSIFICATION	4.9903932183987665E-6	TEST
// Show the modified AST.	WITHOUT_CLASSIFICATION	0.9999973697829723	WITHOUT_CLASSIFICATION	2.630217027732938E-6	TEST
// Create a parameter specification for the collection filter...	WITHOUT_CLASSIFICATION	0.9999999686568348	WITHOUT_CLASSIFICATION	3.134316519114857E-8	TEST
// Use the delegate.	WITHOUT_CLASSIFICATION	0.9999997022210113	WITHOUT_CLASSIFICATION	2.977789886880134E-7	TEST
// Use the delegate.	WITHOUT_CLASSIFICATION	0.9999997022210113	WITHOUT_CLASSIFICATION	2.977789886880134E-7	TEST
// Get the names of the columns used to link between the collection // owner and the collection elements.	WITHOUT_CLASSIFICATION	0.9999999939642624	WITHOUT_CLASSIFICATION	6.0357375286384306E-9	TEST
// The path AST should be a DotNode, and it should have been evaluated already.	WITHOUT_CLASSIFICATION	0.9999958783329285	WITHOUT_CLASSIFICATION	4.1216670714930955E-6	TEST
// Tell the dot node about the join type.	WITHOUT_CLASSIFICATION	0.9999994040080304	WITHOUT_CLASSIFICATION	5.959919695304223E-7	TEST
// Re-arrange the tree so that the collection function is the root and the lhs is the path.	WITHOUT_CLASSIFICATION	0.9999999718561148	WITHOUT_CLASSIFICATION	2.8143885330427953E-8	TEST
// Don't forget to resolve the argument! // Resolve the collection function now.	WITHOUT_CLASSIFICATION	0.9999999695266173	WITHOUT_CLASSIFICATION	3.047338274285833E-8	TEST
// Resolve everything up to this dot, but don't resolve the placeholders yet.	WITHOUT_CLASSIFICATION	0.9999976708422781	WITHOUT_CLASSIFICATION	2.3291577219559287E-6	TEST
// Should mean that no such property was found	WITHOUT_CLASSIFICATION	0.9999994775323583	WITHOUT_CLASSIFICATION	5.224676416551423E-7	TEST
// Was there an explicit select expression?	WITHOUT_CLASSIFICATION	0.9999973147890495	WITHOUT_CLASSIFICATION	2.6852109504038266E-6	TEST
// Attach any mapping-defined "ORDER BY" fragments	WITHOUT_CLASSIFICATION	0.9999998753399287	WITHOUT_CLASSIFICATION	1.246600712571233E-7	TEST
// Use the explicitly declared select expression; determine the // return types indicated by each select token	WITHOUT_CLASSIFICATION	0.9999999586855627	WITHOUT_CLASSIFICATION	4.131443745287104E-8	TEST
// After that, process the JOINs. // Invoke a delegate to do the work, as this is farily complex.	WITHOUT_CLASSIFICATION	0.9999899157329935	WITHOUT_CLASSIFICATION	1.0084267006549837E-5	TEST
// Make #@%$^#^&# sure no alias is applied to the table name	WITHOUT_CLASSIFICATION	0.9999975553190902	WITHOUT_CLASSIFICATION	2.4446809099552615E-6	TEST
// We need to generate ids as part of this bulk insert. // // Note that this is only supported for sequence-style generators and // post-insert-style generators; basically, only in-db generators	WITHOUT_CLASSIFICATION	0.999985746302872	WITHOUT_CLASSIFICATION	1.4253697127959455E-5	TEST
// Use the delegate.	WITHOUT_CLASSIFICATION	0.9999997022210113	WITHOUT_CLASSIFICATION	2.977789886880134E-7	TEST
// We need to seed the version value as part of this bulk insert	WITHOUT_CLASSIFICATION	0.9999836436719173	WITHOUT_CLASSIFICATION	1.635632808270916E-5	TEST
// we need to wrtap the param in a cast()	WITHOUT_CLASSIFICATION	0.9999993770646189	WITHOUT_CLASSIFICATION	6.229353810331474E-7	TEST
// This is called when it's time to fully resolve a path expression.	WITHOUT_CLASSIFICATION	0.9999837472378753	WITHOUT_CLASSIFICATION	1.6252762124644057E-5	TEST
// Generate implicit joins, only if necessary.	WITHOUT_CLASSIFICATION	0.9999996408002431	WITHOUT_CLASSIFICATION	3.5919975683097156E-7	TEST
// Notify the FROM element that it is being referenced by the select.	WITHOUT_CLASSIFICATION	0.9999979076626875	WITHOUT_CLASSIFICATION	2.0923373125728985E-6	TEST
// Turn off includeSubclasses on all FromElements.	WITHOUT_CLASSIFICATION	0.9999999072415072	WITHOUT_CLASSIFICATION	9.275849270093636E-8	TEST
// create the node initially with the param name so that it shows // appropriately in the "original text" attribute	WITHOUT_CLASSIFICATION	0.9999999036704537	WITHOUT_CLASSIFICATION	9.632954624511632E-8	TEST
// Use the delegate, resolve identifiers as FROM element aliases.	WITHOUT_CLASSIFICATION	0.9999992740607635	WITHOUT_CLASSIFICATION	7.259392364482973E-7	TEST
// select clauses for insert statements should alwasy be treated as shallow	WITHOUT_CLASSIFICATION	0.999999850899101	WITHOUT_CLASSIFICATION	1.4910089901081032E-7	TEST
// no need to even collect this information if the persister is considered multi-table	WITHOUT_CLASSIFICATION	0.9999944934482262	WITHOUT_CLASSIFICATION	5.506551773787765E-6	TEST
// Make sure that the persister is versioned	WITHOUT_CLASSIFICATION	0.9999804007090914	WITHOUT_CLASSIFICATION	1.959929090855605E-5	TEST
// handle trace logging ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999990395092462	WITHOUT_CLASSIFICATION	9.60490753869239E-7	TEST
// Use the delegate.	WITHOUT_CLASSIFICATION	0.9999997022210113	WITHOUT_CLASSIFICATION	2.977789886880134E-7	TEST
// --Commented out by Inspection (12/11/04 10:56 AM): int getWarningCount();	WITHOUT_CLASSIFICATION	0.9999999881844752	WITHOUT_CLASSIFICATION	1.181552483854274E-8	TEST
// Alias references and identifiers use the same node class.	WITHOUT_CLASSIFICATION	0.9999999956089045	WITHOUT_CLASSIFICATION	4.391095467593E-9	TEST
// switch	WITHOUT_CLASSIFICATION	0.9999994829311154	WITHOUT_CLASSIFICATION	5.170688846685625E-7	TEST
// make a new one	WITHOUT_CLASSIFICATION	0.9999958501682062	WITHOUT_CLASSIFICATION	4.149831793842519E-6	TEST
// just do the regular thing if you can't find the ctor // Your AST must have default ctor to use this.	WITHOUT_CLASSIFICATION	0.9999997282396391	WITHOUT_CLASSIFICATION	2.717603608721059E-7	TEST
// Initialize SQL nodes here.	WITHOUT_CLASSIFICATION	0.9999967377191958	WITHOUT_CLASSIFICATION	3.262280804214201E-6	TEST
// semantic action processing ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999995356103418	WITHOUT_CLASSIFICATION	4.6438965819772726E-7	TEST
// if template is null we just write the function out as it appears in the hql statement	WITHOUT_CLASSIFICATION	0.9999999728216188	WITHOUT_CLASSIFICATION	2.7178381171494667E-8	TEST
// this function has a template -> redirect output and catch the arguments	WITHOUT_CLASSIFICATION	0.9999999187227068	WITHOUT_CLASSIFICATION	8.127729321218366E-8	TEST
// --- Inner classes (moved here from sql-gen.g) ---	WITHOUT_CLASSIFICATION	0.9999934950995842	WITHOUT_CLASSIFICATION	6.504900415684082E-6	TEST
// check two "adjecent" nodes at the top of the from-clause tree	WITHOUT_CLASSIFICATION	0.9999999965028588	WITHOUT_CLASSIFICATION	3.4971411355855036E-9	TEST
///////////////////////////////////////////////////////////////////////	WITHOUT_CLASSIFICATION	0.9999162271695766	WITHOUT_CLASSIFICATION	8.377283042340986E-5	TEST
// these are just two unrelated table references	WITHOUT_CLASSIFICATION	0.9999995580453193	WITHOUT_CLASSIFICATION	4.4195468079016966E-7	TEST
// again, both should be FromElements	WITHOUT_CLASSIFICATION	0.9999980448921622	WITHOUT_CLASSIFICATION	1.9551078377433164E-6	TEST
// NOTE : firstRow is zero-based	WITHOUT_CLASSIFICATION	0.9999745490719749	WITHOUT_CLASSIFICATION	2.54509280251319E-5	TEST
// right represents a joins originating from left; or // both right and left reprersent joins originating from the same FromElement	WITHOUT_CLASSIFICATION	0.999999814771332	WITHOUT_CLASSIFICATION	1.8522866789241658E-7	TEST
// check a set of parent/child nodes in the from-clause tree // to determine if a comma is required between them	WITHOUT_CLASSIFICATION	0.9999999944373884	WITHOUT_CLASSIFICATION	5.562611564178445E-9	TEST
// right represents a joins originating from left...	WITHOUT_CLASSIFICATION	0.9999995773003773	WITHOUT_CLASSIFICATION	4.2269962272479804E-7	TEST
// all clear	WITHOUT_CLASSIFICATION	0.9999997893598312	WITHOUT_CLASSIFICATION	2.1064016884001114E-7	TEST
// Ignore the token class name parameter, and use a specific token class.	WITHOUT_CLASSIFICATION	0.9999999165949722	WITHOUT_CLASSIFICATION	8.340502786694487E-8	TEST
//overriden to avoid System.exit	WITHOUT_CLASSIFICATION	0.9999974872152562	WITHOUT_CLASSIFICATION	2.5127847439353198E-6	TEST
//overriden to avoid System.exit	WITHOUT_CLASSIFICATION	0.9999974872152562	WITHOUT_CLASSIFICATION	2.5127847439353198E-6	TEST
// remember that ordinal parameters numbers are 1-based!!!	WITHOUT_CLASSIFICATION	0.9999997437200416	WITHOUT_CLASSIFICATION	2.5627995837517596E-7	TEST
// don't care about other param types here, just those explicitly user-defined...	WITHOUT_CLASSIFICATION	0.9999945454812559	WITHOUT_CLASSIFICATION	5.454518744191122E-6	TEST
// If the query is already compiled, skip the compilation.	WITHOUT_CLASSIFICATION	0.9999999699736233	WITHOUT_CLASSIFICATION	3.0026376742481633E-8	TEST
// Remember the parameters for the compilation.	WITHOUT_CLASSIFICATION	0.9999996899049518	WITHOUT_CLASSIFICATION	3.10095048098663E-7	TEST
// PHASE 1 : Parse the HQL into an AST.	WITHOUT_CLASSIFICATION	0.9999999385489399	WITHOUT_CLASSIFICATION	6.145106010501192E-8	TEST
// PHASE 2 : Analyze the HQL AST, and produce an SQL AST.	WITHOUT_CLASSIFICATION	0.9999998157799672	WITHOUT_CLASSIFICATION	1.8422003288734288E-7	TEST
// PHASE 3 : Generate the SQL.	WITHOUT_CLASSIFICATION	0.9999991412992505	WITHOUT_CLASSIFICATION	8.587007495559093E-7	TEST
// we do not actually propogate ANTLRExceptions as a cause, so // log it here for diagnostic purposes	WITHOUT_CLASSIFICATION	0.999999921630607	WITHOUT_CLASSIFICATION	7.836939295442297E-8	TEST
// we do not actually propogate ANTLRExceptions as a cause, so // log it here for diagnostic purposes	WITHOUT_CLASSIFICATION	0.999999921630607	WITHOUT_CLASSIFICATION	7.836939295442297E-8	TEST
//only needed during compilation phase...	WITHOUT_CLASSIFICATION	0.9999984978242943	WITHOUT_CLASSIFICATION	1.5021757057195382E-6	TEST
// Transform the tree.	WITHOUT_CLASSIFICATION	0.9999982998329775	WITHOUT_CLASSIFICATION	1.7001670225379719E-6	TEST
// Parse the query string into an HQL AST.	WITHOUT_CLASSIFICATION	0.9999999793006772	WITHOUT_CLASSIFICATION	2.069932276303097E-8	TEST
// Delegate to the QueryLoader...	WITHOUT_CLASSIFICATION	0.9999991910481225	WITHOUT_CLASSIFICATION	8.089518774349922E-7	TEST
// Delegate to the QueryLoader...	WITHOUT_CLASSIFICATION	0.9999991910481225	WITHOUT_CLASSIFICATION	8.089518774349922E-7	TEST
// Delegate to the QueryLoader...	WITHOUT_CLASSIFICATION	0.9999991910481225	WITHOUT_CLASSIFICATION	8.089518774349922E-7	TEST
// NOTE : ( max - 1 ) because first is zero-based while max is not...	WITHOUT_CLASSIFICATION	0.9999977417105376	WITHOUT_CLASSIFICATION	2.258289462364561E-6	TEST
// -- Package local methods for the QueryLoader delegate --	WITHOUT_CLASSIFICATION	0.9999997812308183	WITHOUT_CLASSIFICATION	2.1876918170490104E-7	TEST
// If there are no collection fetches, then no further checks are needed	WITHOUT_CLASSIFICATION	0.9999987914387506	WITHOUT_CLASSIFICATION	1.2085612494923477E-6	TEST
// A shallow query is ok (although technically there should be no fetching here...)	WITHOUT_CLASSIFICATION	0.9999890264480147	WITHOUT_CLASSIFICATION	1.0973551985338644E-5	TEST
// should be the first, but just to be safe...	WITHOUT_CLASSIFICATION	0.9999998367628118	WITHOUT_CLASSIFICATION	1.632371881796851E-7	TEST
// Use the delegate.	WITHOUT_CLASSIFICATION	0.9999997022210113	WITHOUT_CLASSIFICATION	2.977789886880134E-7	TEST
// Use the delegate.	WITHOUT_CLASSIFICATION	0.9999997022210113	WITHOUT_CLASSIFICATION	2.977789886880134E-7	TEST
// Impl Note: allows multiple collection fetches as long as the // entire fecthed graph still "points back" to a single // root entity for return	WITHOUT_CLASSIFICATION	0.999999962463302	WITHOUT_CLASSIFICATION	3.753669804021086E-8	TEST
// Otherwise, we have a non-scalar select with defined collection fetch(es). // Make sure that there is only a single root entity in the return (no tuples)	WITHOUT_CLASSIFICATION	0.9999999624825652	WITHOUT_CLASSIFICATION	3.7517434894066586E-8	TEST
// This is not strictly true.  We actually just need to make sure that // it is ordered by root-entity PK and that that order-by comes before // any non-root-entity ordering...	WITHOUT_CLASSIFICATION	0.9999645537461838	WITHOUT_CLASSIFICATION	3.5446253816315166E-5	TEST
//	WITHOUT_CLASSIFICATION	0.9999674909996846	WITHOUT_CLASSIFICATION	3.2509000315333503E-5	TEST
// we are already processing a dot-structure	WITHOUT_CLASSIFICATION	0.9999998827017481	WITHOUT_CLASSIFICATION	1.1729825184074387E-7	TEST
// igndore it...	WITHOUT_CLASSIFICATION	0.9999986106631775	WITHOUT_CLASSIFICATION	1.3893368225394462E-6	TEST
// we are now at a new tree level	WITHOUT_CLASSIFICATION	0.9999998537220535	WITHOUT_CLASSIFICATION	1.4627794653020453E-7	TEST
// [jsd] The fix for HHH-558...	WITHOUT_CLASSIFICATION	0.9999984475612044	WITHOUT_CLASSIFICATION	1.5524387956207896E-6	TEST
// If the token can tell us if it could be an identifier...	WITHOUT_CLASSIFICATION	0.9999994780750312	WITHOUT_CLASSIFICATION	5.219249688709585E-7	TEST
// ... and the expected token type was an identifier, then:	WITHOUT_CLASSIFICATION	0.9999998047069222	WITHOUT_CLASSIFICATION	1.952930778511546E-7	TEST
// Use the token as an identifier.	WITHOUT_CLASSIFICATION	0.999999237036777	WITHOUT_CLASSIFICATION	7.629632230652678E-7	TEST
// Add the token to the AST.	WITHOUT_CLASSIFICATION	0.9999992974657765	WITHOUT_CLASSIFICATION	7.025342234055602E-7	TEST
// (NOT (EQ a b) ) => (NE a b)	WITHOUT_CLASSIFICATION	0.9999919233562888	WITHOUT_CLASSIFICATION	8.076643711173902E-6	TEST
// (NOT (NE a b) ) => (EQ a b)	WITHOUT_CLASSIFICATION	0.9999919233562888	WITHOUT_CLASSIFICATION	8.076643711173902E-6	TEST
// (NOT (LT a b) ) => (GE a b)	WITHOUT_CLASSIFICATION	0.999993052574681	WITHOUT_CLASSIFICATION	6.94742531901957E-6	TEST
// (NOT (GE a b) ) => (LT a b)	WITHOUT_CLASSIFICATION	0.999993052574681	WITHOUT_CLASSIFICATION	6.94742531901957E-6	TEST
// (NOT (LE a b) ) => (GT a b)	WITHOUT_CLASSIFICATION	0.9999932075124007	WITHOUT_CLASSIFICATION	6.792487599356335E-6	TEST
// (NOT (LIKE a b) ) => (NOT_LIKE a b)	WITHOUT_CLASSIFICATION	0.9999904808011145	WITHOUT_CLASSIFICATION	9.519198885513412E-6	TEST
// (NOT (NOT_LIKE a b) ) => (LIKE a b)	WITHOUT_CLASSIFICATION	0.9999904808011145	WITHOUT_CLASSIFICATION	9.519198885513412E-6	TEST
// (NOT (IS_NOT_NULL a b) ) => (IS_NULL a b)	WITHOUT_CLASSIFICATION	0.9999913035808241	WITHOUT_CLASSIFICATION	8.696419175939782E-6	TEST
// (NOT (BETWEEN a b) ) => (NOT_BETWEEN a b)	WITHOUT_CLASSIFICATION	0.9999874438247187	WITHOUT_CLASSIFICATION	1.2556175281360227E-5	TEST
// Initialize the error handling delegate.	WITHOUT_CLASSIFICATION	0.9999972101837872	WITHOUT_CLASSIFICATION	2.789816212794599E-6	TEST
//overriden to avoid System.exit	WITHOUT_CLASSIFICATION	0.9999974872152562	WITHOUT_CLASSIFICATION	2.5127847439353198E-6	TEST
// if // if // Otherwise, handle the error normally.	WITHOUT_CLASSIFICATION	0.9999996816098013	WITHOUT_CLASSIFICATION	3.183901986312173E-7	TEST
// (NOT (NOT_BETWEEN a b) ) => (BETWEEN a b)	WITHOUT_CLASSIFICATION	0.9999874438247187	WITHOUT_CLASSIFICATION	1.2556175281360227E-5	TEST
/* This can never happen because this rule will always eliminate the child NOT.	WITHOUT_CLASSIFICATION	0.9999810639279444	WITHOUT_CLASSIFICATION	1.8936072055631237E-5	TEST
// Just add a 'not' parent.	WITHOUT_CLASSIFICATION	0.9999994113177334	WITHOUT_CLASSIFICATION	5.886822665903392E-7	TEST
// (EQ NULL b) => (IS_NULL b)	WITHOUT_CLASSIFICATION	0.999996551291853	WITHOUT_CLASSIFICATION	3.448708146952974E-6	TEST
// (EQ a NULL) => (IS_NULL a)	WITHOUT_CLASSIFICATION	0.999998257469109	WITHOUT_CLASSIFICATION	1.7425308910394666E-6	TEST
// NOTE: Because we're using ASTUtil.createParent(), the tree must be created from the bottom up. // IS EMPTY x => (EXISTS (QUERY (SELECT_FROM (FROM x) ) ) )	WITHOUT_CLASSIFICATION	0.9999998926591689	WITHOUT_CLASSIFICATION	1.0734083119855729E-7	TEST
// Add NOT if it's negated.	WITHOUT_CLASSIFICATION	0.999940461174824	WITHOUT_CLASSIFICATION	5.95388251760577E-5	TEST
// Create nodes that track line and column number.	WITHOUT_CLASSIFICATION	0.9999999121852303	WITHOUT_CLASSIFICATION	8.781476969097393E-8	TEST
// Case 1: Multi token keywords GROUP BY and ORDER BY // The next token ( LT(2) ) should be 'by'... otherwise, this is just an ident.	WITHOUT_CLASSIFICATION	0.9999819347866878	WITHOUT_CLASSIFICATION	1.8065213312046985E-5	TEST
// Case 2: The current token is after FROM and before '.'.	WITHOUT_CLASSIFICATION	0.9999713058930296	WITHOUT_CLASSIFICATION	2.8694106970483405E-5	TEST
// This handles HHH-354, where there is a strange property name in a where clause. // If the lookahead contains a DOT then something that isn't an IDENT...	WITHOUT_CLASSIFICATION	0.9998998117064917	WITHOUT_CLASSIFICATION	1.0018829350822124E-4	TEST
// See if the second lookahed token can be an identifier.	WITHOUT_CLASSIFICATION	0.9999999036339341	WITHOUT_CLASSIFICATION	9.636606597094183E-8	TEST
// Set it!	WITHOUT_CLASSIFICATION	0.9999993605392881	WITHOUT_CLASSIFICATION	6.394607119239336E-7	TEST
// ignore	WITHOUT_CLASSIFICATION	0.9999994466957796	WITHOUT_CLASSIFICATION	5.533042204140351E-7	TEST
// strip the " where "	WITHOUT_CLASSIFICATION	0.9999985934513638	WITHOUT_CLASSIFICATION	1.406548636230095E-6	TEST
// Don't really know all the codes required to adequately decipher returned jdbc exceptions here. // simply allow the failure to be eaten and the subsequent insert-selects/deletes should fail	WITHOUT_CLASSIFICATION	0.9999995024015406	WITHOUT_CLASSIFICATION	4.975984593849363E-7	TEST
// at the very least cleanup the data :)	WITHOUT_CLASSIFICATION	0.9999999262001845	WITHOUT_CLASSIFICATION	7.379981553334032E-8	TEST
// First, save off the pertinent ids, as the return value	WITHOUT_CLASSIFICATION	0.99999949011643	WITHOUT_CLASSIFICATION	5.098835700741237E-7	TEST
// jdbc params are 1-based	WITHOUT_CLASSIFICATION	0.9999996762927665	WITHOUT_CLASSIFICATION	3.237072335357016E-7	TEST
// jdbc params are 1-based	WITHOUT_CLASSIFICATION	0.9999996762927665	WITHOUT_CLASSIFICATION	3.237072335357016E-7	TEST
// Start performing the updates	WITHOUT_CLASSIFICATION	0.9999939153368435	WITHOUT_CLASSIFICATION	6.08466315663747E-6	TEST
// First, save off the pertinent ids, saving the number of pertinent ids for return	WITHOUT_CLASSIFICATION	0.9999963633866887	WITHOUT_CLASSIFICATION	3.6366133113355756E-6	TEST
// Start performing the deletes	WITHOUT_CLASSIFICATION	0.9999966304517766	WITHOUT_CLASSIFICATION	3.369548223473359E-6	TEST
// otherwise, everything ok.	WITHOUT_CLASSIFICATION	0.9999959980186218	WITHOUT_CLASSIFICATION	4.00198137818092E-6	TEST
// visit width-first, then depth	WITHOUT_CLASSIFICATION	0.999998457700036	WITHOUT_CLASSIFICATION	1.5422999640561224E-6	TEST
// if the types report logical equivalence, return true...	WITHOUT_CLASSIFICATION	0.999999882767536	WITHOUT_CLASSIFICATION	1.1723246387367502E-7	TEST
// otherwise, perform a "deep equivalence" check...	WITHOUT_CLASSIFICATION	0.99999997238376	WITHOUT_CLASSIFICATION	2.761623991530993E-8	TEST
// If there is no WHERE node, make one.	WITHOUT_CLASSIFICATION	0.9999835060461463	WITHOUT_CLASSIFICATION	1.649395385383019E-5	TEST
// inject the WHERE after the parent	WITHOUT_CLASSIFICATION	0.9999985834854073	WITHOUT_CLASSIFICATION	1.4165145927140718E-6	TEST
// Never include subclasses for implied from elements.	WITHOUT_CLASSIFICATION	0.9999959032361644	WITHOUT_CLASSIFICATION	4.096763835606101E-6	TEST
// Moved here from SelectClause [jsd]	WITHOUT_CLASSIFICATION	0.999999660363003	WITHOUT_CLASSIFICATION	3.396369970018359E-7	TEST
///////////////////////////////////////////////////////////////////////////	WITHOUT_CLASSIFICATION	0.9999162271695766	WITHOUT_CLASSIFICATION	8.377283042340986E-5	TEST
// Use the table fromElement and the property name to get the array of column names.	WITHOUT_CLASSIFICATION	0.9999998570631254	WITHOUT_CLASSIFICATION	1.4293687446357899E-7	TEST
// Set the attributes of the property reference expression.	WITHOUT_CLASSIFICATION	0.9999993669025427	WITHOUT_CLASSIFICATION	6.330974573440039E-7	TEST
// If the uresolved property path isn't set yet, just use the property name.	WITHOUT_CLASSIFICATION	0.99999070288457	WITHOUT_CLASSIFICATION	9.297115429933977E-6	TEST
// The 'from element' that the property is in.	WITHOUT_CLASSIFICATION	0.9999831883590197	WITHOUT_CLASSIFICATION	1.6811640980221725E-5	TEST
// Prepare the left hand side and get the data type.	WITHOUT_CLASSIFICATION	0.9999997992705169	WITHOUT_CLASSIFICATION	2.0072948311749086E-7	TEST
// Prepare the left hand side and get the data type.	WITHOUT_CLASSIFICATION	0.9999997992705169	WITHOUT_CLASSIFICATION	2.0072948311749086E-7	TEST
// If this dot has already been resolved, stop now.	WITHOUT_CLASSIFICATION	0.9999903019914312	WITHOUT_CLASSIFICATION	9.698008568751366E-6	TEST
// If there is no data type for this node, and we're at the end of the path (top most dot node), then // this might be a Java constant.	WITHOUT_CLASSIFICATION	0.9999996983538717	WITHOUT_CLASSIFICATION	3.016461281848578E-7	TEST
// The property is a collection...	WITHOUT_CLASSIFICATION	0.9999987103828584	WITHOUT_CLASSIFICATION	1.2896171416457997E-6	TEST
// The property is a component...	WITHOUT_CLASSIFICATION	0.9999954109394867	WITHOUT_CLASSIFICATION	4.589060513341275E-6	TEST
// The property is another class..	WITHOUT_CLASSIFICATION	0.999993429241162	WITHOUT_CLASSIFICATION	6.5707588380734105E-6	TEST
// Otherwise, this is a primitive type.	WITHOUT_CLASSIFICATION	0.9999960707690115	WITHOUT_CLASSIFICATION	3.929230988510179E-6	TEST
//foo.bars.size (also handles deprecated stuff like foo.bars.maxelement for backwardness)	WITHOUT_CLASSIFICATION	0.9999975536596416	WITHOUT_CLASSIFICATION	2.4463403583308378E-6	TEST
// This 'dot' expression now refers to the resulting from element.	WITHOUT_CLASSIFICATION	0.999997073160992	WITHOUT_CLASSIFICATION	2.9268390079931925E-6	TEST
// Always add the collection's query spaces.	WITHOUT_CLASSIFICATION	0.9999999738613423	WITHOUT_CLASSIFICATION	2.6138657730137795E-8	TEST
// in non-select queries, the only time we should need to join is if we are in a subquery from clause	WITHOUT_CLASSIFICATION	0.9999999636469353	WITHOUT_CLASSIFICATION	3.6353064664586407E-8	TEST
// this is the regression style determination which matches the logic of the classic translator	WITHOUT_CLASSIFICATION	0.9999996619881074	WITHOUT_CLASSIFICATION	3.380118926063635E-7	TEST
// This 'dot' expression now refers to the resulting from element.	WITHOUT_CLASSIFICATION	0.999997073160992	WITHOUT_CLASSIFICATION	2.9268390079931925E-6	TEST
// even though we might find a pre-existing element by join path, we may not be able to reuse it...	WITHOUT_CLASSIFICATION	0.99999985198853	WITHOUT_CLASSIFICATION	1.480114700438207E-7	TEST
// NOTE : addDuplicateAlias() already performs nullness checks on the alias.	WITHOUT_CLASSIFICATION	0.999998706971111	WITHOUT_CLASSIFICATION	1.293028889033606E-6	TEST
// if the from-clauses are the same, we can be a little more aggressive in terms of what we reuse	WITHOUT_CLASSIFICATION	0.9999999808323898	WITHOUT_CLASSIFICATION	1.9167610203480215E-8	TEST
// again, null != null here	WITHOUT_CLASSIFICATION	0.9999962747833344	WITHOUT_CLASSIFICATION	3.7252166656682884E-6	TEST
// If this is an implied join in a from element, then use the impled join type which is part of the // tree parser's state (set by the gramamar actions).	WITHOUT_CLASSIFICATION	0.9999990174015085	WITHOUT_CLASSIFICATION	9.825984914651186E-7	TEST
// otherwise (subquery case) dont reuse the fromElement if we are processing the from-clause of the subquery	WITHOUT_CLASSIFICATION	0.9999999029694655	WITHOUT_CLASSIFICATION	9.703053457565327E-8	TEST
// we know only the lhs-hand type, so use that	WITHOUT_CLASSIFICATION	0.9999999897062648	WITHOUT_CLASSIFICATION	1.029373515691287E-8	TEST
// the referenced node text is the special 'id'	WITHOUT_CLASSIFICATION	0.9999992040229472	WITHOUT_CLASSIFICATION	7.959770527893658E-7	TEST
// only the identifier property field name can be a reference to the associated entity's PK...	WITHOUT_CLASSIFICATION	0.9999997911646853	WITHOUT_CLASSIFICATION	2.088353146173207E-7	TEST
// special shortcut for id properties, skip the join! // this must only occur at the _end_ of a path expression	WITHOUT_CLASSIFICATION	0.9999985641524016	WITHOUT_CLASSIFICATION	1.4358475984004756E-6	TEST
// Append the new property name onto the unresolved path.	WITHOUT_CLASSIFICATION	0.9999985168261004	WITHOUT_CLASSIFICATION	1.4831738996463475E-6	TEST
// If the lhs is a collection, use CollectionPropertyMapping	WITHOUT_CLASSIFICATION	0.9999999571874131	WITHOUT_CLASSIFICATION	4.281258697430599E-8	TEST
// Tell the destination fromElement to 'includeSubclasses'.	WITHOUT_CLASSIFICATION	0.9999995139685072	WITHOUT_CLASSIFICATION	4.860314927788117E-7	TEST
// Use theta style (for regression) // Move the node up, after the origin node.	WITHOUT_CLASSIFICATION	0.9999997462645352	WITHOUT_CLASSIFICATION	2.5373546480398843E-7	TEST
// Don't resolve the node again.	WITHOUT_CLASSIFICATION	0.999998906232957	WITHOUT_CLASSIFICATION	1.0937670429638552E-6	TEST
// for expected parameter type injection, we expect that the lhs represents // some form of property ref and that the children of the in-list represent // one-or-more params.	WITHOUT_CLASSIFICATION	0.9999994639059098	WITHOUT_CLASSIFICATION	5.360940902584617E-7	TEST
// we need to strip off the embedded parens so that sql-gen does not double these up	WITHOUT_CLASSIFICATION	0.9999998702708378	WITHOUT_CLASSIFICATION	1.2972916216837706E-7	TEST
// we have something like : "? [op] rhs"	WITHOUT_CLASSIFICATION	0.9999633988804735	WITHOUT_CLASSIFICATION	3.660111952649091E-5	TEST
// we have something like : "lhs [op] ?"	WITHOUT_CLASSIFICATION	0.999946756051167	WITHOUT_CLASSIFICATION	5.3243948833050586E-5	TEST
// we know only the rhs-hand type, so use that	WITHOUT_CLASSIFICATION	0.9999999892094912	WITHOUT_CLASSIFICATION	1.0790508866145565E-8	TEST
// handle the (assumed) valid cases: // #1 - the only valid datetime addition synatx is one or the other is a datetime (but not both)	WITHOUT_CLASSIFICATION	0.9999995168948401	WITHOUT_CLASSIFICATION	4.831051598777425E-7	TEST
// one or the other needs to be a datetime for us to get into this method in the first place...	WITHOUT_CLASSIFICATION	0.9999996592912898	WITHOUT_CLASSIFICATION	3.4070871020096663E-7	TEST
// #3 - note that this is also true of "datetime - :param"...	WITHOUT_CLASSIFICATION	0.9999955779453659	WITHOUT_CLASSIFICATION	4.422054634077034E-6	TEST
// #2	WITHOUT_CLASSIFICATION	0.9999968790164766	WITHOUT_CLASSIFICATION	3.1209835234144976E-6	TEST
// Generate the inner join -- The elements need to be joined to the collection they are in.	WITHOUT_CLASSIFICATION	0.9999999595813952	WITHOUT_CLASSIFICATION	4.041860488747377E-8	TEST
// nothing to do	WITHOUT_CLASSIFICATION	0.9999969647621514	WITHOUT_CLASSIFICATION	3.035237848576243E-6	TEST
// The 'from element' that represents the elements of the collection.	WITHOUT_CLASSIFICATION	0.9999998778982818	WITHOUT_CLASSIFICATION	1.2210171807933933E-7	TEST
// Add the condition to the join sequence that qualifies the indexed element.	WITHOUT_CLASSIFICATION	0.999999995512217	WITHOUT_CLASSIFICATION	4.487783076131175E-9	TEST
// Sometimes use the element table alias, sometimes use the... umm... collection table alias (many to many)	WITHOUT_CLASSIFICATION	0.9999999906222119	WITHOUT_CLASSIFICATION	9.37778819190534E-9	TEST
// Now, set the text for this node.  It should be the element columns.	WITHOUT_CLASSIFICATION	0.9999989302444494	WITHOUT_CLASSIFICATION	1.0697555505949532E-6	TEST
// Get the function return value type, based on the type of the first argument.	WITHOUT_CLASSIFICATION	0.9999999955859455	WITHOUT_CLASSIFICATION	4.4140545543349805E-9	TEST
// This will call initialize(tok)!	WITHOUT_CLASSIFICATION	0.9999983187122747	WITHOUT_CLASSIFICATION	1.681287725288009E-6	TEST
// mutation depends on the types of nodes invloved...	WITHOUT_CLASSIFICATION	0.9999998350251258	WITHOUT_CLASSIFICATION	1.649748742766724E-7	TEST
// "pass along" our initial embedded parameter node(s) to the first generated // sql fragment so that it can be handled later for parameter binding...	WITHOUT_CLASSIFICATION	0.9999999454936764	WITHOUT_CLASSIFICATION	5.450632350992205E-8	TEST
// logic operators by definition resolve to booleans	WITHOUT_CLASSIFICATION	0.9999998960062524	WITHOUT_CLASSIFICATION	1.0399374755865135E-7	TEST
// Generated select expressions are already resolved, nothing to do.	WITHOUT_CLASSIFICATION	0.9999998656926634	WITHOUT_CLASSIFICATION	1.3430733659504754E-7	TEST
// The path may be a reference to an alias defined in the parent query.	WITHOUT_CLASSIFICATION	0.9999998068732782	WITHOUT_CLASSIFICATION	1.9312672187384596E-7	TEST
// The HQL class alias refers to the class name.	WITHOUT_CLASSIFICATION	0.9999996890066981	WITHOUT_CLASSIFICATION	3.1099330179339084E-7	TEST
// Associate the table alias with the element.	WITHOUT_CLASSIFICATION	0.9999992505158648	WITHOUT_CLASSIFICATION	7.494841351168108E-7	TEST
// try the parent FromClause...	WITHOUT_CLASSIFICATION	0.9999998137042012	WITHOUT_CLASSIFICATION	1.8629579868511807E-7	TEST
// Add the new node to the map so that we don't create it twice.	WITHOUT_CLASSIFICATION	0.9999999671425726	WITHOUT_CLASSIFICATION	3.285742747045311E-8	TEST
// Make sure that all from elements registered with this FROM clause are actually in the AST.	WITHOUT_CLASSIFICATION	0.9999998801747962	WITHOUT_CLASSIFICATION	1.1982520366614684E-7	TEST
// Invoke setScalarColumnText on each constructor argument.	WITHOUT_CLASSIFICATION	0.9999999946005844	WITHOUT_CLASSIFICATION	5.399415537296777E-9	TEST
// Collect the select expressions, skip the first child because it is the class name.	WITHOUT_CLASSIFICATION	0.9999999609381971	WITHOUT_CLASSIFICATION	3.90618029426566E-8	TEST
// return an empty Type array	WITHOUT_CLASSIFICATION	0.9999995959135621	WITHOUT_CLASSIFICATION	4.0408643776796105E-7	TEST
// Constructors are always considered scalar results.	WITHOUT_CLASSIFICATION	0.9999999958227008	WITHOUT_CLASSIFICATION	4.177299083681815E-9	TEST
// this is the exception returned by ReflectHelper.getConstructor() if it cannot // locate an appropriate constructor	WITHOUT_CLASSIFICATION	0.999999699600356	WITHOUT_CLASSIFICATION	3.0039964410482143E-7	TEST
// if there is no order by, make one	WITHOUT_CLASSIFICATION	0.9999863588718985	WITHOUT_CLASSIFICATION	1.364112810160499E-5	TEST
// Find the WHERE; if there is no WHERE, find the FROM...	WITHOUT_CLASSIFICATION	0.9999882223941359	WITHOUT_CLASSIFICATION	1.1777605864142223E-5	TEST
// Now, inject the newly built ORDER BY into the tree	WITHOUT_CLASSIFICATION	0.9999998404907088	WITHOUT_CLASSIFICATION	1.5950929112193606E-7	TEST
// ParameterContainer impl ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999987549269125	WITHOUT_CLASSIFICATION	1.2450730874478672E-6	TEST
// logic operators by definition resolve to boolean.	WITHOUT_CLASSIFICATION	0.9999998031580268	WITHOUT_CLASSIFICATION	1.9684197312598958E-7	TEST
// Render the identifier select fragment using the table alias.	WITHOUT_CLASSIFICATION	0.9999998982825518	WITHOUT_CLASSIFICATION	1.0171744828973337E-7	TEST
// Class names in the FROM clause result in a JoinSequence (the old FromParser does this).	WITHOUT_CLASSIFICATION	0.9999993384145847	WITHOUT_CLASSIFICATION	6.615854152688659E-7	TEST
// For many-to-many joins, use the tablename from the queryable collection for the default text.	WITHOUT_CLASSIFICATION	0.9999999877757932	WITHOUT_CLASSIFICATION	1.2224206798327412E-8	TEST
// Otherwise, use the property mapping.	WITHOUT_CLASSIFICATION	0.9999983134462471	WITHOUT_CLASSIFICATION	1.6865537529181446E-6	TEST
// should be safe to only ever expect EntityPersister references here	WITHOUT_CLASSIFICATION	0.9999992477607208	WITHOUT_CLASSIFICATION	7.522392792373079E-7	TEST
// If the property is a special collection property name, return a CollectionPropertyMapping.	WITHOUT_CLASSIFICATION	0.99999989905826	WITHOUT_CLASSIFICATION	1.0094173989167935E-7	TEST
// Collection of components.	WITHOUT_CLASSIFICATION	0.9999999675159662	WITHOUT_CLASSIFICATION	3.2484033718273545E-8	TEST
// make sure the lhs is "assignable"...	WITHOUT_CLASSIFICATION	0.999990171775937	WITHOUT_CLASSIFICATION	9.82822406311867E-6	TEST
// false indicates to not generate parens around the assignment	WITHOUT_CLASSIFICATION	0.9999984934972018	WITHOUT_CLASSIFICATION	1.5065027982217546E-6	TEST
// Register the FromElement with the FROM clause, now that we have the names and aliases.	WITHOUT_CLASSIFICATION	0.9999990718028734	WITHOUT_CLASSIFICATION	9.281971265197264E-7	TEST
// currently allowed...	WITHOUT_CLASSIFICATION	0.9999998278324724	WITHOUT_CLASSIFICATION	1.7216752761891225E-7	TEST
// HHH-276 : implied joins in a subselect where clause - The destination needs to be added // to the destination's from clause. // Not sure if this is will fix everything, but it works.	WITHOUT_CLASSIFICATION	0.9997370250675774	WITHOUT_CLASSIFICATION	2.6297493242250343E-4	TEST
//return classAlias == null ? className : classAlias;	WITHOUT_CLASSIFICATION	0.9999982883476963	WITHOUT_CLASSIFICATION	1.7116523037243978E-6	TEST
// This is an explicit FROM element.	WITHOUT_CLASSIFICATION	0.9999820792240871	WITHOUT_CLASSIFICATION	1.7920775912909428E-5	TEST
// ParameterContainer impl ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999987549269125	WITHOUT_CLASSIFICATION	1.2450730874478672E-6	TEST
// Fetch can't be used with scroll() or iterate().	WITHOUT_CLASSIFICATION	0.9999995175242418	WITHOUT_CLASSIFICATION	4.824757581925984E-7	TEST
// If it's not implied or it is implied and it's a many to many join where the target wasn't found.	WITHOUT_CLASSIFICATION	0.9999896048272177	WITHOUT_CLASSIFICATION	1.0395172782345016E-5	TEST
// Since this is an explicit FROM element, it can't be implied in the FROM clause.	WITHOUT_CLASSIFICATION	0.9999992409277769	WITHOUT_CLASSIFICATION	7.590722229330129E-7	TEST
// Do nothing, eplicit from elements are *always* in the projection list.	WITHOUT_CLASSIFICATION	0.9999999219375757	WITHOUT_CLASSIFICATION	7.806242429271764E-8	TEST
// propertyName refers to something like collection.size...	WITHOUT_CLASSIFICATION	0.9999927171049191	WITHOUT_CLASSIFICATION	7.2828950808492015E-6	TEST
// property name is a sub-path of a component...	WITHOUT_CLASSIFICATION	0.9999994010127861	WITHOUT_CLASSIFICATION	5.989872140133489E-7	TEST
// Always add the collection's query spaces.	WITHOUT_CLASSIFICATION	0.9999999738613423	WITHOUT_CLASSIFICATION	2.6138657730137795E-8	TEST
// nothing to do; even if the operand is a parameter, no way we could // infer an appropriate expected type here	WITHOUT_CLASSIFICATION	0.999993033525814	WITHOUT_CLASSIFICATION	6.966474185912175E-6	TEST
// logic operators by definition resolve to booleans	WITHOUT_CLASSIFICATION	0.9999998960062524	WITHOUT_CLASSIFICATION	1.0399374755865135E-7	TEST
// DotNode uses null here...	WITHOUT_CLASSIFICATION	0.9999957365400173	WITHOUT_CLASSIFICATION	4.263459982725458E-6	TEST
// We represent a from-clause alias	WITHOUT_CLASSIFICATION	0.9999998133834834	WITHOUT_CLASSIFICATION	1.8661651666596314E-7	TEST
// we are the LHS of the DOT representing a naked comp-prop-ref	WITHOUT_CLASSIFICATION	0.9999984121283356	WITHOUT_CLASSIFICATION	1.587871664422631E-6	TEST
// we are the RHS of the DOT representing a naked comp-prop-ref	WITHOUT_CLASSIFICATION	0.9999984540142753	WITHOUT_CLASSIFICATION	1.545985724580484E-6	TEST
// we represent a naked (simple) prop-ref	WITHOUT_CLASSIFICATION	0.999996172630108	WITHOUT_CLASSIFICATION	3.827369892014501E-6	TEST
// EARLY EXIT!!!  return so the resolve call explicitly coming from DotNode can // resolve this...	WITHOUT_CLASSIFICATION	0.999999737295899	WITHOUT_CLASSIFICATION	2.62704101020361E-7	TEST
// assume this ident's text does *not* refer to a property on the given persister	WITHOUT_CLASSIFICATION	0.9999897606068242	WITHOUT_CLASSIFICATION	1.023939317579858E-5	TEST
// just ignore it for now, it'll get resolved later...	WITHOUT_CLASSIFICATION	0.9999983095034131	WITHOUT_CLASSIFICATION	1.6904965869889453E-6	TEST
// This is not actually a constant, but a reference to FROM element.	WITHOUT_CLASSIFICATION	0.999999801968287	WITHOUT_CLASSIFICATION	1.9803171304377427E-7	TEST
// check to see if our "propPath" actually // represents a property on the persister	WITHOUT_CLASSIFICATION	0.9999999592978172	WITHOUT_CLASSIFICATION	4.0702182771577507E-8	TEST
// these pieces are needed for usage in select clause	WITHOUT_CLASSIFICATION	0.9999998320056401	WITHOUT_CLASSIFICATION	1.679943598867369E-7	TEST
// used to set the type of the parent dot node	WITHOUT_CLASSIFICATION	0.9999999346117624	WITHOUT_CLASSIFICATION	6.538823753934326E-8	TEST
// assume we do *not* refer to a property on the given persister	WITHOUT_CLASSIFICATION	0.999999448868178	WITHOUT_CLASSIFICATION	5.511318219224116E-7	TEST
// assume we do *not* refer to a property on the given persister	WITHOUT_CLASSIFICATION	0.999999448868178	WITHOUT_CLASSIFICATION	5.511318219224116E-7	TEST
// naked property-refs cannot be used with an aliased from element	WITHOUT_CLASSIFICATION	0.9999979268679693	WITHOUT_CLASSIFICATION	2.073132030738673E-6	TEST
// this piece is needed for usage in select clause	WITHOUT_CLASSIFICATION	0.9999988867445716	WITHOUT_CLASSIFICATION	1.1132554284286568E-6	TEST
// do *not* over-write the column text, as that has already been // "rendered" during resolve	WITHOUT_CLASSIFICATION	0.9999999888067879	WITHOUT_CLASSIFICATION	1.1193212188045484E-8	TEST
// for some reason the antlr.CommonAST initialization routines force // this method to get called twice.  The first time with an empty string	WITHOUT_CLASSIFICATION	0.9999994293478245	WITHOUT_CLASSIFICATION	5.706521755273295E-7	TEST
// Look up class name using the first identifier in the path.	WITHOUT_CLASSIFICATION	0.9999997952396318	WITHOUT_CLASSIFICATION	2.0476036824256692E-7	TEST
// Add to the query spaces.	WITHOUT_CLASSIFICATION	0.9999998999070131	WITHOUT_CLASSIFICATION	1.0009298680987681E-7	TEST
// If the from element isn't in the same clause, create a new from element.	WITHOUT_CLASSIFICATION	0.9999999836511912	WITHOUT_CLASSIFICATION	1.634880882557119E-8	TEST
// This is the root level node. // Generate an explicit from clause at the root.	WITHOUT_CLASSIFICATION	0.9999918613061869	WITHOUT_CLASSIFICATION	8.138693813196566E-6	TEST
// Correlated subqueries create 'special' implied from nodes // because correlated subselects can't use an ANSI-style join	WITHOUT_CLASSIFICATION	0.9999999823860473	WITHOUT_CLASSIFICATION	1.761395277241365E-8	TEST
// super-duper-classic-parser-regression-testing-mojo-magic...	WITHOUT_CLASSIFICATION	0.9999980210042835	WITHOUT_CLASSIFICATION	1.9789957164653706E-6	TEST
// A collection of entities...	WITHOUT_CLASSIFICATION	0.9999999759814632	WITHOUT_CLASSIFICATION	2.4018536765247323E-8	TEST
// A collection of components...	WITHOUT_CLASSIFICATION	0.9999999538254307	WITHOUT_CLASSIFICATION	4.6174569342971336E-8	TEST
// A collection of scalar elements...	WITHOUT_CLASSIFICATION	0.9999999943986794	WITHOUT_CLASSIFICATION	5.601320632482481E-9	TEST
// according to both the ANSI-SQL and EJB3 specs, trim can either take // exactly one parameter or a variable number of parameters between 1 and 4. // from the SQL spec: // // <trim function> ::= //      TRIM <left paren> <trim operands> <right paren> // // <trim operands> ::= //      [ [ <trim specification> ] [ <trim character> ] FROM ] <trim source> // // <trim specification> ::= //      LEADING //      | TRAILING //      | BOTH // // If only <trim specification> is omitted, BOTH is assumed; // if <trim character> is omitted, space is assumed	WITHOUT_CLASSIFICATION	0.9999999457354305	WITHOUT_CLASSIFICATION	5.426456957014964E-8	TEST
// Don't include sub-classes for implied collection joins or subquery joins.	WITHOUT_CLASSIFICATION	0.9999997592742816	WITHOUT_CLASSIFICATION	2.407257183055517E-7	TEST
// Treat explict from elements in sub-queries properly.	WITHOUT_CLASSIFICATION	0.9999995379013846	WITHOUT_CLASSIFICATION	4.6209861547293454E-7	TEST
//	WITHOUT_CLASSIFICATION	0.9999674909996846	WITHOUT_CLASSIFICATION	3.2509000315333503E-5	TEST
// the "root from-element" in correlated subqueries do need this piece	WITHOUT_CLASSIFICATION	0.9999985278799319	WITHOUT_CLASSIFICATION	1.472120068100326E-6	TEST
// Create the FROM element for the target (the elements of the collection).	WITHOUT_CLASSIFICATION	0.9999999717867798	WITHOUT_CLASSIFICATION	2.8213220253204618E-8	TEST
// If the join is implied, then don't include sub-classes on the element.	WITHOUT_CLASSIFICATION	0.9999984825030986	WITHOUT_CLASSIFICATION	1.5174969013904269E-6	TEST
// Overridden informational metadata ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999996463793784	WITHOUT_CLASSIFICATION	3.5362062156873624E-7	TEST
// The associated entity is implied, but it must be included in the FROM. // The collection alias is the role.	WITHOUT_CLASSIFICATION	0.9999977207497134	WITHOUT_CLASSIFICATION	2.279250286648231E-6	TEST
// Tag this node as a JOIN. // Don't include subclasses in the join. // This is a clollection join.	WITHOUT_CLASSIFICATION	0.9999995678510355	WITHOUT_CLASSIFICATION	4.321489643836889E-7	TEST
// Get the class name of the associated entity.	WITHOUT_CLASSIFICATION	0.999999566446829	WITHOUT_CLASSIFICATION	4.335531710243405E-7	TEST
//  origin, path, implied, columns, classAlias,	WITHOUT_CLASSIFICATION	0.9999998520338108	WITHOUT_CLASSIFICATION	1.4796618921818959E-7	TEST
/*implied*/	WITHOUT_CLASSIFICATION	0.9998982214544285	WITHOUT_CLASSIFICATION	1.0177854557151586E-4	TEST
// For implied many-to-many, just add the end join.	WITHOUT_CLASSIFICATION	0.9999957937130585	WITHOUT_CLASSIFICATION	4.206286941504528E-6	TEST
// Overridden informational metadata ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999996463793784	WITHOUT_CLASSIFICATION	3.5362062156873624E-7	TEST
// Overridden informational metadata ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999996463793784	WITHOUT_CLASSIFICATION	3.5362062156873624E-7	TEST
// the standard SQL function name is current_timestamp...	WITHOUT_CLASSIFICATION	0.9999993259344192	WITHOUT_CLASSIFICATION	6.740655808373469E-7	TEST
// This causes the factory to instantiate the desired class.	WITHOUT_CLASSIFICATION	0.9999999836785394	WITHOUT_CLASSIFICATION	1.632146061580667E-8	TEST
//private Type[] sqlResultTypes;	WITHOUT_CLASSIFICATION	0.9999855412213221	WITHOUT_CLASSIFICATION	1.4458778677968374E-5	TEST
// Frontbase has no known variation of a "SELECT ... FOR UPDATE" syntax...	WITHOUT_CLASSIFICATION	0.9999999418628447	WITHOUT_CLASSIFICATION	5.8137155327475814E-8	TEST
/*	WITHOUT_CLASSIFICATION	0.9998694236363511	WITHOUT_CLASSIFICATION	1.305763636488417E-4	TEST
/*public Type[] getSqlResultTypes() {	WITHOUT_CLASSIFICATION	0.9999401400842534	WITHOUT_CLASSIFICATION	5.9859915746708475E-5	TEST
// First, collect all of the select expressions. // NOTE: This must be done *before* invoking setScalarColumnText() because setScalarColumnText() // changes the AST!!!	WITHOUT_CLASSIFICATION	0.9999999372645403	WITHOUT_CLASSIFICATION	6.273545971559717E-8	TEST
// First allow the actual type to control the return value. (the actual underlying sqltype could actually be different)	WITHOUT_CLASSIFICATION	0.9999999017078969	WITHOUT_CLASSIFICATION	9.829210308075956E-8	TEST
//sqlResultTypeList.addAll( constructorArgumentTypeList );	WITHOUT_CLASSIFICATION	0.9999998179175156	WITHOUT_CLASSIFICATION	1.820824844601808E-7	TEST
// If the data type is not an association type, it could not have been in the FROM clause.	WITHOUT_CLASSIFICATION	0.9999996701604653	WITHOUT_CLASSIFICATION	3.2983953457824684E-7	TEST
//sqlResultTypeList.add( type );	WITHOUT_CLASSIFICATION	0.9999864334558538	WITHOUT_CLASSIFICATION	1.3566544146215786E-5	TEST
// Always add the type to the return type list.	WITHOUT_CLASSIFICATION	0.9999999154641428	WITHOUT_CLASSIFICATION	8.45358572734354E-8	TEST
// add the fetched entities	WITHOUT_CLASSIFICATION	0.9999997423861184	WITHOUT_CLASSIFICATION	2.5761388163516675E-7	TEST
// Get ready to start adding nodes.	WITHOUT_CLASSIFICATION	0.9999992704139853	WITHOUT_CLASSIFICATION	7.295860147847014E-7	TEST
// function support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999995373322381	WITHOUT_CLASSIFICATION	4.6266776192578777E-7	TEST
// If there are any scalars (non-entities) selected, render the select column aliases.	WITHOUT_CLASSIFICATION	0.9999999676711352	WITHOUT_CLASSIFICATION	3.232886482909838E-8	TEST
/*sqlResultTypeList,*/	WITHOUT_CLASSIFICATION	0.9999521713490712	WITHOUT_CLASSIFICATION	4.782865092882585E-5	TEST
/*ArrayList sqlResultTypeList,*/	WITHOUT_CLASSIFICATION	0.9999926930512769	WITHOUT_CLASSIFICATION	7.306948723021802E-6	TEST
//sqlResultTypes = ( Type[] ) sqlResultTypeList.toArray( new Type[sqlResultTypeList.size()] );	WITHOUT_CLASSIFICATION	0.9999968300347057	WITHOUT_CLASSIFICATION	3.1699652941724443E-6	TEST
// lock acquisition support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.999999732590779	WITHOUT_CLASSIFICATION	2.6740922098029835E-7	TEST
//TODO:	WITHOUT_CLASSIFICATION	0.9927106050920973	WITHOUT_CLASSIFICATION	0.00728939490790262	TEST
// Add the type to the list of returned sqlResultTypes.	WITHOUT_CLASSIFICATION	0.9999998728063687	WITHOUT_CLASSIFICATION	1.2719363134411733E-7	TEST
// Generate an 2d array of column names, the first dimension is parallel with the // return types array.  The second dimension is the list of column names for each // type.	WITHOUT_CLASSIFICATION	0.9999998448189886	WITHOUT_CLASSIFICATION	1.551810113994214E-7	TEST
// Generate the select expression.	WITHOUT_CLASSIFICATION	0.9999997424401245	WITHOUT_CLASSIFICATION	2.575598755359314E-7	TEST
// union subclass support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999995148885953	WITHOUT_CLASSIFICATION	4.851114047491238E-7	TEST
// Skip 'DISTINCT' and 'ALL', so we return the first expression node.	WITHOUT_CLASSIFICATION	0.9999999717556647	WITHOUT_CLASSIFICATION	2.8244335338456372E-8	TEST
// Create SQL_TOKEN nodes for the columns.	WITHOUT_CLASSIFICATION	0.99999975136201	WITHOUT_CLASSIFICATION	2.48637990026183E-7	TEST
// Generate the property select tokens.	WITHOUT_CLASSIFICATION	0.9999990096812906	WITHOUT_CLASSIFICATION	9.903187094228455E-7	TEST
// Get the function name node.	WITHOUT_CLASSIFICATION	0.9999998865958677	WITHOUT_CLASSIFICATION	1.13404132271292E-7	TEST
// Method expressions in a SELECT should always be considered scalar.	WITHOUT_CLASSIFICATION	0.9999999944285691	WITHOUT_CLASSIFICATION	5.571430896404493E-9	TEST
// If this is 'elements' then create a new FROM element.	WITHOUT_CLASSIFICATION	0.9999928328268324	WITHOUT_CLASSIFICATION	7.167173167584948E-6	TEST
// Not elements(x)	WITHOUT_CLASSIFICATION	0.9999993425814109	WITHOUT_CLASSIFICATION	6.574185891784566E-7	TEST
// Dialect function	WITHOUT_CLASSIFICATION	0.9999999012866835	WITHOUT_CLASSIFICATION	9.871331662230272E-8	TEST
// Collection 'property function'	WITHOUT_CLASSIFICATION	0.9999997463856634	WITHOUT_CLASSIFICATION	2.536143365951725E-7	TEST
// If the constant is an IDENT, figure out what it means...	WITHOUT_CLASSIFICATION	0.9999998786094725	WITHOUT_CLASSIFICATION	1.213905275166465E-7	TEST
// IDENT is a class alias in the FROM.	WITHOUT_CLASSIFICATION	0.9999988629117813	WITHOUT_CLASSIFICATION	1.1370882187127936E-6	TEST
// Resolve to an identity column.	WITHOUT_CLASSIFICATION	0.9999999136626017	WITHOUT_CLASSIFICATION	8.63373984555321E-8	TEST
// Otherwise, it's a literal.	WITHOUT_CLASSIFICATION	0.9999994348523751	WITHOUT_CLASSIFICATION	5.651476249870557E-7	TEST
// the name of an entity class	WITHOUT_CLASSIFICATION	0.9999998426174683	WITHOUT_CLASSIFICATION	1.573825315491371E-7	TEST
//the class discriminator value	WITHOUT_CLASSIFICATION	0.9999988692514328	WITHOUT_CLASSIFICATION	1.1307485672063287E-6	TEST
// Chop off the rest of the tree.	WITHOUT_CLASSIFICATION	0.9999821894518277	WITHOUT_CLASSIFICATION	1.7810548172267893E-5	TEST
// Add a space before the display text.	WITHOUT_CLASSIFICATION	0.9999997348063702	WITHOUT_CLASSIFICATION	2.6519362974991304E-7	TEST
// Find or create the WHERE clause	WITHOUT_CLASSIFICATION	0.9999999154310644	WITHOUT_CLASSIFICATION	8.456893563273778E-8	TEST
// child == parent.getFirstChild()	WITHOUT_CLASSIFICATION	0.9999998691825293	WITHOUT_CLASSIFICATION	1.308174707337394E-7	TEST
// Find or create the WHERE clause	WITHOUT_CLASSIFICATION	0.9999999154310644	WITHOUT_CLASSIFICATION	8.456893563273778E-8	TEST
// Filter conditions need to be inserted before the HQL where condition and the // theta join node.  This is because org.hibernate.loader.Loader binds the filter parameters first, // then it binds all the HQL query parameters, see org.hibernate.loader.Loader.processFilterParameters().	WITHOUT_CLASSIFICATION	0.9999974840651022	WITHOUT_CLASSIFICATION	2.5159348978065903E-6	TEST
// Put the FILTERS node before the HQL condition and theta joins	WITHOUT_CLASSIFICATION	0.9999999609110957	WITHOUT_CLASSIFICATION	3.90889043741292E-8	TEST
// add the current fragment to the FILTERS node	WITHOUT_CLASSIFICATION	0.9999997666591899	WITHOUT_CLASSIFICATION	2.3334081000625115E-7	TEST
// Create a new THETA_JOINS node as a parent of all filters	WITHOUT_CLASSIFICATION	0.9999999350797318	WITHOUT_CLASSIFICATION	6.49202681755512E-8	TEST
// Put the THETA_JOINS node before the HQL condition, after the filters.	WITHOUT_CLASSIFICATION	0.9999999319718	WITHOUT_CLASSIFICATION	6.802819993762799E-8	TEST
// add the current fragment to the THETA_JOINS node	WITHOUT_CLASSIFICATION	0.9999998205366574	WITHOUT_CLASSIFICATION	1.794633425172708E-7	TEST
// First, try to get the persister using the given name directly.	WITHOUT_CLASSIFICATION	0.9999973536864343	WITHOUT_CLASSIFICATION	2.646313565858513E-6	TEST
// unable to locate it using this name	WITHOUT_CLASSIFICATION	0.9999955337622042	WITHOUT_CLASSIFICATION	4.466237795913797E-6	TEST
// If that didn't work, try using the 'import' name.	WITHOUT_CLASSIFICATION	0.9999966826262144	WITHOUT_CLASSIFICATION	3.3173737856435556E-6	TEST
// Implicit joins use theta style (WHERE pk = fk), explicit joins use JOIN (after from)	WITHOUT_CLASSIFICATION	0.9999998548602107	WITHOUT_CLASSIFICATION	1.451397892649738E-7	TEST
// locate the registered function by the given name	WITHOUT_CLASSIFICATION	0.9999984151462882	WITHOUT_CLASSIFICATION	1.5848537117635413E-6	TEST
// determine the type of the first argument...	WITHOUT_CLASSIFICATION	0.9999999057451691	WITHOUT_CLASSIFICATION	9.42548309926085E-8	TEST
// Use the DOT node to emit the first column name. // Create the column names, folled by the column aliases.	WITHOUT_CLASSIFICATION	0.9999996633216467	WITHOUT_CLASSIFICATION	3.3667835328283206E-7	TEST
// Note: this simply constructs a "raw" SQL_TOKEN representing the // where fragment and injects this into the tree.  This "works"; // however it is probably not the best long-term solution. // // At some point we probably want to apply an additional grammar to // properly tokenize this where fragment into constituent parts // focused on the operators embedded within the fragment.	WITHOUT_CLASSIFICATION	0.9999922022182645	WITHOUT_CLASSIFICATION	7.79778173548711E-6	TEST
// Append the text of the current node.	WITHOUT_CLASSIFICATION	0.9999998126827896	WITHOUT_CLASSIFICATION	1.8731721028440384E-7	TEST
// If the node has a first child, recurse into the first child.	WITHOUT_CLASSIFICATION	0.9999999762563826	WITHOUT_CLASSIFICATION	2.374361746122234E-8	TEST
// If there is a second child (RHS), recurse into that child.	WITHOUT_CLASSIFICATION	0.9999999569475856	WITHOUT_CLASSIFICATION	4.3052414340311865E-8	TEST
// Iterate through the alias,JoinSequence pairs and generate SQL token nodes.	WITHOUT_CLASSIFICATION	0.9999996870458996	WITHOUT_CLASSIFICATION	3.1295410041107473E-7	TEST
// If the from element represents a JOIN_FRAGMENT and it is // a theta-style join, convert its type from JOIN_FRAGMENT // to FROM_FRAGMENT	WITHOUT_CLASSIFICATION	0.9999998162034767	WITHOUT_CLASSIFICATION	1.8379652327270771E-7	TEST
// this is used during SqlGenerator processing	WITHOUT_CLASSIFICATION	0.9999951243020194	WITHOUT_CLASSIFICATION	4.8756979806128195E-6	TEST
// If there is a FROM fragment and the FROM element is an explicit, then add the from part.	WITHOUT_CLASSIFICATION	0.999984741229094	WITHOUT_CLASSIFICATION	1.5258770906038597E-5	TEST
/*&& StringHelper.isNotEmpty( frag )*/	WITHOUT_CLASSIFICATION	0.9999978459135896	WITHOUT_CLASSIFICATION	2.154086410436107E-6	TEST
// The FROM fragment will probably begin with ', '.  Remove this if it is present.	WITHOUT_CLASSIFICATION	0.9998736526327432	WITHOUT_CLASSIFICATION	1.2634736725693115E-4	TEST
// This uses a PathExpressionParser but notice that compound paths are not valid, // only bare names and simple paths:	WITHOUT_CLASSIFICATION	0.9999999627477772	WITHOUT_CLASSIFICATION	3.725222278042219E-8	TEST
// SELECT p FROM p IN CLASS eg.Person ORDER BY p.Name, p.Address, p	WITHOUT_CLASSIFICATION	0.9999978976282106	WITHOUT_CLASSIFICATION	2.102371789386941E-6	TEST
// The reason for this is SQL doesn't let you sort by an expression you are // not returning in the result set.	WITHOUT_CLASSIFICATION	0.999936401071427	WITHOUT_CLASSIFICATION	6.3598928572978E-5	TEST
//named query parameter	WITHOUT_CLASSIFICATION	0.9999907255286415	WITHOUT_CLASSIFICATION	9.274471358511712E-6	TEST
//default mode	WITHOUT_CLASSIFICATION	0.9999957635980741	WITHOUT_CLASSIFICATION	4.236401925875764E-6	TEST
//QueryJoinFragment join = q.createJoinFragment(useThetaStyleJoin);	WITHOUT_CLASSIFICATION	0.9999998954879113	WITHOUT_CLASSIFICATION	1.0451208864816071E-7	TEST
//reset the dotcount (but not the path) //after reset!	WITHOUT_CLASSIFICATION	0.9999911047232343	WITHOUT_CLASSIFICATION	8.895276765729015E-6	TEST
//after reset!	WITHOUT_CLASSIFICATION	0.9999821794055281	WITHOUT_CLASSIFICATION	1.782059447185671E-5	TEST
// we don't need to worry about any condition in the ON clause // here (toFromFragmentString), since anything in the ON condition // is already applied to the whole query	WITHOUT_CLASSIFICATION	0.9999998203854865	WITHOUT_CLASSIFICATION	1.7961451353770757E-7	TEST
// bit_length feels a bit broken to me. We have to cast to char in order to // pass when a numeric value is supplied. But of course the answers given will // be wildly different for these two datatypes. 1234.5678 will be 9 bytes as // a char string but will be 8 or 16 bytes as a true numeric. // Jay Nance 2006-09-22	WITHOUT_CLASSIFICATION	0.9999991390422732	WITHOUT_CLASSIFICATION	8.609577268401676E-7	TEST
// dotcount>=2	WITHOUT_CLASSIFICATION	0.9999995695231252	WITHOUT_CLASSIFICATION	4.304768749274594E-7	TEST
// Do the corresponding RHS	WITHOUT_CLASSIFICATION	0.9999998001626169	WITHOUT_CLASSIFICATION	1.9983738318090186E-7	TEST
//if its "id"	WITHOUT_CLASSIFICATION	0.9999945581819468	WITHOUT_CLASSIFICATION	5.441818053106292E-6	TEST
//or its the id property name	WITHOUT_CLASSIFICATION	0.9999613340350241	WITHOUT_CLASSIFICATION	3.86659649759356E-5	TEST
//join = q.createJoinFragment(useThetaStyleJoin);	WITHOUT_CLASSIFICATION	0.9999999016123692	WITHOUT_CLASSIFICATION	9.838763082697236E-8	TEST
//important!!	WITHOUT_CLASSIFICATION	0.9999746549351064	WITHOUT_CLASSIFICATION	2.5345064893588643E-5	TEST
//String[] keyCols = collPersister.getKeyColumnNames();	WITHOUT_CLASSIFICATION	0.9999988714076925	WITHOUT_CLASSIFICATION	1.128592307535999E-6	TEST
// an association	WITHOUT_CLASSIFICATION	0.9999983918018286	WITHOUT_CLASSIFICATION	1.6081981714596765E-6	TEST
//allow index() function:	WITHOUT_CLASSIFICATION	0.999999531213526	WITHOUT_CLASSIFICATION	4.687864739521301E-7	TEST
// here assume SQLServer2005 using snapshot isolation, which does not have this problem	WITHOUT_CLASSIFICATION	0.9999750104544071	WITHOUT_CLASSIFICATION	2.4989545592914757E-5	TEST
// The reason for this is SQL doesn't let you sort by an expression you are // not returning in the result set.	WITHOUT_CLASSIFICATION	0.999936401071427	WITHOUT_CLASSIFICATION	6.3598928572978E-5	TEST
//many-to-many	WITHOUT_CLASSIFICATION	0.9999779062833829	WITHOUT_CLASSIFICATION	2.2093716617088976E-5	TEST
// collections of values	WITHOUT_CLASSIFICATION	0.9999999664434324	WITHOUT_CLASSIFICATION	3.355656766949541E-8	TEST
//opening paren in new Foo ( ... )	WITHOUT_CLASSIFICATION	0.9999930967742061	WITHOUT_CLASSIFICATION	6.903225793869216E-6	TEST
//if we are inside a new Result(), but not inside a nested function	WITHOUT_CLASSIFICATION	0.9999992072094983	WITHOUT_CLASSIFICATION	7.927905017444403E-7	TEST
//special case	WITHOUT_CLASSIFICATION	0.9999989146433131	WITHOUT_CLASSIFICATION	1.085356686860574E-6	TEST
// the name of an SQL function	WITHOUT_CLASSIFICATION	0.9999997262109835	WITHOUT_CLASSIFICATION	2.737890164982938E-7	TEST
//null child could occur for no from clause in a filter	WITHOUT_CLASSIFICATION	0.9999999058739775	WITHOUT_CLASSIFICATION	9.41260224778852E-8	TEST
//this is basically a copy/paste of OrderByParser ... might be worth refactoring	WITHOUT_CLASSIFICATION	0.9999880064877202	WITHOUT_CLASSIFICATION	1.1993512279783445E-5	TEST
// SELECT p FROM p IN CLASS eg.Person GROUP BY p.Name, p.Address, p	WITHOUT_CLASSIFICATION	0.9999989178287727	WITHOUT_CLASSIFICATION	1.0821712273749327E-6	TEST
// return aliases not supported in classic translator!	WITHOUT_CLASSIFICATION	0.9999999147294792	WITHOUT_CLASSIFICATION	8.527052072763295E-8	TEST
//register collection role	WITHOUT_CLASSIFICATION	0.9999980186920062	WITHOUT_CLASSIFICATION	1.981307993748403E-6	TEST
// The keyword used to specify an identity column, if identity column key generation is supported.	WITHOUT_CLASSIFICATION	0.9999997883735628	WITHOUT_CLASSIFICATION	2.1162643712098975E-7	TEST
//.getElementPropertyMapping();	WITHOUT_CLASSIFICATION	0.9999793010774696	WITHOUT_CLASSIFICATION	2.069892253042879E-5	TEST
//crossJoins.add(name);	WITHOUT_CLASSIFICATION	0.9999952290086189	WITHOUT_CLASSIFICATION	4.770991381024564E-6	TEST
//ie no select clause in HQL	WITHOUT_CLASSIFICATION	0.9999999367494541	WITHOUT_CLASSIFICATION	6.325054592908031E-8	TEST
// initialize the Set of queried identifier spaces (ie. tables)	WITHOUT_CLASSIFICATION	0.999999934949375	WITHOUT_CLASSIFICATION	6.505062496667245E-8	TEST
//ie. no select clause	WITHOUT_CLASSIFICATION	0.9999997750225745	WITHOUT_CLASSIFICATION	2.2497742556245444E-7	TEST
//there _was_ a select clause	WITHOUT_CLASSIFICATION	0.9999994110021756	WITHOUT_CLASSIFICATION	5.889978243947125E-7	TEST
// return the concrete type, or the underlying type if a concrete type // was not specified	WITHOUT_CLASSIFICATION	0.9999999404694345	WITHOUT_CLASSIFICATION	5.953056557134752E-8	TEST
//many-to-many	WITHOUT_CLASSIFICATION	0.9999779062833829	WITHOUT_CLASSIFICATION	2.2093716617088976E-5	TEST
//q.addCollection(collectionName, collectionRole);	WITHOUT_CLASSIFICATION	0.9999992110489621	WITHOUT_CLASSIFICATION	7.889510379784179E-7	TEST
// classic parser does not support bulk manipulation statements	WITHOUT_CLASSIFICATION	0.9999997745086041	WITHOUT_CLASSIFICATION	2.2549139586485314E-7	TEST
// can't cache this stuff either (per-invocation)	WITHOUT_CLASSIFICATION	0.9999998348198095	WITHOUT_CLASSIFICATION	1.651801904014403E-7	TEST
// unfortunately this stuff can't be cached because // it is per-invocation, not constant for the // QueryTranslator instance	WITHOUT_CLASSIFICATION	0.9999999231250671	WITHOUT_CLASSIFICATION	7.68749328026918E-8	TEST
// This is the legacy behaviour for HQL queries...	WITHOUT_CLASSIFICATION	0.9999970739634123	WITHOUT_CLASSIFICATION	2.9260365877946925E-6	TEST
// not known!	WITHOUT_CLASSIFICATION	0.9999975759469087	WITHOUT_CLASSIFICATION	2.4240530912954396E-6	TEST
// not known!	WITHOUT_CLASSIFICATION	0.9999975759469087	WITHOUT_CLASSIFICATION	2.4240530912954396E-6	TEST
// we have the form: trim(trimSource) //      so we trim leading and trailing spaces // EARLY EXIT!!!!	WITHOUT_CLASSIFICATION	0.9999999083945732	WITHOUT_CLASSIFICATION	9.160542688820183E-8	TEST
// not known!	WITHOUT_CLASSIFICATION	0.9999975759469087	WITHOUT_CLASSIFICATION	2.4240530912954396E-6	TEST
// not known!	WITHOUT_CLASSIFICATION	0.9999975759469087	WITHOUT_CLASSIFICATION	2.4240530912954396E-6	TEST
//Need this, since join condition can appear inside parens!	WITHOUT_CLASSIFICATION	0.9999985284027841	WITHOUT_CLASSIFICATION	1.4715972158413705E-6	TEST
//tokens that close a sub expression //tokens that open a sub expression //tokens that would indicate a sub expression is a boolean expression	WITHOUT_CLASSIFICATION	0.9999972290722062	WITHOUT_CLASSIFICATION	2.770927793723374E-6	TEST
//expressionTerminators.add(","); // deliberately excluded	WITHOUT_CLASSIFICATION	0.9999993943760175	WITHOUT_CLASSIFICATION	6.056239825134997E-7	TEST
//expressionOpeners.add(","); // deliberately excluded	WITHOUT_CLASSIFICATION	0.9999995465043181	WITHOUT_CLASSIFICATION	4.5349568189761906E-7	TEST
// we have the form: trim(from trimSource). //      This is functionally equivalent to trim(trimSource) // EARLY EXIT!!!!	WITHOUT_CLASSIFICATION	0.9999998704111397	WITHOUT_CLASSIFICATION	1.2958886042604662E-7	TEST
// otherwise, a trim-specification and/or a trim-character // have been specified;  we need to decide which options // are present and "do the right thing" // should leading trim-characters be trimmed? // should trailing trim-characters be trimmed? // the trim-character (what is to be trimmed off?) // the trim-source (from where should it be trimmed?)	WITHOUT_CLASSIFICATION	0.9999988459266184	WITHOUT_CLASSIFICATION	1.154073381625982E-6	TEST
//Inside a BETWEEN ... AND ... expression	WITHOUT_CLASSIFICATION	0.9999965407023849	WITHOUT_CLASSIFICATION	3.4592976150941934E-6	TEST
//were an odd or even number of NOTs encountered //the join string built up by compound paths inside this expression //a flag indicating if the subexpression is known to be boolean	WITHOUT_CLASSIFICATION	0.9999938631540679	WITHOUT_CLASSIFICATION	6.1368459320322555E-6	TEST
//ie. a many-to-many	WITHOUT_CLASSIFICATION	0.9999952079418317	WITHOUT_CLASSIFICATION	4.792058168307724E-6	TEST
//Cope with [,]	WITHOUT_CLASSIFICATION	0.9999799899130168	WITHOUT_CLASSIFICATION	2.0010086983101118E-5	TEST
//Cope with a continued path expression (ie. ].baz)	WITHOUT_CLASSIFICATION	0.9999989972621657	WITHOUT_CLASSIFICATION	1.0027378343238575E-6	TEST
//NOTE: early return	WITHOUT_CLASSIFICATION	0.9999939777310756	WITHOUT_CLASSIFICATION	6.022268924433735E-6	TEST
//Cope with a subselect	WITHOUT_CLASSIFICATION	0.9999985768474515	WITHOUT_CLASSIFICATION	1.4231525484672787E-6	TEST
//Cope with special cases of AND, NOT, ()	WITHOUT_CLASSIFICATION	0.9999668989949014	WITHOUT_CLASSIFICATION	3.3101005098592264E-5	TEST
//Close extra brackets we opened	WITHOUT_CLASSIFICATION	0.9999990492660301	WITHOUT_CLASSIFICATION	9.507339698833145E-7	TEST
//take note when this is a boolean expression	WITHOUT_CLASSIFICATION	0.9998766696720089	WITHOUT_CLASSIFICATION	1.2333032799111658E-4	TEST
// assumes that types are all of span 1	WITHOUT_CLASSIFICATION	0.9999998323824336	WITHOUT_CLASSIFICATION	1.6761756645533513E-7	TEST
//process a token, mapping OO path expressions to SQL expressions	WITHOUT_CLASSIFICATION	0.9999876048232996	WITHOUT_CLASSIFICATION	1.2395176700334309E-5	TEST
//Open any extra brackets we might need.	WITHOUT_CLASSIFICATION	0.999963740416921	WITHOUT_CLASSIFICATION	3.625958307898532E-5	TEST
//Cope with special cases of AND, NOT, )	WITHOUT_CLASSIFICATION	0.9999610925446436	WITHOUT_CLASSIFICATION	3.890745535639823E-5	TEST
// the next one up must also be	WITHOUT_CLASSIFICATION	0.9999987146699374	WITHOUT_CLASSIFICATION	1.285330062528797E-6	TEST
// Add any joins	WITHOUT_CLASSIFICATION	0.9999997631772515	WITHOUT_CLASSIFICATION	2.3682274858242138E-7	TEST
// assumes that types are all of span 1	WITHOUT_CLASSIFICATION	0.9999998323824336	WITHOUT_CLASSIFICATION	1.6761756645533513E-7	TEST
//named query parameter	WITHOUT_CLASSIFICATION	0.9999907255286415	WITHOUT_CLASSIFICATION	9.274471358511712E-6	TEST
//path expression	WITHOUT_CLASSIFICATION	0.9999970891105631	WITHOUT_CLASSIFICATION	2.9108894369722487E-6	TEST
// saves / updates don't cascade to uninitialized collections	WITHOUT_CLASSIFICATION	0.9999987405609362	WITHOUT_CLASSIFICATION	1.2594390638697706E-6	TEST
// persists don't cascade to uninitialized collections	WITHOUT_CLASSIFICATION	0.9999992102725161	WITHOUT_CLASSIFICATION	7.897274837908219E-7	TEST
//anything else	WITHOUT_CLASSIFICATION	0.9999959581864151	WITHOUT_CLASSIFICATION	4.0418135849727345E-6	TEST
// the path expression continues after a ]	WITHOUT_CLASSIFICATION	0.9999998586489182	WITHOUT_CLASSIFICATION	1.4135108180908207E-7	TEST
// careful with this!	WITHOUT_CLASSIFICATION	0.9999988341576459	WITHOUT_CLASSIFICATION	1.1658423540958835E-6	TEST
// the path expression ends at the ]	WITHOUT_CLASSIFICATION	0.9999992305320612	WITHOUT_CLASSIFICATION	7.694679388231058E-7	TEST
// "finish off" the join	WITHOUT_CLASSIFICATION	0.9999993333845204	WITHOUT_CLASSIFICATION	6.66615479590645E-7	TEST
//NOTICE: no " or . since they are part of (compound) identifiers	WITHOUT_CLASSIFICATION	0.9999988527865326	WITHOUT_CLASSIFICATION	1.1472134674409188E-6	TEST
//cannot instantiate	WITHOUT_CLASSIFICATION	0.9999994101016871	WITHOUT_CLASSIFICATION	5.898983128452591E-7	TEST
// start by looking for HQL keywords...	WITHOUT_CLASSIFICATION	0.9999991691073606	WITHOUT_CLASSIFICATION	8.308926393514189E-7	TEST
// inner joins can be abbreviated to 'join'	WITHOUT_CLASSIFICATION	0.9999993836551669	WITHOUT_CLASSIFICATION	6.163448330018252E-7	TEST
// 'outer' is optional and is ignored	WITHOUT_CLASSIFICATION	0.9999979181270142	WITHOUT_CLASSIFICATION	2.0818729858189636E-6	TEST
// now anything that is not a HQL keyword	WITHOUT_CLASSIFICATION	0.9999972669377908	WITHOUT_CLASSIFICATION	2.733062209332982E-6	TEST
// process the "old" HQL style where aliases appear _first_ // ie. using the IN or IN CLASS constructions	WITHOUT_CLASSIFICATION	0.9999999592346587	WITHOUT_CLASSIFICATION	4.076534138567446E-8	TEST
// treat it as a classname	WITHOUT_CLASSIFICATION	0.9999999278122084	WITHOUT_CLASSIFICATION	7.218779162105403E-8	TEST
// treat it as a path expression	WITHOUT_CLASSIFICATION	0.9999997588918664	WITHOUT_CLASSIFICATION	2.4110813348536885E-7	TEST
// starts with the name of a mapped class (new style)	WITHOUT_CLASSIFICATION	0.9999998661545039	WITHOUT_CLASSIFICATION	1.338454961400278E-7	TEST
// starts with a path expression (new style)	WITHOUT_CLASSIFICATION	0.999999800106443	WITHOUT_CLASSIFICATION	1.9989355715238772E-7	TEST
//allow ODMG OQL style: from Person p, p.cars c	WITHOUT_CLASSIFICATION	0.9999917886066487	WITHOUT_CLASSIFICATION	8.211393351345477E-6	TEST
//handle quoted strings	WITHOUT_CLASSIFICATION	0.9999941436355879	WITHOUT_CLASSIFICATION	5.856364412151431E-6	TEST
// Object insertions, updates, and deletions have list semantics because // they must happen in the right order so as to respect referential // integrity	WITHOUT_CLASSIFICATION	0.9999999083865337	WITHOUT_CLASSIFICATION	9.16134663164133E-8	TEST
// "finish off" the join	WITHOUT_CLASSIFICATION	0.9999993333845204	WITHOUT_CLASSIFICATION	6.66615479590645E-7	TEST
//ignore whitespace	WITHOUT_CLASSIFICATION	0.9999945509474433	WITHOUT_CLASSIFICATION	5.4490525567246396E-6	TEST
//do replacements	WITHOUT_CLASSIFICATION	0.999999303172886	WITHOUT_CLASSIFICATION	6.968271140673542E-7	TEST
//handle HQL2 collection syntax	WITHOUT_CLASSIFICATION	0.9999996848853652	WITHOUT_CLASSIFICATION	3.1511463481128715E-7	TEST
// uuid.hex is deprecated	WITHOUT_CLASSIFICATION	0.9999985429904569	WITHOUT_CLASSIFICATION	1.4570095431507276E-6	TEST
// AbstractSelectingDelegate impl ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999982180230258	WITHOUT_CLASSIFICATION	1.7819769741986292E-6	TEST
//hilo params	WITHOUT_CLASSIFICATION	0.9999927432390213	WITHOUT_CLASSIFICATION	7.2567609786359365E-6	TEST
//sql = query;	WITHOUT_CLASSIFICATION	0.9999974769452773	WITHOUT_CLASSIFICATION	2.5230547226334556E-6	TEST
// performance opt	WITHOUT_CLASSIFICATION	0.9999996960215082	WITHOUT_CLASSIFICATION	3.039784918447003E-7	TEST
//sql = update;	WITHOUT_CLASSIFICATION	0.9999972820405988	WITHOUT_CLASSIFICATION	2.717959401308671E-6	TEST
//hilo config	WITHOUT_CLASSIFICATION	0.9999981710546588	WITHOUT_CLASSIFICATION	1.8289453412431275E-6	TEST
// so we "clock over" on the first invocation	WITHOUT_CLASSIFICATION	0.9999999863905611	WITHOUT_CLASSIFICATION	1.360943897001504E-8	TEST
// don't allow comments on these insert statements as comments totally // blow up the Oracle getGeneratedKeys "support" :(	WITHOUT_CLASSIFICATION	0.9999983861646636	WITHOUT_CLASSIFICATION	1.6138353363583603E-6	TEST
//abort the save (the object is already saved by a circular cascade)	WITHOUT_CLASSIFICATION	0.9999980353256845	WITHOUT_CLASSIFICATION	1.9646743154039705E-6	TEST
//throw new IdentifierGenerationException("save associated object first, or disable cascade for inverse association");	WITHOUT_CLASSIFICATION	0.9999996190186362	WITHOUT_CLASSIFICATION	3.8098136377525234E-7	TEST
// intentionally empty	WITHOUT_CLASSIFICATION	0.9999995680953937	WITHOUT_CLASSIFICATION	4.3190460633227173E-7	TEST
//do nothing to avoid a lazy property initialization	WITHOUT_CLASSIFICATION	0.9999837122041303	WITHOUT_CLASSIFICATION	1.6287795869788718E-5	TEST
//keep the behavior consistent even for boundary usages	WITHOUT_CLASSIFICATION	0.9999987207403213	WITHOUT_CLASSIFICATION	1.279259678758059E-6	TEST
// so we "clock over" on the first invocation	WITHOUT_CLASSIFICATION	0.9999999863905611	WITHOUT_CLASSIFICATION	1.360943897001504E-8	TEST
// do nothing until we hit the rsult set containing the generated id	WITHOUT_CLASSIFICATION	0.999999752326861	WITHOUT_CLASSIFICATION	2.476731389877521E-7	TEST
/* COLUMN and TABLE should be renamed but it would break the public API */	WITHOUT_CLASSIFICATION	0.9999979651580678	WITHOUT_CLASSIFICATION	2.0348419321639018E-6	TEST
// Loaded entity instances, by EntityKey	WITHOUT_CLASSIFICATION	0.9999999581054275	WITHOUT_CLASSIFICATION	4.189457250784119E-8	TEST
// if the given name is un-qualified we may neen to qualify it	WITHOUT_CLASSIFICATION	0.9999856609540401	WITHOUT_CLASSIFICATION	1.433904595986178E-5	TEST
// the default...	WITHOUT_CLASSIFICATION	0.9999996749506159	WITHOUT_CLASSIFICATION	3.25049384146663E-7	TEST
// unfortunately not really safe to normalize this // to 1 as an initial value like we do the others // because we would not be able to control this if // we are using a sequence...	WITHOUT_CLASSIFICATION	0.9999999021081187	WITHOUT_CLASSIFICATION	9.789188122221902E-8	TEST
// intentionally empty	WITHOUT_CLASSIFICATION	0.9999995680953937	WITHOUT_CLASSIFICATION	4.3190460633227173E-7	TEST
// Identity map of CollectionEntry instances, by the collection wrapper	WITHOUT_CLASSIFICATION	0.9999999946702829	WITHOUT_CLASSIFICATION	5.329717019030703E-9	TEST
// general purpose parameters ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999978598051946	WITHOUT_CLASSIFICATION	2.1401948053313817E-6	TEST
// table-specific parameters ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999996569348603	WITHOUT_CLASSIFICATION	3.4306513978314364E-7	TEST
// Configurable implementation ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999995891931691	WITHOUT_CLASSIFICATION	4.1080683081355884E-7	TEST
// IdentifierGenerator implementation ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999989928752134	WITHOUT_CLASSIFICATION	1.0071247866335334E-6	TEST
// PersistentIdentifierGenerator implementation ~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999988646299117	WITHOUT_CLASSIFICATION	1.1353700881954961E-6	TEST
// prepare and execute the insert	WITHOUT_CLASSIFICATION	0.9999994452847574	WITHOUT_CLASSIFICATION	5.547152427088113E-7	TEST
// prepare and execute the insert	WITHOUT_CLASSIFICATION	0.9999994452847574	WITHOUT_CLASSIFICATION	5.547152427088113E-7	TEST
//fetch the generated id in a separate query	WITHOUT_CLASSIFICATION	0.9999967941688159	WITHOUT_CLASSIFICATION	3.2058311840711274E-6	TEST
// we just hit the last position	WITHOUT_CLASSIFICATION	0.9999998569840359	WITHOUT_CLASSIFICATION	1.4301596408109122E-7	TEST
// scroll ahead	WITHOUT_CLASSIFICATION	0.9999998269836478	WITHOUT_CLASSIFICATION	1.7301635231219268E-7	TEST
// scroll backward	WITHOUT_CLASSIFICATION	0.9999997889240771	WITHOUT_CLASSIFICATION	2.110759229174589E-7	TEST
// we have not yet hit the last result...	WITHOUT_CLASSIFICATION	0.9999969818447787	WITHOUT_CLASSIFICATION	3.0181552213315645E-6	TEST
// Constructors ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999997511382441	WITHOUT_CLASSIFICATION	2.48861755956431E-7	TEST
// State ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.999997442463089	WITHOUT_CLASSIFICATION	2.557536910990499E-6	TEST
// Criteria impl ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999982248833814	WITHOUT_CLASSIFICATION	1.7751166186051645E-6	TEST
// do this when all the properties are updateable since there is // a certain likelihood that the information will already be // snapshot-cached.	WITHOUT_CLASSIFICATION	0.99999281836162	WITHOUT_CLASSIFICATION	7.18163838000093E-6	TEST
// Inner classes ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999975830316726	WITHOUT_CLASSIFICATION	2.416968327480389E-6	TEST
// Constructors ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999997511382441	WITHOUT_CLASSIFICATION	2.48861755956431E-7	TEST
// State ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.999997442463089	WITHOUT_CLASSIFICATION	2.557536910990499E-6	TEST
// Criteria impl ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999982248833814	WITHOUT_CLASSIFICATION	1.7751166186051645E-6	TEST
// Caches	WITHOUT_CLASSIFICATION	0.999999515746529	WITHOUT_CLASSIFICATION	4.842534709718719E-7	TEST
//Generators:	WITHOUT_CLASSIFICATION	0.9999929055540497	WITHOUT_CLASSIFICATION	7.094445950203872E-6	TEST
// cache region is defined by the root-class in the hierarchy...	WITHOUT_CLASSIFICATION	0.9999994775674595	WITHOUT_CLASSIFICATION	5.224325403890404E-7	TEST
//check if the detached object being merged is the parent	WITHOUT_CLASSIFICATION	0.999984585688327	WITHOUT_CLASSIFICATION	1.5414311672938345E-5	TEST
// after *all* persisters and named queries are registered	WITHOUT_CLASSIFICATION	0.9999980376741426	WITHOUT_CLASSIFICATION	1.9623258572802044E-6	TEST
// if we get here, it is possible that we have a proxy 'in the way' of the merge map resolution... // 	WITHOUT_CLASSIFICATION	0.9999945069646444	WITHOUT_CLASSIFICATION	5.493035355564448E-6	TEST
//JNDI + Serialization:	WITHOUT_CLASSIFICATION	0.9999975857762329	WITHOUT_CLASSIFICATION	2.4142237671064056E-6	TEST
//checking for named queries	WITHOUT_CLASSIFICATION	0.9999841164842174	WITHOUT_CLASSIFICATION	1.5883515782612357E-5	TEST
//stats	WITHOUT_CLASSIFICATION	0.9999728520714808	WITHOUT_CLASSIFICATION	2.7147928519163246E-5	TEST
// EntityNotFoundDelegate	WITHOUT_CLASSIFICATION	0.9999993740366083	WITHOUT_CLASSIFICATION	6.259633917537148E-7	TEST
// Check named HQL queries	WITHOUT_CLASSIFICATION	0.9999996647443478	WITHOUT_CLASSIFICATION	3.352556522346512E-7	TEST
// this will throw an error if there's something wrong.	WITHOUT_CLASSIFICATION	0.9999615371955093	WITHOUT_CLASSIFICATION	3.8462804490688475E-5	TEST
//prevents this session from adding things to cache	WITHOUT_CLASSIFICATION	0.9999779923120776	WITHOUT_CLASSIFICATION	2.200768792237014E-5	TEST
// from javax.naming.Referenceable	WITHOUT_CLASSIFICATION	0.999999805523436	WITHOUT_CLASSIFICATION	1.944765640855145E-7	TEST
// look for the instance by uuid	WITHOUT_CLASSIFICATION	0.9999997906773084	WITHOUT_CLASSIFICATION	2.0932269160973433E-7	TEST
//for a dynamic-class	WITHOUT_CLASSIFICATION	0.9999976648113759	WITHOUT_CLASSIFICATION	2.3351886241804993E-6	TEST
//test this entity to see if we must query it	WITHOUT_CLASSIFICATION	0.9996270911452573	WITHOUT_CLASSIFICATION	3.729088547428319E-4	TEST
//NOTE EARLY EXIT	WITHOUT_CLASSIFICATION	0.999968896269479	WITHOUT_CLASSIFICATION	3.110373052097461E-5	TEST
// for backward-compatability	WITHOUT_CLASSIFICATION	0.9999998237523984	WITHOUT_CLASSIFICATION	1.7624760159887425E-7	TEST
// ignore this error for now	WITHOUT_CLASSIFICATION	0.999998538308145	WITHOUT_CLASSIFICATION	1.4616918549805793E-6	TEST
//to stop the class from being unloaded	WITHOUT_CLASSIFICATION	0.9999965001886257	WITHOUT_CLASSIFICATION	3.49981137423729E-6	TEST
// in case we were deserialized in a different JVM, look for an instance with the same name // (alternatively we could do an actual JNDI lookup here....)	WITHOUT_CLASSIFICATION	0.9999991694106077	WITHOUT_CLASSIFICATION	8.305893923583476E-7	TEST
//must add to JNDI _after_ adding to HashMaps, because some JNDI servers use serialization	WITHOUT_CLASSIFICATION	0.9999932855356136	WITHOUT_CLASSIFICATION	6.714464386425502E-6	TEST
// Make sure this is a defined parameter and check the incoming value type	WITHOUT_CLASSIFICATION	0.9999986331350057	WITHOUT_CLASSIFICATION	1.366864994370264E-6	TEST
// for each of the defined parameters, make sure its value // has been set	WITHOUT_CLASSIFICATION	0.9999991619425255	WITHOUT_CLASSIFICATION	8.380574744391515E-7	TEST
//we never need to apply locks to the SQL	WITHOUT_CLASSIFICATION	0.9999819390069108	WITHOUT_CLASSIFICATION	1.8060993089151935E-5	TEST
// inserts ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.999997485005886	WITHOUT_CLASSIFICATION	2.5149941140173173E-6	TEST
// deletes ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999916366525203	WITHOUT_CLASSIFICATION	8.363347479657663E-6	TEST
// during deserialization, we need to reconnect all proxies and // collections to this session, as well as the EntityEntry and // CollectionEntry instances; these associations are transient // because serialization is used for different things.	WITHOUT_CLASSIFICATION	0.9999999967830893	WITHOUT_CLASSIFICATION	3.2169106641284504E-9	TEST
// updates ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999899924972973	WITHOUT_CLASSIFICATION	1.0007502702776408E-5	TEST
// loading ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999955633222816	WITHOUT_CLASSIFICATION	4.4366777184839625E-6	TEST
//final boolean forceCacheRefresh,	WITHOUT_CLASSIFICATION	0.9999960173042384	WITHOUT_CLASSIFICATION	3.982695761611708E-6	TEST
//final boolean forceCacheRefresh,	WITHOUT_CLASSIFICATION	0.9999960173042384	WITHOUT_CLASSIFICATION	3.982695761611708E-6	TEST
// first, try to load it from the temp PC associated to this SS	WITHOUT_CLASSIFICATION	0.9999989864438052	WITHOUT_CLASSIFICATION	1.0135561947378816E-6	TEST
// if the metadata allowed proxy creation and caller did not request forceful eager loading, // generate a proxy	WITHOUT_CLASSIFICATION	0.9999945138851699	WITHOUT_CLASSIFICATION	5.486114830120676E-6	TEST
// otherwise immediately materialize it	WITHOUT_CLASSIFICATION	0.99999656521155	WITHOUT_CLASSIFICATION	3.4347884499769115E-6	TEST
/////////////////////////////////////////////////////////////////////////////////////////////////////	WITHOUT_CLASSIFICATION	0.9999162271695766	WITHOUT_CLASSIFICATION	8.377283042340986E-5	TEST
// no auto-flushing to support in stateless session	WITHOUT_CLASSIFICATION	0.9999996923240408	WITHOUT_CLASSIFICATION	3.076759591635439E-7	TEST
//after setting values to object, entityMode	WITHOUT_CLASSIFICATION	0.9999993389119511	WITHOUT_CLASSIFICATION	6.610880488966905E-7	TEST
//for EJB3	WITHOUT_CLASSIFICATION	0.9999810466333918	WITHOUT_CLASSIFICATION	1.8953366608249993E-5	TEST
// just ignore	WITHOUT_CLASSIFICATION	0.9999996351416538	WITHOUT_CLASSIFICATION	3.6485834626840656E-7	TEST
// do a check	WITHOUT_CLASSIFICATION	0.9999998427497193	WITHOUT_CLASSIFICATION	1.5725028074463642E-7	TEST
// saveOrUpdate() operations ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.999998507327524	WITHOUT_CLASSIFICATION	1.4926724760175948E-6	TEST
// update() operations ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999989299421806	WITHOUT_CLASSIFICATION	1.070057819296282E-6	TEST
// lock() operations ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999997060362698	WITHOUT_CLASSIFICATION	2.939637302860336E-7	TEST
// persist() operations ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.999999096678069	WITHOUT_CLASSIFICATION	9.033219311754321E-7	TEST
// persistOnFlush() operations ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.999999239853083	WITHOUT_CLASSIFICATION	7.601469171089709E-7	TEST
// merge() operations ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999987367172188	WITHOUT_CLASSIFICATION	1.2632827811453298E-6	TEST
// saveOrUpdateCopy() operations ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999993238442395	WITHOUT_CLASSIFICATION	6.761557604707078E-7	TEST
// delete() operations ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999995085573563	WITHOUT_CLASSIFICATION	4.914426436130027E-7	TEST
// load()/get() operations ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999996286977373	WITHOUT_CLASSIFICATION	3.713022627173158E-7	TEST
// refresh() operations ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999989854507612	WITHOUT_CLASSIFICATION	1.0145492388750298E-6	TEST
// replicate() operations ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999993253578013	WITHOUT_CLASSIFICATION	6.746421986587287E-7	TEST
// do not auto-flush while outside a transaction	WITHOUT_CLASSIFICATION	0.9999999933357825	WITHOUT_CLASSIFICATION	6.664217528583523E-9	TEST
// this is an internal error of some sort...	WITHOUT_CLASSIFICATION	0.9999678038743214	WITHOUT_CLASSIFICATION	3.219612567855152E-5	TEST
//stops flush being called multiple times if this method is recursively called	WITHOUT_CLASSIFICATION	0.9999200756488693	WITHOUT_CLASSIFICATION	7.992435113068359E-5	TEST
//only collections belonging to deleted entities are allowed to be dereferenced in the case of orphan delete	WITHOUT_CLASSIFICATION	0.9999999899854236	WITHOUT_CLASSIFICATION	1.0014576297584472E-8	TEST
// if it was previously unreferenced, we need to flush in order to // get its state into the database in order to execute query	WITHOUT_CLASSIFICATION	0.9999999008637599	WITHOUT_CLASSIFICATION	9.91362400568543E-8	TEST
// not for internal use:	WITHOUT_CLASSIFICATION	0.999999617585345	WITHOUT_CLASSIFICATION	3.8241465505817575E-7	TEST
// otherwise, we only need to flush if there are in-memory changes // to the queried tables	WITHOUT_CLASSIFICATION	0.999999802792229	WITHOUT_CLASSIFICATION	1.9720777089840098E-7	TEST
// might need to run a different filter entirely after the flush // because the collection role may have changed	WITHOUT_CLASSIFICATION	0.999999888771922	WITHOUT_CLASSIFICATION	1.112280779681545E-7	TEST
//stops flush being called multiple times if this method is recursively called	WITHOUT_CLASSIFICATION	0.9999200756488693	WITHOUT_CLASSIFICATION	7.992435113068359E-5	TEST
//stops flush being called multiple times if this method is recursively called	WITHOUT_CLASSIFICATION	0.9999200756488693	WITHOUT_CLASSIFICATION	7.992435113068359E-5	TEST
//if it is initialized, see if the underlying //instance is contained, since we need to  //account for the fact that it might have been //evicted	WITHOUT_CLASSIFICATION	0.9999779681046251	WITHOUT_CLASSIFICATION	2.2031895374883485E-5	TEST
// basically just an adapted copy of find(CriteriaImpl)	WITHOUT_CLASSIFICATION	0.9999997331791051	WITHOUT_CLASSIFICATION	2.668208948924291E-7	TEST
// it is possible for this method to be called during flush processing, // so make certain that we do not accidently initialize an uninitialized proxy	WITHOUT_CLASSIFICATION	0.9999966689515428	WITHOUT_CLASSIFICATION	3.3310484572044105E-6	TEST
// nothing to do in a stateful session	WITHOUT_CLASSIFICATION	0.9999992946290305	WITHOUT_CLASSIFICATION	7.053709696593954E-7	TEST
// ignore	WITHOUT_CLASSIFICATION	0.9999994466957796	WITHOUT_CLASSIFICATION	5.533042204140351E-7	TEST
// ignore this error for now	WITHOUT_CLASSIFICATION	0.999998538308145	WITHOUT_CLASSIFICATION	1.4616918549805793E-6	TEST
// we need to writeObject() on this since interceptor is user defined	WITHOUT_CLASSIFICATION	0.9999997688969087	WITHOUT_CLASSIFICATION	2.3110309123104683E-7	TEST
// the old-time stand-by...	WITHOUT_CLASSIFICATION	0.9999992663540126	WITHOUT_CLASSIFICATION	7.336459874728041E-7	TEST
// parameter bind values...	WITHOUT_CLASSIFICATION	0.9999986757829977	WITHOUT_CLASSIFICATION	1.324217002352256E-6	TEST
// Parameter handling code ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999992433076652	WITHOUT_CLASSIFICATION	7.56692334886727E-7	TEST
// prepend value and type list with null for any positions before the wanted position.	WITHOUT_CLASSIFICATION	0.9999974967021156	WITHOUT_CLASSIFICATION	2.503297884311405E-6	TEST
// Execution methods ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999998500822893	WITHOUT_CLASSIFICATION	1.4991771067764874E-7	TEST
// we have a CGLIB enhanced entity	WITHOUT_CLASSIFICATION	0.9999998488567667	WITHOUT_CLASSIFICATION	1.5114323316738146E-7	TEST
// we have a CGLIB enhanced entity	WITHOUT_CLASSIFICATION	0.9999998488567667	WITHOUT_CLASSIFICATION	1.5114323316738146E-7	TEST
// we have a Javassist enhanced entity	WITHOUT_CLASSIFICATION	0.9999995529410032	WITHOUT_CLASSIFICATION	4.470589967458176E-7	TEST
// we have a Javassist enhanced entity	WITHOUT_CLASSIFICATION	0.9999995529410032	WITHOUT_CLASSIFICATION	4.470589967458176E-7	TEST
// FieldInterceptor impl ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999938897104174	WITHOUT_CLASSIFICATION	6.1102895827176405E-6	TEST
// subclass accesses ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999993539073035	WITHOUT_CLASSIFICATION	6.460926965400534E-7	TEST
//let's assume that there is only one lazy fetch group, for now!	WITHOUT_CLASSIFICATION	0.9999969412463581	WITHOUT_CLASSIFICATION	3.0587536418789946E-6	TEST
// FieldHandler impl ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999552584902401	WITHOUT_CLASSIFICATION	4.474150975985747E-5	TEST
// should *not* need to grow beyond the size of the total number of columns in the rs	WITHOUT_CLASSIFICATION	0.9999998614444925	WITHOUT_CLASSIFICATION	1.3855550750730823E-7	TEST
// should probably no-op commit/rollback here, at least in JTA scenarios	WITHOUT_CLASSIFICATION	0.9999998113900791	WITHOUT_CLASSIFICATION	1.8860992091420485E-7	TEST
// Base Expectation impls ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999996001108261	WITHOUT_CLASSIFICATION	3.998891739408169E-7	TEST
// Various Expectation instances ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999999866695855	WITHOUT_CLASSIFICATION	1.333041440910455E-8	TEST
// explicitly perform no checking...	WITHOUT_CLASSIFICATION	0.9999996490671803	WITHOUT_CLASSIFICATION	3.509328197015535E-7	TEST
// used from testsuite	WITHOUT_CLASSIFICATION	0.9997676627971505	WITHOUT_CLASSIFICATION	2.3233720284952453E-4	TEST
// assume we are in an auto-commit state	WITHOUT_CLASSIFICATION	0.9999997084718066	WITHOUT_CLASSIFICATION	2.9152819339158325E-7	TEST
/*package*/	WITHOUT_CLASSIFICATION	0.9999887318780084	WITHOUT_CLASSIFICATION	1.1268121991544273E-5	TEST
// register synch; stats.connect()	WITHOUT_CLASSIFICATION	0.9999998954548923	WITHOUT_CLASSIFICATION	1.0454510772071717E-7	TEST
//noncritical, swallow and let the other propagate!	WITHOUT_CLASSIFICATION	0.9999986240062868	WITHOUT_CLASSIFICATION	1.375993713216751E-6	TEST
// calls executeBatch()	WITHOUT_CLASSIFICATION	0.9999999031740887	WITHOUT_CLASSIFICATION	9.68259112697875E-8	TEST
//no big deal	WITHOUT_CLASSIFICATION	0.9999986464621999	WITHOUT_CLASSIFICATION	1.3535378001647972E-6	TEST
// no big deal	WITHOUT_CLASSIFICATION	0.9999998437018803	WITHOUT_CLASSIFICATION	1.5629811966248363E-7	TEST
// no big deal	WITHOUT_CLASSIFICATION	0.9999998437018803	WITHOUT_CLASSIFICATION	1.5629811966248363E-7	TEST
// sybase driver (jConnect) throwing NPE here in certain // cases, but we'll just handle the general "unexpected" case	WITHOUT_CLASSIFICATION	0.9999992427310281	WITHOUT_CLASSIFICATION	7.572689718478858E-7	TEST
// see explanation above...	WITHOUT_CLASSIFICATION	0.999999862343089	WITHOUT_CLASSIFICATION	1.3765691107772575E-7	TEST
// If we are in the process of releasing, no sense // checking for aggressive-release possibility.	WITHOUT_CLASSIFICATION	0.9999999592876407	WITHOUT_CLASSIFICATION	4.071235926676755E-8	TEST
// EARLY EXIT!!!!	WITHOUT_CLASSIFICATION	0.9999982521691376	WITHOUT_CLASSIFICATION	1.747830862438665E-6	TEST
// ResultSet impl ("overridden") ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999984203976339	WITHOUT_CLASSIFICATION	1.5796023661885912E-6	TEST
// ResultSet impl (delegated) ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999920475220185	WITHOUT_CLASSIFICATION	7.952477981485065E-6	TEST
// refer to comment in StatefulPersistenceContext.addCollection()	WITHOUT_CLASSIFICATION	0.9999999896092835	WITHOUT_CLASSIFICATION	1.0390716449211148E-8	TEST
// ConnectionManager.Callback implementation ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.999999825902635	WITHOUT_CLASSIFICATION	1.7409736492516395E-7	TEST
// Note : success = false, because we don't know the outcome of the transaction	WITHOUT_CLASSIFICATION	0.9999999818420844	WITHOUT_CLASSIFICATION	1.8157915556509757E-8	TEST
// we already have a callback registered; either a local // (org.hibernate.Transaction) transaction has accepted // callback responsibilities, or we have previously // registered a transaction synch.	WITHOUT_CLASSIFICATION	0.9999999777967985	WITHOUT_CLASSIFICATION	2.220320143249336E-8	TEST
// the configured transaction-factory says it only supports // local callback mode, so no sense attempting to register a // JTA Synchronization	WITHOUT_CLASSIFICATION	0.999999999816634	WITHOUT_CLASSIFICATION	1.8336600979812067E-10	TEST
// transactions marked for rollback-only cause some TM impls to throw exceptions	WITHOUT_CLASSIFICATION	0.9999999173183033	WITHOUT_CLASSIFICATION	8.268169675265887E-8	TEST
// serialization ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999997931506549	WITHOUT_CLASSIFICATION	2.0684934499514932E-7	TEST
//postInitialize() will be called after initialization	WITHOUT_CLASSIFICATION	0.99999385316703	WITHOUT_CLASSIFICATION	6.146832969854136E-6	TEST
// cannot handle single quotes	WITHOUT_CLASSIFICATION	0.9999977750051179	WITHOUT_CLASSIFICATION	2.2249948820478905E-6	TEST
// todo : for 4.0 //	WITHOUT_CLASSIFICATION	0.9999979077886741	WITHOUT_CLASSIFICATION	2.0922113259458702E-6	TEST
// note that for sequential scrolling, we make the assumption that // the first persister element is the "root entity"	WITHOUT_CLASSIFICATION	0.9999984072648652	WITHOUT_CLASSIFICATION	1.5927351347685234E-6	TEST
// don't even bother trying to read further	WITHOUT_CLASSIFICATION	0.9999969345290274	WITHOUT_CLASSIFICATION	3.06547097260047E-6	TEST
// don't even bother trying to read any further	WITHOUT_CLASSIFICATION	0.9999971645707012	WITHOUT_CLASSIFICATION	2.8354292987914805E-6	TEST
// position cursor to the last row	WITHOUT_CLASSIFICATION	0.9999999722214413	WITHOUT_CLASSIFICATION	2.7778558610371242E-8	TEST
// sequentially read the result set in reverse until we recognize // a change in the key value.  At that point, we are pointed at // the last physical sequential row for the logical row in which // we are interested in processing	WITHOUT_CLASSIFICATION	0.9999998134967829	WITHOUT_CLASSIFICATION	1.8650321719068652E-7	TEST
// Read backwards until we read past the first physical sequential // row with the key we are interested in loading	WITHOUT_CLASSIFICATION	0.999999393719517	WITHOUT_CLASSIFICATION	6.062804830692932E-7	TEST
// Finally, read ahead one row to position result set cursor // at the first physical row we are interested in loading	WITHOUT_CLASSIFICATION	0.9999999365560435	WITHOUT_CLASSIFICATION	6.344395661777802E-8	TEST
// now get an existing proxy for each row element (if there is one)	WITHOUT_CLASSIFICATION	0.9999985916938997	WITHOUT_CLASSIFICATION	1.4083061002786449E-6	TEST
// force the proxy to resolve itself	WITHOUT_CLASSIFICATION	0.9999993584495933	WITHOUT_CLASSIFICATION	6.415504067403932E-7	TEST
// this is equivalent to the old behavior...	WITHOUT_CLASSIFICATION	0.9999932510855634	WITHOUT_CLASSIFICATION	6.748914436606536E-6	TEST
//if null, owner will be retrieved from session	WITHOUT_CLASSIFICATION	0.9999951886895309	WITHOUT_CLASSIFICATION	4.811310469169867E-6	TEST
//final String queryString, 	WITHOUT_CLASSIFICATION	0.9999976730269152	WITHOUT_CLASSIFICATION	2.3269730846683726E-6	TEST
// if it was a reference to self, don't need to nullify // unless we are using native id generation, in which // case we definitely need to nullify	WITHOUT_CLASSIFICATION	0.999999947589871	WITHOUT_CLASSIFICATION	5.241012898500395E-8	TEST
//end of array, start filling again from start	WITHOUT_CLASSIFICATION	0.9999961254627215	WITHOUT_CLASSIFICATION	3.874537278436415E-6	TEST
// in an effort to avoid concurrent-modification-exceptions (from // potential recursive calls back through here as a result of the // eventual call to PersistentCollection#endRead), we scan the // internal loadingCollections map for matches and store those matches // in a temp collection.  the temp collection is then used to "drive" // the #endRead processing.	WITHOUT_CLASSIFICATION	0.9999999036904	WITHOUT_CLASSIFICATION	9.6309599983798E-8	TEST
//we can reuse it for each row	WITHOUT_CLASSIFICATION	0.999999671451303	WITHOUT_CLASSIFICATION	3.2854869696826956E-7	TEST
//can't reuse in this case	WITHOUT_CLASSIFICATION	0.9999970555018955	WITHOUT_CLASSIFICATION	2.944498104342027E-6	TEST
// First we need to suspend any current JTA transaction and obtain // a JDBC connection	WITHOUT_CLASSIFICATION	0.9999999898435785	WITHOUT_CLASSIFICATION	1.0156421409122479E-8	TEST
//getResultList(results);	WITHOUT_CLASSIFICATION	0.9999786798966857	WITHOUT_CLASSIFICATION	2.132010331433594E-5	TEST
//if we only returned one entity, query by key is more efficient	WITHOUT_CLASSIFICATION	0.9999978301418061	WITHOUT_CLASSIFICATION	2.169858193989205E-6	TEST
// a collection loaded in the current session // can not possibly be the collection belonging // to the entity passed to update()	WITHOUT_CLASSIFICATION	0.999999996070214	WITHOUT_CLASSIFICATION	3.929786019568711E-9	TEST
// handle empty collection	WITHOUT_CLASSIFICATION	0.9999998598812927	WITHOUT_CLASSIFICATION	1.4011870725907875E-7	TEST
// else no collection element, but also no owner	WITHOUT_CLASSIFICATION	0.9999999956666241	WITHOUT_CLASSIFICATION	4.333375970039804E-9	TEST
//handle empty collections	WITHOUT_CLASSIFICATION	0.9999995847495746	WITHOUT_CLASSIFICATION	4.152504253458637E-7	TEST
// else this is not a collection initializer (and empty collections will // be detected by looking for the owner's identifier in the result set)	WITHOUT_CLASSIFICATION	0.9999990589241113	WITHOUT_CLASSIFICATION	9.410758885150964E-7	TEST
// validate() instances of Validatable	WITHOUT_CLASSIFICATION	0.9999998717974213	WITHOUT_CLASSIFICATION	1.2820257863965382E-7	TEST
// if we know there is exactly 1 row, we can skip. // it would be great if we could _always_ skip this; // it is a problem for <key-many-to-one>	WITHOUT_CLASSIFICATION	0.9999998561444126	WITHOUT_CLASSIFICATION	1.4385558742344334E-7	TEST
// remove all collections for the entity from the session-level cache	WITHOUT_CLASSIFICATION	0.9999999810064629	WITHOUT_CLASSIFICATION	1.8993537041123743E-8	TEST
//null version means the object is in the process of being loaded somewhere else in the ResultSet	WITHOUT_CLASSIFICATION	0.9999896280176419	WITHOUT_CLASSIFICATION	1.03719823580436E-5	TEST
//problematic for <key-many-to-one>!	WITHOUT_CLASSIFICATION	0.9999968434901008	WITHOUT_CLASSIFICATION	3.1565098992603714E-6	TEST
//use the id passed in	WITHOUT_CLASSIFICATION	0.9999936995220341	WITHOUT_CLASSIFICATION	6.300477965918745E-6	TEST
//do nothing	WITHOUT_CLASSIFICATION	0.9999872101641989	WITHOUT_CLASSIFICATION	1.2789835801183941E-5	TEST
// prefer re-generation of identity!	WITHOUT_CLASSIFICATION	0.9999999074456146	WITHOUT_CLASSIFICATION	9.255438531719511E-8	TEST
//no point doing this if NONE was requested	WITHOUT_CLASSIFICATION	0.9980679447975103	WITHOUT_CLASSIFICATION	0.0019320552024896605	TEST
//If the object is already loaded, return the loaded one	WITHOUT_CLASSIFICATION	0.9999996909767707	WITHOUT_CLASSIFICATION	3.090232294392489E-7	TEST
//its already loaded so don't need to hydrate it	WITHOUT_CLASSIFICATION	0.9999663470353319	WITHOUT_CLASSIFICATION	3.3652964668089735E-5	TEST
// cascade the refresh prior to refreshing this entity	WITHOUT_CLASSIFICATION	0.9999995929884674	WITHOUT_CLASSIFICATION	4.070115325454957E-7	TEST
//the load() which takes an entity does not pass an entityName	WITHOUT_CLASSIFICATION	0.9999802169113732	WITHOUT_CLASSIFICATION	1.9783088626922916E-5	TEST
//we only check the version when _upgrading_ lock modes	WITHOUT_CLASSIFICATION	0.9999981582589924	WITHOUT_CLASSIFICATION	1.8417410077081613E-6	TEST
// look for a proxy	WITHOUT_CLASSIFICATION	0.9999991294823316	WITHOUT_CLASSIFICATION	8.705176683101114E-7	TEST
//we need to upgrade the lock mode to the mode requested	WITHOUT_CLASSIFICATION	0.9993358279814748	WITHOUT_CLASSIFICATION	6.641720185252084E-4	TEST
//its the given optional object	WITHOUT_CLASSIFICATION	0.9999970013982761	WITHOUT_CLASSIFICATION	2.9986017238827646E-6	TEST
// instantiate a new instance	WITHOUT_CLASSIFICATION	0.9999998952957987	WITHOUT_CLASSIFICATION	1.0470420139458975E-7	TEST
//need to hydrate it.	WITHOUT_CLASSIFICATION	0.9998787187188134	WITHOUT_CLASSIFICATION	1.2128128118660252E-4	TEST
// return a newly loaded object	WITHOUT_CLASSIFICATION	0.999999905650617	WITHOUT_CLASSIFICATION	9.434938293938208E-8	TEST
//will be ignored, using the existing Entry instead	WITHOUT_CLASSIFICATION	0.9999991512353905	WITHOUT_CLASSIFICATION	8.487646095383517E-7	TEST
// key is an entity involved with the operation performed by the listener; // value can be either a copy of the entity or the entity itself	WITHOUT_CLASSIFICATION	0.9999993519155723	WITHOUT_CLASSIFICATION	6.480844277224282E-7	TEST
//materialize associations (and initialize the object) later	WITHOUT_CLASSIFICATION	0.9999982291476671	WITHOUT_CLASSIFICATION	1.7708523329047573E-6	TEST
// Get the persister for the _subclass_	WITHOUT_CLASSIFICATION	0.9999989928831101	WITHOUT_CLASSIFICATION	1.007116889887486E-6	TEST
// ok in normal Hibernate usage to delete a detached entity; JPA however // forbids it, thus this is a hook for HEM to affect this behavior	WITHOUT_CLASSIFICATION	0.9999999789383167	WITHOUT_CLASSIFICATION	2.106168325944025E-8	TEST
// the entry will be removed after the flush, and will no longer // override the stale snapshot // This is now handled by removeEntity() in EntityDeleteAction //persistenceContext.removeDatabaseSnapshot(key);	WITHOUT_CLASSIFICATION	0.9999999397988156	WITHOUT_CLASSIFICATION	6.020118435950755E-8	TEST
//addInitializedCollection(collection, persister, id);	WITHOUT_CLASSIFICATION	0.9999978461533118	WITHOUT_CLASSIFICATION	2.1538466882563477E-6	TEST
//EARLY EXIT!	WITHOUT_CLASSIFICATION	0.9999867670632953	WITHOUT_CLASSIFICATION	1.323293670468655E-5	TEST
//EARLY EXIT!	WITHOUT_CLASSIFICATION	0.9999867670632953	WITHOUT_CLASSIFICATION	1.323293670468655E-5	TEST
/*|| oj.getJoinable().consumesCollectionAlias() */	WITHOUT_CLASSIFICATION	0.9999996805375434	WITHOUT_CLASSIFICATION	3.1946245657028366E-7	TEST
// here we do not bother with the discriminator.	WITHOUT_CLASSIFICATION	0.9999982574580536	WITHOUT_CLASSIFICATION	1.742541946351853E-6	TEST
// Code to handle subclasses of topClass	WITHOUT_CLASSIFICATION	0.999999751215877	WITHOUT_CLASSIFICATION	2.48784122987701E-7	TEST
//woops we got an instance of another class hierarchy branch	WITHOUT_CLASSIFICATION	0.9999988934694279	WITHOUT_CLASSIFICATION	1.1065305721200234E-6	TEST
// we can go straight to the first required row	WITHOUT_CLASSIFICATION	0.9999999927892238	WITHOUT_CLASSIFICATION	7.2107762161130124E-9	TEST
// we need to step through the rows one row at a time (slow)	WITHOUT_CLASSIFICATION	0.9999993287589146	WITHOUT_CLASSIFICATION	6.712410854528459E-7	TEST
// synchronized to avoid multi-thread access issues; defined as method synch to avoid // potential deadlock issues due to nature of code.	WITHOUT_CLASSIFICATION	0.9999999037097556	WITHOUT_CLASSIFICATION	9.629024442516138E-8	TEST
// Allows various loaders (ok mainly the QueryLoader :) to check // whether scrolling of their result set should be allowed. // // By default it is allowed.	WITHOUT_CLASSIFICATION	0.9999995912902728	WITHOUT_CLASSIFICATION	4.087097272406879E-7	TEST
//before adding to collection!	WITHOUT_CLASSIFICATION	0.9999982724637764	WITHOUT_CLASSIFICATION	1.7275362236265492E-6	TEST
// if the current depth is 0, the root thing being loaded is the // many-to-many collection itself.  Here, it is alright to use // an inner join...	WITHOUT_CLASSIFICATION	0.9999998174306434	WITHOUT_CLASSIFICATION	1.8256935665278317E-7	TEST
//operations which cascade as far as the collection also cascade to collection elements	WITHOUT_CLASSIFICATION	0.999999956918257	WITHOUT_CLASSIFICATION	4.308174287201897E-8	TEST
// simple, because we can't have a one-to-one or a collection  // (or even a property-ref) in a composite-element:	WITHOUT_CLASSIFICATION	0.9999999331219884	WITHOUT_CLASSIFICATION	6.68780115963344E-8	TEST
//a composite key	WITHOUT_CLASSIFICATION	0.9999971431633088	WITHOUT_CLASSIFICATION	2.8568366911494354E-6	TEST
// if no batch, use "foo = ? and bar = ?"	WITHOUT_CLASSIFICATION	0.9999999496518162	WITHOUT_CLASSIFICATION	5.034818385900756E-8	TEST
//it must be a collection fetch	WITHOUT_CLASSIFICATION	0.9999992212525123	WITHOUT_CLASSIFICATION	7.787474877795515E-7	TEST
// needed later for many-to-many/filter application	WITHOUT_CLASSIFICATION	0.9999978339690433	WITHOUT_CLASSIFICATION	2.1660309566804103E-6	TEST
/*&& etype.isReferenceToPrimaryKey()*/	WITHOUT_CLASSIFICATION	0.9999992052147052	WITHOUT_CLASSIFICATION	7.947852948163652E-7	TEST
// it might still need to apply a collection ordering based on a // many-to-many defined order-by...	WITHOUT_CLASSIFICATION	0.9999999610762368	WITHOUT_CLASSIFICATION	3.892376307828692E-8	TEST
// if a composite key, use "( (foo = ? and bar = ?) or (foo = ? and bar = ?) )" for batching //TODO: unnecessary for databases with ANSI-style joins	WITHOUT_CLASSIFICATION	0.9999832855964673	WITHOUT_CLASSIFICATION	1.6714403532717745E-5	TEST
// belong to other persister // belong to other persister	WITHOUT_CLASSIFICATION	0.9999950298008009	WITHOUT_CLASSIFICATION	4.97019919906835E-6	TEST
// we found it	WITHOUT_CLASSIFICATION	0.9999997788616416	WITHOUT_CLASSIFICATION	2.2113835825516797E-7	TEST
//we can use an inner join for the many-to-many	WITHOUT_CLASSIFICATION	0.9999985678752412	WITHOUT_CLASSIFICATION	1.4321247587978845E-6	TEST
//disable a join back to this same association	WITHOUT_CLASSIFICATION	0.9999974668400227	WITHOUT_CLASSIFICATION	2.5331599773278108E-6	TEST
//NOTE: unlike all other Loaders, this one is NOT //      multithreaded, or cacheable!!	WITHOUT_CLASSIFICATION	0.999945578110286	WITHOUT_CLASSIFICATION	5.4421889713998974E-5	TEST
//the user visible aliases, which are unknown to the superclass, //these are not the actual "physical" SQL aliases	WITHOUT_CLASSIFICATION	0.9999997784404622	WITHOUT_CLASSIFICATION	2.2155953780916742E-7	TEST
//root entity comes *last*	WITHOUT_CLASSIFICATION	0.9999986211791262	WITHOUT_CLASSIFICATION	1.3788208738173684E-6	TEST
//deliberately ignore return value!	WITHOUT_CLASSIFICATION	0.9999966302799325	WITHOUT_CLASSIFICATION	3.3697200676449366E-6	TEST
//alias may be null //EARLY EXIT	WITHOUT_CLASSIFICATION	0.999989691046823	WITHOUT_CLASSIFICATION	1.0308953177044645E-5	TEST
// if it is a compound path	WITHOUT_CLASSIFICATION	0.9999997915320563	WITHOUT_CLASSIFICATION	2.0846794382178132E-7	TEST
// otherwise assume the parent is the the criteria that created us	WITHOUT_CLASSIFICATION	0.9999998594298914	WITHOUT_CLASSIFICATION	1.405701084936188E-7	TEST
// if its the root criteria, we are done	WITHOUT_CLASSIFICATION	0.9999998166423535	WITHOUT_CLASSIFICATION	1.8335764648049318E-7	TEST
// otherwise, recurse	WITHOUT_CLASSIFICATION	0.9999998054141721	WITHOUT_CLASSIFICATION	1.945858278944244E-7	TEST
//the criteria instance	WITHOUT_CLASSIFICATION	0.9999997619703862	WITHOUT_CLASSIFICATION	2.3802961369730483E-7	TEST
// the entity name	WITHOUT_CLASSIFICATION	0.9999996013672751	WITHOUT_CLASSIFICATION	3.9863272494567766E-7	TEST
//not found in inner query , try the outer query	WITHOUT_CLASSIFICATION	0.9999856377069601	WITHOUT_CLASSIFICATION	1.4362293039835572E-5	TEST
//not found in inner query , try the outer query	WITHOUT_CLASSIFICATION	0.9999856377069601	WITHOUT_CLASSIFICATION	1.4362293039835572E-5	TEST
//it refers to an alias of a projection	WITHOUT_CLASSIFICATION	0.9999991308685728	WITHOUT_CLASSIFICATION	8.691314272929519E-7	TEST
//should never happen, i think	WITHOUT_CLASSIFICATION	0.9999812521298781	WITHOUT_CLASSIFICATION	1.87478701218549E-5	TEST
// Detect discriminator values...	WITHOUT_CLASSIFICATION	0.9999994445884752	WITHOUT_CLASSIFICATION	5.554115248342113E-7	TEST
// Convert the string value into the proper type.	WITHOUT_CLASSIFICATION	0.9999983561798685	WITHOUT_CLASSIFICATION	1.6438201315365127E-6	TEST
// and the qualifier is not the alias of this criteria //      -> check to see if we belong to some criteria other //          than the one that created us	WITHOUT_CLASSIFICATION	0.999999717175655	WITHOUT_CLASSIFICATION	2.828243450749876E-7	TEST
//it does not refer to an alias of a projection, //look for a property	WITHOUT_CLASSIFICATION	0.9999828092978335	WITHOUT_CLASSIFICATION	1.719070216651583E-5	TEST
// Otherwise, this is an ordinary value.	WITHOUT_CLASSIFICATION	0.9999945156964507	WITHOUT_CLASSIFICATION	5.484303549401498E-6	TEST
// Currently *not* cachable if autodiscover types is in effect (e.g. "select * ...")	WITHOUT_CLASSIFICATION	0.9999999812870871	WITHOUT_CLASSIFICATION	1.8712912834548636E-8	TEST
//	WITHOUT_CLASSIFICATION	0.9999674909996846	WITHOUT_CLASSIFICATION	3.2509000315333503E-5	TEST
// this is only needed (afaict) for ResultTransformer processing...	WITHOUT_CLASSIFICATION	0.9999348925362008	WITHOUT_CLASSIFICATION	6.510746379917188E-5	TEST
// determine if the collection elements are entities...	WITHOUT_CLASSIFICATION	0.999999975778267	WITHOUT_CLASSIFICATION	2.4221732992619853E-8	TEST
// build an array with indices equal to the total number // of actual returns in the result Hibernate will return // for this query (scalars + non-scalars)	WITHOUT_CLASSIFICATION	0.9999996915131595	WITHOUT_CLASSIFICATION	3.084868405980655E-7	TEST
// replace {....} with corresponding column aliases	WITHOUT_CLASSIFICATION	0.9999996944100933	WITHOUT_CLASSIFICATION	3.0558990672275543E-7	TEST
// No additional open braces found in the string, append the // rest of the string in its entirty and quit this loop	WITHOUT_CLASSIFICATION	0.9999993346905337	WITHOUT_CLASSIFICATION	6.653094662114441E-7	TEST
// apend everything up until the next encountered open brace	WITHOUT_CLASSIFICATION	0.9999996447374153	WITHOUT_CLASSIFICATION	3.5526258468615637E-7	TEST
// it is a simple table alias {foo}	WITHOUT_CLASSIFICATION	0.9999985679988653	WITHOUT_CLASSIFICATION	1.4320011346292084E-6	TEST
// passing through anything we do not know : to support jdbc escape sequences HB-898	WITHOUT_CLASSIFICATION	0.9999978767533243	WITHOUT_CLASSIFICATION	2.1232466756814845E-6	TEST
// passing through anything we do not know : to support jdbc escape sequences HB-898	WITHOUT_CLASSIFICATION	0.9999978767533243	WITHOUT_CLASSIFICATION	2.1232466756814845E-6	TEST
// The current alias is referencing the collection to be eagerly fetched	WITHOUT_CLASSIFICATION	0.9999999119766827	WITHOUT_CLASSIFICATION	8.802331739913724E-8	TEST
// it is a property reference {foo.bar}	WITHOUT_CLASSIFICATION	0.9999996661490091	WITHOUT_CLASSIFICATION	3.3385099082290477E-7	TEST
// Possibly handle :something parameters for the query ?	WITHOUT_CLASSIFICATION	0.9999872003199397	WITHOUT_CLASSIFICATION	1.279968006041295E-5	TEST
// Let return-propertys override whatever the persister has for aliases.	WITHOUT_CLASSIFICATION	0.999996454773077	WITHOUT_CLASSIFICATION	3.545226923183228E-6	TEST
//	WITHOUT_CLASSIFICATION	0.9999674909996846	WITHOUT_CLASSIFICATION	3.2509000315333503E-5	TEST
/*package*/	WITHOUT_CLASSIFICATION	0.9999887318780084	WITHOUT_CLASSIFICATION	1.1268121991544273E-5	TEST
//NOTE: EARLY EXIT!	WITHOUT_CLASSIFICATION	0.9999412628166803	WITHOUT_CLASSIFICATION	5.873718331965756E-5	TEST
//	WITHOUT_CLASSIFICATION	0.9999674909996846	WITHOUT_CLASSIFICATION	3.2509000315333503E-5	TEST
// Now, process the returns	WITHOUT_CLASSIFICATION	0.9999991369781035	WITHOUT_CLASSIFICATION	8.630218964566245E-7	TEST
//	WITHOUT_CLASSIFICATION	0.9999674909996846	WITHOUT_CLASSIFICATION	3.2509000315333503E-5	TEST
// already been processed...	WITHOUT_CLASSIFICATION	0.9999979719378251	WITHOUT_CLASSIFICATION	2.0280621747771344E-6	TEST
// already been processed...	WITHOUT_CLASSIFICATION	0.9999979719378251	WITHOUT_CLASSIFICATION	2.0280621747771344E-6	TEST
// Make sure the owner alias is known...	WITHOUT_CLASSIFICATION	0.9999962481245531	WITHOUT_CLASSIFICATION	3.7518754468409298E-6	TEST
// first, break down the returns into maps keyed by alias // so that role returns can be more easily resolved to their owners	WITHOUT_CLASSIFICATION	0.9999998486763872	WITHOUT_CLASSIFICATION	1.5132361272003934E-7	TEST
//	WITHOUT_CLASSIFICATION	0.9999674909996846	WITHOUT_CLASSIFICATION	3.2509000315333503E-5	TEST
// If this return's alias has not been processed yet, do so b4 further processing of this return	WITHOUT_CLASSIFICATION	0.9999909329064794	WITHOUT_CLASSIFICATION	9.06709352061787E-6	TEST
//	WITHOUT_CLASSIFICATION	0.9999674909996846	WITHOUT_CLASSIFICATION	3.2509000315333503E-5	TEST
// for merging of versioned entities, we consider the version having // been changed only when: // 1) the two version values are different; //      *AND* // 2) The target actually represents database state! // // This second condition is a special case which allows // an entity to be merged during the same transaction // (though during a seperate operation) in which it was // originally persisted/saved	WITHOUT_CLASSIFICATION	0.999999999590059	WITHOUT_CLASSIFICATION	4.099409824459814E-10	TEST
// this is the second pass through on a merge op, so here we limit the // replacement to associations types (value types were already replaced // during the first pass)	WITHOUT_CLASSIFICATION	0.9999997612908821	WITHOUT_CLASSIFICATION	2.3870911789521866E-7	TEST
//EARLY EXIT	WITHOUT_CLASSIFICATION	0.9999879938027859	WITHOUT_CLASSIFICATION	1.200619721418403E-5	TEST
// cascade-save to collections AFTER the collection owner was saved	WITHOUT_CLASSIFICATION	0.9999999927756511	WITHOUT_CLASSIFICATION	7.224348934618428E-9	TEST
// Initialize the error handling delegate.	WITHOUT_CLASSIFICATION	0.9999972101837872	WITHOUT_CLASSIFICATION	2.789816212794599E-6	TEST
// Use the delegate.	WITHOUT_CLASSIFICATION	0.9999997022210113	WITHOUT_CLASSIFICATION	2.977789886880134E-7	TEST
// currently only the Hibernate-supplied DbTimestampType is supported here	WITHOUT_CLASSIFICATION	0.999989954360129	WITHOUT_CLASSIFICATION	1.0045639870989237E-5	TEST
// This is called when it's time to fully resolve a path expression.	WITHOUT_CLASSIFICATION	0.9999837472378753	WITHOUT_CLASSIFICATION	1.6252762124644057E-5	TEST
// make a new one	WITHOUT_CLASSIFICATION	0.9999958501682062	WITHOUT_CLASSIFICATION	4.149831793842519E-6	TEST
// not so sure this is even valid subtree.  but if it was, it'd // represent two unrelated table references...	WITHOUT_CLASSIFICATION	0.9999969827480748	WITHOUT_CLASSIFICATION	3.0172519253019625E-6	TEST
// (NOT (GT a b) ) => (LE a b)	WITHOUT_CLASSIFICATION	0.9999932075124007	WITHOUT_CLASSIFICATION	6.792487599356335E-6	TEST
//private Type[] sqlResultTypes;	WITHOUT_CLASSIFICATION	0.9999855412213221	WITHOUT_CLASSIFICATION	1.4458778677968374E-5	TEST
//include the discriminator and class-level where, but not filters	WITHOUT_CLASSIFICATION	0.9999987030324641	WITHOUT_CLASSIFICATION	1.2969675359228825E-6	TEST
//sqlResultTypes = selectClause.getSqlResultTypes();	WITHOUT_CLASSIFICATION	0.9999992638201269	WITHOUT_CLASSIFICATION	7.361798731127496E-7	TEST
//by default	WITHOUT_CLASSIFICATION	0.9999980086520304	WITHOUT_CLASSIFICATION	1.9913479696135468E-6	TEST
// This is now handled earlier in this method.	WITHOUT_CLASSIFICATION	0.9999848341792211	WITHOUT_CLASSIFICATION	1.5165820778820098E-5	TEST
// -- Loader implementation --	WITHOUT_CLASSIFICATION	0.9999995693784566	WITHOUT_CLASSIFICATION	4.306215434592794E-7	TEST
// -- Loader overrides --	WITHOUT_CLASSIFICATION	0.9999993695886166	WITHOUT_CLASSIFICATION	6.304113834035814E-7	TEST
// (NOT (IS_NULL a b) ) => (IS_NOT_NULL a b)	WITHOUT_CLASSIFICATION	0.9999913035808241	WITHOUT_CLASSIFICATION	8.696419175939782E-6	TEST
//NONE, because its the requested lock mode, not the actual! 	WITHOUT_CLASSIFICATION	0.9999587068996278	WITHOUT_CLASSIFICATION	4.129310037217319E-5	TEST
// meant to handle dynamic instantiation queries...	WITHOUT_CLASSIFICATION	0.9999999376306248	WITHOUT_CLASSIFICATION	6.236937519432088E-8	TEST
// --- Query translator methods ---	WITHOUT_CLASSIFICATION	0.9999998675725977	WITHOUT_CLASSIFICATION	1.3242740218277436E-7	TEST
// -- Implementation private methods --	WITHOUT_CLASSIFICATION	0.9999995852712068	WITHOUT_CLASSIFICATION	4.147287931609435E-7	TEST
//deduplicate unique constraints sharing the same columns //this is needed by Hibernate Annotations since it creates automagically // unique constraints for the user	WITHOUT_CLASSIFICATION	0.9999974903371274	WITHOUT_CLASSIFICATION	2.5096628726158564E-6	TEST
// Try to find out the name of the primary key to create it as identity if the IdentityGenerator is used	WITHOUT_CLASSIFICATION	0.9999996523018861	WITHOUT_CLASSIFICATION	3.476981137822449E-7	TEST
// to support dialects that have their own identity data type	WITHOUT_CLASSIFICATION	0.9999999856431826	WITHOUT_CLASSIFICATION	1.4356817536782297E-8	TEST
// Prepare the left hand side and get the data type.	WITHOUT_CLASSIFICATION	0.9999997992705169	WITHOUT_CLASSIFICATION	2.0072948311749086E-7	TEST
//used also for generation of FK names!	WITHOUT_CLASSIFICATION	0.9999978774590805	WITHOUT_CLASSIFICATION	2.1225409194796768E-6	TEST
//usually useless	WITHOUT_CLASSIFICATION	0.999992939861861	WITHOUT_CLASSIFICATION	7.06013813902586E-6	TEST
// added this caching as I noticed that getType() is being called multiple times...	WITHOUT_CLASSIFICATION	0.9999980727806941	WITHOUT_CLASSIFICATION	1.927219305978915E-6	TEST
//do not add unique constraint on DB not supporting unique and nullable columns	WITHOUT_CLASSIFICATION	0.9999990031294623	WITHOUT_CLASSIFICATION	9.968705376268816E-7	TEST
//for backward compatibility, disable this:	WITHOUT_CLASSIFICATION	0.9999986180783538	WITHOUT_CLASSIFICATION	1.381921646161023E-6	TEST
//may be final //may be final //may be final	WITHOUT_CLASSIFICATION	0.9999830292558036	WITHOUT_CLASSIFICATION	1.697074419635477E-5	TEST
//may be final	WITHOUT_CLASSIFICATION	0.9999959348735643	WITHOUT_CLASSIFICATION	4.065126435685751E-6	TEST
// may be final	WITHOUT_CLASSIFICATION	0.9999994470768031	WITHOUT_CLASSIFICATION	5.529231969313999E-7	TEST
// Custom SQL	WITHOUT_CLASSIFICATION	0.9999992041582226	WITHOUT_CLASSIFICATION	7.958417772544917E-7	TEST
//Primary key constraint	WITHOUT_CLASSIFICATION	0.9999996694957088	WITHOUT_CLASSIFICATION	3.3050429115599785E-7	TEST
// the root of the incoming property path matched one // of the embedded composite identifier properties	WITHOUT_CLASSIFICATION	0.9999978486439856	WITHOUT_CLASSIFICATION	2.151356014410954E-6	TEST
// ignore it...	WITHOUT_CLASSIFICATION	0.9999991911247016	WITHOUT_CLASSIFICATION	8.088752984614125E-7	TEST
//flat recursive algorithm	WITHOUT_CLASSIFICATION	0.9999990391848811	WITHOUT_CLASSIFICATION	9.608151189428228E-7	TEST
//an identifier mapper => getKey will be included in the getNonDuplicatedPropertyIterator() //and checked later, so it needs to be excluded	WITHOUT_CLASSIFICATION	0.9999989772563769	WITHOUT_CLASSIFICATION	1.0227436231549394E-6	TEST
//if the hibernate-mapping did not specify a schema/catalog, use the defaults //specified by properties - but note that if the schema/catalog were specified //in hibernate-mapping, or as params, they will already be initialized and //will override the values set here (they are in identifierGeneratorProperties)	WITHOUT_CLASSIFICATION	0.9999997117131548	WITHOUT_CLASSIFICATION	2.88286845260937E-7	TEST
//pass the entity-name, if not a collection-id	WITHOUT_CLASSIFICATION	0.999999577474399	WITHOUT_CLASSIFICATION	4.225256009482556E-7	TEST
// Custom SQL	WITHOUT_CLASSIFICATION	0.9999992041582226	WITHOUT_CLASSIFICATION	7.958417772544917E-7	TEST
//Primary key constraint	WITHOUT_CLASSIFICATION	0.9999996694957088	WITHOUT_CLASSIFICATION	3.3050429115599785E-7	TEST
//pass the column name (a generated id almost always has a single column)	WITHOUT_CLASSIFICATION	0.9999957473279035	WITHOUT_CLASSIFICATION	4.2526720964520026E-6	TEST
//needed to satisfy KeyValue	WITHOUT_CLASSIFICATION	0.9999973093950256	WITHOUT_CLASSIFICATION	2.690604974346667E-6	TEST
// empty means no scoping	WITHOUT_CLASSIFICATION	0.9999999304656062	WITHOUT_CLASSIFICATION	6.953439383475617E-8	TEST
// index should be last column listed	WITHOUT_CLASSIFICATION	0.999998076415926	WITHOUT_CLASSIFICATION	1.9235840740795336E-6	TEST
//if it is a formula index, use the element columns in the PK	WITHOUT_CLASSIFICATION	0.9999999829709946	WITHOUT_CLASSIFICATION	1.7029005428219923E-8	TEST
// don't create a unique key, 'cos some // databases don't like a UK on nullable // columns	WITHOUT_CLASSIFICATION	0.9999990865029271	WITHOUT_CLASSIFICATION	9.13497072912566E-7	TEST
/*ArrayList list = new ArrayList();	WITHOUT_CLASSIFICATION	0.999995405595222	WITHOUT_CLASSIFICATION	4.594404777885687E-6	TEST
// }	WITHOUT_CLASSIFICATION	0.9999979020454443	WITHOUT_CLASSIFICATION	2.097954555826251E-6	TEST
// no foreign key element of for a one-to-many	WITHOUT_CLASSIFICATION	0.999999851266214	WITHOUT_CLASSIFICATION	1.4873378600914862E-7	TEST
//TODO: we could just return all false...	WITHOUT_CLASSIFICATION	0.9997953711906487	WITHOUT_CLASSIFICATION	2.0462880935124118E-4	TEST
// the case of a foreign key to something other than the pk is handled in createPropertyRefConstraints	WITHOUT_CLASSIFICATION	0.9999991512214061	WITHOUT_CLASSIFICATION	8.487785939156373E-7	TEST
//TODO: we could just return all false...	WITHOUT_CLASSIFICATION	0.9997953711906487	WITHOUT_CLASSIFICATION	2.0462880935124118E-4	TEST
// if the property mapping consists of all formulas,  // make it non-updateable	WITHOUT_CLASSIFICATION	0.9999990190635861	WITHOUT_CLASSIFICATION	9.809364137868841E-7	TEST
//columnUpdateability.length==0 ||	WITHOUT_CLASSIFICATION	0.9999986168153181	WITHOUT_CLASSIFICATION	1.3831846819453213E-6	TEST
// if the property mapping consists of all formulas,  // make it insertable	WITHOUT_CLASSIFICATION	0.9999983600862133	WITHOUT_CLASSIFICATION	1.6399137866500084E-6	TEST
// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ // stuff that is Tuplizer-centric ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ // ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999993593623245	WITHOUT_CLASSIFICATION	6.406376755735675E-7	TEST
// expected type is intrinsic here...	WITHOUT_CLASSIFICATION	0.9999986253232375	WITHOUT_CLASSIFICATION	1.3746767624783923E-6	TEST
//}	WITHOUT_CLASSIFICATION	0.9999752398218097	WITHOUT_CLASSIFICATION	2.4760178190363845E-5	TEST
//}	WITHOUT_CLASSIFICATION	0.9999752398218097	WITHOUT_CLASSIFICATION	2.4760178190363845E-5	TEST
//return memberPersister.getPropertyType(propertyName);	WITHOUT_CLASSIFICATION	0.999976064837839	WITHOUT_CLASSIFICATION	2.3935162161110427E-5	TEST
//return memberPersister.toColumns(alias, propertyName);	WITHOUT_CLASSIFICATION	0.9999943069677959	WITHOUT_CLASSIFICATION	5.6930322040155734E-6	TEST
//return memberPersister.getType();	WITHOUT_CLASSIFICATION	0.9999914219639294	WITHOUT_CLASSIFICATION	8.578036070561836E-6	TEST
/*&& !indexIsFormula*/	WITHOUT_CLASSIFICATION	0.9999971273361367	WITHOUT_CLASSIFICATION	2.872663863302117E-6	TEST
//	WITHOUT_CLASSIFICATION	0.9999674909996846	WITHOUT_CLASSIFICATION	3.2509000315333503E-5	TEST
//instanceof AssociationType;	WITHOUT_CLASSIFICATION	0.9999997033269726	WITHOUT_CLASSIFICATION	2.96673027368853E-7	TEST
// we need to determine the best way to know that two joinables // represent a single many-to-many...	WITHOUT_CLASSIFICATION	0.9999967780082654	WITHOUT_CLASSIFICATION	3.2219917346950525E-6	TEST
//strip leading ','	WITHOUT_CLASSIFICATION	0.9999970008769506	WITHOUT_CLASSIFICATION	2.999123049335824E-6	TEST
//public boolean isSubselectLoadable();	WITHOUT_CLASSIFICATION	0.9999991127747524	WITHOUT_CLASSIFICATION	8.872252475493691E-7	TEST
// KEY	WITHOUT_CLASSIFICATION	0.9999975613184018	WITHOUT_CLASSIFICATION	2.438681598206043E-6	TEST
//columns	WITHOUT_CLASSIFICATION	0.9999939111881305	WITHOUT_CLASSIFICATION	6.088811869556195E-6	TEST
//SQL statements	WITHOUT_CLASSIFICATION	0.9999974182942242	WITHOUT_CLASSIFICATION	2.5817057757965206E-6	TEST
//extra information about the element type	WITHOUT_CLASSIFICATION	0.999999357216875	WITHOUT_CLASSIFICATION	6.427831249557062E-7	TEST
//types	WITHOUT_CLASSIFICATION	0.9999749192664124	WITHOUT_CLASSIFICATION	2.508073358759222E-5	TEST
// custom sql	WITHOUT_CLASSIFICATION	0.999999539311895	WITHOUT_CLASSIFICATION	4.6068810496308486E-7	TEST
//private final String unquotedIdentifierColumnName;	WITHOUT_CLASSIFICATION	0.9999949558397832	WITHOUT_CLASSIFICATION	5.044160216894886E-6	TEST
// dynamic filters specifically for many-to-many inside the collection	WITHOUT_CLASSIFICATION	0.9999999914007077	WITHOUT_CLASSIFICATION	8.599292275466518E-9	TEST
// dynamic filters for the collection	WITHOUT_CLASSIFICATION	0.999999881049105	WITHOUT_CLASSIFICATION	1.1895089497419915E-7	TEST
// NativeSQL: collect key column and auto-aliases	WITHOUT_CLASSIFICATION	0.9999993227163048	WITHOUT_CLASSIFICATION	6.772836951844289E-7	TEST
//unquotedKeyColumnNames = StringHelper.unQuote(keyColumnAliases);	WITHOUT_CLASSIFICATION	0.9999980545256538	WITHOUT_CLASSIFICATION	1.945474346176404E-6	TEST
//ELEMENT	WITHOUT_CLASSIFICATION	0.9998916032694621	WITHOUT_CLASSIFICATION	1.0839673053779848E-4	TEST
// NativeSQL: collect element column and auto-aliases	WITHOUT_CLASSIFICATION	0.9999997270720363	WITHOUT_CLASSIFICATION	2.729279636270973E-7	TEST
// INDEX AND ROW SELECT	WITHOUT_CLASSIFICATION	0.9999927085731406	WITHOUT_CLASSIFICATION	7.291426859395535E-6	TEST
// NativeSQL: collect index column and auto-aliases	WITHOUT_CLASSIFICATION	0.9999996762225511	WITHOUT_CLASSIFICATION	3.2377744881384377E-7	TEST
//unquotedIdentifierColumnName = identifierColumnAlias;	WITHOUT_CLASSIFICATION	0.9999973503391256	WITHOUT_CLASSIFICATION	2.649660874417085E-6	TEST
//unquotedIdentifierColumnName = null;	WITHOUT_CLASSIFICATION	0.9999961448301501	WITHOUT_CLASSIFICATION	3.855169849899466E-6	TEST
//GENERATE THE SQL:	WITHOUT_CLASSIFICATION	0.9999888117066156	WITHOUT_CLASSIFICATION	1.1188293384463979E-5	TEST
// for non-arrays, we don't need to know the element class //elementType.returnedClass();	WITHOUT_CLASSIFICATION	0.9999999616947303	WITHOUT_CLASSIFICATION	3.830526962197004E-8	TEST
//not all classpersisters implement PropertyMapping!	WITHOUT_CLASSIFICATION	0.9999687519870083	WITHOUT_CLASSIFICATION	3.124801299177759E-5	TEST
// Handle any filters applied to this collection	WITHOUT_CLASSIFICATION	0.9999996060214636	WITHOUT_CLASSIFICATION	3.9397853629350996E-7	TEST
// Handle any filters applied to this collection for many-to-many	WITHOUT_CLASSIFICATION	0.999999276952831	WITHOUT_CLASSIFICATION	7.230471690148084E-7	TEST
//if there is a user-specified loader, return that //TODO: filters!?	WITHOUT_CLASSIFICATION	0.9995374352714075	WITHOUT_CLASSIFICATION	4.625647285924233E-4	TEST
// Take care of any entities that might have // been evicted!	WITHOUT_CLASSIFICATION	0.9999918320340152	WITHOUT_CLASSIFICATION	8.167965984753042E-6	TEST
//strip leading ','	WITHOUT_CLASSIFICATION	0.9999970008769506	WITHOUT_CLASSIFICATION	2.999123049335824E-6	TEST
// Run a subquery loader	WITHOUT_CLASSIFICATION	0.9999998810992123	WITHOUT_CLASSIFICATION	1.1890078769835366E-7	TEST
//needed by arrays	WITHOUT_CLASSIFICATION	0.9999797073132516	WITHOUT_CLASSIFICATION	2.0292686748487326E-5	TEST
//TODO: something with formulas...	WITHOUT_CLASSIFICATION	0.9828344836651416	WITHOUT_CLASSIFICATION	0.01716551633485839	TEST
//an assertion	WITHOUT_CLASSIFICATION	0.9999298935099702	WITHOUT_CLASSIFICATION	7.010649002985256E-5	TEST
// Remove all the old entries	WITHOUT_CLASSIFICATION	0.9999997087818057	WITHOUT_CLASSIFICATION	2.9121819436038313E-7	TEST
//create all the new entries	WITHOUT_CLASSIFICATION	0.9999994892767698	WITHOUT_CLASSIFICATION	5.107232300900441E-7	TEST
/*&& !indexIsFormula*/	WITHOUT_CLASSIFICATION	0.9999971273361367	WITHOUT_CLASSIFICATION	2.872663863302117E-6	TEST
/*&& !indexIsFormula*/	WITHOUT_CLASSIFICATION	0.9999971273361367	WITHOUT_CLASSIFICATION	2.872663863302117E-6	TEST
//delete all the deleted entries	WITHOUT_CLASSIFICATION	0.9999981311426794	WITHOUT_CLASSIFICATION	1.8688573206400448E-6	TEST
//insert all the new entries	WITHOUT_CLASSIFICATION	0.9999968958990971	WITHOUT_CLASSIFICATION	3.1041009028204735E-6	TEST
//==elementType ??	WITHOUT_CLASSIFICATION	0.9999943821110516	WITHOUT_CLASSIFICATION	5.6178889483107656E-6	TEST
//update all the modified entries	WITHOUT_CLASSIFICATION	0.9999941812299821	WITHOUT_CLASSIFICATION	5.818770017858926E-6	TEST
//identifier collections not supported for 1-to-many	WITHOUT_CLASSIFICATION	0.9999995282277325	WITHOUT_CLASSIFICATION	4.717722674202214E-7	TEST
// update removed rows fks to null	WITHOUT_CLASSIFICATION	0.9999967942593947	WITHOUT_CLASSIFICATION	3.2057406054326893E-6	TEST
// will still be issued when it used to be null	WITHOUT_CLASSIFICATION	0.999998613125534	WITHOUT_CLASSIFICATION	1.3868744661293495E-6	TEST
// now update all changed or added rows fks	WITHOUT_CLASSIFICATION	0.9999996401322258	WITHOUT_CLASSIFICATION	3.5986777432638263E-7	TEST
//	WITHOUT_CLASSIFICATION	0.9999674909996846	WITHOUT_CLASSIFICATION	3.2509000315333503E-5	TEST
//use suffix for the entity columns	WITHOUT_CLASSIFICATION	0.9999998258391863	WITHOUT_CLASSIFICATION	1.7416081360113428E-7	TEST
// the class hierarchy structure	WITHOUT_CLASSIFICATION	0.9999998276219346	WITHOUT_CLASSIFICATION	1.7237806545532162E-7	TEST
//private final String rootTableName;	WITHOUT_CLASSIFICATION	0.9999861315202467	WITHOUT_CLASSIFICATION	1.3868479753393501E-5	TEST
//INITIALIZATION:	WITHOUT_CLASSIFICATION	0.9999174612164251	WITHOUT_CLASSIFICATION	8.25387835748425E-5	TEST
//Custom SQL	WITHOUT_CLASSIFICATION	0.9999910128461341	WITHOUT_CLASSIFICATION	8.98715386580358E-6	TEST
// the class hierarchy structure	WITHOUT_CLASSIFICATION	0.9999998276219346	WITHOUT_CLASSIFICATION	1.7237806545532162E-7	TEST
// Execute the SQL:	WITHOUT_CLASSIFICATION	0.9999998288382318	WITHOUT_CLASSIFICATION	1.7116176826664522E-7	TEST
// This could also just be true all the time...	WITHOUT_CLASSIFICATION	0.999998873245478	WITHOUT_CLASSIFICATION	1.126754521929286E-6	TEST
//chop the last union (all)	WITHOUT_CLASSIFICATION	0.999998310163243	WITHOUT_CLASSIFICATION	1.6898367570044773E-6	TEST
//TODO: check this....	WITHOUT_CLASSIFICATION	0.9946751698169516	WITHOUT_CLASSIFICATION	0.005324830183048463	TEST
//INITIALIZATION:	WITHOUT_CLASSIFICATION	0.9999174612164251	WITHOUT_CLASSIFICATION	8.25387835748425E-5	TEST
// properties of this class, including inherited properties	WITHOUT_CLASSIFICATION	0.9999982338663435	WITHOUT_CLASSIFICATION	1.766133656586837E-6	TEST
// the closure of all properties in the entire hierarchy including // subclasses and superclasses of this class	WITHOUT_CLASSIFICATION	0.9999997974249331	WITHOUT_CLASSIFICATION	2.0257506701430017E-7	TEST
// the closure of all columns used by the entire hierarchy including // subclasses and superclasses of this class	WITHOUT_CLASSIFICATION	0.9999998496154899	WITHOUT_CLASSIFICATION	1.5038451000832983E-7	TEST
// subclass discrimination works by assigning particular // values to certain combinations of null primary key // values in the outer join using an SQL CASE	WITHOUT_CLASSIFICATION	0.9999999806540828	WITHOUT_CLASSIFICATION	1.9345917206344475E-8	TEST
//MULTITABLES	WITHOUT_CLASSIFICATION	0.9999554171738557	WITHOUT_CLASSIFICATION	4.458282614416163E-5	TEST
// Custom sql	WITHOUT_CLASSIFICATION	0.9999992083968607	WITHOUT_CLASSIFICATION	7.916031392732853E-7	TEST
// subclass closure properties	WITHOUT_CLASSIFICATION	0.999999305424244	WITHOUT_CLASSIFICATION	6.945757560649759E-7	TEST
// SUBCLASSES	WITHOUT_CLASSIFICATION	0.9999992992086211	WITHOUT_CLASSIFICATION	7.007913789459819E-7	TEST
//( (Column) model.getTable().getPrimaryKey().getColumnIterator().next() ).getName();	WITHOUT_CLASSIFICATION	0.999993896087994	WITHOUT_CLASSIFICATION	6.1039120059587764E-6	TEST
//( (Column) sc.getTable().getPrimaryKey().getColumnIterator().next() ).getName();	WITHOUT_CLASSIFICATION	0.9999977832873712	WITHOUT_CLASSIFICATION	2.2167126288767307E-6	TEST
// don't need subclass tables, because they can't appear in conditions	WITHOUT_CLASSIFICATION	0.9999999801650776	WITHOUT_CLASSIFICATION	1.98349223792478E-8	TEST
// special case where we need to force incloude all subclass joins	WITHOUT_CLASSIFICATION	0.9999997800880621	WITHOUT_CLASSIFICATION	2.1991193795160287E-7	TEST
// the class hierarchy structure	WITHOUT_CLASSIFICATION	0.9999998276219346	WITHOUT_CLASSIFICATION	1.7237806545532162E-7	TEST
// properties of this class, including inherited properties	WITHOUT_CLASSIFICATION	0.9999982338663435	WITHOUT_CLASSIFICATION	1.766133656586837E-6	TEST
// the closure of all columns used by the entire hierarchy including // subclasses and superclasses of this class	WITHOUT_CLASSIFICATION	0.9999998496154899	WITHOUT_CLASSIFICATION	1.5038451000832983E-7	TEST
//get em on the second pass!	WITHOUT_CLASSIFICATION	0.9999977839521131	WITHOUT_CLASSIFICATION	2.216047886888462E-6	TEST
// now look up the object we are really interested in! // (this lets us correctly handle proxies and multi-row // or multi-column queries)	WITHOUT_CLASSIFICATION	0.9999991323317592	WITHOUT_CLASSIFICATION	8.676682407402973E-7	TEST
// discriminator column	WITHOUT_CLASSIFICATION	0.9999999235591059	WITHOUT_CLASSIFICATION	7.644089402706829E-8	TEST
//INITIALIZATION:	WITHOUT_CLASSIFICATION	0.9999174612164251	WITHOUT_CLASSIFICATION	8.25387835748425E-5	TEST
//private final Map propertyTableNumbersByName = new HashMap();	WITHOUT_CLASSIFICATION	0.9999835688238732	WITHOUT_CLASSIFICATION	1.6431176126845166E-5	TEST
// CLASS + TABLE	WITHOUT_CLASSIFICATION	0.9999986191626233	WITHOUT_CLASSIFICATION	1.380837376710637E-6	TEST
// DISCRIMINATOR	WITHOUT_CLASSIFICATION	0.9999944089208249	WITHOUT_CLASSIFICATION	5.591079175073947E-6	TEST
// PROPERTIES	WITHOUT_CLASSIFICATION	0.9999970180913558	WITHOUT_CLASSIFICATION	2.981908644110211E-6	TEST
// SUBCLASSES	WITHOUT_CLASSIFICATION	0.9999992992086211	WITHOUT_CLASSIFICATION	7.007913789459819E-7	TEST
// Execute the SQL:	WITHOUT_CLASSIFICATION	0.9999998288382318	WITHOUT_CLASSIFICATION	1.7116176826664522E-7	TEST
// JOINS	WITHOUT_CLASSIFICATION	0.9999952163281352	WITHOUT_CLASSIFICATION	4.783671864924518E-6	TEST
//propertyTableNumbersByName.put( prop.getName(), join );	WITHOUT_CLASSIFICATION	0.9999508124855356	WITHOUT_CLASSIFICATION	4.918751446427514E-5	TEST
//Access cached SQL	WITHOUT_CLASSIFICATION	0.9999975793958179	WITHOUT_CLASSIFICATION	2.4206041820667584E-6	TEST
//figure out which tables need to be fetched	WITHOUT_CLASSIFICATION	0.999986004268399	WITHOUT_CLASSIFICATION	1.3995731601043794E-5	TEST
//figure out which columns are needed	WITHOUT_CLASSIFICATION	0.9999982581876607	WITHOUT_CLASSIFICATION	1.741812339218005E-6	TEST
//figure out which formulas are needed	WITHOUT_CLASSIFICATION	0.9999962722654302	WITHOUT_CLASSIFICATION	3.7277345697884473E-6	TEST
//render the SQL	WITHOUT_CLASSIFICATION	0.9999959540662531	WITHOUT_CLASSIFICATION	4.045933746927042E-6	TEST
// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ // stuff that is Tuplizer-centric ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ // ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999993593623245	WITHOUT_CLASSIFICATION	6.406376755735675E-7	TEST
// moved up from AbstractEntityPersister ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999998451180574	WITHOUT_CLASSIFICATION	1.548819426370339E-7	TEST
// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999900755133448	WITHOUT_CLASSIFICATION	9.924486655228135E-6	TEST
// The optional SQL string defined in the where attribute	WITHOUT_CLASSIFICATION	0.9999997492788724	WITHOUT_CLASSIFICATION	2.5072112773160345E-7	TEST
//information about lazy properties of this class	WITHOUT_CLASSIFICATION	0.9999778661512188	WITHOUT_CLASSIFICATION	2.2133848781256132E-5	TEST
//information about all properties in class hierarchy	WITHOUT_CLASSIFICATION	0.9999982209835122	WITHOUT_CLASSIFICATION	1.7790164877463176E-6	TEST
//information about all columns/formulas in class hierarchy	WITHOUT_CLASSIFICATION	0.9999998287558385	WITHOUT_CLASSIFICATION	1.7124416159937348E-7	TEST
// dynamic filters attached to the class-level	WITHOUT_CLASSIFICATION	0.9999999255428419	WITHOUT_CLASSIFICATION	7.445715808834478E-8	TEST
// SQL strings	WITHOUT_CLASSIFICATION	0.9999997420039922	WITHOUT_CLASSIFICATION	2.579960077943871E-7	TEST
// for objects that came in via update()	WITHOUT_CLASSIFICATION	0.9999998130965582	WITHOUT_CLASSIFICATION	1.8690344181905206E-7	TEST
// PROPERTIES	WITHOUT_CLASSIFICATION	0.9999970180913558	WITHOUT_CLASSIFICATION	2.981908644110211E-6	TEST
// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999900755133448	WITHOUT_CLASSIFICATION	9.924486655228135E-6	TEST
// IDENTIFIER	WITHOUT_CLASSIFICATION	0.9999914964096427	WITHOUT_CLASSIFICATION	8.503590357358937E-6	TEST
// VERSION	WITHOUT_CLASSIFICATION	0.9999965010295885	WITHOUT_CLASSIFICATION	3.498970411616239E-6	TEST
//WHERE STRING	WITHOUT_CLASSIFICATION	0.999979763692245	WITHOUT_CLASSIFICATION	2.023630775499902E-5	TEST
// SUBCLASS PROPERTY CLOSURE	WITHOUT_CLASSIFICATION	0.9999983742699703	WITHOUT_CLASSIFICATION	1.6257300296944782E-6	TEST
//before add :-)	WITHOUT_CLASSIFICATION	0.9999820359404673	WITHOUT_CLASSIFICATION	1.7964059532711503E-5	TEST
// Handle any filters applied to the class level	WITHOUT_CLASSIFICATION	0.9999994304572958	WITHOUT_CLASSIFICATION	5.695427041787564E-7	TEST
// only one-to-one is lazy fetched	WITHOUT_CLASSIFICATION	0.9999991145671818	WITHOUT_CLASSIFICATION	8.854328181697352E-7	TEST
//note early exit here:	WITHOUT_CLASSIFICATION	0.9999669793395383	WITHOUT_CLASSIFICATION	3.3020660461733216E-5	TEST
// object have been loaded with setReadOnly(true); HHH-2236	WITHOUT_CLASSIFICATION	0.9999996547623523	WITHOUT_CLASSIFICATION	3.4523764761122996E-7	TEST
// NOTE: this assumes something about how propertySelectFragment is implemented by the subclass!	WITHOUT_CLASSIFICATION	0.9988017630243139	WITHOUT_CLASSIFICATION	0.001198236975686059	TEST
//strip leading ", "	WITHOUT_CLASSIFICATION	0.9999976253438999	WITHOUT_CLASSIFICATION	2.3746560999890626E-6	TEST
//if there is no resulting row, return null	WITHOUT_CLASSIFICATION	0.9999772072345707	WITHOUT_CLASSIFICATION	2.279276542932297E-5	TEST
//otherwise return the "hydrated" state (ie. associations are not resolved)	WITHOUT_CLASSIFICATION	0.9999978394946881	WITHOUT_CLASSIFICATION	2.160505311897387E-6	TEST
//null owner ok??	WITHOUT_CLASSIFICATION	0.9999882578457174	WITHOUT_CLASSIFICATION	1.1742154282486677E-5	TEST
// null sql means that the only lazy properties // are shared PK one-to-one associations which are // handled differently in the Type#nullSafeGet code...	WITHOUT_CLASSIFICATION	0.9999999782068543	WITHOUT_CLASSIFICATION	2.179314584239458E-8	TEST
// Create a new FROM node for the referenced class.	WITHOUT_CLASSIFICATION	0.9999998095264835	WITHOUT_CLASSIFICATION	1.9047351660040285E-7	TEST
// the difficulty here is exactly what do we update in order to // force the version to be incremented in the db...	WITHOUT_CLASSIFICATION	0.9999998596854818	WITHOUT_CLASSIFICATION	1.4031451822440033E-7	TEST
// performance op to avoid the array search	WITHOUT_CLASSIFICATION	0.999999952579887	WITHOUT_CLASSIFICATION	4.742011290701613E-8	TEST
// properly handle property-ref-based associations	WITHOUT_CLASSIFICATION	0.9999970270326833	WITHOUT_CLASSIFICATION	2.972967316771942E-6	TEST
//Enable for HHH-440, which we don't like:	WITHOUT_CLASSIFICATION	0.9999961605114641	WITHOUT_CLASSIFICATION	3.839488535886313E-6	TEST
// ALIASES	WITHOUT_CLASSIFICATION	0.9999988581108672	WITHOUT_CLASSIFICATION	1.1418891328755862E-6	TEST
// aliases named identifier ( alias.idname )	WITHOUT_CLASSIFICATION	0.9999982260957299	WITHOUT_CLASSIFICATION	1.7739042700968892E-6	TEST
// aliases for composite-id's	WITHOUT_CLASSIFICATION	0.9999988151821027	WITHOUT_CLASSIFICATION	1.1848178973605642E-6	TEST
// Fetch embedded identifiers propertynames from the "virtual" identifier component	WITHOUT_CLASSIFICATION	0.9999993444613869	WITHOUT_CLASSIFICATION	6.555386129895583E-7	TEST
// embedded composite ids ( alias.idname1, alias.idname2 )	WITHOUT_CLASSIFICATION	0.9999997904121646	WITHOUT_CLASSIFICATION	2.0958783552559114E-7	TEST
// TODO: skip formulas?	WITHOUT_CLASSIFICATION	0.9985067771774936	WITHOUT_CLASSIFICATION	0.0014932228225063473	TEST
//don't need filters for the static loaders	WITHOUT_CLASSIFICATION	0.9999840835662634	WITHOUT_CLASSIFICATION	1.59164337366207E-5	TEST
//do two passes, for collection property-ref!	WITHOUT_CLASSIFICATION	0.999994853269514	WITHOUT_CLASSIFICATION	5.1467304859420545E-6	TEST
// select the correct row by either pk or rowid	WITHOUT_CLASSIFICATION	0.9999997711880226	WITHOUT_CLASSIFICATION	2.2881197741936526E-7	TEST
//TODO: eventually, rowIdName[j]	WITHOUT_CLASSIFICATION	0.9969318154123163	WITHOUT_CLASSIFICATION	0.003068184587683752	TEST
// this is a property of the table, which we are updating	WITHOUT_CLASSIFICATION	0.9999996424176864	WITHOUT_CLASSIFICATION	3.5758231369854784E-7	TEST
// special shortcut for id properties, skip the join! // this must only occur at the _end_ of a path expression	WITHOUT_CLASSIFICATION	0.9999985641524016	WITHOUT_CLASSIFICATION	1.4358475984004756E-6	TEST
// we are using "all" or "dirty" property-based optimistic locking	WITHOUT_CLASSIFICATION	0.9999998727880975	WITHOUT_CLASSIFICATION	1.2721190240177653E-7	TEST
// nothing to do; even if the operand is a parameter, no way we could // infer an appropriate expected type here	WITHOUT_CLASSIFICATION	0.999993033525814	WITHOUT_CLASSIFICATION	6.966474185912175E-6	TEST
// this property belongs on the table and is to be inserted	WITHOUT_CLASSIFICATION	0.9999766108730833	WITHOUT_CLASSIFICATION	2.3389126916637172E-5	TEST
// add normal properties	WITHOUT_CLASSIFICATION	0.9999985558905324	WITHOUT_CLASSIFICATION	1.444109467612768E-6	TEST
// add the discriminator	WITHOUT_CLASSIFICATION	0.9999996324369312	WITHOUT_CLASSIFICATION	3.675630687361963E-7	TEST
// more specifically : "? [op] datetime" //      1) if the operator is MINUS, the param needs to be of //          some datetime type //      2) if the operator is PLUS, the param needs to be of //          some numeric type	WITHOUT_CLASSIFICATION	0.9999946106170338	WITHOUT_CLASSIFICATION	5.389382966237087E-6	TEST
// add normal properties	WITHOUT_CLASSIFICATION	0.9999985558905324	WITHOUT_CLASSIFICATION	1.444109467612768E-6	TEST
// this property belongs on the table and is to be inserted	WITHOUT_CLASSIFICATION	0.9999766108730833	WITHOUT_CLASSIFICATION	2.3389126916637172E-5	TEST
// add the discriminator	WITHOUT_CLASSIFICATION	0.9999996324369312	WITHOUT_CLASSIFICATION	3.675630687361963E-7	TEST
// add the primary key	WITHOUT_CLASSIFICATION	0.9999972982853176	WITHOUT_CLASSIFICATION	2.7017146823579413E-6	TEST
// delegate already handles PK columns	WITHOUT_CLASSIFICATION	0.9999997389869725	WITHOUT_CLASSIFICATION	2.610130274521505E-7	TEST
// we can't batch joined inserts, *especially* not if it is an identity insert; // nor can we batch statements where the expectation is based on an output param	WITHOUT_CLASSIFICATION	0.9999999900373739	WITHOUT_CLASSIFICATION	9.962626054753195E-9	TEST
// Render the SQL query	WITHOUT_CLASSIFICATION	0.999999551949845	WITHOUT_CLASSIFICATION	4.4805015500825044E-7	TEST
// Write the values of fields onto the prepared statement - we MUST use the state at the time the // insert was issued (cos of foreign key constraints). Not necessarily the object's current state	WITHOUT_CLASSIFICATION	0.999999882699642	WITHOUT_CLASSIFICATION	1.1730035805268553E-7	TEST
// TODO : shouldnt inserts be Expectations.NONE?	WITHOUT_CLASSIFICATION	0.9997124095451982	WITHOUT_CLASSIFICATION	2.8759045480172786E-4	TEST
//don't bother trying to update, we know there is no row there yet	WITHOUT_CLASSIFICATION	0.9999660576257839	WITHOUT_CLASSIFICATION	3.3942374216087935E-5	TEST
//if all fields are null, we might need to delete existing row	WITHOUT_CLASSIFICATION	0.9999946101536892	WITHOUT_CLASSIFICATION	5.389846310752713E-6	TEST
//there is probably a row there, so try to update //if no rows were updated, we will find out	WITHOUT_CLASSIFICATION	0.9999983267694614	WITHOUT_CLASSIFICATION	1.6732305385441712E-6	TEST
//note: updates to joined tables can't be batched...	WITHOUT_CLASSIFICATION	0.9999546628140317	WITHOUT_CLASSIFICATION	4.533718596835621E-5	TEST
// starting index	WITHOUT_CLASSIFICATION	0.9999998068401311	WITHOUT_CLASSIFICATION	1.9315986900314976E-7	TEST
//Now write the values of fields onto the prepared statement	WITHOUT_CLASSIFICATION	0.99999684579796	WITHOUT_CLASSIFICATION	3.154202040015546E-6	TEST
// Write any appropriate versioning conditional parameters	WITHOUT_CLASSIFICATION	0.9999997799497937	WITHOUT_CLASSIFICATION	2.2005020629708095E-7	TEST
//Render the SQL query	WITHOUT_CLASSIFICATION	0.9999951867258361	WITHOUT_CLASSIFICATION	4.81327416391199E-6	TEST
// Do the key. The key is immutable so we can use the _current_ object state - not necessarily // the state at the time the delete was issued	WITHOUT_CLASSIFICATION	0.9999998558225195	WITHOUT_CLASSIFICATION	1.441774804108762E-7	TEST
// We should use the _current_ object state (ie. after any updates that occurred during flush)	WITHOUT_CLASSIFICATION	0.9999994508386602	WITHOUT_CLASSIFICATION	5.491613397404235E-7	TEST
// this property belongs to the table and it is not specifically // excluded from optimistic locking by optimistic-lock="false"	WITHOUT_CLASSIFICATION	0.9999986946872667	WITHOUT_CLASSIFICATION	1.3053127333965338E-6	TEST
//note: dirtyFields==null means we had no snapshot, and we couldn't get one using select-before-update //	WITHOUT_CLASSIFICATION	0.9999982951860631	WITHOUT_CLASSIFICATION	1.704813936805863E-6	TEST
// more specifically : "datetime [op] ?" //      1) if the operator is MINUS, we really cannot determine //          the expected type as either another datetime or //          numeric would be valid //      2) if the operator is PLUS, the param needs to be of //          some numeric type	WITHOUT_CLASSIFICATION	0.9999955429707172	WITHOUT_CLASSIFICATION	4.457029282781995E-6	TEST
// For the case of dynamic-update="true", we need to generate the UPDATE SQL	WITHOUT_CLASSIFICATION	0.9999995596096923	WITHOUT_CLASSIFICATION	4.403903077204133E-7	TEST
// don't need to check laziness (dirty checking algorithm handles that)	WITHOUT_CLASSIFICATION	0.9999960111979833	WITHOUT_CLASSIFICATION	3.988802016653334E-6	TEST
// For the case of dynamic-update="false", or no snapshot, we use the static SQL	WITHOUT_CLASSIFICATION	0.9999999949989756	WITHOUT_CLASSIFICATION	5.001024371492723E-9	TEST
// if not "get", then try "is"	WITHOUT_CLASSIFICATION	0.9999987836953109	WITHOUT_CLASSIFICATION	1.2163046890263303E-6	TEST
// Now update only the tables with dirty properties (and the table with the version number)	WITHOUT_CLASSIFICATION	0.9999991107625864	WITHOUT_CLASSIFICATION	8.892374135511252E-7	TEST
// For the case of dynamic-insert="true", we need to generate the INSERT SQL	WITHOUT_CLASSIFICATION	0.9999986496442593	WITHOUT_CLASSIFICATION	1.3503557406002382E-6	TEST
// For the case of dynamic-insert="true", we need to generate the INSERT SQL	WITHOUT_CLASSIFICATION	0.9999986496442593	WITHOUT_CLASSIFICATION	1.3503557406002382E-6	TEST
// For the case of dynamic-insert="false", use the static SQL	WITHOUT_CLASSIFICATION	0.9999999729186902	WITHOUT_CLASSIFICATION	2.708130973843304E-8	TEST
// For the case of dynamic-insert="false", use the static SQL	WITHOUT_CLASSIFICATION	0.9999999729186902	WITHOUT_CLASSIFICATION	2.708130973843304E-8	TEST
// not supported	WITHOUT_CLASSIFICATION	0.9999983747529142	WITHOUT_CLASSIFICATION	1.6252470857890238E-6	TEST
// this property belongs to the table and it is not specifically // excluded from optimistic locking by optimistic-lock="false"	WITHOUT_CLASSIFICATION	0.9999986946872667	WITHOUT_CLASSIFICATION	1.3053127333965338E-6	TEST
// we need to utilize dynamic delete statements	WITHOUT_CLASSIFICATION	0.9999996595913089	WITHOUT_CLASSIFICATION	3.4040869113479437E-7	TEST
// otherwise, utilize the static delete statements	WITHOUT_CLASSIFICATION	0.9999999734662522	WITHOUT_CLASSIFICATION	2.6533747840713466E-8	TEST
//just a performance opt!	WITHOUT_CLASSIFICATION	0.9999981074599974	WITHOUT_CLASSIFICATION	1.892540002569876E-6	TEST
//just a performance opt!	WITHOUT_CLASSIFICATION	0.9999981074599974	WITHOUT_CLASSIFICATION	1.892540002569876E-6	TEST
//all joins join to the pk of the driving table	WITHOUT_CLASSIFICATION	0.9999978543951812	WITHOUT_CLASSIFICATION	2.1456048187192895E-6	TEST
//notice that we skip the first table; it is the driving table!	WITHOUT_CLASSIFICATION	0.9999996374133175	WITHOUT_CLASSIFICATION	3.6258668251793704E-7	TEST
//we can inner join to superclass tables (the row MUST be there) //we can never inner join to subclass tables	WITHOUT_CLASSIFICATION	0.9999998069962539	WITHOUT_CLASSIFICATION	1.9300374607709766E-7	TEST
//skip the driving table	WITHOUT_CLASSIFICATION	0.9999960925168238	WITHOUT_CLASSIFICATION	3.907483176265591E-6	TEST
//get 'em in the right order (not that it really matters)	WITHOUT_CLASSIFICATION	0.9999981499026451	WITHOUT_CLASSIFICATION	1.8500973548361458E-6	TEST
// here, we work under the following assumptions: //      ------------ valid cases -------------------------------------- //      1) datetime + {something other than datetime} : always results //              in a datetime ( db will catch invalid conversions ) //      2) datetime - datetime : always results in a DOUBLE //      3) datetime - {something other than datetime} : always results //              in a datetime ( db will catch invalid conversions ) //      ------------ invalid cases ------------------------------------ //      4) datetime + datetime //      5) {something other than datetime} - datetime //      6) datetime * {any type} //      7) datetime / {any type} //      8) {any type} / datetime // doing so allows us to properly handle parameters as either the left // or right side here in the majority of cases	WITHOUT_CLASSIFICATION	0.9999994797188336	WITHOUT_CLASSIFICATION	5.202811664142623E-7	TEST
//render the where and from parts	WITHOUT_CLASSIFICATION	0.9998663320496253	WITHOUT_CLASSIFICATION	1.3366795037465416E-4	TEST
//we *could* regerate this inside each called method!	WITHOUT_CLASSIFICATION	0.9999990283780232	WITHOUT_CLASSIFICATION	9.716219766987885E-7	TEST
//now render the joins	WITHOUT_CLASSIFICATION	0.9999979188849523	WITHOUT_CLASSIFICATION	2.081115047674515E-6	TEST
// This will add the new from element to the origin.	WITHOUT_CLASSIFICATION	0.9999980319987022	WITHOUT_CLASSIFICATION	1.9680012977777236E-6	TEST
//now render the select clause	WITHOUT_CLASSIFICATION	0.9999998095795299	WITHOUT_CLASSIFICATION	1.904204700437809E-7	TEST
//now tie it all together	WITHOUT_CLASSIFICATION	0.9999977748667556	WITHOUT_CLASSIFICATION	2.225133244411909E-6	TEST
//insert/update/delete SQL	WITHOUT_CLASSIFICATION	0.9999971519258791	WITHOUT_CLASSIFICATION	2.8480741208961855E-6	TEST
//select SQL	WITHOUT_CLASSIFICATION	0.9999983987206859	WITHOUT_CLASSIFICATION	1.601279314144439E-6	TEST
//no need to check laziness, dirty checking handles that	WITHOUT_CLASSIFICATION	0.9999889240217341	WITHOUT_CLASSIFICATION	1.1075978265928117E-5	TEST
// Fully resolve the map reference, create implicit joins.	WITHOUT_CLASSIFICATION	0.9999977070511761	WITHOUT_CLASSIFICATION	2.2929488238198727E-6	TEST
// temporary ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999962346448281	WITHOUT_CLASSIFICATION	3.7653551719424924E-6	TEST
// The basic implementation is to simply use the node's text	WITHOUT_CLASSIFICATION	0.9999992797681215	WITHOUT_CLASSIFICATION	7.202318785758948E-7	TEST
// for dialects which are known to not support ANSI-SQL row-value-constructor syntax, // we should mutate the tree.	WITHOUT_CLASSIFICATION	0.9999999894635201	WITHOUT_CLASSIFICATION	1.053647988492486E-8	TEST
// Due to the complexity in initializing the SelectClause, do not generate one here. // If it is not found; simply return null... // // Also, do not cache since it gets generated well after we are created.	WITHOUT_CLASSIFICATION	0.9999999009922139	WITHOUT_CLASSIFICATION	9.900778599947828E-8	TEST
// check the version unsaved-value, if appropriate	WITHOUT_CLASSIFICATION	0.9999999529418729	WITHOUT_CLASSIFICATION	4.7058127142463015E-8	TEST
// let this take precedence if defined, since it works for // assigned identifiers	WITHOUT_CLASSIFICATION	0.9999971221910947	WITHOUT_CLASSIFICATION	2.8778089052213803E-6	TEST
// check the id unsaved-value	WITHOUT_CLASSIFICATION	0.9999997958044923	WITHOUT_CLASSIFICATION	2.0419550779431875E-7	TEST
// check to see if it is in the second-level cache	WITHOUT_CLASSIFICATION	0.999999964310603	WITHOUT_CLASSIFICATION	3.568939708571212E-8	TEST
///////////////////////////////////////////////////////////////////////	WITHOUT_CLASSIFICATION	0.9999162271695766	WITHOUT_CLASSIFICATION	8.377283042340986E-5	TEST
// For property references generate <tablealias>.<columnname> as <projectionalias>	WITHOUT_CLASSIFICATION	0.9999989150846366	WITHOUT_CLASSIFICATION	1.0849153634496433E-6	TEST
// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999900755133448	WITHOUT_CLASSIFICATION	9.924486655228135E-6	TEST
//if there is no resulting row, return null	WITHOUT_CLASSIFICATION	0.9999772072345707	WITHOUT_CLASSIFICATION	2.279276542932297E-5	TEST
//force immediate execution of the insert	WITHOUT_CLASSIFICATION	0.9999976518635484	WITHOUT_CLASSIFICATION	2.348136451526575E-6	TEST
// If this from element is a collection and the path is a collection property (maxIndex, etc.) then // generate a sub-query.	WITHOUT_CLASSIFICATION	0.9999986797762223	WITHOUT_CLASSIFICATION	1.3202237777420248E-6	TEST
// entities ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999986821290332	WITHOUT_CLASSIFICATION	1.317870966816429E-6	TEST
// collections ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999998583668455	WITHOUT_CLASSIFICATION	1.4163315455753462E-7	TEST
//cannot occur	WITHOUT_CLASSIFICATION	0.9999982100985144	WITHOUT_CLASSIFICATION	1.7899014855285985E-6	TEST
//cannot occur	WITHOUT_CLASSIFICATION	0.9999982100985144	WITHOUT_CLASSIFICATION	1.7899014855285985E-6	TEST
// only carry on if the method has no parameters	WITHOUT_CLASSIFICATION	0.9999998937908875	WITHOUT_CLASSIFICATION	1.0620911255670113E-7	TEST
// try "get"	WITHOUT_CLASSIFICATION	0.9999993076146664	WITHOUT_CLASSIFICATION	6.9238533362283E-7	TEST
// do nothing...	WITHOUT_CLASSIFICATION	0.9999986060083098	WITHOUT_CLASSIFICATION	1.3939916901835944E-6	TEST
// do nothing...	WITHOUT_CLASSIFICATION	0.9999986060083098	WITHOUT_CLASSIFICATION	1.3939916901835944E-6	TEST
// should be safe to only ever expect EntityPersister references here	WITHOUT_CLASSIFICATION	0.9999992477607208	WITHOUT_CLASSIFICATION	7.522392792373079E-7	TEST
// this page intentionally left blank :)	WITHOUT_CLASSIFICATION	0.9999968050429343	WITHOUT_CLASSIFICATION	3.1949570657470296E-6	TEST
// do not do anything	WITHOUT_CLASSIFICATION	0.9999985309166796	WITHOUT_CLASSIFICATION	1.4690833204263622E-6	TEST
//	WITHOUT_CLASSIFICATION	0.9999674909996846	WITHOUT_CLASSIFICATION	3.2509000315333503E-5	TEST
// ignore	WITHOUT_CLASSIFICATION	0.9999994466957796	WITHOUT_CLASSIFICATION	5.533042204140351E-7	TEST
//cant instantiate	WITHOUT_CLASSIFICATION	0.99999947745922	WITHOUT_CLASSIFICATION	5.225407799408168E-7	TEST
//if it is a property of an embedded component, invoke on the "identifier"	WITHOUT_CLASSIFICATION	0.9999988885317662	WITHOUT_CLASSIFICATION	1.1114682337640438E-6	TEST
// otherwise:	WITHOUT_CLASSIFICATION	0.9999992884102956	WITHOUT_CLASSIFICATION	7.11589704408568E-7	TEST
// skip finalize methods	WITHOUT_CLASSIFICATION	0.9999991921960952	WITHOUT_CLASSIFICATION	8.078039048139549E-7	TEST
// note: interfaces is assumed to already contain HibernateProxy.class	WITHOUT_CLASSIFICATION	0.9999999715180766	WITHOUT_CLASSIFICATION	2.848192335695446E-8	TEST
// note: interfaces is assumed to already contain HibernateProxy.class	WITHOUT_CLASSIFICATION	0.9999999715180766	WITHOUT_CLASSIFICATION	2.848192335695446E-8	TEST
// HHH-2481 make sure the callback gets cleared, otherwise the instance stays in a static thread local.	WITHOUT_CLASSIFICATION	0.9999999939856945	WITHOUT_CLASSIFICATION	6.0143055080079925E-9	TEST
// while constructor is running	WITHOUT_CLASSIFICATION	0.9999998946471205	WITHOUT_CLASSIFICATION	1.0535287947444911E-7	TEST
// while constructor is running	WITHOUT_CLASSIFICATION	0.9999998946471205	WITHOUT_CLASSIFICATION	1.0535287947444911E-7	TEST
// note: interface is assumed to already contain HibernateProxy.class	WITHOUT_CLASSIFICATION	0.9999999802792883	WITHOUT_CLASSIFICATION	1.972071171017516E-8	TEST
// interfaces // arguments	WITHOUT_CLASSIFICATION	0.999999928866468	WITHOUT_CLASSIFICATION	7.113353191970505E-8	TEST
//TODO!	WITHOUT_CLASSIFICATION	0.992446845176491	WITHOUT_CLASSIFICATION	0.007553154823509069	TEST
// Get the caller	WITHOUT_CLASSIFICATION	0.9999998450146679	WITHOUT_CLASSIFICATION	1.5498533221241296E-7	TEST
// Get the caller principals	WITHOUT_CLASSIFICATION	0.9999998829586807	WITHOUT_CLASSIFICATION	1.1704131934652888E-7	TEST
//private static final Alias DEFAULT_ALIAS = new Alias(10, null);	WITHOUT_CLASSIFICATION	0.9999998032616252	WITHOUT_CLASSIFICATION	1.9673837489977256E-7	TEST
// Needed to bump this up to DotNode, because that is the only thing which currently // knows about the property-ref path in the correct format; it is either this, or // recurse over the DotNodes constructing the property path just like DotNode does // internally	WITHOUT_CLASSIFICATION	0.999999806522579	WITHOUT_CLASSIFICATION	1.9347742090941258E-7	TEST
//if the identifier is quoted, remove the quotes	WITHOUT_CLASSIFICATION	0.9999266983333966	WITHOUT_CLASSIFICATION	7.330166660330544E-5	TEST
//truncate the identifier to the max alias length, less the suffix length	WITHOUT_CLASSIFICATION	0.9999993243119922	WITHOUT_CLASSIFICATION	6.756880078208497E-7	TEST
//full joins are not supported.. yet!	WITHOUT_CLASSIFICATION	0.9999803463343359	WITHOUT_CLASSIFICATION	1.9653665664205357E-5	TEST
// null is not considered the same type as Integer. //$NON-NLS-1 //$NON-NLS-1	WITHOUT_CLASSIFICATION	0.9999999897012398	WITHOUT_CLASSIFICATION	1.0298760286962393E-8	TEST
// the outerJoinsAfterWhere needs to come before where clause to properly // handle dynamic filters	WITHOUT_CLASSIFICATION	0.9999980422245047	WITHOUT_CLASSIFICATION	1.9577754953085477E-6	TEST
//$NON-NLS-1	WITHOUT_CLASSIFICATION	0.9999909060918462	WITHOUT_CLASSIFICATION	9.093908153803133E-6	TEST
//$NON-NLS-1	WITHOUT_CLASSIFICATION	0.9999909060918462	WITHOUT_CLASSIFICATION	9.093908153803133E-6	TEST
//$NON-NLS-1	WITHOUT_CLASSIFICATION	0.9999909060918462	WITHOUT_CLASSIFICATION	9.093908153803133E-6	TEST
//$NON-NLS-1	WITHOUT_CLASSIFICATION	0.9999909060918462	WITHOUT_CLASSIFICATION	9.093908153803133E-6	TEST
// strip off any leading 'and' token	WITHOUT_CLASSIFICATION	0.9999991275709431	WITHOUT_CLASSIFICATION	8.724290568869599E-7	TEST
// if the condition is not already there...	WITHOUT_CLASSIFICATION	0.9999997298245591	WITHOUT_CLASSIFICATION	2.7017544087286595E-7	TEST
//dontSpace.add("'");	WITHOUT_CLASSIFICATION	0.9999920521507768	WITHOUT_CLASSIFICATION	7.947849223247239E-6	TEST
//for MySQL	WITHOUT_CLASSIFICATION	0.9999832861119928	WITHOUT_CLASSIFICATION	1.6713888007064167E-5	TEST
//HashMap columnsUnique = new HashMap();	WITHOUT_CLASSIFICATION	0.9999984164964747	WITHOUT_CLASSIFICATION	1.5835035252736108E-6	TEST
//null caused some problems	WITHOUT_CLASSIFICATION	0.9999978278125379	WITHOUT_CLASSIFICATION	2.172187462166662E-6	TEST
/*package*/	WITHOUT_CLASSIFICATION	0.9999887318780084	WITHOUT_CLASSIFICATION	1.1268121991544273E-5	TEST
//not sure if this would ever be null but wanted to be careful	WITHOUT_CLASSIFICATION	0.9999947929837152	WITHOUT_CLASSIFICATION	5.207016284824581E-6	TEST
//even on inverse="true"	WITHOUT_CLASSIFICATION	0.9999967988676866	WITHOUT_CLASSIFICATION	3.2011323133372563E-6	TEST
/*package*/	WITHOUT_CLASSIFICATION	0.9999887318780084	WITHOUT_CLASSIFICATION	1.1268121991544273E-5	TEST
/*package*/	WITHOUT_CLASSIFICATION	0.9999887318780084	WITHOUT_CLASSIFICATION	1.1268121991544273E-5	TEST
// If true then execute db updates, otherwise just generate and display updates	WITHOUT_CLASSIFICATION	0.9999987273145815	WITHOUT_CLASSIFICATION	1.2726854184260243E-6	TEST
// we only release the connection	WITHOUT_CLASSIFICATION	0.9999999930431904	WITHOUT_CLASSIFICATION	6.956809588341632E-9	TEST
// deprecated option...	WITHOUT_CLASSIFICATION	0.999999835412826	WITHOUT_CLASSIFICATION	1.6458717404478677E-7	TEST
//if an exception occurs during flush, user must call rollback()	WITHOUT_CLASSIFICATION	0.9999992094709058	WITHOUT_CLASSIFICATION	7.905290941697783E-7	TEST
//actually, this last test is probably unnecessary, since  //beforeCompletion() doesn't get called during rollback	WITHOUT_CLASSIFICATION	0.9635409690204387	WITHOUT_CLASSIFICATION	0.03645903097956122	TEST
// this one only really needed for badly-behaved applications! // (if the TransactionManager has a Sychronization registered, // its a noop) // (actually we do need it for downgrading locks)	WITHOUT_CLASSIFICATION	0.9999994451948663	WITHOUT_CLASSIFICATION	5.548051336836406E-7	TEST
// Create an DotNode AST for the path and resolve it.	WITHOUT_CLASSIFICATION	0.9999923678290481	WITHOUT_CLASSIFICATION	7.63217095186057E-6	TEST
//if an exception occurs during flush, user must call rollback()	WITHOUT_CLASSIFICATION	0.9999992094709058	WITHOUT_CLASSIFICATION	7.905290941697783E-7	TEST
//if we could not register a synchronization, //do the before/after completion callbacks //ourself (but we need to let jdbcContext //know that this is what we are going to //do, so it doesn't keep trying to register //synchronizations)	WITHOUT_CLASSIFICATION	0.9999962752596424	WITHOUT_CLASSIFICATION	3.7247403576203926E-6	TEST
// swallow it, and continue to roll back JTA transaction	WITHOUT_CLASSIFICATION	0.9999999988921653	WITHOUT_CLASSIFICATION	1.1078347108562368E-9	TEST
// so the transaction is already rolled back, by JTA spec	WITHOUT_CLASSIFICATION	0.9999999900738182	WITHOUT_CLASSIFICATION	9.926181801858474E-9	TEST
// this method is a noop if there is a Synchronization!	WITHOUT_CLASSIFICATION	0.9999961364070309	WITHOUT_CLASSIFICATION	3.8635929691285525E-6	TEST
// two conditions where we need to transform this to a theta-join syntax: //      1) 'elem' is the "root from-element" in correlated subqueries //      2) The DotNode.useThetaStyleImplicitJoins has been set to true //          and 'elem' represents an implicit join	WITHOUT_CLASSIFICATION	0.9999996993939362	WITHOUT_CLASSIFICATION	3.0060606387044325E-7	TEST
// WebSphere, however, is not a sane JEE/JTA container...	WITHOUT_CLASSIFICATION	0.9999997941938147	WITHOUT_CLASSIFICATION	2.0580618530489533E-7	TEST
// for sane JEE/JTA containers, the transaction itself functions as its identifier...	WITHOUT_CLASSIFICATION	0.9999999991327969	WITHOUT_CLASSIFICATION	8.672031462865769E-10	TEST
//swallow, the transaction was finished	WITHOUT_CLASSIFICATION	0.9999996464190332	WITHOUT_CLASSIFICATION	3.5358096680318605E-7	TEST
// all AliasToEntityMapResultTransformer are considered equal ~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999999890182176	WITHOUT_CLASSIFICATION	1.0981782404129324E-8	TEST
// Create the join element under the from element.	WITHOUT_CLASSIFICATION	0.9999996327269137	WITHOUT_CLASSIFICATION	3.6727308633672313E-7	TEST
// all DistinctRootEntityResultTransformer are considered equal ~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999999810513098	WITHOUT_CLASSIFICATION	1.8948690148906076E-8	TEST
// map of EntityMode -> Tuplizer	WITHOUT_CLASSIFICATION	0.9999995387224004	WITHOUT_CLASSIFICATION	4.6127759955672467E-7	TEST
// this is a virtual id property...	WITHOUT_CLASSIFICATION	0.9999877175663389	WITHOUT_CLASSIFICATION	1.2282433661215504E-5	TEST
//this one needed only for guessEntityMode()	WITHOUT_CLASSIFICATION	0.9999643573098376	WITHOUT_CLASSIFICATION	3.564269016237658E-5	TEST
// create our own copy of the user-supplied tuplizer impl map	WITHOUT_CLASSIFICATION	0.9999993447938516	WITHOUT_CLASSIFICATION	6.552061484644111E-7	TEST
// todo : move this to SF per HHH-3517; also see HHH-1907 and ComponentMetamodel	WITHOUT_CLASSIFICATION	0.9999988538657397	WITHOUT_CLASSIFICATION	1.1461342602568792E-6	TEST
// then the pojo tuplizer, using the dynamic-map tuplizer if no pojo representation is available	WITHOUT_CLASSIFICATION	0.9999998233885679	WITHOUT_CLASSIFICATION	1.7661143221289927E-7	TEST
// Build the dynamic-map tuplizer...	WITHOUT_CLASSIFICATION	0.9999988563325258	WITHOUT_CLASSIFICATION	1.1436674740657697E-6	TEST
// then dom4j tuplizer, if dom4j representation is available	WITHOUT_CLASSIFICATION	0.999999528109419	WITHOUT_CLASSIFICATION	4.718905810882472E-7	TEST
// Build the dynamic-map tuplizer...	WITHOUT_CLASSIFICATION	0.9999988563325258	WITHOUT_CLASSIFICATION	1.1436674740657697E-6	TEST
// put the "standard" tuplizers into the tuplizer map first	WITHOUT_CLASSIFICATION	0.9999994857212609	WITHOUT_CLASSIFICATION	5.142787391939694E-7	TEST
// found a ctor, but it was not publicly accessible so try to request accessibility	WITHOUT_CLASSIFICATION	0.9999999042097254	WITHOUT_CLASSIFICATION	9.579027458453266E-8	TEST
//	WITHOUT_CLASSIFICATION	0.9999674909996846	WITHOUT_CLASSIFICATION	3.2509000315333503E-5	TEST
// cached for efficiency...	WITHOUT_CLASSIFICATION	0.9999997863187059	WITHOUT_CLASSIFICATION	2.1368129413511944E-7	TEST
//	WITHOUT_CLASSIFICATION	0.9999674909996846	WITHOUT_CLASSIFICATION	3.2509000315333503E-5	TEST
//	WITHOUT_CLASSIFICATION	0.9999674909996846	WITHOUT_CLASSIFICATION	3.2509000315333503E-5	TEST
//it was not embedded, so the argument is just an id	WITHOUT_CLASSIFICATION	0.9999974552677484	WITHOUT_CLASSIFICATION	2.5447322516478436E-6	TEST
// then the pojo tuplizer, using the dynamic-map tuplizer if no pojo representation is available	WITHOUT_CLASSIFICATION	0.9999998233885679	WITHOUT_CLASSIFICATION	1.7661143221289927E-7	TEST
// then dom4j tuplizer, if dom4j representation is available	WITHOUT_CLASSIFICATION	0.999999528109419	WITHOUT_CLASSIFICATION	4.718905810882472E-7	TEST
// put the "standard" tuplizers into the tuplizer map first	WITHOUT_CLASSIFICATION	0.9999994857212609	WITHOUT_CLASSIFICATION	5.142787391939694E-7	TEST
// then handle any user-defined entity modes...	WITHOUT_CLASSIFICATION	0.9999985243410734	WITHOUT_CLASSIFICATION	1.4756589266650219E-6	TEST
//return currentId;	WITHOUT_CLASSIFICATION	0.9999996273434296	WITHOUT_CLASSIFICATION	3.726565704166737E-7	TEST
//reset the id	WITHOUT_CLASSIFICATION	0.9999935043101018	WITHOUT_CLASSIFICATION	6.495689898225899E-6	TEST
//	WITHOUT_CLASSIFICATION	0.9999674909996846	WITHOUT_CLASSIFICATION	3.2509000315333503E-5	TEST
//reset the version	WITHOUT_CLASSIFICATION	0.9999965009219715	WITHOUT_CLASSIFICATION	3.4990780284968014E-6	TEST
// the default is to simply not lazy fetch properties for now...	WITHOUT_CLASSIFICATION	0.9999969683298554	WITHOUT_CLASSIFICATION	3.0316701445121816E-6	TEST
// Add the second join, the one that ends in the destination table.	WITHOUT_CLASSIFICATION	0.9999999649507808	WITHOUT_CLASSIFICATION	3.504921914013507E-8	TEST
// temporary ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999962346448281	WITHOUT_CLASSIFICATION	3.7653551719424924E-6	TEST
// found a ctor, but it was not publicly accessible so try to request accessibility	WITHOUT_CLASSIFICATION	0.9999999042097254	WITHOUT_CLASSIFICATION	9.579027458453266E-8	TEST
// determine the id getter and setter methods from the proxy interface (if any) // determine all interfaces needed by the resulting proxy	WITHOUT_CLASSIFICATION	0.9999918493977464	WITHOUT_CLASSIFICATION	8.15060225359772E-6	TEST
//	WITHOUT_CLASSIFICATION	0.9999674909996846	WITHOUT_CLASSIFICATION	3.2509000315333503E-5	TEST
//not final because proxy factory creation can fail	WITHOUT_CLASSIFICATION	0.9999998750760994	WITHOUT_CLASSIFICATION	1.2492390055458158E-7	TEST
// superclass entity-name	WITHOUT_CLASSIFICATION	0.9999999283247869	WITHOUT_CLASSIFICATION	7.167521310314212E-8	TEST
// temporary ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999962346448281	WITHOUT_CLASSIFICATION	3.7653551719424924E-6	TEST
// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999900755133448	WITHOUT_CLASSIFICATION	9.924486655228135E-6	TEST
//init the aliases, after initing the constructornode	WITHOUT_CLASSIFICATION	0.9999993386710359	WITHOUT_CLASSIFICATION	6.613289641391765E-7	TEST
// temporary ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999962346448281	WITHOUT_CLASSIFICATION	3.7653551719424924E-6	TEST
// legacy behavior (with no abstract attribute specified)	WITHOUT_CLASSIFICATION	0.9999999217913474	WITHOUT_CLASSIFICATION	7.820865263780302E-8	TEST
// Get ready to start adding nodes.	WITHOUT_CLASSIFICATION	0.9999992704139853	WITHOUT_CLASSIFICATION	7.295860147847014E-7	TEST
// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999900755133448	WITHOUT_CLASSIFICATION	9.924486655228135E-6	TEST
//note: this affects the return value!	WITHOUT_CLASSIFICATION	0.9999938060129632	WITHOUT_CLASSIFICATION	6.193987036863553E-6	TEST
// Need to account for allowable '_' within the variant	WITHOUT_CLASSIFICATION	0.9999969689848462	WITHOUT_CLASSIFICATION	3.031015153726231E-6	TEST
// Add the type to the list of returned sqlResultTypes.	WITHOUT_CLASSIFICATION	0.9999998728063687	WITHOUT_CLASSIFICATION	1.2719363134411733E-7	TEST
// Collection Types:	WITHOUT_CLASSIFICATION	0.9999999164463463	WITHOUT_CLASSIFICATION	8.355365359087215E-8	TEST
// convenience methods relating to operations across arrays of types...	WITHOUT_CLASSIFICATION	0.9999999709504724	WITHOUT_CLASSIFICATION	2.9049527640058375E-8	TEST
//lobs cannot be compared	WITHOUT_CLASSIFICATION	0.9999981726483985	WITHOUT_CLASSIFICATION	1.8273516014689413E-6	TEST
//Blobs are ignored by merge()	WITHOUT_CLASSIFICATION	0.9999906659653309	WITHOUT_CLASSIFICATION	9.334034669018327E-6	TEST
//value is the entity name	WITHOUT_CLASSIFICATION	0.9999885035570469	WITHOUT_CLASSIFICATION	1.1496442953076512E-5	TEST
//EARLY EXIT!	WITHOUT_CLASSIFICATION	0.9999867670632953	WITHOUT_CLASSIFICATION	1.323293670468655E-5	TEST
// generate id select fragment and then property select fragment for // each expression, just like generateSelectFragments().	WITHOUT_CLASSIFICATION	0.9999983874457476	WITHOUT_CLASSIFICATION	1.612554252316217E-6	TEST
//TODO!	WITHOUT_CLASSIFICATION	0.992446845176491	WITHOUT_CLASSIFICATION	0.007553154823509069	TEST
//xml is the entity name	WITHOUT_CLASSIFICATION	0.9999928375829382	WITHOUT_CLASSIFICATION	7.162417061821727E-6	TEST
//special case ... this is the leaf of the containment graph, even though not immutable	WITHOUT_CLASSIFICATION	0.9999955180992295	WITHOUT_CLASSIFICATION	4.481900770460582E-6	TEST
//tolerates nulls	WITHOUT_CLASSIFICATION	0.999989386947229	WITHOUT_CLASSIFICATION	1.0613052770972647E-5	TEST
/*sqlResultTypeList,*/	WITHOUT_CLASSIFICATION	0.9999521713490712	WITHOUT_CLASSIFICATION	4.782865092882585E-5	TEST
// metaType is assumed to be single-column type	WITHOUT_CLASSIFICATION	0.9999995093471707	WITHOUT_CLASSIFICATION	4.906528293459952E-7	TEST
// Get all the select expressions (that we just generated) and render the select.	WITHOUT_CLASSIFICATION	0.9999999578716285	WITHOUT_CLASSIFICATION	4.2128371525067195E-8	TEST
// Look through the FromElement's children to find any collections of values that should be fetched...	WITHOUT_CLASSIFICATION	0.9999999427869369	WITHOUT_CLASSIFICATION	5.721306293862516E-8	TEST
//return AssociationType.FOREIGN_KEY_TO_PARENT; //this is better but causes a transient object exception...	WITHOUT_CLASSIFICATION	0.9999979179325765	WITHOUT_CLASSIFICATION	2.082067423481699E-6	TEST
// Use the lower case function name. // Remember whether we're in a SELECT clause or not.	WITHOUT_CLASSIFICATION	0.9999999859748521	WITHOUT_CLASSIFICATION	1.4025147873306601E-8	TEST
// IDENT might be the name of a class.	WITHOUT_CLASSIFICATION	0.9999993417476485	WITHOUT_CLASSIFICATION	6.5825235159668E-7	TEST
//TODO!!!	WITHOUT_CLASSIFICATION	0.9913341461003065	WITHOUT_CLASSIFICATION	0.008665853899693467	TEST
//st.setTimestamp( index,  new Timestamp( cal.getTimeInMillis() ), cal ); //JDK 1.5 only	WITHOUT_CLASSIFICATION	0.9999964889262156	WITHOUT_CLASSIFICATION	3.5110737844065177E-6	TEST
//st.setDate( index,  new Date( cal.getTimeInMillis() ), cal ); //JDK 1.5 only	WITHOUT_CLASSIFICATION	0.9999989945624798	WITHOUT_CLASSIFICATION	1.0054375201638364E-6	TEST
// both are Timestamps	WITHOUT_CLASSIFICATION	0.9999924343356037	WITHOUT_CLASSIFICATION	7.565664396224807E-6	TEST
// at least one is a plain old Date	WITHOUT_CLASSIFICATION	0.9999949250526704	WITHOUT_CLASSIFICATION	5.0749473296537734E-6	TEST
//noop	WITHOUT_CLASSIFICATION	0.9999662491669086	WITHOUT_CLASSIFICATION	3.3750833091375006E-5	TEST
// if the corresponding SQL value is NULL, the reader we got is NULL as well	WITHOUT_CLASSIFICATION	0.9999983505332327	WITHOUT_CLASSIFICATION	1.6494667673015985E-6	TEST
// Fetch Reader content up to the end - and put characters in a StringBuffer	WITHOUT_CLASSIFICATION	0.9999999941481611	WITHOUT_CLASSIFICATION	5.851838943031846E-9	TEST
// Return StringBuffer content as a large String	WITHOUT_CLASSIFICATION	0.9999999940693151	WITHOUT_CLASSIFICATION	5.930684925492122E-9	TEST
//or Types.LONGVARCHAR?	WITHOUT_CLASSIFICATION	0.9999792415534056	WITHOUT_CLASSIFICATION	2.0758446594455553E-5	TEST
//Not called at runtime so doesn't matter if its slow :)	WITHOUT_CLASSIFICATION	0.9999768487348855	WITHOUT_CLASSIFICATION	2.3151265114576924E-5	TEST
//TODO	WITHOUT_CLASSIFICATION	0.9972231685418709	WITHOUT_CLASSIFICATION	0.0027768314581291184	TEST
// Chop off the rest of the tree.	WITHOUT_CLASSIFICATION	0.9999821894518277	WITHOUT_CLASSIFICATION	1.7810548172267893E-5	TEST
//different nullability rules for pk/fk	WITHOUT_CLASSIFICATION	0.9999968270361447	WITHOUT_CLASSIFICATION	3.1729638553512474E-6	TEST
//cache this	WITHOUT_CLASSIFICATION	0.9999967247516115	WITHOUT_CLASSIFICATION	3.2752483883879603E-6	TEST
//only really need new array during semiresolve!	WITHOUT_CLASSIFICATION	0.9999847306689456	WITHOUT_CLASSIFICATION	1.5269331054440272E-5	TEST
// Forcefully remove leading ands from where fragments; the grammar will // handle adding them	WITHOUT_CLASSIFICATION	0.9999962824500465	WITHOUT_CLASSIFICATION	3.7175499535836923E-6	TEST
//TODO!!!!!!!	WITHOUT_CLASSIFICATION	0.9914490199760907	WITHOUT_CLASSIFICATION	0.008550980023909298	TEST
// Create a new FILTERS node as a parent of all filters	WITHOUT_CLASSIFICATION	0.9999999181019437	WITHOUT_CLASSIFICATION	8.189805638608535E-8	TEST
// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999900755133448	WITHOUT_CLASSIFICATION	9.924486655228135E-6	TEST
//public Object instantiate(Object parent, SessionImplementor session) throws HibernateException;	WITHOUT_CLASSIFICATION	0.9999992460292055	WITHOUT_CLASSIFICATION	7.539707945692742E-7	TEST
//nothing to do	WITHOUT_CLASSIFICATION	0.9999755950597193	WITHOUT_CLASSIFICATION	2.4404940280614382E-5	TEST
//nothing to do	WITHOUT_CLASSIFICATION	0.9999755950597193	WITHOUT_CLASSIFICATION	2.4404940280614382E-5	TEST
// VersionType impl ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ //      Note : simply returns null for seed() and next() as the only known //      application of binary types for versioning is for use with the //      TIMESTAMP datatype supported by Sybase and SQL Server, which //      are completely db-generated values...	WITHOUT_CLASSIFICATION	0.9999996377844409	WITHOUT_CLASSIFICATION	3.622155590719231E-7	TEST
//lobs cannot be compared	WITHOUT_CLASSIFICATION	0.9999981726483985	WITHOUT_CLASSIFICATION	1.8273516014689413E-6	TEST
//not really necessary, I guess...	WITHOUT_CLASSIFICATION	0.9999964706241861	WITHOUT_CLASSIFICATION	3.529375813898207E-6	TEST
//Clobs are ignored by merge() operation	WITHOUT_CLASSIFICATION	0.9999931790791348	WITHOUT_CLASSIFICATION	6.820920865211694E-6	TEST
// we do not have to worry about queued additions to uninitialized // collections, since they can only occur for inverse collections!	WITHOUT_CLASSIFICATION	0.9999999944273712	WITHOUT_CLASSIFICATION	5.572628839901111E-9	TEST
// collections cannot be compared	WITHOUT_CLASSIFICATION	0.999999928286449	WITHOUT_CLASSIFICATION	7.171355091559257E-8	TEST
//remember the uk value	WITHOUT_CLASSIFICATION	0.9999860595845748	WITHOUT_CLASSIFICATION	1.394041542518004E-5	TEST
//NOOP	WITHOUT_CLASSIFICATION	0.9999045637098484	WITHOUT_CLASSIFICATION	9.543629015150911E-5	TEST
//processCollectionProperty(token, q.getCollectionPersister(collectionRole), collectionName);	WITHOUT_CLASSIFICATION	0.9999915136162483	WITHOUT_CLASSIFICATION	8.486383751743663E-6	TEST
//we must use the "remembered" uk value, since it is  //not available from the EntityEntry during assembly	WITHOUT_CLASSIFICATION	0.9999991492193998	WITHOUT_CLASSIFICATION	8.507806002334637E-7	TEST
// collections don't dirty an unversioned parent entity	WITHOUT_CLASSIFICATION	0.999999825809941	WITHOUT_CLASSIFICATION	1.7419005908667882E-7	TEST
// return false;	WITHOUT_CLASSIFICATION	0.9999999331802026	WITHOUT_CLASSIFICATION	6.681979736985137E-8	TEST
// This just handles a particular case of component // projection, perhaps get rid of it and throw an exception	WITHOUT_CLASSIFICATION	0.9999993478310939	WITHOUT_CLASSIFICATION	6.521689061315919E-7	TEST
//NOTE: we avoid joining to the next table if the named property is just the foreign key value	WITHOUT_CLASSIFICATION	0.999830703134625	WITHOUT_CLASSIFICATION	1.692968653749715E-4	TEST
// the key is the owning entity itself, so get the ID from the key	WITHOUT_CLASSIFICATION	0.9999975486887592	WITHOUT_CLASSIFICATION	2.451311240790418E-6	TEST
// if the original is a PersistentCollection, and that original // was not flagged as dirty, then reset the target's dirty flag // here after the copy operation. // </p> // One thing to be careful of here is a "bare" original collection // in which case we should never ever ever reset the dirty flag // on the target because we simply do not know...	WITHOUT_CLASSIFICATION	0.9999989695252032	WITHOUT_CLASSIFICATION	1.0304747968686348E-6	TEST
//ignore subselect keywords	WITHOUT_CLASSIFICATION	0.9999993288032427	WITHOUT_CLASSIFICATION	6.711967573141312E-7	TEST
// copy elements into newly empty target collection	WITHOUT_CLASSIFICATION	0.9999999843180561	WITHOUT_CLASSIFICATION	1.5681943874202647E-8	TEST
// for a null target, or a target which is the same as the original, we // need to put the merged elements in a new collection	WITHOUT_CLASSIFICATION	0.9999998920327283	WITHOUT_CLASSIFICATION	1.0796727171761592E-7	TEST
// by default just use an unanticipated capacity since we don't // know how to extract the capacity to use from original here...	WITHOUT_CLASSIFICATION	0.9999998974910758	WITHOUT_CLASSIFICATION	1.0250892434631533E-7	TEST
// get the elements back into the target making sure to handle dirty flag	WITHOUT_CLASSIFICATION	0.9999999360924844	WITHOUT_CLASSIFICATION	6.390751565776503E-8	TEST
// check if collection is currently being loaded	WITHOUT_CLASSIFICATION	0.999999879418746	WITHOUT_CLASSIFICATION	1.2058125390730549E-7	TEST
// check if it is already completely loaded, but unowned	WITHOUT_CLASSIFICATION	0.9999996981519976	WITHOUT_CLASSIFICATION	3.018480023202189E-7	TEST
// cache the actual id of the object, not the value of the // property-ref, which might not be initialized	WITHOUT_CLASSIFICATION	0.9999976720461001	WITHOUT_CLASSIFICATION	2.327953899824478E-6	TEST
//TODO!!!!!!!	WITHOUT_CLASSIFICATION	0.9914490199760907	WITHOUT_CLASSIFICATION	0.008550980023909298	TEST
// create a new collection wrapper, to be initialized later	WITHOUT_CLASSIFICATION	0.9999999247041269	WITHOUT_CLASSIFICATION	7.529587309724626E-8	TEST
// Some JDBC drivers erroneously return an empty array here for a null DB value :/	WITHOUT_CLASSIFICATION	0.9999997034415525	WITHOUT_CLASSIFICATION	2.965584474827717E-7	TEST
// our column span is the number of columns in the PK	WITHOUT_CLASSIFICATION	0.9999999699991224	WITHOUT_CLASSIFICATION	3.0000877534973366E-8	TEST
//cannot batch fetch by unique key (property-ref associations)	WITHOUT_CLASSIFICATION	0.999974312636516	WITHOUT_CLASSIFICATION	2.568736348397751E-5	TEST
// we already know current is not null...	WITHOUT_CLASSIFICATION	0.9999999245351059	WITHOUT_CLASSIFICATION	7.546489407266131E-8	TEST
// the ids are fully resolved, so compare them with isDirty(), not isModified()	WITHOUT_CLASSIFICATION	0.9999992378636897	WITHOUT_CLASSIFICATION	7.621363103186325E-7	TEST
//the owner of the association is not the owner of the id	WITHOUT_CLASSIFICATION	0.9999764817224409	WITHOUT_CLASSIFICATION	2.3518277559027066E-5	TEST
// ----------------------------------------------------------- Constructors	WITHOUT_CLASSIFICATION	0.9999998104948672	WITHOUT_CLASSIFICATION	1.8950513290024806E-7	TEST
// ----------------------------------------------------- Instance Variables	WITHOUT_CLASSIFICATION	0.9999998333551453	WITHOUT_CLASSIFICATION	1.6664485462671438E-7	TEST
//	WITHOUT_CLASSIFICATION	0.9999674909996846	WITHOUT_CLASSIFICATION	3.2509000315333503E-5	TEST
// --------------------------------------------------------- Public Methods	WITHOUT_CLASSIFICATION	0.9999998257870664	WITHOUT_CLASSIFICATION	1.7421293374133062E-7	TEST
// Compare the two maps for equality	WITHOUT_CLASSIFICATION	0.9999997568759493	WITHOUT_CLASSIFICATION	2.4312405066444785E-7	TEST
// Simple tests that require no synchronization	WITHOUT_CLASSIFICATION	0.9999677409198827	WITHOUT_CLASSIFICATION	3.2259080117347446E-5	TEST
//Sybase fail if we don't do that, sigh...	WITHOUT_CLASSIFICATION	0.9999986757176512	WITHOUT_CLASSIFICATION	1.3242823488747626E-6	TEST
// Handles things like: // a and b or c // a and ( b or c ) // not a and not b // not ( a and b ) // x between y and z            (overloaded "and") // x in ( a, b, c )             (overloaded brackets) // not not a // a is not null                (overloaded "not") // etc...... // and expressions like // foo = bar                    (maps to: foo.id = bar.id) // foo.Bar = 'foo'              (maps to: foo.bar = 'foo') // foo.Bar.Baz = 1.0            (maps to: foo.bar = bar.id and bar.baz = 1.0) // 1.0 = foo.Bar.Baz            (maps to: bar.baz = 1.0 and foo.Bar = bar.id) // foo.Bar.Baz = a.B.C          (maps to: bar.Baz = b.C and foo.Bar = bar.id and a.B = b.id) // foo.Bar.Baz + a.B.C          (maps to: bar.Baz + b.C and foo.Bar = bar.id and a.B = b.id) // ( foo.Bar.Baz + 1.0 ) < 2.0  (maps to: ( bar.Baz + 1.0 ) < 2.0 and foo.Bar = bar.id)	WITHOUT_CLASSIFICATION	0.9999977720208864	WITHOUT_CLASSIFICATION	2.2279791136757024E-6	TEST
// release the jdk internal caches everytime to ensure this // plays nicely with destroyable class-loaders	WITHOUT_CLASSIFICATION	0.9999998218293329	WITHOUT_CLASSIFICATION	1.7817066705407447E-7	TEST
// release the jdk internal caches everytime to ensure this // plays nicely with destroyable class-loaders	WITHOUT_CLASSIFICATION	0.9999998218293329	WITHOUT_CLASSIFICATION	1.7817066705407447E-7	TEST
// try to "pretty print" it	WITHOUT_CLASSIFICATION	0.9999998356143531	WITHOUT_CLASSIFICATION	1.6438564687293518E-7	TEST
// otherwise, just dump it	WITHOUT_CLASSIFICATION	0.9999992713538067	WITHOUT_CLASSIFICATION	7.286461932622634E-7	TEST
//its an interface so we can't really tell anything...	WITHOUT_CLASSIFICATION	0.9999947986608226	WITHOUT_CLASSIFICATION	5.201339177452457E-6	TEST
//its an interface so we can't really tell anything...	WITHOUT_CLASSIFICATION	0.9999947986608226	WITHOUT_CLASSIFICATION	5.201339177452457E-6	TEST
// use default behavior	WITHOUT_CLASSIFICATION	0.9999999112059837	WITHOUT_CLASSIFICATION	8.879401620016042E-8	TEST
//NOTE: early return	WITHOUT_CLASSIFICATION	0.9999939777310756	WITHOUT_CLASSIFICATION	6.022268924433735E-6	TEST
// the MRU cache used to keep hard references to the most recently used query plans; // note : LRU here is a bit of a misnomer, it indicates that LRU entries are removed, the // actual kept entries are the MRU entries	WITHOUT_CLASSIFICATION	0.9999998967292067	WITHOUT_CLASSIFICATION	1.0327079327451446E-7	TEST
// we want to be able to just use the defaults, // if JNDI environment properties are not supplied // so don't put null in anywhere	WITHOUT_CLASSIFICATION	0.9999995479393631	WITHOUT_CLASSIFICATION	4.5206063695678265E-7	TEST
// Clone //-----------------------------------------------------------------------	WITHOUT_CLASSIFICATION	0.9999970950093153	WITHOUT_CLASSIFICATION	2.904990684661102E-6	TEST
// Serialize //-----------------------------------------------------------------------	WITHOUT_CLASSIFICATION	0.9999985465418653	WITHOUT_CLASSIFICATION	1.453458134673143E-6	TEST
// stream closed in the finally	WITHOUT_CLASSIFICATION	0.9999999628538747	WITHOUT_CLASSIFICATION	3.714612529734364E-8	TEST
// stream closed in the finally	WITHOUT_CLASSIFICATION	0.9999999628538747	WITHOUT_CLASSIFICATION	3.714612529734364E-8	TEST
// Deserialize //-----------------------------------------------------------------------	WITHOUT_CLASSIFICATION	0.9999957164067256	WITHOUT_CLASSIFICATION	4.2835932743955406E-6	TEST
/* static methods only - hide constructor */	WITHOUT_CLASSIFICATION	0.9999999922624956	WITHOUT_CLASSIFICATION	7.737504363587449E-9	TEST
/*&& !('_'==character)*/	WITHOUT_CLASSIFICATION	0.9999950842881358	WITHOUT_CLASSIFICATION	4.915711864300923E-6	TEST
// returnign null!	WITHOUT_CLASSIFICATION	0.9999999094322756	WITHOUT_CLASSIFICATION	9.056772438656978E-8	TEST
// returnign null!	WITHOUT_CLASSIFICATION	0.9999999094322756	WITHOUT_CLASSIFICATION	9.056772438656978E-8	TEST
// includes last '.'	WITHOUT_CLASSIFICATION	0.9999998916973403	WITHOUT_CLASSIFICATION	1.0830265967531304E-7	TEST
// +1 to include the following '.'	WITHOUT_CLASSIFICATION	0.9999999269318505	WITHOUT_CLASSIFICATION	7.306814953178374E-8	TEST
// Impl note: takes advantage of the fact that an escpaed single quote // embedded within a quote-block can really be handled as two seperate // quote-blocks for the purposes of this method...	WITHOUT_CLASSIFICATION	0.9999594804819265	WITHOUT_CLASSIFICATION	4.0519518073449506E-5	TEST
// first time we find match!	WITHOUT_CLASSIFICATION	0.9999995723982393	WITHOUT_CLASSIFICATION	4.276017605767607E-7	TEST
// entityNames may now include slashes for the representations //classname may be an inner class	WITHOUT_CLASSIFICATION	0.9999998949381882	WITHOUT_CLASSIFICATION	1.0506181188277461E-7	TEST
// wrapped iterators	WITHOUT_CLASSIFICATION	0.9999996775254559	WITHOUT_CLASSIFICATION	3.224745440990061E-7	TEST
// index of current iterator in the wrapped iterators array	WITHOUT_CLASSIFICATION	0.9999999727947874	WITHOUT_CLASSIFICATION	2.720521266993065E-8	TEST
// the current iterator	WITHOUT_CLASSIFICATION	0.9999998205699384	WITHOUT_CLASSIFICATION	1.7943006161423033E-7	TEST
// the last used iterator	WITHOUT_CLASSIFICATION	0.9999996444078494	WITHOUT_CLASSIFICATION	3.555921505997887E-7	TEST
//it was a boolean expression	WITHOUT_CLASSIFICATION	0.9999985252047541	WITHOUT_CLASSIFICATION	1.4747952459528397E-6	TEST
/*public static Object[] clone(Class elementClass, Object[] array) {	WITHOUT_CLASSIFICATION	0.9999996034932955	WITHOUT_CLASSIFICATION	3.9650670434794727E-7	TEST
// call this before any Iterator method to make sure that the current Iterator // is not exhausted	WITHOUT_CLASSIFICATION	0.9999945112750135	WITHOUT_CLASSIFICATION	5.4887249865615586E-6	TEST
//doable if needed	WITHOUT_CLASSIFICATION	0.9999431145306471	WITHOUT_CLASSIFICATION	5.6885469352876424E-5	TEST
// set last used iterator here, in case the user calls remove // before calling hasNext() or next() (although they shouldn't)	WITHOUT_CLASSIFICATION	0.9999989449310133	WITHOUT_CLASSIFICATION	1.0550689867812816E-6	TEST
// peek ahead	WITHOUT_CLASSIFICATION	0.9999981218203909	WITHOUT_CLASSIFICATION	1.8781796090668386E-6	TEST
// if we reach the end of the string w/o finding the // matching end, that is an exception	WITHOUT_CLASSIFICATION	0.9999997772863731	WITHOUT_CLASSIFICATION	2.227136267842077E-7	TEST
// we have a placeholder, spin forward till we find the end	WITHOUT_CLASSIFICATION	0.9999999044794279	WITHOUT_CLASSIFICATION	9.552057215589544E-8	TEST
// make sure spinning forward did not put us past the end of the buffer...	WITHOUT_CLASSIFICATION	0.9999904530497344	WITHOUT_CLASSIFICATION	9.5469502655202E-6	TEST
// First, try to locate this resource through the current // context classloader.	WITHOUT_CLASSIFICATION	0.9999999285587428	WITHOUT_CLASSIFICATION	7.144125730400561E-8	TEST
// Next, try to locate this resource through this class's classloader	WITHOUT_CLASSIFICATION	0.9999994399438892	WITHOUT_CLASSIFICATION	5.600561108005789E-7	TEST
// Next, try to locate this resource through the system classloader	WITHOUT_CLASSIFICATION	0.9999996261215757	WITHOUT_CLASSIFICATION	3.738784243681838E-7	TEST
// Anywhere else we should look?	WITHOUT_CLASSIFICATION	0.9999980149549632	WITHOUT_CLASSIFICATION	1.9850450368239796E-6	TEST
// would need an IdentitySet for this!	WITHOUT_CLASSIFICATION	0.9999926121920546	WITHOUT_CLASSIFICATION	7.387807945467016E-6	TEST
//Arrays.asList doesn't do primitive arrays	WITHOUT_CLASSIFICATION	0.999981262020956	WITHOUT_CLASSIFICATION	1.873797904395721E-5	TEST
//faster?	WITHOUT_CLASSIFICATION	0.9999557514328015	WITHOUT_CLASSIFICATION	4.424856719850185E-5	TEST
// the name of a class	WITHOUT_CLASSIFICATION	0.9999997107537809	WITHOUT_CLASSIFICATION	2.892462190685381E-7	TEST
// Its the listener class name	WITHOUT_CLASSIFICATION	0.999998566436487	WITHOUT_CLASSIFICATION	1.433563513047647E-6	TEST
//allow 9,8,7,6,5,4,3,2,1	WITHOUT_CLASSIFICATION	0.9999866543635791	WITHOUT_CLASSIFICATION	1.3345636420836568E-5	TEST
// default to element set if no elements() specified	WITHOUT_CLASSIFICATION	0.9999999689973311	WITHOUT_CLASSIFICATION	3.1002668898862936E-8	TEST
// look for the instance by uuid	WITHOUT_CLASSIFICATION	0.9999997906773084	WITHOUT_CLASSIFICATION	2.0932269160973433E-7	TEST
// in case we were deserialized in a different JVM, look for an instance with the same name // (alternatively we could do an actual JNDI lookup here....)	WITHOUT_CLASSIFICATION	0.9999991694106077	WITHOUT_CLASSIFICATION	8.305893923583476E-7	TEST
// first, lets determine whether to apply cglib or javassist based instrumentation...	WITHOUT_CLASSIFICATION	0.999999964849182	WITHOUT_CLASSIFICATION	3.5150817960659995E-8	TEST
// Make sure we don't override previous set values	WITHOUT_CLASSIFICATION	0.9999994253800252	WITHOUT_CLASSIFICATION	5.746199748251309E-7	TEST
//entirely optional!!	WITHOUT_CLASSIFICATION	0.9999971419309168	WITHOUT_CLASSIFICATION	2.8580690831605275E-6	TEST
// Its the listener instance (or better be)	WITHOUT_CLASSIFICATION	0.9999990893097372	WITHOUT_CLASSIFICATION	9.106902628255823E-7	TEST
//context.unbind(boundName);	WITHOUT_CLASSIFICATION	0.9999919558127914	WITHOUT_CLASSIFICATION	8.044187208553457E-6	TEST
//readResolveObject	WITHOUT_CLASSIFICATION	0.9999951867204302	WITHOUT_CLASSIFICATION	4.81327956979381E-6	TEST
//cfg.setProperty("hibernate.show_sql", "true");	WITHOUT_CLASSIFICATION	0.999998482511292	WITHOUT_CLASSIFICATION	1.5174887079969054E-6	TEST
// Defensive, convenience methods	WITHOUT_CLASSIFICATION	0.9999997581612146	WITHOUT_CLASSIFICATION	2.418387853883407E-7	TEST
// Create the SessionFactory from hibernate.cfg.xml	WITHOUT_CLASSIFICATION	0.999999785970151	WITHOUT_CLASSIFICATION	2.1402984902055005E-7	TEST
// Make sure you log the exception, as it might be swallowed	WITHOUT_CLASSIFICATION	0.9999997030211415	WITHOUT_CLASSIFICATION	2.969788585133224E-7	TEST
// Begin unit of work	WITHOUT_CLASSIFICATION	0.9999992507092997	WITHOUT_CLASSIFICATION	7.492907002861518E-7	TEST
// Write HTML header	WITHOUT_CLASSIFICATION	0.9999995080144467	WITHOUT_CLASSIFICATION	4.919855531799961E-7	TEST
// Handle actions	WITHOUT_CLASSIFICATION	0.9999999479322282	WITHOUT_CLASSIFICATION	5.206777188426777E-8	TEST
// Print page	WITHOUT_CLASSIFICATION	0.9999999071077696	WITHOUT_CLASSIFICATION	9.289223040589766E-8	TEST
// Write HTML footer	WITHOUT_CLASSIFICATION	0.9999992967634923	WITHOUT_CLASSIFICATION	7.032365077339045E-7	TEST
// End unit of work	WITHOUT_CLASSIFICATION	0.9999995073922628	WITHOUT_CLASSIFICATION	4.926077371218071E-7	TEST
// Start the session to be used for this request	WITHOUT_CLASSIFICATION	0.99999655892398	WITHOUT_CLASSIFICATION	3.441076020085791E-6	TEST
// make the session available to the session factory's "current context"	WITHOUT_CLASSIFICATION	0.9999999495144958	WITHOUT_CLASSIFICATION	5.048550424904975E-8	TEST
// pass control along to the rest of the processing chain	WITHOUT_CLASSIFICATION	0.9999947069956227	WITHOUT_CLASSIFICATION	5.293004377369819E-6	TEST
// remove session from "current context"	WITHOUT_CLASSIFICATION	0.9999998375606134	WITHOUT_CLASSIFICATION	1.6243938664394485E-7	TEST
// Eager fetch the collection so we can use it detached	WITHOUT_CLASSIFICATION	0.999999997636012	WITHOUT_CLASSIFICATION	2.3639880006486742E-9	TEST
// If we want to handle it bidirectional and detached, we also need to load this // collection with an eager outer-join fetch, this time with Criteria and not HQL:	WITHOUT_CLASSIFICATION	0.9999999178273479	WITHOUT_CLASSIFICATION	8.217265212111316E-8	TEST
/*        Event anEvent = (Event) session                .createCriteria(Event.class).setFetchMode("participants", FetchMode.JOIN)                .add( Expression.eq("id", eventId) )                .uniqueResult(); // Eager fetch the colleciton so we can use it detached        */	WITHOUT_CLASSIFICATION	0.9999999999129849	WITHOUT_CLASSIFICATION	8.701514829830944E-11	TEST
// End of first unit of work	WITHOUT_CLASSIFICATION	0.999998804692736	WITHOUT_CLASSIFICATION	1.1953072639516612E-6	TEST
// or bidirectional safety method, setting both sides: aPerson.addToEvent(anEvent);	WITHOUT_CLASSIFICATION	0.9999999463664245	WITHOUT_CLASSIFICATION	5.363357538750218E-8	TEST
// Begin second unit of work	WITHOUT_CLASSIFICATION	0.999999905251013	WITHOUT_CLASSIFICATION	9.474898705103635E-8	TEST
// Reattachment of aPerson	WITHOUT_CLASSIFICATION	0.9999999353130339	WITHOUT_CLASSIFICATION	6.468696618765161E-8	TEST
// The getEmailAddresses() might trigger a lazy load of the collection	WITHOUT_CLASSIFICATION	0.9999999253580838	WITHOUT_CLASSIFICATION	7.464191628136117E-8	TEST
// We need our tm, so get it now and avoid doing other work // if there is a problem	WITHOUT_CLASSIFICATION	0.9999857150049913	WITHOUT_CLASSIFICATION	1.4284995008630193E-5	TEST
// Don't hold the JBC node lock throughout the tx, as that // prevents reads and other updates	WITHOUT_CLASSIFICATION	0.9999993551078099	WITHOUT_CLASSIFICATION	6.448921900477694E-7	TEST
// Don't hold the JBC node lock throughout the tx, as that // prevents reads and other updates	WITHOUT_CLASSIFICATION	0.9999993551078099	WITHOUT_CLASSIFICATION	6.448921900477694E-7	TEST
// JBC put a version in the node when it created as part of // some internal operation. We are always newer, but if // the JBC version is > 1 something odd has happened	WITHOUT_CLASSIFICATION	0.9999995268861552	WITHOUT_CLASSIFICATION	4.7311384468306685E-7	TEST
//swaldman 2006-08-28: define c3p0-style configuration parameters for properties with //                     hibernate-specific overrides to detect and warn about conflicting //                     declarations	WITHOUT_CLASSIFICATION	0.9999974228244265	WITHOUT_CLASSIFICATION	2.577175573390688E-6	TEST
// Not null if the Isolation level has been specified in the configuration file. // Otherwise, it is left to the Driver's default value.	WITHOUT_CLASSIFICATION	0.999999960023642	WITHOUT_CLASSIFICATION	3.997635802482655E-8	TEST
// Configured outside of Hibernate (i.e. Servlet container, or Java Bean Container // already has Proxool pools running, and this provider is to just borrow one of these	WITHOUT_CLASSIFICATION	0.9999999717492685	WITHOUT_CLASSIFICATION	2.8250731466428317E-8	TEST
// If you're closing down the ConnectionProvider chances are an // is not a real big deal, just warn	WITHOUT_CLASSIFICATION	0.9999999711328335	WITHOUT_CLASSIFICATION	2.8867166575860593E-8	TEST
// (AS is always optional, for consistency with SQL/OQL)	WITHOUT_CLASSIFICATION	0.9999996812931086	WITHOUT_CLASSIFICATION	3.187068913651429E-7	TEST
// process the "new" HQL style where aliases are assigned // _after_ the class name or path expression ie. using // the AS construction	WITHOUT_CLASSIFICATION	0.9999999403873691	WITHOUT_CLASSIFICATION	5.961263084684321E-8	TEST
// the loaded owner will be set to null after the collection is removed, // so capture its value as the affected owner so it is accessible to // both pre- and post- events	WITHOUT_CLASSIFICATION	0.999999979660288	WITHOUT_CLASSIFICATION	2.0339712045497064E-8	TEST
// is a primitive type // invokespecial	WITHOUT_CLASSIFICATION	0.9999994843724096	WITHOUT_CLASSIFICATION	5.156275903925681E-7	TEST
// array of primitive type // do nothing	WITHOUT_CLASSIFICATION	0.9999992613398623	WITHOUT_CLASSIFICATION	7.386601378399576E-7	TEST
// handle a path expression or class name that // appears at the start, in the "new" HQL // style or an alias that appears at the start // in the "old" HQL style	WITHOUT_CLASSIFICATION	0.9999999531372478	WITHOUT_CLASSIFICATION	4.686275228507429E-8	TEST
//handle <=, >=, !=, is not, not between, not in	WITHOUT_CLASSIFICATION	0.9999736506041187	WITHOUT_CLASSIFICATION	2.6349395881331234E-5	TEST
// The loop ensures atomicity of the // select + update even for no transaction // or read committed isolation level	WITHOUT_CLASSIFICATION	0.9999999626521957	WITHOUT_CLASSIFICATION	3.734780427590207E-8	TEST
// transfer an explicitly defined entity name // handle the lazy attribute	WITHOUT_CLASSIFICATION	0.9999999562008854	WITHOUT_CLASSIFICATION	4.3799114652437183E-8	TEST
//keep the behavior consistent even for boundary usages	WITHOUT_CLASSIFICATION	0.9999987207403213	WITHOUT_CLASSIFICATION	1.279259678758059E-6	TEST
//keep the behavior consistent even for boundary usages	WITHOUT_CLASSIFICATION	0.9999987207403213	WITHOUT_CLASSIFICATION	1.279259678758059E-6	TEST
// get meta's from // <joined-subclass>	WITHOUT_CLASSIFICATION	0.9999995175266292	WITHOUT_CLASSIFICATION	4.82473370728798E-7	TEST
// parameters on the property mapping should // override parameters in the typedef	WITHOUT_CLASSIFICATION	0.9999990623215688	WITHOUT_CLASSIFICATION	9.376784312016118E-7	TEST
//fetch="join" overrides default laziness //fetch="join" overrides default laziness	WITHOUT_CLASSIFICATION	0.9999993402287736	WITHOUT_CLASSIFICATION	6.597712264593392E-7	TEST
//NOTE SPECIAL CASE: // default to join and non-lazy for the "second join" // of the many-to-many	WITHOUT_CLASSIFICATION	0.9999999690883423	WITHOUT_CLASSIFICATION	3.0911657628376136E-8	TEST
// so we "clock over" on the first invocation	WITHOUT_CLASSIFICATION	0.9999999863905611	WITHOUT_CLASSIFICATION	1.360943897001504E-8	TEST
// state ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999966333671977	WITHOUT_CLASSIFICATION	3.366632802341378E-6	TEST
//	WITHOUT_CLASSIFICATION	0.9999674909996846	WITHOUT_CLASSIFICATION	3.2509000315333503E-5	TEST
//element //index -> id	WITHOUT_CLASSIFICATION	0.9999925799378272	WITHOUT_CLASSIFICATION	7.4200621729077575E-6	TEST
// note that it might be better to iterate the snapshot but this is safe, // assuming the user implements equals() properly, as required by the Set // contract!	WITHOUT_CLASSIFICATION	0.9999814864274452	WITHOUT_CLASSIFICATION	1.851357255481794E-5	TEST
// collections detect changes made via their public interface and mark // themselves as dirty as a performance optimization	WITHOUT_CLASSIFICATION	0.9999999812716724	WITHOUT_CLASSIFICATION	1.8728327666634887E-8	TEST
// essentially, if the real session is closed allow any // method call to pass through since the real session // will complain by throwing an appropriate exception; // NOTE that allowing close() above has the same basic effect, //   but we capture that there simply to perform the unbind...	WITHOUT_CLASSIFICATION	0.9999930996310231	WITHOUT_CLASSIFICATION	6.900368976833059E-6	TEST
// The default SQLExceptionConverter for all dialects is based on SQLState // since SQLErrorCode is extremely vendor-specific.  Specific Dialects // may override to return whatever is most appropriate for that vendor.	WITHOUT_CLASSIFICATION	0.9999999612018886	WITHOUT_CLASSIFICATION	3.8798111452200596E-8	TEST
//only necessary for postgre < 7.4 //http://anoncvs.postgresql.org/cvsweb.cgi/pgsql/doc/src/sgml/ref/create_sequence.sgml	WITHOUT_CLASSIFICATION	0.999999394815718	WITHOUT_CLASSIFICATION	6.051842820873901E-7	TEST
// select topic, syntax from information_schema.help // where section like 'Function%' order by section, topic // // see also ->  http://www.h2database.com/html/functions.html	WITHOUT_CLASSIFICATION	0.9999999186314544	WITHOUT_CLASSIFICATION	8.136854555129295E-8	TEST
// registerColumnType(Types.VARBINARY, "CHARACTER($l)"); // registerColumnType(Types.BLOB, "CHARACTER($l)" );  // For use prior to CP 11.0 // registerColumnType(Types.CLOB, "CHARACTER($l)" );	WITHOUT_CLASSIFICATION	0.9999999223524623	WITHOUT_CLASSIFICATION	7.764753780080867E-8	TEST
//the BLOB type requires a size arguement - this defaults to //bytes - no arg defaults to 1 whole byte! //other argument mods include K - kilobyte, M - megabyte, G - gigabyte. //refer to the PBdevelopers guide for more info.	WITHOUT_CLASSIFICATION	0.9999884302181745	WITHOUT_CLASSIFICATION	1.1569781825420489E-5	TEST
// We must return a valid RDMS/RSA command from this method to // prevent RDMS/RSA from issuing *ERROR 400	WITHOUT_CLASSIFICATION	0.9999985562179161	WITHOUT_CLASSIFICATION	1.4437820838510758E-6	TEST
// Oracle driver reports to support getGeneratedKeys(), but they only // support the version taking an array of the names of the columns to // be returned (via its RETURNING clause).  No other driver seems to // support this overloaded version.	WITHOUT_CLASSIFICATION	0.9999998022708521	WITHOUT_CLASSIFICATION	1.9772914787129656E-7	TEST
// add the comment // nest the main query in an outer select // add the rownnumber bit into the outer query select list	WITHOUT_CLASSIFICATION	0.999999061192091	WITHOUT_CLASSIFICATION	9.388079090947301E-7	TEST
//	WITHOUT_CLASSIFICATION	0.9999674909996846	WITHOUT_CLASSIFICATION	3.2509000315333503E-5	TEST
// Note: For object <-> SQL datatype mappings see: //	WITHOUT_CLASSIFICATION	0.9999997989618381	WITHOUT_CLASSIFICATION	2.010381618827355E-7	TEST
// TRIM(end_keyword string-expression-1 FROM string-expression-2) // use Hibernate implementation "From" is one of the parameters they pass in position ?3 //registerFunction( "trim", new SQLFunctionTemplate(Hibernate.STRING, "trim(?1 ?2 from ?3)") );	WITHOUT_CLASSIFICATION	0.9999998682643424	WITHOUT_CLASSIFICATION	1.317356575455644E-7	TEST
// Whether this dialect has an Identity clause added to the data type or a completely seperate identity // data type	WITHOUT_CLASSIFICATION	0.9999996665070044	WITHOUT_CLASSIFICATION	3.3349299559753014E-7	TEST
// According to both the ANSI-SQL and JPA specs, trim takes a variable number of parameters between 1 and 4. // at least one paramer (trimSource) is required.  From the SQL spec: // // <trim function> ::= //      TRIM <left paren> <trim operands> <right paren> // // <trim operands> ::= //      [ [ <trim specification> ] [ <trim character> ] FROM ] <trim source> // // <trim specification> ::= //      LEADING //      | TRAILING //      | BOTH // // If <trim specification> is omitted, BOTH is assumed. // If <trim character> is omitted, space is assumed	WITHOUT_CLASSIFICATION	0.999999902225027	WITHOUT_CLASSIFICATION	9.777497302329278E-8	TEST
/////////////////////////////////////////////////////////////////////// // Prepare persisters and link them up with their cache // region/access-strategy	WITHOUT_CLASSIFICATION	0.9999990297374362	WITHOUT_CLASSIFICATION	9.70262563843888E-7	TEST
//Named Queries:	WITHOUT_CLASSIFICATION	0.9999882526157422	WITHOUT_CLASSIFICATION	1.174738425783336E-5	TEST
// this will throw an error if there's something wrong.	WITHOUT_CLASSIFICATION	0.9999615371955093	WITHOUT_CLASSIFICATION	3.8462804490688475E-5	TEST
// does not handle arrays (thats ok, cos they can't be lazy) // or newly instantiated collections, so we can do the cast	WITHOUT_CLASSIFICATION	0.9999999761594848	WITHOUT_CLASSIFICATION	2.3840515131893174E-8	TEST
// collection deletions are a special case since update() can add // deletions of collections not loaded by the session.	WITHOUT_CLASSIFICATION	0.9999999344316783	WITHOUT_CLASSIFICATION	6.556832160635041E-8	TEST
// we can do the cast since orphan-delete does not apply to: // 1. newly instantiated collections // 2. arrays (we can't track orphans for detached arrays)	WITHOUT_CLASSIFICATION	0.9999999886928939	WITHOUT_CLASSIFICATION	1.1307106078897512E-8	TEST
// if the natural-id is marked as non-mutable, it is not retrieved during a // normal database-snapshot operation...	WITHOUT_CLASSIFICATION	0.9999992863476086	WITHOUT_CLASSIFICATION	7.136523914693563E-7	TEST
// watch out for a case where old is still referenced // somewhere in the object graph! (which is a user error)	WITHOUT_CLASSIFICATION	0.9999995228299833	WITHOUT_CLASSIFICATION	4.771700166862536E-7	TEST
//slice, to get the columns for this component //property	WITHOUT_CLASSIFICATION	0.9999799758556797	WITHOUT_CLASSIFICATION	2.0024144320338358E-5	TEST
//int result = 17; //result = 37 * result + type.hashCode(); //result = 37 * result + ( value==null ? 0 : value.hashCode() ); //return result;	WITHOUT_CLASSIFICATION	0.9999989566890217	WITHOUT_CLASSIFICATION	1.043310978256608E-6	TEST
// The CollectionEntry.isReached() stuff is just to detect any silly users   // who set up circular or shared references between/to collections.	WITHOUT_CLASSIFICATION	0.9999999953093389	WITHOUT_CLASSIFICATION	4.690661092471818E-9	TEST
// detached collection wrappers that get found + reattached // during flush shouldn't be ignored	WITHOUT_CLASSIFICATION	0.9999999488413882	WITHOUT_CLASSIFICATION	5.115861175457729E-8	TEST
// The unique property value represented here may or may not be // serializable, so we do an explicit check here in order to generate // a better error message	WITHOUT_CLASSIFICATION	0.9999800685149233	WITHOUT_CLASSIFICATION	1.9931485076764376E-5	TEST
// if the version of a newly instantiated object is not the same // as the version seed value, use that as the unsaved-value	WITHOUT_CLASSIFICATION	0.999999950034177	WITHOUT_CLASSIFICATION	4.9965822992352654E-8	TEST
// ie. we never have to null out a reference to // an uninitialized proxy	WITHOUT_CLASSIFICATION	0.9999994463964821	WITHOUT_CLASSIFICATION	5.536035178613213E-7	TEST
// ignore this row, the collection is in process of // being loaded somewhere further "up" the stack	WITHOUT_CLASSIFICATION	0.9999977796813123	WITHOUT_CLASSIFICATION	2.220318687779286E-6	TEST
// Entity load contexts ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ // 	WITHOUT_CLASSIFICATION	0.9999998795698332	WITHOUT_CLASSIFICATION	1.2043016683390864E-7	TEST
// should be ok performance-wise to generate new delegate instances for each // request since these are locally stack-scoped.  Besides, it makes the code // much easier to read than the old TransactionHelper stuff...	WITHOUT_CLASSIFICATION	0.9999997742090926	WITHOUT_CLASSIFICATION	2.2579090742396569E-7	TEST
// this implementation is supposed to tolerate incorrect unsaved-value // mappings, for the purpose of backward-compatibility	WITHOUT_CLASSIFICATION	0.9999975549859245	WITHOUT_CLASSIFICATION	2.4450140754664668E-6	TEST
// this implementation is supposed to tolerate incorrect unsaved-value // mappings, for the purpose of backward-compatibility	WITHOUT_CLASSIFICATION	0.9999975549859245	WITHOUT_CLASSIFICATION	2.4450140754664668E-6	TEST
// wrap up any new collections directly referenced by the object // or its components	WITHOUT_CLASSIFICATION	0.9999999274429305	WITHOUT_CLASSIFICATION	7.255706945005415E-8	TEST
// remove any snapshot, not really for memory management purposes, but // rather because it might now be stale, and there is no longer any  // EntityEntry to take precedence // This is now handled by removeEntity() //session.getPersistenceContext().removeDatabaseSnapshot(key);	WITHOUT_CLASSIFICATION	0.9999980686840572	WITHOUT_CLASSIFICATION	1.931315942911187E-6	TEST
// skip this check for composite-ids relating to dom4j entity-mode; // alternatively, we could add a check to make sure the incoming id value is // an instance of Element...	WITHOUT_CLASSIFICATION	0.9999999631347503	WITHOUT_CLASSIFICATION	3.6865249674340495E-8	TEST
// upgrade the lock if necessary: //lock(result, lockMode);	WITHOUT_CLASSIFICATION	0.999999918961232	WITHOUT_CLASSIFICATION	8.103876807596244E-8	TEST
// now, any collections that are initialized // inside this block do not get updated - they // are ignored until the next flush	WITHOUT_CLASSIFICATION	0.9999999648185074	WITHOUT_CLASSIFICATION	3.518149262900187E-8	TEST
//we must clone embedded composite identifiers, or  //we will get back the same instance that we pass in	WITHOUT_CLASSIFICATION	0.9999998300632698	WITHOUT_CLASSIFICATION	1.6993673016993754E-7	TEST
// Sub-insertions should occur before containing insertion so // Try to do the callback now	WITHOUT_CLASSIFICATION	0.9999999799356011	WITHOUT_CLASSIFICATION	2.0064398832604798E-8	TEST
//the entity is not associated with the session, so //try interceptor and unsaved-value	WITHOUT_CLASSIFICATION	0.9999984874388269	WITHOUT_CLASSIFICATION	1.5125611730234465E-6	TEST
//scan the query string for class names appearing in the from clause and replace //with all persistent implementors of the class/interface, returning multiple //query strings (make sure we don't pick up a class in the select clause!)	WITHOUT_CLASSIFICATION	0.9999989349545808	WITHOUT_CLASSIFICATION	1.0650454192169021E-6	TEST
// save() operations ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999992575796103	WITHOUT_CLASSIFICATION	7.424203897995855E-7	TEST
// evict() operations ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999997287106646	WITHOUT_CLASSIFICATION	2.712893354670297E-7	TEST
//stops flush being called multiple times if this method is recursively called	WITHOUT_CLASSIFICATION	0.9999200756488693	WITHOUT_CLASSIFICATION	7.992435113068359E-5	TEST
//if it is an uninitialized proxy, pointing //with this session, then when it is accessed, //the underlying instance will be "contained"	WITHOUT_CLASSIFICATION	0.9999521432323681	WITHOUT_CLASSIFICATION	4.785676763187737E-5	TEST
// Generate an explicit join for the root dot node.   The implied joins will be collected and passed up // to the root dot node.	WITHOUT_CLASSIFICATION	0.9999987316458093	WITHOUT_CLASSIFICATION	1.2683541906852141E-6	TEST
// A session is considered to contain an entity only if the entity has // an entry in the session's persistence context and the entry reports // that the entity has not been removed	WITHOUT_CLASSIFICATION	0.9999999902022197	WITHOUT_CLASSIFICATION	9.797780259431536E-9	TEST
// Does the collection referenced by this FromElement // specify an order-by attribute?  If so, attach it to // the query's order-by	WITHOUT_CLASSIFICATION	0.9999999558584443	WITHOUT_CLASSIFICATION	4.414155567785439E-8	TEST
// ... and the token could be an identifer and the error is // a mismatched token error ...	WITHOUT_CLASSIFICATION	0.9999990801632574	WITHOUT_CLASSIFICATION	9.198367424814635E-7	TEST
// If a where clause was specified in the update/delete query, use it to limit the // returned ids here...	WITHOUT_CLASSIFICATION	0.9999999831084645	WITHOUT_CLASSIFICATION	1.6891535500882558E-8	TEST
//	WITHOUT_CLASSIFICATION	0.9999674909996846	WITHOUT_CLASSIFICATION	3.2509000315333503E-5	TEST
// Default implementation: // If this node has a data type, and that data type is not an association, then this is scalar.	WITHOUT_CLASSIFICATION	0.9999862072567567	WITHOUT_CLASSIFICATION	1.3792743243256851E-5	TEST
// Resolve the LHS fully, generate implicit joins.  Pass in the property name so that the resolver can // discover foreign key (id) properties.	WITHOUT_CLASSIFICATION	0.9999970636716754	WITHOUT_CLASSIFICATION	2.936328324704686E-6	TEST
// If the propertyType is null and there isn't a parent, just // stop now... there was a problem resolving the node anyway.	WITHOUT_CLASSIFICATION	0.9999808857932041	WITHOUT_CLASSIFICATION	1.911420679590471E-5	TEST
//We do not look for an existing join on the same path, because //it makes sense to join twice on the same collection role	WITHOUT_CLASSIFICATION	0.9999999671161623	WITHOUT_CLASSIFICATION	3.2883837667722296E-8	TEST
// our parent is another dot node, meaning we are being further dereferenced. // thus we need to generate a join unless the parent refers to the associated // entity's PK (because 'our' table would know the FK).	WITHOUT_CLASSIFICATION	0.999997970689702	WITHOUT_CLASSIFICATION	2.029310298028778E-6	TEST
/*public final Currency getCurrency(int col) throws HibernateException {	WITHOUT_CLASSIFICATION	0.9999984099990568	WITHOUT_CLASSIFICATION	1.5900009433566303E-6	TEST
// here, we have two possibilities: // 	WITHOUT_CLASSIFICATION	0.9999932271694704	WITHOUT_CLASSIFICATION	6.7728305295979585E-6	TEST
// Set the unresolved path in this node and the parent. // Set the text for the parent.	WITHOUT_CLASSIFICATION	0.999994340496231	WITHOUT_CLASSIFICATION	5.659503768970851E-6	TEST
// Get the first child to be considered.  Sub-classes may do this differently in order to skip nodes that // are not select expressions (e.g. DISTINCT).	WITHOUT_CLASSIFICATION	0.9999999863395679	WITHOUT_CLASSIFICATION	1.3660432184798425E-8	TEST
// If this is an entity and the property is the identifier property, then use getIdentifierType(). //      Note that the propertyName.equals( propertyPath ) checks whether we have a component //      key reference, where the component class property name is the same as the //      entity id property name; if the two are not equal, this is the case and //      we'd need to "fall through" to using the property mapping.	WITHOUT_CLASSIFICATION	0.9997883760322841	WITHOUT_CLASSIFICATION	2.1162396771597512E-4	TEST
// for a subquery, the alias to use depends on a few things (we // already know this is not an overall SELECT): //      1) if this FROM_ELEMENT represents a correlation to the //          outer-most query //              A) if the outer query represents a multi-table //                  persister, we need to use the given alias //                  in anticipation of one of the multi-table //                  executors being used (as this subquery will //                  actually be used in the "id select" phase //                  of that multi-table executor) //              B) otherwise, we need to use the persister's //                  table name as the column qualification //      2) otherwise (not correlated), use the given alias	WITHOUT_CLASSIFICATION	0.9999999503961654	WITHOUT_CLASSIFICATION	4.9603834633671964E-8	TEST
// Not a collection? // Return the entity property mapping.	WITHOUT_CLASSIFICATION	0.9999998521115263	WITHOUT_CLASSIFICATION	1.4788847373048135E-7	TEST
// collection of <many-to-any/> mappings... // used to circumvent the component-collection check below...	WITHOUT_CLASSIFICATION	0.9999999879648191	WITHOUT_CLASSIFICATION	1.2035180733395665E-8	TEST
// Otherwise, the destination node was implied by the FROM clause and the FROM clause processor // will automatically add it in the right place.	WITHOUT_CLASSIFICATION	0.9999978744061491	WITHOUT_CLASSIFICATION	2.125593850909769E-6	TEST
// If the first identifier in the path referrs to the class alias (not the class name), then this // is a correlated subselect.  If it's a correlated sub-select, use the existing table alias.  Otherwise // generate a new one.	WITHOUT_CLASSIFICATION	0.9999999441932849	WITHOUT_CLASSIFICATION	5.580671521554975E-8	TEST
// check to see if our "propPath" actually // represents a property on the persister	WITHOUT_CLASSIFICATION	0.9999999592978172	WITHOUT_CLASSIFICATION	4.0702182771577507E-8	TEST
// An ident node can represent an index expression if the ident // represents a naked property ref //      *Note: this makes the assumption (which is currently the case //      in the hql-sql grammar) that the ident is first resolved //      itself (addrExpr -> resolve()).  The other option, if that //      changes, is to call resolve from here; but it is //      currently un-needed overhead.	WITHOUT_CLASSIFICATION	0.9999898636128818	WITHOUT_CLASSIFICATION	1.0136387118203297E-5	TEST
// This uses a PathExpressionParser but notice that compound paths are not valid, // only bare names and simple paths:	WITHOUT_CLASSIFICATION	0.9999999627477772	WITHOUT_CLASSIFICATION	3.725222278042219E-8	TEST
// If this is an implied join in a FROM clause, then use ANSI-style joining, and set the // flag on the FromElement that indicates that it was implied in the FROM clause itself.	WITHOUT_CLASSIFICATION	0.9999970111891515	WITHOUT_CLASSIFICATION	2.9888108484754786E-6	TEST
//	WITHOUT_CLASSIFICATION	0.9999674909996846	WITHOUT_CLASSIFICATION	3.2509000315333503E-5	TEST
// For an explicit many-to-many relationship, add a second join from the intermediate  // (many-to-many) table to the destination table.  Also, make sure that the from element's  // idea of the destination is the destination table.	WITHOUT_CLASSIFICATION	0.9999998869466737	WITHOUT_CLASSIFICATION	1.1305332623923522E-7	TEST
// Reset the node type, because the rest of the system is expecting FROM_FRAGMENT, all we wanted was // for the factory to create the right sub-class.  This might get reset again later on anyway to make the // SQL generation simpler.	WITHOUT_CLASSIFICATION	0.999999877181739	WITHOUT_CLASSIFICATION	1.2281826096465247E-7	TEST
//explicit = true;	WITHOUT_CLASSIFICATION	0.9999985494264708	WITHOUT_CLASSIFICATION	1.4505735292738097E-6	TEST
//sqlResultTypeList.add( type ); // Generate the select expression.	WITHOUT_CLASSIFICATION	0.9999996531678635	WITHOUT_CLASSIFICATION	3.468321363615148E-7	TEST
// If the expression list has exactly one expression, and the type of the expression is a collection // then this might be a collection function, such as index(c) or size(c).	WITHOUT_CLASSIFICATION	0.9999996198424955	WITHOUT_CLASSIFICATION	3.801575045144857E-7	TEST
// Need to parse off the column qualifiers; this is assuming (which is true as of now) // that this is only used from update and delete HQL statement parsing	WITHOUT_CLASSIFICATION	0.9999974083320425	WITHOUT_CLASSIFICATION	2.5916679574877167E-6	TEST
// for regression testing against output from the old parser... // found it easiest to simply reorder the FromElements here into ascending order // in terms of injecting them into the resulting sql ast in orders relative to those // expected by the old parser; this is definitely another of those "only needed // for regression purposes".  The SyntheticAndFactory, then, simply injects them as it // encounters them.	WITHOUT_CLASSIFICATION	0.9996232217211812	WITHOUT_CLASSIFICATION	3.767782788187437E-4	TEST
// The uber-rule here is that we need to include  subclass joins if // the FromElement is in any way dereferenced by a property from // the subclass table; otherwise we end up with column references // qualified by a non-existent table reference in the resulting SQL...	WITHOUT_CLASSIFICATION	0.9999963985252837	WITHOUT_CLASSIFICATION	3.6014747162012846E-6	TEST
// classic translator does not support collection of ordinal // param metadata	WITHOUT_CLASSIFICATION	0.9999998854633115	WITHOUT_CLASSIFICATION	1.1453668845886092E-7	TEST
// The following variables are stacks that keep information about each subexpression // in the list of nested subexpressions we are currently processing.	WITHOUT_CLASSIFICATION	0.9999999135339874	WITHOUT_CLASSIFICATION	8.646601263065136E-8	TEST
// The loop ensures atomicity of the // select + update even for no transaction // or read committed isolation level	WITHOUT_CLASSIFICATION	0.9999999626521957	WITHOUT_CLASSIFICATION	3.734780427590207E-8	TEST
// should not be able to reach last without maxPosition being set // unless there are no results	WITHOUT_CLASSIFICATION	0.9999994900370947	WITHOUT_CLASSIFICATION	5.099629053803359E-7	TEST
// we found it in the temp PC.  Should indicate we are in the midst of processing a result set // containing eager fetches via join fetch	WITHOUT_CLASSIFICATION	0.9999999614501242	WITHOUT_CLASSIFICATION	3.8549875886319494E-8	TEST
//do not use proxiesByKey, since not all //proxies that point to this session's //instances are in that collection!	WITHOUT_CLASSIFICATION	0.999999996342294	WITHOUT_CLASSIFICATION	3.657706095929898E-9	TEST
// if there is no TM configured, we will not be able to access // the javax.transaction.Transaction object in order to // register a synch anyway.	WITHOUT_CLASSIFICATION	0.9999999888378014	WITHOUT_CLASSIFICATION	1.1162198517181342E-8	TEST
// Since the result set cursor is always left at the first // physical row after the "last processed", we need to jump // back one position to get the key value we are interested // in skipping	WITHOUT_CLASSIFICATION	0.9999996466422776	WITHOUT_CLASSIFICATION	3.5335772231585195E-7	TEST
//true if this is a query and we are loading multiple instances of the same collection role //otherwise this is a CollectionInitializer and we are loading up a single collection or batch	WITHOUT_CLASSIFICATION	0.9999995172558764	WITHOUT_CLASSIFICATION	4.827441236208326E-7	TEST
// we don't need to worry about existing version being uninitialized // because this block isn't called by a re-entrant load (re-entrant // loads _always_ have lock mode NONE)	WITHOUT_CLASSIFICATION	0.9999981142889537	WITHOUT_CLASSIFICATION	1.8857110464129345E-6	TEST
// add temp entry so that the next step is circular-reference // safe - only needed because some types don't take proper // advantage of two-phase-load (esp. components)	WITHOUT_CLASSIFICATION	0.9999988921722073	WITHOUT_CLASSIFICATION	1.1078277927161598E-6	TEST
// assume we are in an auto-commit state	WITHOUT_CLASSIFICATION	0.9999997084718066	WITHOUT_CLASSIFICATION	2.9152819339158325E-7	TEST
// log a message about potential connection leaks	WITHOUT_CLASSIFICATION	0.9999999135595389	WITHOUT_CLASSIFICATION	8.644046102114385E-8	TEST
//	WITHOUT_CLASSIFICATION	0.9999674909996846	WITHOUT_CLASSIFICATION	3.2509000315333503E-5	TEST
// this has been shown to happen occasionally in rare cases // when using a transaction manager + transaction-timeout // where the timeout calls back through Hibernate's // registered transaction synchronization on a separate // "reaping" thread.  In cases where that reaping thread // executes through this block at the same time the main // application thread does we can get into situations where // these CMEs occur.  And though it is not "allowed" per-se, // the end result without handling it specifically is infinite // looping.  So here, we simply break the loop	WITHOUT_CLASSIFICATION	0.9999997092677734	WITHOUT_CLASSIFICATION	2.907322266733052E-7	TEST
// unfortunately this stuff can't be cached because // it is per-invocation, not constant for the // QueryTranslator instance	WITHOUT_CLASSIFICATION	0.9999999231250671	WITHOUT_CLASSIFICATION	7.68749328026918E-8	TEST
// can't cache this stuff either (per-invocation) // we are given a map of user-alias -> lock mode // create a new map of sql-alias -> lock mode	WITHOUT_CLASSIFICATION	0.999999890159062	WITHOUT_CLASSIFICATION	1.0984093798430855E-7	TEST
// don't create a unique key, 'cos some // databases don't like a UK on nullable // columns //getCollectionTable().createUniqueKey( getIdentifier().getConstraintColumns() );	WITHOUT_CLASSIFICATION	0.99999992321882	WITHOUT_CLASSIFICATION	7.67811799505891E-8	TEST
// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ // stuff that is persister-centric and/or EntityInfo-centric ~~~~~~~~~~~~~~ // ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999998223148372	WITHOUT_CLASSIFICATION	1.77685162834455E-7	TEST
//isSet = collection.isSet(); //isSorted = collection.isSorted();	WITHOUT_CLASSIFICATION	0.9999988753382213	WITHOUT_CLASSIFICATION	1.124661778716149E-6	TEST
//lists, arrays //sets, maps, bags	WITHOUT_CLASSIFICATION	0.9999966190481788	WITHOUT_CLASSIFICATION	3.3809518212363734E-6	TEST
// we finish all the "removes" first to take care of possible unique // constraints and so that we can take better advantage of batching	WITHOUT_CLASSIFICATION	0.9999999698797976	WITHOUT_CLASSIFICATION	3.012020243348511E-8	TEST
//use a combination of foreign key columns and pk columns, since //the ordering of removal and addition is not guaranteed when //a child moves from one parent to another	WITHOUT_CLASSIFICATION	0.9999957588012962	WITHOUT_CLASSIFICATION	4.2411987037806495E-6	TEST
// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ // stuff that is persister-centric and/or EntityInfo-centric ~~~~~~~~~~~~~~ // ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999998223148372	WITHOUT_CLASSIFICATION	1.77685162834455E-7	TEST
//information about properties of this class, //including inherited properties //(only really needed for updatable/insertable properties)	WITHOUT_CLASSIFICATION	0.9999495614993091	WITHOUT_CLASSIFICATION	5.0438500690802214E-5	TEST
// all this only really needs to consider properties // of this class, not its subclasses, but since we // are reusing code used for sequential selects, we // use the subclass closure	WITHOUT_CLASSIFICATION	0.9999999876117796	WITHOUT_CLASSIFICATION	1.2388220482484832E-8	TEST
// Here we render the select column list based on the properties defined as being generated. // For partial component generation, we currently just re-select the whole component // rather than trying to handle the individual generated portions.	WITHOUT_CLASSIFICATION	0.9999993735179432	WITHOUT_CLASSIFICATION	6.264820567535897E-7	TEST
// this is the root (versioned) table, and we are using version-based // optimistic locking;  if we are not updating the version, also don't // check it (unless this is a "generated" version column)!	WITHOUT_CLASSIFICATION	0.9999998850147028	WITHOUT_CLASSIFICATION	1.1498529710995341E-7	TEST
//optimistic-lock="all", include all updatable properties //optimistic-lock="dirty", include all properties we are updating this time	WITHOUT_CLASSIFICATION	0.9999920850641458	WITHOUT_CLASSIFICATION	7.914935854175102E-6	TEST
// this property belongs to the table, and it is not specifically // excluded from optimistic locking by optimistic-lock="false"	WITHOUT_CLASSIFICATION	0.9999994045817954	WITHOUT_CLASSIFICATION	5.954182045957783E-7	TEST
// check to see if the connection is in auto-commit  // mode (no connection means aggressive connection // release outside a JTA transaction context, so MUST // be autocommit mode)	WITHOUT_CLASSIFICATION	0.9999999993714618	WITHOUT_CLASSIFICATION	6.285380983763352E-10	TEST
// need to treat this as if it where optimistic-lock="all" (dirty does *not* make sense); // first we need to locate the "loaded" state // // Note, it potentially could be a proxy, so perform the location the safe way...	WITHOUT_CLASSIFICATION	0.9999996965643099	WITHOUT_CLASSIFICATION	3.034356902127065E-7	TEST
// we *always* assume an instance with a null // identifier or no identifier property is unsaved!	WITHOUT_CLASSIFICATION	0.9999997001207589	WITHOUT_CLASSIFICATION	2.9987924108229477E-7	TEST
// Need to use the identifier type of the collection owner // since the incoming is value is actually the owner's id. // Using the collection's key type causes problems with // property-ref keys...	WITHOUT_CLASSIFICATION	0.9999895116133093	WITHOUT_CLASSIFICATION	1.0488386690684136E-5	TEST
//allow any identifier quoted with backtick //only recognizes identifiers beginning with a letter	WITHOUT_CLASSIFICATION	0.9999971981103055	WITHOUT_CLASSIFICATION	2.801889694513227E-6	TEST
//following doesn't handle (null, not null) but unnecessary //since this would mean all rows	WITHOUT_CLASSIFICATION	0.999758829685564	WITHOUT_CLASSIFICATION	2.411703144360414E-4	TEST
// IMPL NOTE : due to the delayed population of setters (setters cached // 	WITHOUT_CLASSIFICATION	0.9999998985943261	WITHOUT_CLASSIFICATION	1.0140567377317426E-7	TEST
// we need to dirty check collections, since they can cause an owner // version number increment	WITHOUT_CLASSIFICATION	0.9999999955278062	WITHOUT_CLASSIFICATION	4.4721938427073425E-9	TEST
//return the id, so we can use it to reset the proxy id //return result;	WITHOUT_CLASSIFICATION	0.9999999013904483	WITHOUT_CLASSIFICATION	9.860955165099345E-8	TEST
//	WITHOUT_CLASSIFICATION	0.9999674909996846	WITHOUT_CLASSIFICATION	3.2509000315333503E-5	TEST
// cache the actual id of the object, not the value of the // property-ref, which might not be initialized	WITHOUT_CLASSIFICATION	0.9999976720461001	WITHOUT_CLASSIFICATION	2.327953899824478E-6	TEST
// We now have the value of the property-ref we reference.  However, // we need to dig a little deeper, as that property might also be // an entity type, in which case we need to resolve its identitifier	WITHOUT_CLASSIFICATION	0.9999990547785856	WITHOUT_CLASSIFICATION	9.452214142836402E-7	TEST
// Retrieve the value of the designated column in the current row of this // ResultSet object as a java.io.Reader object	WITHOUT_CLASSIFICATION	0.9999999949102317	WITHOUT_CLASSIFICATION	5.089768235151367E-9	TEST
//not absolutely necessary, but helps for some //equals()/hashCode() implementations	WITHOUT_CLASSIFICATION	0.9999795908690574	WITHOUT_CLASSIFICATION	2.0409130942620205E-5	TEST
//this should be a call to resolve(), not resolveIdentifier(),  //'cos it might be a property-ref, and we did not cache the //referenced value	WITHOUT_CLASSIFICATION	0.9999990238560496	WITHOUT_CLASSIFICATION	9.761439504207552E-7	TEST
// If we have <tt>not-found="ignore"</tt> association mapped to a // formula, we always need to dirty check it, so we can update the // second-level cache	WITHOUT_CLASSIFICATION	0.9999998665895508	WITHOUT_CLASSIFICATION	1.3341044922142142E-7	TEST
// can't just return null here, since that would // cause an owning component to become null	WITHOUT_CLASSIFICATION	0.9999998924301517	WITHOUT_CLASSIFICATION	1.0756984835976804E-7	TEST
//for arrays, replaceElements() may return a different reference, since //the array length might not match	WITHOUT_CLASSIFICATION	0.9999998490535703	WITHOUT_CLASSIFICATION	1.5094642973520792E-7	TEST
// actual cache of the entries.  soft references are used for both the keys and the // values here since the values pertaining to the MRU entries are kept in a // seperate hard reference cache (to avoid their enqueuement/garbage-collection).	WITHOUT_CLASSIFICATION	0.9999999892507664	WITHOUT_CLASSIFICATION	1.0749233529751201E-8	TEST
// as soon as we encounter our first letter, return the substring // from that position	WITHOUT_CLASSIFICATION	0.9999999857507494	WITHOUT_CLASSIFICATION	1.4249250499346272E-8	TEST
// Note : expected in the syntax: //      type=listenerClass //          ({sep}type=listenerClass)* // where {sep} is any whitespace or comma	WITHOUT_CLASSIFICATION	0.9999995980500945	WITHOUT_CLASSIFICATION	4.019499055053863E-7	TEST
// isTransactionCallbackRegistered denotes whether any Hibernate // Transaction has registered as a callback against this // JDBCContext; only one such callback is allowed.  Directly // serializing this value causes problems with JDBCTransaction, // or really any Transaction impl where the callback is local // to the Transaction instance itself, since that Transaction // is not serialized along with the JDBCContext.  Thus we // handle that fact here explicitly...	WITHOUT_CLASSIFICATION	0.9999977798163316	WITHOUT_CLASSIFICATION	2.2201836682975106E-6	TEST
// note that for sequential scrolling, we make the assumption that // the first persister element is the "root entity"	WITHOUT_CLASSIFICATION	0.9999984072648652	WITHOUT_CLASSIFICATION	1.5927351347685234E-6	TEST
// We call getKeyFromResultSet() here so that we can know the // key value upon which to perform the breaking logic.  However, // it is also then called from getRowFromResultSet() which is certainly // not the most efficient.  But the call here is needed, and there // currently is no other way without refactoring of the doQuery()/getRowFromResultSet() // methods	WITHOUT_CLASSIFICATION	0.9999991150585972	WITHOUT_CLASSIFICATION	8.849414028660059E-7	TEST
// This check is needed since processing leaves the cursor // after the last physical row for the current logical row; // thus if we are after the last physical row, this might be // caused by either: //      1) scrolling to the last logical row //      2) scrolling past the last logical row // In the latter scenario, the previous logical row // really is the last logical row. // // In all other cases, we should process back two // logical records (the current logic row, plus the // previous logical row).	WITHOUT_CLASSIFICATION	0.9999877298058695	WITHOUT_CLASSIFICATION	1.2270194130609597E-5	TEST
// and perform the load	WITHOUT_CLASSIFICATION	0.9999989169599962	WITHOUT_CLASSIFICATION	1.0830400037821197E-6	TEST
//important: reuse the same event instances for performance!	WITHOUT_CLASSIFICATION	0.9999980705543384	WITHOUT_CLASSIFICATION	1.92944566160819E-6	TEST
//this is a query and we are loading multiple instances of the same collection role	WITHOUT_CLASSIFICATION	0.9999997120734903	WITHOUT_CLASSIFICATION	2.8792650972699213E-7	TEST
// we found a collection element in the result set	WITHOUT_CLASSIFICATION	0.9999999901008935	WITHOUT_CLASSIFICATION	9.899106479108835E-9	TEST
// we did not find a collection element in the result set, so we // ensure that a collection is created with the owner's identifier, // since what we have is an empty collection	WITHOUT_CLASSIFICATION	0.9999999083953158	WITHOUT_CLASSIFICATION	9.160468420667482E-8	TEST
// this is a collection initializer, so we must create a collection // for each of the passed-in keys, to account for the possibility // that the collection is empty and has no rows in the result set	WITHOUT_CLASSIFICATION	0.9999995449597787	WITHOUT_CLASSIFICATION	4.5504022127430896E-7	TEST
// grab its state from the ResultSet and keep it in the Session // (but don't yet initialize the object itself) // note that we acquire LockMode.READ even if it was not requested	WITHOUT_CLASSIFICATION	0.9999993658040842	WITHOUT_CLASSIFICATION	6.341959157804822E-7	TEST
// a many-to-many; // decrement currentDepth here to allow join across the association table // without exceeding MAX_FETCH_DEPTH (i.e. the "currentDepth - 1" bit)	WITHOUT_CLASSIFICATION	0.999999854094652	WITHOUT_CLASSIFICATION	1.459053481368689E-7	TEST
// if not a composite key, use "foo in (?, ?, ?)" for batching // if no batch, and not a composite key, use "foo = ?"	WITHOUT_CLASSIFICATION	0.9999999443905427	WITHOUT_CLASSIFICATION	5.560945739372389E-8	TEST
//the user visible aliases, which are unknown to the superclass, //these are not the actual "physical" SQL aliases	WITHOUT_CLASSIFICATION	0.9999997784404622	WITHOUT_CLASSIFICATION	2.2155953780916742E-7	TEST
//first look for a reference to a projection alias	WITHOUT_CLASSIFICATION	0.9999993947588116	WITHOUT_CLASSIFICATION	6.052411883935009E-7	TEST
//first look for a reference to a projection alias	WITHOUT_CLASSIFICATION	0.9999993947588116	WITHOUT_CLASSIFICATION	6.052411883935009E-7	TEST
//it does not refer to an alias of a projection, //look for a property	WITHOUT_CLASSIFICATION	0.9999828092978335	WITHOUT_CLASSIFICATION	1.719070216651583E-5	TEST
// determine if the collection elements are entities...	WITHOUT_CLASSIFICATION	0.999999975778267	WITHOUT_CLASSIFICATION	2.4221732992619853E-8	TEST
// Let return-propertys override whatever the persister has for aliases.	WITHOUT_CLASSIFICATION	0.999996454773077	WITHOUT_CLASSIFICATION	3.545226923183228E-6	TEST
/**	WITHOUT_CLASSIFICATION	0.5445722540774455	WITHOUT_CLASSIFICATION	0.4554277459225545	TEST
// ignore	WITHOUT_CLASSIFICATION	0.9999994466957796	WITHOUT_CLASSIFICATION	5.533042204140351E-7	TEST
// ignore	WITHOUT_CLASSIFICATION	0.9999994466957796	WITHOUT_CLASSIFICATION	5.533042204140351E-7	TEST
//        }	WITHOUT_CLASSIFICATION	0.9999982815788182	WITHOUT_CLASSIFICATION	1.7184211818325173E-6	TEST
//	WITHOUT_CLASSIFICATION	0.9999674909996846	WITHOUT_CLASSIFICATION	3.2509000315333503E-5	TEST
//	WITHOUT_CLASSIFICATION	0.9999674909996846	WITHOUT_CLASSIFICATION	3.2509000315333503E-5	TEST
//include the discriminator and class-level where, but not filters	WITHOUT_CLASSIFICATION	0.9999987030324641	WITHOUT_CLASSIFICATION	1.2969675359228825E-6	TEST
//	WITHOUT_CLASSIFICATION	0.9999674909996846	WITHOUT_CLASSIFICATION	3.2509000315333503E-5	TEST
//NONE, because its the requested lock mode, not the actual! 	WITHOUT_CLASSIFICATION	0.9999587068996278	WITHOUT_CLASSIFICATION	4.129310037217319E-5	TEST
// at this point we have (drivingSqlAlias) the SQL alias of the driving table // corresponding to the given user alias.  However, the driving table is not // (necessarily) the table against which we want to apply locks.  Mainly, // the exception case here is joined-subclass hierarchies where we instead // want to apply the lock against the root table (for all other strategies, // it just happens that driving and root are the same).	WITHOUT_CLASSIFICATION	0.9999999931870346	WITHOUT_CLASSIFICATION	6.812965456346541E-9	TEST
// the column doesnt exist at all.	WITHOUT_CLASSIFICATION	0.999999740057545	WITHOUT_CLASSIFICATION	2.599424550334509E-7	TEST
// we have a mapped identifier property and the root of // the incoming property path matched that identifier // property	WITHOUT_CLASSIFICATION	0.9999967998000072	WITHOUT_CLASSIFICATION	3.200199992830999E-6	TEST
// we have an embedded composite identifier	WITHOUT_CLASSIFICATION	0.9999992796116297	WITHOUT_CLASSIFICATION	7.203883702614541E-7	TEST
// both many-to-one and one-to-one are represented as a // Property.  EntityPersister is relying on this value to // determine "lazy fetch groups" in terms of field-level // interception.  So we need to make sure that we return // true here for the case of many-to-one and one-to-one // with lazy="no-proxy" // // * impl note - lazy="no-proxy" currently forces both // lazy and unwrap to be set to true.  The other case we // are extremely interested in here is that of lazy="proxy" // where lazy is set to true, but unwrap is set to false. // thus we use both here under the assumption that this // return is really only ever used during persister // construction to determine the lazy property/field fetch // groupings.  If that assertion changes then this check // needs to change as well.  Partially, this is an issue with // the overloading of the term "lazy" here...	WITHOUT_CLASSIFICATION	0.9998919425680131	WITHOUT_CLASSIFICATION	1.0805743198699449E-4	TEST
// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ // stuff that is tuplizer-centric, but is passed a session ~~~~~~~~~~~~~~~~ // ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999991427377015	WITHOUT_CLASSIFICATION	8.57262298461727E-7	TEST
// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ // stuff that is tuplizer-centric, but is passed a session ~~~~~~~~~~~~~~~~ // ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999991427377015	WITHOUT_CLASSIFICATION	8.57262298461727E-7	TEST
/*rootTableName = persistentClass.getRootTable().getQualifiedName( 	WITHOUT_CLASSIFICATION	0.9998872355340046	WITHOUT_CLASSIFICATION	1.127644659953694E-4	TEST
// SUBCLASSES	WITHOUT_CLASSIFICATION	0.9999992992086211	WITHOUT_CLASSIFICATION	7.007913789459819E-7	TEST
// Custom sql	WITHOUT_CLASSIFICATION	0.9999992083968607	WITHOUT_CLASSIFICATION	7.916031392732853E-7	TEST
/*protected void initPropertyPaths(	WITHOUT_CLASSIFICATION	0.999961527560568	WITHOUT_CLASSIFICATION	3.8472439432002424E-5	TEST
// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999900755133448	WITHOUT_CLASSIFICATION	9.924486655228135E-6	TEST
//Custom SQL (would be better if these were private)	WITHOUT_CLASSIFICATION	0.9997752251083325	WITHOUT_CLASSIFICATION	2.2477489166752496E-4	TEST
// moved up from AbstractEntityPersister ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999998451180574	WITHOUT_CLASSIFICATION	1.548819426370339E-7	TEST
// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999900755133448	WITHOUT_CLASSIFICATION	9.924486655228135E-6	TEST
// aliases for identifier ( alias.id ); skip if the entity defines a non-id property named 'id'	WITHOUT_CLASSIFICATION	0.9999991106644637	WITHOUT_CLASSIFICATION	8.893355363465554E-7	TEST
//decide which ResultSet to get the property value from:	WITHOUT_CLASSIFICATION	0.9999913213434648	WITHOUT_CLASSIFICATION	8.678656535126578E-6	TEST
//note: it is conceptually possible that a UserType could map null to //	WITHOUT_CLASSIFICATION	0.999999204075284	WITHOUT_CLASSIFICATION	7.959247158985132E-7	TEST
// the contract of EntityTuplizer.determineConcreteSubclassEntityName says that returning null // is an indication that the specified entity-name (this.getEntityName) should be used.	WITHOUT_CLASSIFICATION	0.9999999542982442	WITHOUT_CLASSIFICATION	4.5701755844956564E-8	TEST
// Need to use the identifier type of the collection owner // since the incoming is value is actually the owner's id. // Using the collection's key type causes problems with // property-ref keys...	WITHOUT_CLASSIFICATION	0.9999895116133093	WITHOUT_CLASSIFICATION	1.0488386690684136E-5	TEST
// cache these since they are stateless // this one could even be static...	WITHOUT_CLASSIFICATION	0.999999962184568	WITHOUT_CLASSIFICATION	3.7815432087734134E-8	TEST
//"as" is not in KEYWORDS	WITHOUT_CLASSIFICATION	0.9999679122262062	WITHOUT_CLASSIFICATION	3.2087773793886936E-5	TEST
// --Commented out by Inspection (12/4/04 9:10 AM): public abstract void addCondition(String alias, String[] columns, String condition);	WITHOUT_CLASSIFICATION	0.9999999991318654	WITHOUT_CLASSIFICATION	8.681346380390282E-10	TEST
//use the id column alias	WITHOUT_CLASSIFICATION	0.9999994640101632	WITHOUT_CLASSIFICATION	5.359898369353982E-7	TEST
//private List aliases = new ArrayList();	WITHOUT_CLASSIFICATION	0.9999981247244861	WITHOUT_CLASSIFICATION	1.87527551392381E-6	TEST
//columns.add(columnName); //aliases.add(tableAlias);	WITHOUT_CLASSIFICATION	0.9999980672891897	WITHOUT_CLASSIFICATION	1.9327108102090255E-6	TEST
//where fragment must be empty!	WITHOUT_CLASSIFICATION	0.9999478475066547	WITHOUT_CLASSIFICATION	5.2152493345366266E-5	TEST
// revert to traditional hibernate behavior of setting initialPoolSize to minPoolSize // unless otherwise specified with a c3p0.*-style parameter.	WITHOUT_CLASSIFICATION	0.9999983142551417	WITHOUT_CLASSIFICATION	1.6857448581806758E-6	TEST
//arbitrary on clause ignored!!	WITHOUT_CLASSIFICATION	0.9999999030847098	WITHOUT_CLASSIFICATION	9.691529020636379E-8	TEST
// might happen with a managed connection	WITHOUT_CLASSIFICATION	0.9999997649010748	WITHOUT_CLASSIFICATION	2.3509892528643393E-7	TEST
// might happen with a managed connection	WITHOUT_CLASSIFICATION	0.9999997649010748	WITHOUT_CLASSIFICATION	2.3509892528643393E-7	TEST
//if an exception occurs during flush, user must call rollback()	WITHOUT_CLASSIFICATION	0.9999992094709058	WITHOUT_CLASSIFICATION	7.905290941697783E-7	TEST
// Essentially: // 1) If we have a local (Hibernate) transaction in progress //      and it already has the UserTransaction cached, use that //      UserTransaction to determine the status. // 2) If a transaction manager has been located, use //      that transaction manager to determine the status. // 3) Finally, as the last resort, try to lookup the //      UserTransaction via JNDI and use that to determine the //      status.	WITHOUT_CLASSIFICATION	0.9999999986319439	WITHOUT_CLASSIFICATION	1.368056074974229E-9	TEST
/*package*/	WITHOUT_CLASSIFICATION	0.9999887318780084	WITHOUT_CLASSIFICATION	1.1268121991544273E-5	TEST
//swallow it (the transaction _was_ successful or successfully rolled back)	WITHOUT_CLASSIFICATION	0.9999998263956754	WITHOUT_CLASSIFICATION	1.7360432453150408E-7	TEST
// ignore it	WITHOUT_CLASSIFICATION	0.9999994444668342	WITHOUT_CLASSIFICATION	5.555331657603159E-7	TEST
// we need to dirty check many-to-ones with not-found="ignore" in order  // to update the cache (not the database), since in this case a null // entity reference can lose information	WITHOUT_CLASSIFICATION	0.9999999392347431	WITHOUT_CLASSIFICATION	6.076525689483541E-8	TEST
// create our own copy of the user-supplied tuplizer impl map	WITHOUT_CLASSIFICATION	0.9999993447938516	WITHOUT_CLASSIFICATION	6.552061484644111E-7	TEST
// Regions can get instantiated in the course of normal work (e.g. // a named query region will be created the first time the query is // executed), so suspend any ongoing tx	WITHOUT_CLASSIFICATION	0.9999999993382724	WITHOUT_CLASSIFICATION	6.617275234186635E-10	TEST
// then handle any user-defined entity modes...	WITHOUT_CLASSIFICATION	0.9999985243410734	WITHOUT_CLASSIFICATION	1.4756589266650219E-6	TEST
// Establish the region root node with a non-locking data version	WITHOUT_CLASSIFICATION	0.9999996982495911	WITHOUT_CLASSIFICATION	3.017504088719656E-7	TEST
// temporary ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999962346448281	WITHOUT_CLASSIFICATION	3.7653551719424924E-6	TEST
// NOTE : this is being used from the process of shutting down a // SessionFactory. Specific things to consider: // (1) this clearing of the region should not propagate to // other nodes on the cluster (if any); this is the // cache-mode-local option bit... // (2) really just trying a best effort to cleanup after // ourselves; lock failures, etc are not critical here; // this is the fail-silently option bit...	WITHOUT_CLASSIFICATION	0.9999965732345588	WITHOUT_CLASSIFICATION	3.426765441151402E-6	TEST
// need to extract the component values and check for subtype replacements...	WITHOUT_CLASSIFICATION	0.9999996829827787	WITHOUT_CLASSIFICATION	3.170172212320692E-7	TEST
// We ignore minimalPutOverride. JBossCache putForExternalRead is // already about as minimal as we can get; it will promptly return // if it discovers that the node we want to write to already exists	WITHOUT_CLASSIFICATION	0.9999999935328605	WITHOUT_CLASSIFICATION	6.467139486901857E-9	TEST
// for now, just "re-flatten" the metamodel since this is temporary stuff anyway (HHH-1907)	WITHOUT_CLASSIFICATION	0.9999999278431352	WITHOUT_CLASSIFICATION	7.215686484186258E-8	TEST
// Configure the cache to use our TM	WITHOUT_CLASSIFICATION	0.9999999875441788	WITHOUT_CLASSIFICATION	1.2455821217446917E-8	TEST
//This solution would allow us to eliminate the owner arg to disassemble(), but //what if the collection was null, and then later had elements added? seems unsafe //session.getPersistenceContext().getCollectionEntry( (PersistentCollection) value ).getKey();	WITHOUT_CLASSIFICATION	0.9999996770143508	WITHOUT_CLASSIFICATION	3.229856492343263E-7	TEST
// Make sure JBC doesn't look one up	WITHOUT_CLASSIFICATION	0.9999886681753496	WITHOUT_CLASSIFICATION	1.1331824650363931E-5	TEST
// some collections are not lazy:	WITHOUT_CLASSIFICATION	0.999999924596471	WITHOUT_CLASSIFICATION	7.540352900573413E-8	TEST
// Here we don't want to suspend the tx. If we do: // 1) We might be caching query results that reflect uncommitted // changes. No tx == no WL on cache node, so other threads // can prematurely see those query results // 2) No tx == immediate replication. More overhead, plus we // spread issue #1 above around the cluster	WITHOUT_CLASSIFICATION	0.9999993453832673	WITHOUT_CLASSIFICATION	6.546167327050357E-7	TEST
// return the (fully resolved) identifier value, but do not resolve // to the actual referenced entity instance // NOTE: the owner of the association is not really the owner of the id!	WITHOUT_CLASSIFICATION	0.9999986797116726	WITHOUT_CLASSIFICATION	1.3202883274558458E-6	TEST
// Add a zero (or quite low) timeout option so we don't block. // Ignore any TimeoutException. Basically we forego caching the // query result in order to avoid blocking. // Reads are done with suspended tx, so they should not hold the // lock for long.  Not caching the query result is OK, since // any subsequent read will just see the old result with its // out-of-date timestamp; that result will be discarded and the // db query performed again.	WITHOUT_CLASSIFICATION	0.9999994149072572	WITHOUT_CLASSIFICATION	5.850927426862682E-7	TEST
// Impl note: takes advantage of the fact that an escpaed single quote // embedded within a quote-block can really be handled as two seperate // quote-blocks for the purposes of this method...	WITHOUT_CLASSIFICATION	0.9999594804819265	WITHOUT_CLASSIFICATION	4.0519518073449506E-5	TEST
// We have the JBCWriteMutex, so no other *local* thread will  // be trying to write this key.  // It's possible here some remote thread has come in and // changed the values again, but since we are reading the // values to write to JBC right now, we know we are writing // the latest values; i.e. we don't assume that what we cached // in entry.update() above is what we should write to JBC *now*. // Our write could be redundant, i.e. we are writing what // some remote thread just came in an wrote.  There is a chance  // that yet another remote thread will update us, and we'll then // overwrite that later data in JBC.  But, all remote nodes will // ignore that change in their localCache; the only place it  // will live will be in JBC, where it can only effect the  // initial state transfer values on newly joined nodes  // (i.e. populateLocalCache()).	WITHOUT_CLASSIFICATION	0.9999994683121767	WITHOUT_CLASSIFICATION	5.316878233728251E-7	TEST
// local cache, so we use synchronization	WITHOUT_CLASSIFICATION	0.9999999950482154	WITHOUT_CLASSIFICATION	4.951784627224872E-9	TEST
// local cache, so we use synchronization	WITHOUT_CLASSIFICATION	0.9999999950482154	WITHOUT_CLASSIFICATION	4.951784627224872E-9	TEST
// Don't need to lock the cache here, since if someone // else inserted the same pk first, the insert would fail	WITHOUT_CLASSIFICATION	0.999988728062316	WITHOUT_CLASSIFICATION	1.1271937684065666E-5	TEST
// we need to grab the version value from the entity, otherwise // we have issues with generated-version entities that may have // multiple actions queued during the same flush	WITHOUT_CLASSIFICATION	0.9999995334135211	WITHOUT_CLASSIFICATION	4.6658647882602625E-7	TEST
// we need to obtain the lock before any actions are // executed, since this may be an inverse="true" // bidirectional association and it is one of the // earlier entity actions which actually updates // the database (this action is resposible for // second-level cache invalidation only)	WITHOUT_CLASSIFICATION	0.9999999775936942	WITHOUT_CLASSIFICATION	2.240630589144843E-8	TEST
//postDelete: // After actually deleting a row, record the fact that the instance no longer  // exists on the database (needed for identity-column key generation), and // remove it from the session cache	WITHOUT_CLASSIFICATION	0.9999999926176286	WITHOUT_CLASSIFICATION	7.382371402372645E-9	TEST
// intentionally empty	WITHOUT_CLASSIFICATION	0.9999995680953937	WITHOUT_CLASSIFICATION	4.3190460633227173E-7	TEST
