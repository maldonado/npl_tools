//test out the optimizer:	WITHOUT_CLASSIFICATION	0.9994164439162471	WITHOUT_CLASSIFICATION	5.835560837529444E-4	TEST
// aload_0	WITHOUT_CLASSIFICATION	0.9999953633531334	WITHOUT_CLASSIFICATION	4.636646866505776E-6	TEST
// aload_0	WITHOUT_CLASSIFICATION	0.9999953633531334	WITHOUT_CLASSIFICATION	4.636646866505776E-6	TEST
// aload_0	WITHOUT_CLASSIFICATION	0.9999953633531334	WITHOUT_CLASSIFICATION	4.636646866505776E-6	TEST
// aload_0	WITHOUT_CLASSIFICATION	0.9999953633531334	WITHOUT_CLASSIFICATION	4.636646866505776E-6	TEST
// aload_0	WITHOUT_CLASSIFICATION	0.9999953633531334	WITHOUT_CLASSIFICATION	4.636646866505776E-6	TEST
// aload_0	WITHOUT_CLASSIFICATION	0.9999953633531334	WITHOUT_CLASSIFICATION	4.636646866505776E-6	TEST
// aload_0	WITHOUT_CLASSIFICATION	0.9999953633531334	WITHOUT_CLASSIFICATION	4.636646866505776E-6	TEST
// return	WITHOUT_CLASSIFICATION	0.9999980322194758	WITHOUT_CLASSIFICATION	1.9677805241598306E-6	TEST
// return	WITHOUT_CLASSIFICATION	0.9999980322194758	WITHOUT_CLASSIFICATION	1.9677805241598306E-6	TEST
/* | this | bean | args | raw bean | */	WITHOUT_CLASSIFICATION	0.9999786965006634	WITHOUT_CLASSIFICATION	2.130349933667076E-5	TEST
// invokeinterface	WITHOUT_CLASSIFICATION	0.9999980750633194	WITHOUT_CLASSIFICATION	1.924936680505246E-6	TEST
// astore 4 // store the raw bean	WITHOUT_CLASSIFICATION	0.9999968235701845	WITHOUT_CLASSIFICATION	3.176429815497668E-6	TEST
/* current stack len = 0 */	WITHOUT_CLASSIFICATION	0.9999985901186565	WITHOUT_CLASSIFICATION	1.4098813433927245E-6	TEST
/* current stack len = 0 */	WITHOUT_CLASSIFICATION	0.9999985901186565	WITHOUT_CLASSIFICATION	1.4098813433927245E-6	TEST
/* local variables | target obj | each oldvalue | */	WITHOUT_CLASSIFICATION	0.9999954203584412	WITHOUT_CLASSIFICATION	4.579641558772452E-6	TEST
// invokeinterface // invoke Enabled.getInterceptFieldCallback()	WITHOUT_CLASSIFICATION	0.9999981817279833	WITHOUT_CLASSIFICATION	1.8182720167315827E-6	TEST
// putfield // new value of the field	WITHOUT_CLASSIFICATION	0.9999815643508414	WITHOUT_CLASSIFICATION	1.8435649158646504E-5	TEST
// reference type	WITHOUT_CLASSIFICATION	0.9999990287984053	WITHOUT_CLASSIFICATION	9.712015947595567E-7	TEST
// double	WITHOUT_CLASSIFICATION	0.9999969094715517	WITHOUT_CLASSIFICATION	3.0905284481998144E-6	TEST
// double	WITHOUT_CLASSIFICATION	0.9999969094715517	WITHOUT_CLASSIFICATION	3.0905284481998144E-6	TEST
// long	WITHOUT_CLASSIFICATION	0.9999947446523408	WITHOUT_CLASSIFICATION	5.255347659157295E-6	TEST
// just decrement the lock, don't recache // (we don't know which transaction won)	WITHOUT_CLASSIFICATION	0.9999998988586598	WITHOUT_CLASSIFICATION	1.0114134020307052E-7	TEST
// decode row selection...	WITHOUT_CLASSIFICATION	0.9999997959342776	WITHOUT_CLASSIFICATION	2.0406572240624266E-7	TEST
//disassembled state gets put in a new array (we write to cache by value!)	WITHOUT_CLASSIFICATION	0.9999975347088285	WITHOUT_CLASSIFICATION	2.4652911715125305E-6	TEST
// again, CCS did not have such a concept; but a reasonable // proximity is to clear the cache after transaction *as long as* // the underlying cache is not JTA aware.	WITHOUT_CLASSIFICATION	0.9999999605885408	WITHOUT_CLASSIFICATION	3.94114592387911E-8	TEST
// CHECK	WITHOUT_CLASSIFICATION	0.9999908814580264	WITHOUT_CLASSIFICATION	9.118541973694237E-6	TEST
// ROW ID	WITHOUT_CLASSIFICATION	0.9999808100905305	WITHOUT_CLASSIFICATION	1.9189909469476568E-5	TEST
// COMPOSITE-ID	WITHOUT_CLASSIFICATION	0.9999844136791277	WITHOUT_CLASSIFICATION	1.5586320872199006E-5	TEST
// DISCRIMINATOR	WITHOUT_CLASSIFICATION	0.999973543662616	WITHOUT_CLASSIFICATION	2.645633738391752E-5	TEST
/*	WITHOUT_CLASSIFICATION	0.9999244183183397	WITHOUT_CLASSIFICATION	7.558168166027218E-5	TEST
// DYNAMIC INSERT	WITHOUT_CLASSIFICATION	0.9999804816537043	WITHOUT_CLASSIFICATION	1.951834629564252E-5	TEST
// PERSISTER	WITHOUT_CLASSIFICATION	0.9999847202624272	WITHOUT_CLASSIFICATION	1.52797375727403E-5	TEST
// get meta's from <subclass>	WITHOUT_CLASSIFICATION	0.9999988856899841	WITHOUT_CLASSIFICATION	1.1143100158744405E-6	TEST
// PROPERTIES	WITHOUT_CLASSIFICATION	0.9999831940962501	WITHOUT_CLASSIFICATION	1.6805903749899836E-5	TEST
// PROPERTIES	WITHOUT_CLASSIFICATION	0.9999831940962501	WITHOUT_CLASSIFICATION	1.6805903749899836E-5	TEST
// generated properties can *never* be insertable...	WITHOUT_CLASSIFICATION	0.9999997903689424	WITHOUT_CLASSIFICATION	2.0963105755442904E-7	TEST
// TABLE	WITHOUT_CLASSIFICATION	0.9999876052270495	WITHOUT_CLASSIFICATION	1.23947729503896E-5	TEST
//by default, natural-ids are "immutable" (constant)	WITHOUT_CLASSIFICATION	0.9999996763281724	WITHOUT_CLASSIFICATION	3.236718275911673E-7	TEST
// ( (Column) ( (SimpleValue) ic.getIndex() ).getColumnIterator().next() // ).setNullable(false);	WITHOUT_CLASSIFICATION	0.9999997423615251	WITHOUT_CLASSIFICATION	2.576384749106E-7	TEST
// we found some extends attributes referencing entities which were // not already processed.  here we need to locate all entity-names // and class-names contained in this document itself, making sure // that these get removed from the extendz list such that only // extends names which require us to delay processing (i.e. // external to this document and not yet processed) are contained // in the returned result	WITHOUT_CLASSIFICATION	0.9999999828785598	WITHOUT_CLASSIFICATION	1.7121440182845362E-8	TEST
/**	WITHOUT_CLASSIFICATION	0.9998890685295254	WITHOUT_CLASSIFICATION	1.1093147047457791E-4	TEST
//	WITHOUT_CLASSIFICATION	0.999928714121282	WITHOUT_CLASSIFICATION	7.128587871800795E-5	TEST
//	WITHOUT_CLASSIFICATION	0.999928714121282	WITHOUT_CLASSIFICATION	7.128587871800795E-5	TEST
/**	WITHOUT_CLASSIFICATION	0.9998890685295254	WITHOUT_CLASSIFICATION	1.1093147047457791E-4	TEST
//	WITHOUT_CLASSIFICATION	0.999928714121282	WITHOUT_CLASSIFICATION	7.128587871800795E-5	TEST
// If close() is called, guarantee unbind()	WITHOUT_CLASSIFICATION	0.9999795147956991	WITHOUT_CLASSIFICATION	2.0485204300926848E-5	TEST
// if a ThreadLocalSessionContext-bound session happens to get // serialized, to be completely correct, we need to make sure // that unbinding of that session occurs.	WITHOUT_CLASSIFICATION	0.9999999715374425	WITHOUT_CLASSIFICATION	2.8462557555707336E-8	TEST
// on the inverse, it makes sense that if a ThreadLocalSessionContext- // bound session then gets deserialized to go ahead and re-bind it to // the ThreadLocalSessionContext session map.	WITHOUT_CLASSIFICATION	0.9999999818372821	WITHOUT_CLASSIFICATION	1.816271790332256E-8	TEST
//cannot be instantiated	WITHOUT_CLASSIFICATION	0.9999669530041531	WITHOUT_CLASSIFICATION	3.30469958468898E-5	TEST
// 60 second lock timeout	WITHOUT_CLASSIFICATION	0.9999994185004938	WITHOUT_CLASSIFICATION	5.814995061933006E-7	TEST
// OptimisticCache impl ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999962030065676	WITHOUT_CLASSIFICATION	3.7969934325169477E-6	TEST
// Cache impl ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999956238357932	WITHOUT_CLASSIFICATION	4.376164206811204E-6	TEST
//	WITHOUT_CLASSIFICATION	0.999928714121282	WITHOUT_CLASSIFICATION	7.128587871800795E-5	TEST
// do the put outside the scope of the JTA txn	WITHOUT_CLASSIFICATION	0.9999987719696893	WITHOUT_CLASSIFICATION	1.2280303106603795E-6	TEST
//ignore!	WITHOUT_CLASSIFICATION	0.999978316616299	WITHOUT_CLASSIFICATION	2.168338370092073E-5	TEST
// tree cache in optimistic mode seems to have as very difficult // time with remove calls on non-existent nodes (NPEs)...	WITHOUT_CLASSIFICATION	0.9999999878067065	WITHOUT_CLASSIFICATION	1.2193293477773094E-8	TEST
//60 seconds	WITHOUT_CLASSIFICATION	0.9999917902745606	WITHOUT_CLASSIFICATION	8.209725439338052E-6	TEST
//ignore!	WITHOUT_CLASSIFICATION	0.999978316616299	WITHOUT_CLASSIFICATION	2.168338370092073E-5	TEST
//60 seconds	WITHOUT_CLASSIFICATION	0.9999917902745606	WITHOUT_CLASSIFICATION	8.209725439338052E-6	TEST
//do the failfast put outside the scope of the JTA txn	WITHOUT_CLASSIFICATION	0.9999968248678008	WITHOUT_CLASSIFICATION	3.1751321992245475E-6	TEST
// NOTE : evict() operates locally only (i.e., does not propogate // to any other nodes in the potential cluster).  This is // exactly what is needed when we destroy() here; destroy() is used // as part of the process of shutting down a SessionFactory; thus // these removals should not be propogated	WITHOUT_CLASSIFICATION	0.9999967288332611	WITHOUT_CLASSIFICATION	3.27116673887339E-6	TEST
//    protected RegionRootListener listener;	WITHOUT_CLASSIFICATION	0.9999957377947465	WITHOUT_CLASSIFICATION	4.262205253456275E-6	TEST
// Establish the region root node with a non-locking data version	WITHOUT_CLASSIFICATION	0.999999842006298	WITHOUT_CLASSIFICATION	1.5799370197011295E-7	TEST
// If we've been blocking for the mutex, perhaps another // thread has already reestablished the root. // In case the node was reestablised via replication, confirm it's  // marked "resident" (a status which doesn't replicate)	WITHOUT_CLASSIFICATION	0.9999999795230569	WITHOUT_CLASSIFICATION	2.0476943033063994E-8	TEST
// For pessimistic locking, we just want to toss out our ref // to any old invalid root node and get the latest (may be null)            	WITHOUT_CLASSIFICATION	0.9999934814250833	WITHOUT_CLASSIFICATION	6.518574916715627E-6	TEST
// The rest only matters for optimistic locking, where we // need to establish the proper data version on the region root	WITHOUT_CLASSIFICATION	0.9999981760838875	WITHOUT_CLASSIFICATION	1.8239161125235327E-6	TEST
// Don't hold a transactional lock for this 	WITHOUT_CLASSIFICATION	0.9999882875461923	WITHOUT_CLASSIFICATION	1.171245380775267E-5	TEST
// Make sure the root node for the region exists and  // has a DataVersion that never complains	WITHOUT_CLASSIFICATION	0.9999998521486436	WITHOUT_CLASSIFICATION	1.478513562744972E-7	TEST
// Never evict this node	WITHOUT_CLASSIFICATION	0.9999684409201527	WITHOUT_CLASSIFICATION	3.155907984736123E-5	TEST
// Fix up the resident flag	WITHOUT_CLASSIFICATION	0.9999982838336589	WITHOUT_CLASSIFICATION	1.7161663411597542E-6	TEST
// 60 seconds	WITHOUT_CLASSIFICATION	0.9999980015565589	WITHOUT_CLASSIFICATION	1.9984434409560997E-6	TEST
// We ignore minimalPutOverride. JBossCache putForExternalRead is // already about as minimal as we can get; it will promptly return // if it discovers that the node we want to write to already exists	WITHOUT_CLASSIFICATION	0.9999999769993906	WITHOUT_CLASSIFICATION	2.3000609399199054E-8	TEST
// no-op. We don't own the cache so we shouldn't stop it.	WITHOUT_CLASSIFICATION	0.9999991391759423	WITHOUT_CLASSIFICATION	8.608240577337495E-7	TEST
// This should only be possible if the caches are constructor injected 	WITHOUT_CLASSIFICATION	0.9999981465344192	WITHOUT_CLASSIFICATION	1.8534655808175371E-6	TEST
// We only build caches if *none* were passed in.  Passing in // caches counts as a clear statement of exactly what is wanted	WITHOUT_CLASSIFICATION	0.9999999114931052	WITHOUT_CLASSIFICATION	8.850689474506832E-8	TEST
// Set up the cache factory	WITHOUT_CLASSIFICATION	0.9999979890274782	WITHOUT_CLASSIFICATION	2.0109725218036306E-6	TEST
// See if the user configured a multiplexer stack	WITHOUT_CLASSIFICATION	0.9999998572818803	WITHOUT_CLASSIFICATION	1.4271811962148724E-7	TEST
// Default to collections sharing entity cache if there is one	WITHOUT_CLASSIFICATION	0.999999808843362	WITHOUT_CLASSIFICATION	1.9115663789367212E-7	TEST
// Default to sharing the entity cache if there is one	WITHOUT_CLASSIFICATION	0.9999995938493376	WITHOUT_CLASSIFICATION	4.061506624055419E-7	TEST
// For Timestamps, we default to a separate config	WITHOUT_CLASSIFICATION	0.9999995695548588	WITHOUT_CLASSIFICATION	4.304451411826952E-7	TEST
// We can't change the TM on a running cache; just check // if the cache has no TM and we're OK with that	WITHOUT_CLASSIFICATION	0.9999993591009773	WITHOUT_CLASSIFICATION	6.408990227180067E-7	TEST
// Configure the cache to use our TM	WITHOUT_CLASSIFICATION	0.9999990290104444	WITHOUT_CLASSIFICATION	9.709895557104978E-7	TEST
// Make sure JBC doesn't look one up	WITHOUT_CLASSIFICATION	0.9999978422767158	WITHOUT_CLASSIFICATION	2.157723284178552E-6	TEST
// This method should be implemented assuming it's valid to  // do start/stop/start -- leave state appropriate for another start	WITHOUT_CLASSIFICATION	0.9999991229610167	WITHOUT_CLASSIFICATION	8.77038983246941E-7	TEST
// Make sure we don't re-release the same cache	WITHOUT_CLASSIFICATION	0.9999996163657218	WITHOUT_CLASSIFICATION	3.836342783189923E-7	TEST
// We use a different delegate than the non-optimistic superclass default	WITHOUT_CLASSIFICATION	0.9999996280175781	WITHOUT_CLASSIFICATION	3.7198242184559137E-7	TEST
// Following methods we don't delegate since they have so little logic // it's clearer to just implement them here	WITHOUT_CLASSIFICATION	0.9999999556856083	WITHOUT_CLASSIFICATION	4.4314391740513496E-8	TEST
// If JBC is using INVALIDATION, we don't want to propagate changes. // We use the Timestamps cache to manage invalidation	WITHOUT_CLASSIFICATION	0.9999971521334995	WITHOUT_CLASSIFICATION	2.8478665004349534E-6	TEST
// We don't want to waste effort setting an option if JBC is // already in LOCAL mode. If JBC is REPL_(A)SYNC then check // if they passed an config option to disable query replication	WITHOUT_CLASSIFICATION	0.9999999751431976	WITHOUT_CLASSIFICATION	2.4856802347315827E-8	TEST
// Don't hold the JBC node lock throughout the tx, as that // prevents updates // Add a zero (or low) timeout option so we don't block // waiting for tx's that did a put to commit	WITHOUT_CLASSIFICATION	0.9999999768445801	WITHOUT_CLASSIFICATION	2.3155419883083042E-8	TEST
// Double check the distributed cache	WITHOUT_CLASSIFICATION	0.9999966406799172	WITHOUT_CLASSIFICATION	3.3593200827184215E-6	TEST
// Get an exclusive right to update JBC for this key from this node.	WITHOUT_CLASSIFICATION	0.9999989901271545	WITHOUT_CLASSIFICATION	1.0098728455214194E-6	TEST
// We ensure ASYNC semantics (JBCACHE-1175)	WITHOUT_CLASSIFICATION	0.9999996538328402	WITHOUT_CLASSIFICATION	3.461671598533398E-7	TEST
// Initial load from JBC	WITHOUT_CLASSIFICATION	0.999997428988361	WITHOUT_CLASSIFICATION	2.5710116391444496E-6	TEST
// See if we had a 2nd invalidation from the same initial // preinvalidation timestamp. If so, only increment // if the new current value is an increase	WITHOUT_CLASSIFICATION	0.9999999150887855	WITHOUT_CLASSIFICATION	8.491121452179839E-8	TEST
// We ensure ASYNC semantics (JBCACHE-1175)	WITHOUT_CLASSIFICATION	0.9999996538328402	WITHOUT_CLASSIFICATION	3.461671598533398E-7	TEST
// If the workspace node has null as well, OK; if not we've // been modified in a non-comparable manner, which we have to // treat as us being newer	WITHOUT_CLASSIFICATION	0.9999999929265602	WITHOUT_CLASSIFICATION	7.073439782671662E-9	TEST
// The standard comparator types are not Serializable but are singletons	WITHOUT_CLASSIFICATION	0.99999989913424	WITHOUT_CLASSIFICATION	1.0086575998145052E-7	TEST
// ignore!	WITHOUT_CLASSIFICATION	0.9999974855365961	WITHOUT_CLASSIFICATION	2.514463403862619E-6	TEST
// ignore it	WITHOUT_CLASSIFICATION	0.9999976242309284	WITHOUT_CLASSIFICATION	2.3757690715110733E-6	TEST
// construct the cache	WITHOUT_CLASSIFICATION	0.9999983791179855	WITHOUT_CLASSIFICATION	1.6208820144338757E-6	TEST
// local cache, so we use synchronization	WITHOUT_CLASSIFICATION	0.9999998522814585	WITHOUT_CLASSIFICATION	1.4771854150405684E-7	TEST
// local cache, so we use synchronization	WITHOUT_CLASSIFICATION	0.9999998522814585	WITHOUT_CLASSIFICATION	1.4771854150405684E-7	TEST
//ie. 60 seconds	WITHOUT_CLASSIFICATION	0.9999903858623734	WITHOUT_CLASSIFICATION	9.614137626615297E-6	TEST
//swaldman 2006-08-28: define c3p0-style configuration parameters for initialPoolSize, which //                     hibernate sensibly lets default to minPoolSize, but we'll let users //                     override it with the c3p0-style property if they want.	WITHOUT_CLASSIFICATION	0.9999999689441587	WITHOUT_CLASSIFICATION	3.10558413244439E-8	TEST
/*DataSource unpooled = DataSources.unpooledDataSource(	WITHOUT_CLASSIFICATION	0.999976151123108	WITHOUT_CLASSIFICATION	2.3848876891921888E-5	TEST
// TRUE if the pool is borrowed from the outside, FALSE if we used to create it	WITHOUT_CLASSIFICATION	0.9999989510747443	WITHOUT_CLASSIFICATION	1.0489252556965993E-6	TEST
// get a connection from the pool (thru DriverManager, cfr. Proxool doc)	WITHOUT_CLASSIFICATION	0.9999998970659582	WITHOUT_CLASSIFICATION	1.0293404183031522E-7	TEST
// set the Transaction Isolation if defined	WITHOUT_CLASSIFICATION	0.9999993408702861	WITHOUT_CLASSIFICATION	6.591297139319579E-7	TEST
// toggle autoCommit to false if set	WITHOUT_CLASSIFICATION	0.999997957500303	WITHOUT_CLASSIFICATION	2.042499697117587E-6	TEST
// return the connection	WITHOUT_CLASSIFICATION	0.9999993837636445	WITHOUT_CLASSIFICATION	6.162363555766532E-7	TEST
// Get the configurator files (if available)	WITHOUT_CLASSIFICATION	0.9999995558813881	WITHOUT_CLASSIFICATION	4.4411861180823876E-7	TEST
// Default the Proxool alias setting	WITHOUT_CLASSIFICATION	0.9999980030447503	WITHOUT_CLASSIFICATION	1.9969552497117104E-6	TEST
// Validate that an alias name was provided to determine which pool to use	WITHOUT_CLASSIFICATION	0.9999985922283864	WITHOUT_CLASSIFICATION	1.4077716135501476E-6	TEST
// Validate that an alias name was provided to determine which pool to use	WITHOUT_CLASSIFICATION	0.9999985922283864	WITHOUT_CLASSIFICATION	1.4077716135501476E-6	TEST
// Append the stem to the proxool pool alias	WITHOUT_CLASSIFICATION	0.9999973768374651	WITHOUT_CLASSIFICATION	2.623162534894003E-6	TEST
// Set the existing pool flag to true	WITHOUT_CLASSIFICATION	0.9999989645677057	WITHOUT_CLASSIFICATION	1.0354322943552546E-6	TEST
// Configured using the JAXP Configurator	WITHOUT_CLASSIFICATION	0.9999985169173328	WITHOUT_CLASSIFICATION	1.4830826673178865E-6	TEST
// Validate that an alias name was provided to determine which pool to use	WITHOUT_CLASSIFICATION	0.9999985922283864	WITHOUT_CLASSIFICATION	1.4077716135501476E-6	TEST
// Append the stem to the proxool pool alias	WITHOUT_CLASSIFICATION	0.9999973768374651	WITHOUT_CLASSIFICATION	2.623162534894003E-6	TEST
// Append the stem to the proxool pool alias	WITHOUT_CLASSIFICATION	0.9999973768374651	WITHOUT_CLASSIFICATION	2.623162534894003E-6	TEST
// Configured using the Properties File Configurator	WITHOUT_CLASSIFICATION	0.9999994142108536	WITHOUT_CLASSIFICATION	5.857891464537702E-7	TEST
// Remember Isolation level	WITHOUT_CLASSIFICATION	0.9999995200556974	WITHOUT_CLASSIFICATION	4.79944302628638E-7	TEST
// If the provider was leeching off an existing pool don't close it	WITHOUT_CLASSIFICATION	0.9999997387505892	WITHOUT_CLASSIFICATION	2.6124941077196345E-7	TEST
// We have created the pool ourselves, so shut it down	WITHOUT_CLASSIFICATION	0.999997848448711	WITHOUT_CLASSIFICATION	2.1515512890455675E-6	TEST
// not really a many-to-one association *necessarily*	WITHOUT_CLASSIFICATION	0.9999999385628774	WITHOUT_CLASSIFICATION	6.143712255026143E-8	TEST
// not really a many-to-one association *necessarily*	WITHOUT_CLASSIFICATION	0.9999999385628774	WITHOUT_CLASSIFICATION	6.143712255026143E-8	TEST
//always overwrite nonversioned data	WITHOUT_CLASSIFICATION	0.9999960025913722	WITHOUT_CLASSIFICATION	3.9974086277103025E-6	TEST
//public Currency getCurrency(int col) throws HibernateException;	WITHOUT_CLASSIFICATION	0.999996895684536	WITHOUT_CLASSIFICATION	3.1043154641049222E-6	TEST
// default is POJO	WITHOUT_CLASSIFICATION	0.9999942539970975	WITHOUT_CLASSIFICATION	5.746002902457083E-6	TEST
// use setParameter for null values	WITHOUT_CLASSIFICATION	0.9999979789477981	WITHOUT_CLASSIFICATION	2.0210522019885876E-6	TEST
// use setParameter for null values	WITHOUT_CLASSIFICATION	0.9999979789477981	WITHOUT_CLASSIFICATION	2.0210522019885876E-6	TEST
//private CacheEntry cacheEntry;	WITHOUT_CLASSIFICATION	0.999995400235931	WITHOUT_CLASSIFICATION	4.599764068936302E-6	TEST
// Don't need to lock the cache here, since if someone // else inserted the same pk first, the insert would fail	WITHOUT_CLASSIFICATION	0.9999996893193962	WITHOUT_CLASSIFICATION	3.1068060377147193E-7	TEST
//Make 100% certain that this is called before any subsequent ScheduledUpdate.afterTransactionCompletion()!!	WITHOUT_CLASSIFICATION	0.999918435138671	WITHOUT_CLASSIFICATION	8.156486132911448E-5	TEST
// get the updated snapshot of the entity state by cloning current state; // it is safe to copy in place, since by this time no-one else (should have) // has a reference  to the array	WITHOUT_CLASSIFICATION	0.9999997352365151	WITHOUT_CLASSIFICATION	2.647634848741923E-7	TEST
// this entity defines proeprty generation, so process those generated // values...	WITHOUT_CLASSIFICATION	0.9999995545515259	WITHOUT_CLASSIFICATION	4.4544847414263334E-7	TEST
// have the entity entry perform post-update processing, passing it the // update state and the new version (if one).	WITHOUT_CLASSIFICATION	0.9999997758479343	WITHOUT_CLASSIFICATION	2.241520657692834E-7	TEST
/*!persister.isCacheInvalidationRequired()*/	WITHOUT_CLASSIFICATION	0.9999957997350433	WITHOUT_CLASSIFICATION	4.20026495667992E-6	TEST
// need to look it up from the persistence-context	WITHOUT_CLASSIFICATION	0.9999967660084901	WITHOUT_CLASSIFICATION	3.2339915099705328E-6	TEST
//sort first by role name	WITHOUT_CLASSIFICATION	0.9999872120161981	WITHOUT_CLASSIFICATION	1.278798380184468E-5	TEST
//Make 100% certain that this is called before any subsequent ScheduledUpdate.afterTransactionCompletion()!!	WITHOUT_CLASSIFICATION	0.999918435138671	WITHOUT_CLASSIFICATION	8.156486132911448E-5	TEST
//then by fk	WITHOUT_CLASSIFICATION	0.9999602920589524	WITHOUT_CLASSIFICATION	3.970794104754178E-5	TEST
// nothing to do	WITHOUT_CLASSIFICATION	0.9999968844391838	WITHOUT_CLASSIFICATION	3.1155608163207418E-6	TEST
// nothing to do	WITHOUT_CLASSIFICATION	0.9999968844391838	WITHOUT_CLASSIFICATION	3.1155608163207418E-6	TEST
// an existing collection that was either non-empty or uninitialized // is replaced by null or a different collection // (if the collection is uninitialized, hibernate has no way of // knowing if the collection is actually empty without querying the db)	WITHOUT_CLASSIFICATION	0.9999999789643472	WITHOUT_CLASSIFICATION	2.1035652699203624E-8	TEST
// this method is called when a new non-null collection is persisted // or when an existing (non-null) collection is moved to a new owner	WITHOUT_CLASSIFICATION	0.999999878488978	WITHOUT_CLASSIFICATION	1.2151102208498515E-7	TEST
//	WITHOUT_CLASSIFICATION	0.999928714121282	WITHOUT_CLASSIFICATION	7.128587871800795E-5	TEST
// we need to grab the version value from the entity, otherwise // we have issues with generated-version entities that may have // multiple actions queued during the same flush	WITHOUT_CLASSIFICATION	0.9999997415669117	WITHOUT_CLASSIFICATION	2.584330882703388E-7	TEST
//do nothing - we only need to notify the cache...	WITHOUT_CLASSIFICATION	0.9999966995812289	WITHOUT_CLASSIFICATION	3.3004187709918878E-6	TEST
//sort first by entity name	WITHOUT_CLASSIFICATION	0.9999889269933704	WITHOUT_CLASSIFICATION	1.1073006629551562E-5	TEST
//then by id	WITHOUT_CLASSIFICATION	0.9999691216763147	WITHOUT_CLASSIFICATION	3.087832368529174E-5	TEST
// to be safe...	WITHOUT_CLASSIFICATION	0.9999967523187447	WITHOUT_CLASSIFICATION	3.2476812552787176E-6	TEST
// no transformations took place, so handle it as we would a // non-instrumented class	WITHOUT_CLASSIFICATION	0.999999805480724	WITHOUT_CLASSIFICATION	1.945192760140871E-7	TEST
// see if the entry represents a class file	WITHOUT_CLASSIFICATION	0.9999997383617631	WITHOUT_CLASSIFICATION	2.616382367921895E-7	TEST
// see if the entry represents a class file	WITHOUT_CLASSIFICATION	0.9999997383617631	WITHOUT_CLASSIFICATION	2.616382367921895E-7	TEST
// intentionally empty	WITHOUT_CLASSIFICATION	0.9999979935046034	WITHOUT_CLASSIFICATION	2.006495396559204E-6	TEST
//test out the optimizer:	WITHOUT_CLASSIFICATION	0.9994164439162471	WITHOUT_CLASSIFICATION	5.835560837529444E-4	TEST
// set the name of bulk accessor.	WITHOUT_CLASSIFICATION	0.9999988531416114	WITHOUT_CLASSIFICATION	1.1468583885568524E-6	TEST
// aload_0	WITHOUT_CLASSIFICATION	0.9999953633531334	WITHOUT_CLASSIFICATION	4.636646866505776E-6	TEST
// invokespecial	WITHOUT_CLASSIFICATION	0.9999978153824893	WITHOUT_CLASSIFICATION	2.1846175106595765E-6	TEST
// return	WITHOUT_CLASSIFICATION	0.9999980322194758	WITHOUT_CLASSIFICATION	1.9677805241598306E-6	TEST
// aload_1 // load bean	WITHOUT_CLASSIFICATION	0.9999942368841138	WITHOUT_CLASSIFICATION	5.7631158862697116E-6	TEST
// checkcast // cast bean	WITHOUT_CLASSIFICATION	0.9999976214091824	WITHOUT_CLASSIFICATION	2.378590817637081E-6	TEST
// astore_3 // store bean	WITHOUT_CLASSIFICATION	0.9999987654403124	WITHOUT_CLASSIFICATION	1.2345596875645883E-6	TEST
// aload_2 // args	WITHOUT_CLASSIFICATION	0.9999972539537283	WITHOUT_CLASSIFICATION	2.7460462717217414E-6	TEST
// iconst_i // continue to aastore // growing stack is 1	WITHOUT_CLASSIFICATION	0.9999993841057508	WITHOUT_CLASSIFICATION	6.158942491455356E-7	TEST
// new	WITHOUT_CLASSIFICATION	0.9999951955575295	WITHOUT_CLASSIFICATION	4.804442470518464E-6	TEST
// dup	WITHOUT_CLASSIFICATION	0.9999928891252635	WITHOUT_CLASSIFICATION	7.110874736371626E-6	TEST
// aload_3 // load the raw bean	WITHOUT_CLASSIFICATION	0.9999963932248929	WITHOUT_CLASSIFICATION	3.6067751071238192E-6	TEST
// invokeinterface	WITHOUT_CLASSIFICATION	0.9999980750633194	WITHOUT_CLASSIFICATION	1.924936680505246E-6	TEST
// invokevirtual	WITHOUT_CLASSIFICATION	0.9999981473260822	WITHOUT_CLASSIFICATION	1.8526739177283302E-6	TEST
// invokevirtual	WITHOUT_CLASSIFICATION	0.9999981473260822	WITHOUT_CLASSIFICATION	1.8526739177283302E-6	TEST
// aastore // args	WITHOUT_CLASSIFICATION	0.9999981663956162	WITHOUT_CLASSIFICATION	1.8336043837955632E-6	TEST
/* | this | bean | args | i | raw bean | exception | */	WITHOUT_CLASSIFICATION	0.999997680090533	WITHOUT_CLASSIFICATION	2.319909466851995E-6	TEST
// required to exception table // iconst_0 // i	WITHOUT_CLASSIFICATION	0.9999999111155518	WITHOUT_CLASSIFICATION	8.888444830627939E-8	TEST
// istore_3 // store i	WITHOUT_CLASSIFICATION	0.9999941615572979	WITHOUT_CLASSIFICATION	5.838442702046067E-6	TEST
// aload_1 // load the bean	WITHOUT_CLASSIFICATION	0.9999964557319297	WITHOUT_CLASSIFICATION	3.5442680702180514E-6	TEST
// checkcast // cast the bean into a raw bean	WITHOUT_CLASSIFICATION	0.9999984363713721	WITHOUT_CLASSIFICATION	1.5636286279857563E-6	TEST
/* current stack len = 0 */	WITHOUT_CLASSIFICATION	0.9999985901186565	WITHOUT_CLASSIFICATION	1.4098813433927245E-6	TEST
// start region to handling exception (BulkAccessorException)	WITHOUT_CLASSIFICATION	0.9999999049645225	WITHOUT_CLASSIFICATION	9.503547745312075E-8	TEST
// iinc 3, 1	WITHOUT_CLASSIFICATION	0.9999922692880484	WITHOUT_CLASSIFICATION	7.730711951511533E-6	TEST
// aload 4 // load the raw bean	WITHOUT_CLASSIFICATION	0.9999960566648608	WITHOUT_CLASSIFICATION	3.943335139217349E-6	TEST
// aload_2 // load the args	WITHOUT_CLASSIFICATION	0.9999972664579686	WITHOUT_CLASSIFICATION	2.733542031306373E-6	TEST
// iconst_i	WITHOUT_CLASSIFICATION	0.9999951835565796	WITHOUT_CLASSIFICATION	4.816443420376183E-6	TEST
// aaload	WITHOUT_CLASSIFICATION	0.9999942061518295	WITHOUT_CLASSIFICATION	5.793848170396131E-6	TEST
// checkcast	WITHOUT_CLASSIFICATION	0.9999969647003057	WITHOUT_CLASSIFICATION	3.0352996943006695E-6	TEST
// checkcast (case of primitive type) // invokevirtual (case of primitive type)	WITHOUT_CLASSIFICATION	0.9999998470716575	WITHOUT_CLASSIFICATION	1.529283424955767E-7	TEST
// checkcast (case of reference type)	WITHOUT_CLASSIFICATION	0.9999993614580227	WITHOUT_CLASSIFICATION	6.385419773543243E-7	TEST
/* current stack len = 2 */	WITHOUT_CLASSIFICATION	0.9999985871029129	WITHOUT_CLASSIFICATION	1.4128970871312448E-6	TEST
// end region to handling exception (BulkAccessorException)	WITHOUT_CLASSIFICATION	0.9999998974448842	WITHOUT_CLASSIFICATION	1.025551157771973E-7	TEST
// register in exception table	WITHOUT_CLASSIFICATION	0.9999996253598176	WITHOUT_CLASSIFICATION	3.7464018250750434E-7	TEST
// aload_0	WITHOUT_CLASSIFICATION	0.9999953633531334	WITHOUT_CLASSIFICATION	4.636646866505776E-6	TEST
// aload_0	WITHOUT_CLASSIFICATION	0.9999953633531334	WITHOUT_CLASSIFICATION	4.636646866505776E-6	TEST
// return	WITHOUT_CLASSIFICATION	0.9999980322194758	WITHOUT_CLASSIFICATION	1.9677805241598306E-6	TEST
// return	WITHOUT_CLASSIFICATION	0.9999980322194758	WITHOUT_CLASSIFICATION	1.9677805241598306E-6	TEST
// dup	WITHOUT_CLASSIFICATION	0.9999928891252635	WITHOUT_CLASSIFICATION	7.110874736371626E-6	TEST
// invokevirtual	WITHOUT_CLASSIFICATION	0.9999981473260822	WITHOUT_CLASSIFICATION	1.8526739177283302E-6	TEST
// checkcast	WITHOUT_CLASSIFICATION	0.9999969647003057	WITHOUT_CLASSIFICATION	3.0352996943006695E-6	TEST
/* local variables | target obj | each oldvalue | */	WITHOUT_CLASSIFICATION	0.9999954203584412	WITHOUT_CLASSIFICATION	4.579641558772452E-6	TEST
// astore 5 // store exception	WITHOUT_CLASSIFICATION	0.9999998370853691	WITHOUT_CLASSIFICATION	1.6291463084798957E-7	TEST
// new // BulkAccessorException	WITHOUT_CLASSIFICATION	0.999999639797381	WITHOUT_CLASSIFICATION	3.6020261896189154E-7	TEST
// aload 5 // load exception	WITHOUT_CLASSIFICATION	0.9999996465936188	WITHOUT_CLASSIFICATION	3.5340638113141265E-7	TEST
// iload_3 // i	WITHOUT_CLASSIFICATION	0.9999941615946568	WITHOUT_CLASSIFICATION	5.8384053431109565E-6	TEST
// invokespecial // BulkAccessorException.<init>	WITHOUT_CLASSIFICATION	0.999999805742376	WITHOUT_CLASSIFICATION	1.9425762409869544E-7	TEST
// athrow	WITHOUT_CLASSIFICATION	0.9999958517087124	WITHOUT_CLASSIFICATION	4.148291287593886E-6	TEST
// WARNING: classfile only	WITHOUT_CLASSIFICATION	0.9999985918845206	WITHOUT_CLASSIFICATION	1.408115479344151E-6	TEST
//swallow	WITHOUT_CLASSIFICATION	0.9999305095035991	WITHOUT_CLASSIFICATION	6.949049640092731E-5	TEST
/* local variable | this | */	WITHOUT_CLASSIFICATION	0.9999945527066443	WITHOUT_CLASSIFICATION	5.447293355641596E-6	TEST
// aload_0 // load this	WITHOUT_CLASSIFICATION	0.9999846476258825	WITHOUT_CLASSIFICATION	1.535237411760608E-5	TEST
// aload_0 // load this	WITHOUT_CLASSIFICATION	0.9999846476258825	WITHOUT_CLASSIFICATION	1.535237411760608E-5	TEST
// getfield // get field "$JAVASSIST_CALLBACK" defined already	WITHOUT_CLASSIFICATION	0.9999928542278728	WITHOUT_CLASSIFICATION	7.145772127139493E-6	TEST
// areturn // return the value of the field	WITHOUT_CLASSIFICATION	0.9999937553043288	WITHOUT_CLASSIFICATION	6.244695671255711E-6	TEST
/* local variables | this | callback | */	WITHOUT_CLASSIFICATION	0.9999902234541883	WITHOUT_CLASSIFICATION	9.776545811690442E-6	TEST
// aload_1 // load callback	WITHOUT_CLASSIFICATION	0.9999968328169884	WITHOUT_CLASSIFICATION	3.1671830115921415E-6	TEST
// putfield // put field "$JAVASSIST_CALLBACK" defined already	WITHOUT_CLASSIFICATION	0.9999966083088457	WITHOUT_CLASSIFICATION	3.3916911543507156E-6	TEST
// case of non-static field	WITHOUT_CLASSIFICATION	0.9999989760102049	WITHOUT_CLASSIFICATION	1.0239897950590877E-6	TEST
// getfield // get each field	WITHOUT_CLASSIFICATION	0.999971268190779	WITHOUT_CLASSIFICATION	2.8731809220974324E-5	TEST
// invokeinterface // invoke Enabled.getInterceptFieldCallback()	WITHOUT_CLASSIFICATION	0.9999981817279833	WITHOUT_CLASSIFICATION	1.8182720167315827E-6	TEST
// ifnonnull	WITHOUT_CLASSIFICATION	0.9999957917560834	WITHOUT_CLASSIFICATION	4.208243916638788E-6	TEST
// *return // each type	WITHOUT_CLASSIFICATION	0.9999997169253247	WITHOUT_CLASSIFICATION	2.830746752173079E-7	TEST
// *return // each type	WITHOUT_CLASSIFICATION	0.9999997169253247	WITHOUT_CLASSIFICATION	2.830746752173079E-7	TEST
// *store_1 // each type	WITHOUT_CLASSIFICATION	0.9999994611581329	WITHOUT_CLASSIFICATION	5.388418670284666E-7	TEST
// ldc // name of the field	WITHOUT_CLASSIFICATION	0.9999962927017614	WITHOUT_CLASSIFICATION	3.7072982384758663E-6	TEST
// *load_1 // each type	WITHOUT_CLASSIFICATION	0.9999994224426801	WITHOUT_CLASSIFICATION	5.775573198283904E-7	TEST
// invokeinterface // invoke Callback.read*() // each type	WITHOUT_CLASSIFICATION	0.9999997535567249	WITHOUT_CLASSIFICATION	2.4644327505890664E-7	TEST
// int	WITHOUT_CLASSIFICATION	0.9999960109524104	WITHOUT_CLASSIFICATION	3.98904758960118E-6	TEST
// return	WITHOUT_CLASSIFICATION	0.9999980322194758	WITHOUT_CLASSIFICATION	1.9677805241598306E-6	TEST
// dup	WITHOUT_CLASSIFICATION	0.9999928891252635	WITHOUT_CLASSIFICATION	7.110874736371626E-6	TEST
// invokeinterface	WITHOUT_CLASSIFICATION	0.9999980750633194	WITHOUT_CLASSIFICATION	1.924936680505246E-6	TEST
// checkcast	WITHOUT_CLASSIFICATION	0.9999969647003057	WITHOUT_CLASSIFICATION	3.0352996943006695E-6	TEST
// checkcast	WITHOUT_CLASSIFICATION	0.9999969647003057	WITHOUT_CLASSIFICATION	3.0352996943006695E-6	TEST
// invokeinterface // enabled.getInterceptFieldCallback()	WITHOUT_CLASSIFICATION	0.9999982850277748	WITHOUT_CLASSIFICATION	1.71497222534622E-6	TEST
// invokeinterface // enabled.getInterceptFieldCallback()	WITHOUT_CLASSIFICATION	0.9999982850277748	WITHOUT_CLASSIFICATION	1.71497222534622E-6	TEST
// ifnonnull (label1)	WITHOUT_CLASSIFICATION	0.99999873116075	WITHOUT_CLASSIFICATION	1.2688392500191187E-6	TEST
// *load_1	WITHOUT_CLASSIFICATION	0.999996817327952	WITHOUT_CLASSIFICATION	3.1826720479879576E-6	TEST
// *load_1	WITHOUT_CLASSIFICATION	0.999996817327952	WITHOUT_CLASSIFICATION	3.1826720479879576E-6	TEST
// putfield	WITHOUT_CLASSIFICATION	0.999983980364586	WITHOUT_CLASSIFICATION	1.601963541397328E-5	TEST
// return ;	WITHOUT_CLASSIFICATION	0.9999974845168929	WITHOUT_CLASSIFICATION	2.5154831071790705E-6	TEST
// ldc // field name	WITHOUT_CLASSIFICATION	0.9999914884194353	WITHOUT_CLASSIFICATION	8.511580564621722E-6	TEST
// getfield // old value of the field	WITHOUT_CLASSIFICATION	0.9998852632994712	WITHOUT_CLASSIFICATION	1.1473670052877252E-4	TEST
// invokeinterface // callback.write*(..)	WITHOUT_CLASSIFICATION	0.9999995517712199	WITHOUT_CLASSIFICATION	4.4822878013426145E-7	TEST
// reference type	WITHOUT_CLASSIFICATION	0.9999990287984053	WITHOUT_CLASSIFICATION	9.712015947595567E-7	TEST
// reference type	WITHOUT_CLASSIFICATION	0.9999990287984053	WITHOUT_CLASSIFICATION	9.712015947595567E-7	TEST
// not array	WITHOUT_CLASSIFICATION	0.9999971425118398	WITHOUT_CLASSIFICATION	2.8574881602984165E-6	TEST
// array of reference type	WITHOUT_CLASSIFICATION	0.9999995462550229	WITHOUT_CLASSIFICATION	4.5374497717622106E-7	TEST
// boolean	WITHOUT_CLASSIFICATION	0.999997526424242	WITHOUT_CLASSIFICATION	2.4735757579161936E-6	TEST
// byte	WITHOUT_CLASSIFICATION	0.9999933327085141	WITHOUT_CLASSIFICATION	6.6672914859661826E-6	TEST
// char	WITHOUT_CLASSIFICATION	0.9999950852039671	WITHOUT_CLASSIFICATION	4.914796032980913E-6	TEST
// short	WITHOUT_CLASSIFICATION	0.9999955292525455	WITHOUT_CLASSIFICATION	4.4707474544993435E-6	TEST
// double	WITHOUT_CLASSIFICATION	0.9999969094715517	WITHOUT_CLASSIFICATION	3.0905284481998144E-6	TEST
// float	WITHOUT_CLASSIFICATION	0.9999942066935522	WITHOUT_CLASSIFICATION	5.793306447817819E-6	TEST
// float	WITHOUT_CLASSIFICATION	0.9999942066935522	WITHOUT_CLASSIFICATION	5.793306447817819E-6	TEST
// long	WITHOUT_CLASSIFICATION	0.9999947446523408	WITHOUT_CLASSIFICATION	5.255347659157295E-6	TEST
// long	WITHOUT_CLASSIFICATION	0.9999947446523408	WITHOUT_CLASSIFICATION	5.255347659157295E-6	TEST
// bad type	WITHOUT_CLASSIFICATION	0.9999958571289745	WITHOUT_CLASSIFICATION	4.142871025519013E-6	TEST
// bad type	WITHOUT_CLASSIFICATION	0.9999958571289745	WITHOUT_CLASSIFICATION	4.142871025519013E-6	TEST
// boolean, byte, char, int, short	WITHOUT_CLASSIFICATION	0.9999982493866679	WITHOUT_CLASSIFICATION	1.7506133320954874E-6	TEST
// boolean, byte, char, int, short	WITHOUT_CLASSIFICATION	0.9999982493866679	WITHOUT_CLASSIFICATION	1.7506133320954874E-6	TEST
// reference type	WITHOUT_CLASSIFICATION	0.9999990287984053	WITHOUT_CLASSIFICATION	9.712015947595567E-7	TEST
// double	WITHOUT_CLASSIFICATION	0.9999969094715517	WITHOUT_CLASSIFICATION	3.0905284481998144E-6	TEST
// float	WITHOUT_CLASSIFICATION	0.9999942066935522	WITHOUT_CLASSIFICATION	5.793306447817819E-6	TEST
// float	WITHOUT_CLASSIFICATION	0.9999942066935522	WITHOUT_CLASSIFICATION	5.793306447817819E-6	TEST
// long	WITHOUT_CLASSIFICATION	0.9999947446523408	WITHOUT_CLASSIFICATION	5.255347659157295E-6	TEST
// bad type	WITHOUT_CLASSIFICATION	0.9999958571289745	WITHOUT_CLASSIFICATION	4.142871025519013E-6	TEST
// bad type	WITHOUT_CLASSIFICATION	0.9999958571289745	WITHOUT_CLASSIFICATION	4.142871025519013E-6	TEST
// boolean, byte, char, int, short	WITHOUT_CLASSIFICATION	0.9999982493866679	WITHOUT_CLASSIFICATION	1.7506133320954874E-6	TEST
// skip finalize methods	WITHOUT_CLASSIFICATION	0.9999994809798135	WITHOUT_CLASSIFICATION	5.190201864965023E-7	TEST
//Mainly for OSCache	WITHOUT_CLASSIFICATION	0.9999892278930838	WITHOUT_CLASSIFICATION	1.0772106916296655E-5	TEST
//decrement the lock	WITHOUT_CLASSIFICATION	0.999995050276629	WITHOUT_CLASSIFICATION	4.949723370952266E-6	TEST
// create new lock that times out immediately	WITHOUT_CLASSIFICATION	0.9999979445818967	WITHOUT_CLASSIFICATION	2.0554181032317613E-6	TEST
//recache the updated state	WITHOUT_CLASSIFICATION	0.999961002718601	WITHOUT_CLASSIFICATION	3.8997281399083044E-5	TEST
// noop	WITHOUT_CLASSIFICATION	0.9999957307563211	WITHOUT_CLASSIFICATION	4.26924367893135E-6	TEST
//null clientLock is remotely possible but will never happen in practice	WITHOUT_CLASSIFICATION	0.9999989082979905	WITHOUT_CLASSIFICATION	1.0917020094726082E-6	TEST
// we really could refresh the item if it // is not a lock, but it might be slower //return freshTimestamp < txTimestamp	WITHOUT_CLASSIFICATION	0.9999976176391798	WITHOUT_CLASSIFICATION	2.3823608202654182E-6	TEST
//by requiring <, we rely on lock timeout in the case of an unsuccessful update!	WITHOUT_CLASSIFICATION	0.99999952377457	WITHOUT_CLASSIFICATION	4.762254300610484E-7	TEST
// the user provided resulttransformer, not the one used with "select new". Here to avoid mangling // transformed/non-transformed results.	WITHOUT_CLASSIFICATION	0.9999997798962775	WITHOUT_CLASSIFICATION	2.2010372256850521E-7	TEST
// disassemble positional parameters	WITHOUT_CLASSIFICATION	0.9999993993428652	WITHOUT_CLASSIFICATION	6.006571349142947E-7	TEST
// disassemble named parameters	WITHOUT_CLASSIFICATION	0.9999984125437765	WITHOUT_CLASSIFICATION	1.5874562234055327E-6	TEST
//ie. 60 seconds	WITHOUT_CLASSIFICATION	0.9999903858623734	WITHOUT_CLASSIFICATION	9.614137626615297E-6	TEST
// noop	WITHOUT_CLASSIFICATION	0.9999957307563211	WITHOUT_CLASSIFICATION	4.26924367893135E-6	TEST
//noop	WITHOUT_CLASSIFICATION	0.9999466959964315	WITHOUT_CLASSIFICATION	5.330400356858255E-5	TEST
//noop	WITHOUT_CLASSIFICATION	0.9999466959964315	WITHOUT_CLASSIFICATION	5.330400356858255E-5	TEST
// this is called from SettingsFactory irregardless; trivial to simply disregard	WITHOUT_CLASSIFICATION	0.9999958924509234	WITHOUT_CLASSIFICATION	4.107549076593101E-6	TEST
// Do nothing; subclasses may override.	WITHOUT_CLASSIFICATION	0.9999996852485733	WITHOUT_CLASSIFICATION	3.147514267606845E-7	TEST
// Do nothing; subclasses may override.	WITHOUT_CLASSIFICATION	0.9999996852485733	WITHOUT_CLASSIFICATION	3.147514267606845E-7	TEST
//throw new UnsupportedOperationException("Can't write to a readonly object");	WITHOUT_CLASSIFICATION	0.9999997533340391	WITHOUT_CLASSIFICATION	2.4666596082705894E-7	TEST
//assembled state gets put in a new array (we read from cache by value!)	WITHOUT_CLASSIFICATION	0.9999987083830041	WITHOUT_CLASSIFICATION	1.2916169958283059E-6	TEST
//persister.setIdentifier(result, id); //before calling interceptor, for consistency with normal load	WITHOUT_CLASSIFICATION	0.9999993215045251	WITHOUT_CLASSIFICATION	6.784954748249319E-7	TEST
// no-op; CCS did not have such a concept	WITHOUT_CLASSIFICATION	0.99999974794157	WITHOUT_CLASSIFICATION	2.5205843000365E-7	TEST
// no-op; CCS did not have such a concept	WITHOUT_CLASSIFICATION	0.99999974794157	WITHOUT_CLASSIFICATION	2.5205843000365E-7	TEST
// again, CCS did not have such a concept; but a reasonable // proximity is to clear the cache after transaction *as long as* // the underlying cache is not JTA aware.	WITHOUT_CLASSIFICATION	0.9999999605885408	WITHOUT_CLASSIFICATION	3.94114592387911E-8	TEST
// again, CCS did not have such a concept; however a reasonable // proximity is to clear the cache.  For non-transaction aware // caches, we will also do a clear at the end of the transaction	WITHOUT_CLASSIFICATION	0.9999999950950218	WITHOUT_CLASSIFICATION	4.904978249388033E-9	TEST
// again, CCS did not have such a concept; however a reasonable // proximity is to clear the cache.  For non-transaction aware // caches, we will also do a clear at the end of the transaction	WITHOUT_CLASSIFICATION	0.9999999950950218	WITHOUT_CLASSIFICATION	4.904978249388033E-9	TEST
// classes mentioned in extends not available - so put it in queue	WITHOUT_CLASSIFICATION	0.9999999821866312	WITHOUT_CLASSIFICATION	1.7813368781992848E-8	TEST
// get meta's from <hibernate-mapping>	WITHOUT_CLASSIFICATION	0.999997285734759	WITHOUT_CLASSIFICATION	2.7142652410280732E-6	TEST
// get meta's from <class>	WITHOUT_CLASSIFICATION	0.9999985436389665	WITHOUT_CLASSIFICATION	1.4563610334893847E-6	TEST
// DB-OBJECTNAME	WITHOUT_CLASSIFICATION	0.9999813333936337	WITHOUT_CLASSIFICATION	1.866660636630394E-5	TEST
// MUTABLE	WITHOUT_CLASSIFICATION	0.9999917024457786	WITHOUT_CLASSIFICATION	8.297554221375809E-6	TEST
// WHERE	WITHOUT_CLASSIFICATION	0.9999855847902339	WITHOUT_CLASSIFICATION	1.4415209766095426E-5	TEST
// CHECK	WITHOUT_CLASSIFICATION	0.9999908814580264	WITHOUT_CLASSIFICATION	9.118541973694237E-6	TEST
// POLYMORPHISM	WITHOUT_CLASSIFICATION	0.9999861138754419	WITHOUT_CLASSIFICATION	1.3886124558090405E-5	TEST
// TODO:	WITHOUT_CLASSIFICATION	0.9996489118907158	WITHOUT_CLASSIFICATION	3.510881092842803E-4	TEST
// ID	WITHOUT_CLASSIFICATION	0.9999725108706057	WITHOUT_CLASSIFICATION	2.748912939439152E-5	TEST
// VERSION / TIMESTAMP	WITHOUT_CLASSIFICATION	0.9999773955625146	WITHOUT_CLASSIFICATION	2.260443748529547E-5	TEST
// DISCRIMINATOR	WITHOUT_CLASSIFICATION	0.999973543662616	WITHOUT_CLASSIFICATION	2.645633738391752E-5	TEST
// Primary key constraint	WITHOUT_CLASSIFICATION	0.9999996703439988	WITHOUT_CLASSIFICATION	3.296560011340355E-7	TEST
// this is either a <version/> tag with no type attribute, // or a <timestamp/> tag	WITHOUT_CLASSIFICATION	0.9999959264027835	WITHOUT_CLASSIFICATION	4.073597216522178E-6	TEST
// for version properties marked as being generated, make sure they are "always" // generated; aka, "insert" is invalid; this is dis-allowed by the DTD, // but just to make sure...	WITHOUT_CLASSIFICATION	0.9999992910183728	WITHOUT_CLASSIFICATION	7.089816271280989E-7	TEST
// DISCRIMINATOR	WITHOUT_CLASSIFICATION	0.999973543662616	WITHOUT_CLASSIFICATION	2.645633738391752E-5	TEST
// ( (Column) discrim.getColumnIterator().next() ).setType(type);	WITHOUT_CLASSIFICATION	0.9999996997255135	WITHOUT_CLASSIFICATION	3.0027448655703697E-7	TEST
// go ahead and set the lazy here, since pojo.proxy can override it.	WITHOUT_CLASSIFICATION	0.9999997650775521	WITHOUT_CLASSIFICATION	2.3492244788982285E-7	TEST
// DYNAMIC UPDATE	WITHOUT_CLASSIFICATION	0.9999792004833598	WITHOUT_CLASSIFICATION	2.079951664021639E-5	TEST
// IMPORT	WITHOUT_CLASSIFICATION	0.9999776307201157	WITHOUT_CLASSIFICATION	2.2369279884308498E-5	TEST
// BATCH SIZE	WITHOUT_CLASSIFICATION	0.9999886562089381	WITHOUT_CLASSIFICATION	1.1343791061946088E-5	TEST
// SELECT BEFORE UPDATE	WITHOUT_CLASSIFICATION	0.9999853953343852	WITHOUT_CLASSIFICATION	1.4604665614830115E-5	TEST
// OPTIMISTIC LOCK MODE	WITHOUT_CLASSIFICATION	0.999977078062149	WITHOUT_CLASSIFICATION	2.2921937850955326E-5	TEST
// PERSISTER	WITHOUT_CLASSIFICATION	0.9999847202624272	WITHOUT_CLASSIFICATION	1.52797375727403E-5	TEST
// CUSTOM SQL	WITHOUT_CLASSIFICATION	0.9999799654793167	WITHOUT_CLASSIFICATION	2.0034520683374365E-5	TEST
// get meta's from <subclass>	WITHOUT_CLASSIFICATION	0.9999988856899841	WITHOUT_CLASSIFICATION	1.1143100158744405E-6	TEST
// properties	WITHOUT_CLASSIFICATION	0.9999954513031626	WITHOUT_CLASSIFICATION	4.5486968373729135E-6	TEST
// joined subclasses	WITHOUT_CLASSIFICATION	0.9999980995442401	WITHOUT_CLASSIFICATION	1.9004557597775119E-6	TEST
// KEY	WITHOUT_CLASSIFICATION	0.999987090740685	WITHOUT_CLASSIFICATION	1.2909259314975125E-5	TEST
// CHECK	WITHOUT_CLASSIFICATION	0.9999908814580264	WITHOUT_CLASSIFICATION	9.118541973694237E-6	TEST
// CUSTOM SQL	WITHOUT_CLASSIFICATION	0.9999799654793167	WITHOUT_CLASSIFICATION	2.0034520683374365E-5	TEST
// properties	WITHOUT_CLASSIFICATION	0.9999954513031626	WITHOUT_CLASSIFICATION	4.5486968373729135E-6	TEST
// KEY	WITHOUT_CLASSIFICATION	0.999987090740685	WITHOUT_CLASSIFICATION	1.2909259314975125E-5	TEST
// model.getKey().setType( new Type( model.getIdentifier() ) );	WITHOUT_CLASSIFICATION	0.999999021308681	WITHOUT_CLASSIFICATION	9.786913190299037E-7	TEST
// TABLENAME	WITHOUT_CLASSIFICATION	0.9999753108276977	WITHOUT_CLASSIFICATION	2.468917230221804E-5	TEST
// join.getKey().setType( new Type( lazz.getIdentifier() ) );	WITHOUT_CLASSIFICATION	0.9999994011759847	WITHOUT_CLASSIFICATION	5.988240152576564E-7	TEST
// PROPERTIES	WITHOUT_CLASSIFICATION	0.9999831940962501	WITHOUT_CLASSIFICATION	1.6805903749899836E-5	TEST
// COLUMN(S)	WITHOUT_CLASSIFICATION	0.999980119326928	WITHOUT_CLASSIFICATION	1.9880673071945342E-5	TEST
// column index	WITHOUT_CLASSIFICATION	0.9999990654724716	WITHOUT_CLASSIFICATION	9.345275283095908E-7	TEST
//column unique-key	WITHOUT_CLASSIFICATION	0.9999869145444866	WITHOUT_CLASSIFICATION	1.3085455513472271E-5	TEST
// automatically makes a column with the default name if none is specifed by XML	WITHOUT_CLASSIFICATION	0.9999983904345259	WITHOUT_CLASSIFICATION	1.6095654742352904E-6	TEST
// for an any	WITHOUT_CLASSIFICATION	0.9999932341161308	WITHOUT_CLASSIFICATION	6.765883869156148E-6	TEST
// insertable simply because that is the user did not specify // anything; just override it	WITHOUT_CLASSIFICATION	0.9999997071675508	WITHOUT_CLASSIFICATION	2.928324491745034E-7	TEST
// the user specifically supplied insert="true", // which constitutes an illegal combo	WITHOUT_CLASSIFICATION	0.9999950545326804	WITHOUT_CLASSIFICATION	4.945467319598896E-6	TEST
// properties generated on update can never be updateable...	WITHOUT_CLASSIFICATION	0.9999985229233426	WITHOUT_CLASSIFICATION	1.4770766573709402E-6	TEST
// updateable only because the user did not specify  // anything; just override it	WITHOUT_CLASSIFICATION	0.9999998224885888	WITHOUT_CLASSIFICATION	1.7751141118684723E-7	TEST
// the user specifically supplied update="true", // which constitutes an illegal combo	WITHOUT_CLASSIFICATION	0.9999902785436254	WITHOUT_CLASSIFICATION	9.721456374470265E-6	TEST
// ROLENAME	WITHOUT_CLASSIFICATION	0.9999839098380603	WITHOUT_CLASSIFICATION	1.6090161939730712E-5	TEST
// FETCH STRATEGY	WITHOUT_CLASSIFICATION	0.9999912862587322	WITHOUT_CLASSIFICATION	8.713741267790117E-6	TEST
// TABLE	WITHOUT_CLASSIFICATION	0.9999876052270495	WITHOUT_CLASSIFICATION	1.23947729503896E-5	TEST
//tableName = mappings.getNamingStrategy().propertyToTableName( className, path );	WITHOUT_CLASSIFICATION	0.9999940857334801	WITHOUT_CLASSIFICATION	5.914266519865358E-6	TEST
// SORT	WITHOUT_CLASSIFICATION	0.9999864467534487	WITHOUT_CLASSIFICATION	1.3553246551308977E-5	TEST
// CUSTOM SQL	WITHOUT_CLASSIFICATION	0.9999799654793167	WITHOUT_CLASSIFICATION	2.0034520683374365E-5	TEST
// unsorted, natural, comparator.class.name	WITHOUT_CLASSIFICATION	0.9999989121026114	WITHOUT_CLASSIFICATION	1.0878973885869399E-6	TEST
// ORPHAN DELETE (used for programmer error detection)	WITHOUT_CLASSIFICATION	0.9999993798718325	WITHOUT_CLASSIFICATION	6.201281675804896E-7	TEST
// set up second pass	WITHOUT_CLASSIFICATION	0.9999976683500532	WITHOUT_CLASSIFICATION	2.331649946779918E-6	TEST
// an "embedded" component (composite ids and unique) // note that this does not handle nested components	WITHOUT_CLASSIFICATION	0.9999743007986811	WITHOUT_CLASSIFICATION	2.5699201318857095E-5	TEST
// a nested composite element	WITHOUT_CLASSIFICATION	0.9999952226812894	WITHOUT_CLASSIFICATION	4.777318710627282E-6	TEST
// for an any // we will have to use reflection	WITHOUT_CLASSIFICATION	0.9999996081352177	WITHOUT_CLASSIFICATION	3.9186478228798194E-7	TEST
//NOTE SPECIAL CASE: // one-to-one constrained=false cannot be proxied, // so default to join and non-lazy	WITHOUT_CLASSIFICATION	0.9999999310126485	WITHOUT_CLASSIFICATION	6.898735151018111E-8	TEST
// use old (HB 2.1) defaults if outer-join is specified	WITHOUT_CLASSIFICATION	0.9999977932362185	WITHOUT_CLASSIFICATION	2.206763781595586E-6	TEST
//lazy = !join;	WITHOUT_CLASSIFICATION	0.9999842700981664	WITHOUT_CLASSIFICATION	1.572990183367324E-5	TEST
// GENERATOR	WITHOUT_CLASSIFICATION	0.9999784213146514	WITHOUT_CLASSIFICATION	2.157868534860027E-5	TEST
// ID UNSAVED-VALUE	WITHOUT_CLASSIFICATION	0.999971976470001	WITHOUT_CLASSIFICATION	2.8023529999007107E-5	TEST
// VERSION UNSAVED-VALUE	WITHOUT_CLASSIFICATION	0.9999796162694159	WITHOUT_CLASSIFICATION	2.0383730584097645E-5	TEST
// not necessarily a *unique* property reference	WITHOUT_CLASSIFICATION	0.9999998561009813	WITHOUT_CLASSIFICATION	1.4389901863959627E-7	TEST
// ( (Column) ( (SimpleValue) ic.getIndex() ).getColumnIterator().next() // ).setNullable(false);	WITHOUT_CLASSIFICATION	0.9999997423615251	WITHOUT_CLASSIFICATION	2.576384749106E-7	TEST
// contained elements:	WITHOUT_CLASSIFICATION	0.9999993239588632	WITHOUT_CLASSIFICATION	6.760411367848519E-7	TEST
// for non-inverse one-to-many, with a not-null fk, add a backref!	WITHOUT_CLASSIFICATION	0.9999998746218837	WITHOUT_CLASSIFICATION	1.2537811645400063E-7	TEST
// Bind the where	WITHOUT_CLASSIFICATION	0.999994362654874	WITHOUT_CLASSIFICATION	5.6373451260196256E-6	TEST
// Bind the order-by	WITHOUT_CLASSIFICATION	0.9999953281873378	WITHOUT_CLASSIFICATION	4.671812662177173E-6	TEST
// Bind the filters	WITHOUT_CLASSIFICATION	0.9999937688424856	WITHOUT_CLASSIFICATION	6.23115751438662E-6	TEST
// overriding inherited meta attribute. HBX-621 & HBX-793	WITHOUT_CLASSIFICATION	0.9999994729248948	WITHOUT_CLASSIFICATION	5.270751051507035E-7	TEST
// first, iterate over all elements capable of defining an extends attribute // collecting all found extends references if they cannot be resolved // against the already processed mappings.	WITHOUT_CLASSIFICATION	0.9999999860204187	WITHOUT_CLASSIFICATION	1.397958128896843E-8	TEST
// mappings might contain either the "raw" extends name (in the case of // an entity-name mapping) or a FQN (in the case of a POJO mapping).	WITHOUT_CLASSIFICATION	0.9999999693900308	WITHOUT_CLASSIFICATION	3.060996919579738E-8	TEST
//+ "_" + referencedColumnName not used for backward compatibility	WITHOUT_CLASSIFICATION	0.9999990411495189	WITHOUT_CLASSIFICATION	9.588504810752797E-7	TEST
//SessionFactory name:	WITHOUT_CLASSIFICATION	0.9999971282179005	WITHOUT_CLASSIFICATION	2.871782099411737E-6	TEST
//JDBC and connection settings:	WITHOUT_CLASSIFICATION	0.9999969316429813	WITHOUT_CLASSIFICATION	3.0683570186800504E-6	TEST
//JDBC and connection settings:	WITHOUT_CLASSIFICATION	0.9999969316429813	WITHOUT_CLASSIFICATION	3.0683570186800504E-6	TEST
//Interrogate JDBC metadata	WITHOUT_CLASSIFICATION	0.9999570555556784	WITHOUT_CLASSIFICATION	4.294444432162752E-5	TEST
// user supplied JDBC connections	WITHOUT_CLASSIFICATION	0.9999993851490638	WITHOUT_CLASSIFICATION	6.148509361904565E-7	TEST
//use dialect default properties	WITHOUT_CLASSIFICATION	0.9999967734676933	WITHOUT_CLASSIFICATION	3.226532306608435E-6	TEST
// Transaction settings:	WITHOUT_CLASSIFICATION	0.9999991240292888	WITHOUT_CLASSIFICATION	8.759707110702548E-7	TEST
//SQL Generation settings:	WITHOUT_CLASSIFICATION	0.9999983113610936	WITHOUT_CLASSIFICATION	1.6886389063096705E-6	TEST
//Query parser settings:	WITHOUT_CLASSIFICATION	0.9999950595773511	WITHOUT_CLASSIFICATION	4.9404226489194375E-6	TEST
// Second-level / query cache:	WITHOUT_CLASSIFICATION	0.999999665350588	WITHOUT_CLASSIFICATION	3.346494119271408E-7	TEST
// The cache provider is needed when we either have second-level cache enabled // or query cache enabled.  Note that useSecondLevelCache is enabled by default	WITHOUT_CLASSIFICATION	0.9999988942812962	WITHOUT_CLASSIFICATION	1.1057187037253673E-6	TEST
//SQL Exception converter:	WITHOUT_CLASSIFICATION	0.9999981057981459	WITHOUT_CLASSIFICATION	1.8942018540690187E-6	TEST
//Statistics and logging:	WITHOUT_CLASSIFICATION	0.9999784831656234	WITHOUT_CLASSIFICATION	2.1516834376621985E-5	TEST
//	WITHOUT_CLASSIFICATION	0.999928714121282	WITHOUT_CLASSIFICATION	7.128587871800795E-5	TEST
//	WITHOUT_CLASSIFICATION	0.999928714121282	WITHOUT_CLASSIFICATION	7.128587871800795E-5	TEST
//Schema export:	WITHOUT_CLASSIFICATION	0.9999967125339767	WITHOUT_CLASSIFICATION	3.2874660233286733E-6	TEST
//	WITHOUT_CLASSIFICATION	0.999928714121282	WITHOUT_CLASSIFICATION	7.128587871800795E-5	TEST
// legacy behavior, apply the bridge...	WITHOUT_CLASSIFICATION	0.9999930829003694	WITHOUT_CLASSIFICATION	6.917099630728535E-6	TEST
// maybe a concrete SQLpropertyresult type, but Map is exactly what is required at the moment	WITHOUT_CLASSIFICATION	0.9999995731980706	WITHOUT_CLASSIFICATION	4.268019293989167E-7	TEST
//if dotted and not load-collection nor return-join //regular property	WITHOUT_CLASSIFICATION	0.9999994373236963	WITHOUT_CLASSIFICATION	5.626763037703756E-7	TEST
//	WITHOUT_CLASSIFICATION	0.999928714121282	WITHOUT_CLASSIFICATION	7.128587871800795E-5	TEST
// public getters ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999745807570374	WITHOUT_CLASSIFICATION	2.5419242962680955E-5	TEST
//	WITHOUT_CLASSIFICATION	0.999928714121282	WITHOUT_CLASSIFICATION	7.128587871800795E-5	TEST
// package protected setters ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999822202024118	WITHOUT_CLASSIFICATION	1.7779797588153807E-5	TEST
//	WITHOUT_CLASSIFICATION	0.999928714121282	WITHOUT_CLASSIFICATION	7.128587871800795E-5	TEST
//	WITHOUT_CLASSIFICATION	0.999928714121282	WITHOUT_CLASSIFICATION	7.128587871800795E-5	TEST
// using local since the inheritedMetas at this point is not the correct map since it is always the empty map	WITHOUT_CLASSIFICATION	0.9999993204316268	WITHOUT_CLASSIFICATION	6.795683731348139E-7	TEST
//	WITHOUT_CLASSIFICATION	0.999928714121282	WITHOUT_CLASSIFICATION	7.128587871800795E-5	TEST
//	WITHOUT_CLASSIFICATION	0.999928714121282	WITHOUT_CLASSIFICATION	7.128587871800795E-5	TEST
//	WITHOUT_CLASSIFICATION	0.999928714121282	WITHOUT_CLASSIFICATION	7.128587871800795E-5	TEST
//	WITHOUT_CLASSIFICATION	0.999928714121282	WITHOUT_CLASSIFICATION	7.128587871800795E-5	TEST
// if doc is null, then for whatever reason, the cached file cannot be used...	WITHOUT_CLASSIFICATION	0.9999992070655555	WITHOUT_CLASSIFICATION	7.929344446427367E-7	TEST
// drop them in reverse order in case db needs it done that way...	WITHOUT_CLASSIFICATION	0.9999998781474048	WITHOUT_CLASSIFICATION	1.2185259524946802E-7	TEST
//	WITHOUT_CLASSIFICATION	0.999928714121282	WITHOUT_CLASSIFICATION	7.128587871800795E-5	TEST
// This method may be called many times!!	WITHOUT_CLASSIFICATION	0.9999925383537379	WITHOUT_CLASSIFICATION	7.461646262036321E-6	TEST
//	WITHOUT_CLASSIFICATION	0.999928714121282	WITHOUT_CLASSIFICATION	7.128587871800795E-5	TEST
//	WITHOUT_CLASSIFICATION	0.999928714121282	WITHOUT_CLASSIFICATION	7.128587871800795E-5	TEST
// found	WITHOUT_CLASSIFICATION	0.9999919399418514	WITHOUT_CLASSIFICATION	8.060058148538799E-6	TEST
// found	WITHOUT_CLASSIFICATION	0.9999919399418514	WITHOUT_CLASSIFICATION	8.060058148538799E-6	TEST
//	WITHOUT_CLASSIFICATION	0.999928714121282	WITHOUT_CLASSIFICATION	7.128587871800795E-5	TEST
//	WITHOUT_CLASSIFICATION	0.999928714121282	WITHOUT_CLASSIFICATION	7.128587871800795E-5	TEST
//<String, String>	WITHOUT_CLASSIFICATION	0.9999848570988283	WITHOUT_CLASSIFICATION	1.5142901171594702E-5	TEST
//<String, String>	WITHOUT_CLASSIFICATION	0.9999848570988283	WITHOUT_CLASSIFICATION	1.5142901171594702E-5	TEST
//+ "_" + referencedColumnName not used for backward compatibility	WITHOUT_CLASSIFICATION	0.9999990411495189	WITHOUT_CLASSIFICATION	9.588504810752797E-7	TEST
//Set USE_REFLECTION_OPTIMIZER to false to fix HHH-227	WITHOUT_CLASSIFICATION	0.9999887517965538	WITHOUT_CLASSIFICATION	1.1248203446244507E-5	TEST
//orphan delete not supported for EntityMode.DOM4J	WITHOUT_CLASSIFICATION	0.9999714957248095	WITHOUT_CLASSIFICATION	2.85042751905103E-5	TEST
//element = XMLHelper.generateDom4jElement( persister.getNodeName() );	WITHOUT_CLASSIFICATION	0.999938171025145	WITHOUT_CLASSIFICATION	6.182897485499807E-5	TEST
// intentionally empty	WITHOUT_CLASSIFICATION	0.9999979935046034	WITHOUT_CLASSIFICATION	2.006495396559204E-6	TEST
//orphan delete not supported for EntityMode.DOM4J	WITHOUT_CLASSIFICATION	0.9999714957248095	WITHOUT_CLASSIFICATION	2.85042751905103E-5	TEST
//element = XMLHelper.generateDom4jElement( persister.getNodeName() );	WITHOUT_CLASSIFICATION	0.999938171025145	WITHOUT_CLASSIFICATION	6.182897485499807E-5	TEST
//needed for SOAP libraries, etc	WITHOUT_CLASSIFICATION	0.9999850066192115	WITHOUT_CLASSIFICATION	1.4993380788367306E-5	TEST
//maintain correct duplication if loaded in a cartesian product	WITHOUT_CLASSIFICATION	0.9999992391684704	WITHOUT_CLASSIFICATION	7.608315295519874E-7	TEST
// the element has been removed from the set	WITHOUT_CLASSIFICATION	0.9999982633629931	WITHOUT_CLASSIFICATION	1.7366370068760671E-6	TEST
// the element has changed	WITHOUT_CLASSIFICATION	0.9999935432663836	WITHOUT_CLASSIFICATION	6.4567336165144085E-6	TEST
//Careful: these methods do not initialize the collection.	WITHOUT_CLASSIFICATION	0.9999995281390048	WITHOUT_CLASSIFICATION	4.7186099513879217E-7	TEST
//needed so that we remove this collection from the second-level cache	WITHOUT_CLASSIFICATION	0.999997338114685	WITHOUT_CLASSIFICATION	2.6618853149598202E-6	TEST
// override on some subclasses	WITHOUT_CLASSIFICATION	0.999999802147814	WITHOUT_CLASSIFICATION	1.9785218602050019E-7	TEST
//override on some subclasses	WITHOUT_CLASSIFICATION	0.9999991526981465	WITHOUT_CLASSIFICATION	8.473018535294879E-7	TEST
//do this bit after setting initialized to true or it will recurse	WITHOUT_CLASSIFICATION	0.9999741035221761	WITHOUT_CLASSIFICATION	2.5896477823910183E-5	TEST
// short-circuit(s) // no new elements, the old list contains only Orphans // no old elements, so no Orphans neither	WITHOUT_CLASSIFICATION	0.9999996303493774	WITHOUT_CLASSIFICATION	3.696506225322562E-7	TEST
// create the collection holding the Orphans	WITHOUT_CLASSIFICATION	0.9999993934397294	WITHOUT_CLASSIFICATION	6.065602705442199E-7	TEST
// collect EntityIdentifier(s) of the *current* elements - add them into a HashSet for fast access	WITHOUT_CLASSIFICATION	0.9999998731517298	WITHOUT_CLASSIFICATION	1.2684827014256054E-7	TEST
// iterate over the *old* list	WITHOUT_CLASSIFICATION	0.9999928429842581	WITHOUT_CLASSIFICATION	7.157015741964976E-6	TEST
/*(array==null) ? tempList.size() :*/	WITHOUT_CLASSIFICATION	0.9999777028278385	WITHOUT_CLASSIFICATION	2.2297172161532192E-5	TEST
// intentionally empty	WITHOUT_CLASSIFICATION	0.9999979935046034	WITHOUT_CLASSIFICATION	2.006495396559204E-6	TEST
/*(array==null) ? tempList.get(i) :*/	WITHOUT_CLASSIFICATION	0.9999822892105783	WITHOUT_CLASSIFICATION	1.7710789421679252E-5	TEST
//write(); -- doesn't	WITHOUT_CLASSIFICATION	0.9999808998028559	WITHOUT_CLASSIFICATION	1.9100197144121886E-5	TEST
//write(); -- doesn't	WITHOUT_CLASSIFICATION	0.9999808998028559	WITHOUT_CLASSIFICATION	1.9100197144121886E-5	TEST
// amazingly, these two will work because AbstractCollection // uses iterator() to fill the array	WITHOUT_CLASSIFICATION	0.9999998067359902	WITHOUT_CLASSIFICATION	1.93264009726124E-7	TEST
//needed for SOAP libraries, etc	WITHOUT_CLASSIFICATION	0.9999850066192115	WITHOUT_CLASSIFICATION	1.4993380788367306E-5	TEST
// finally, what it's all about...	WITHOUT_CLASSIFICATION	0.9999961115536157	WITHOUT_CLASSIFICATION	3.88844638433562E-6	TEST
// note that if we load this collection from a cartesian product // the multiplicity would be broken ... so use an idbag instead	WITHOUT_CLASSIFICATION	0.9999991970275035	WITHOUT_CLASSIFICATION	8.02972496541337E-7	TEST
// Anyway, here we implement <set> semantics for a // <one-to-many> <bag>!	WITHOUT_CLASSIFICATION	0.9999999266424422	WITHOUT_CLASSIFICATION	7.335755786693859E-8	TEST
//a shortcut if its location didn't change!	WITHOUT_CLASSIFICATION	0.9999977759829803	WITHOUT_CLASSIFICATION	2.224017019613779E-6	TEST
//search for it //note that this code is incorrect for other than one-to-many	WITHOUT_CLASSIFICATION	0.9999393956649333	WITHOUT_CLASSIFICATION	6.060433506667205E-5	TEST
//needed for SOAP libraries, etc	WITHOUT_CLASSIFICATION	0.9999850066192115	WITHOUT_CLASSIFICATION	1.4993380788367306E-5	TEST
//a shortcut if its location didn't change!	WITHOUT_CLASSIFICATION	0.9999977759829803	WITHOUT_CLASSIFICATION	2.224017019613779E-6	TEST
//search for it //note that this code is incorrect for other than one-to-many	WITHOUT_CLASSIFICATION	0.9999393956649333	WITHOUT_CLASSIFICATION	6.060433506667205E-5	TEST
/*public boolean equals(Object other) {	WITHOUT_CLASSIFICATION	0.9999953773323107	WITHOUT_CLASSIFICATION	4.622667689302488E-6	TEST
// List OPERATIONS:	WITHOUT_CLASSIFICATION	0.9999830221468151	WITHOUT_CLASSIFICATION	1.697785318484756E-5	TEST
//pad with nulls from the current last element up to the new index	WITHOUT_CLASSIFICATION	0.9999984347088426	WITHOUT_CLASSIFICATION	1.565291157317822E-6	TEST
//needed for SOAP libraries, etc	WITHOUT_CLASSIFICATION	0.9999850066192115	WITHOUT_CLASSIFICATION	1.4993380788367306E-5	TEST
//needed for SOAP libraries, etc	WITHOUT_CLASSIFICATION	0.9999850066192115	WITHOUT_CLASSIFICATION	1.4993380788367306E-5	TEST
// from Map	WITHOUT_CLASSIFICATION	0.9999946450793563	WITHOUT_CLASSIFICATION	5.354920643732014E-6	TEST
// from SortedMap	WITHOUT_CLASSIFICATION	0.999995625698044	WITHOUT_CLASSIFICATION	4.374301956021139E-6	TEST
//inject the data	WITHOUT_CLASSIFICATION	0.9999864054602523	WITHOUT_CLASSIFICATION	1.3594539747776688E-5	TEST
// cannot be instantiated	WITHOUT_CLASSIFICATION	0.9999939363835307	WITHOUT_CLASSIFICATION	6.063616469229037E-6	TEST
//default pool size 20	WITHOUT_CLASSIFICATION	0.9999938185192346	WITHOUT_CLASSIFICATION	6.18148076531238E-6	TEST
// trying via forName() first to be as close to DriverManager's semantics	WITHOUT_CLASSIFICATION	0.999997937756881	WITHOUT_CLASSIFICATION	2.0622431191060762E-6	TEST
// if debug level is enabled, then log the password, otherwise mask it	WITHOUT_CLASSIFICATION	0.9999978328477168	WITHOUT_CLASSIFICATION	2.1671522832409428E-6	TEST
// register a cleanup synch	WITHOUT_CLASSIFICATION	0.9999987141393744	WITHOUT_CLASSIFICATION	1.2858606256016336E-6	TEST
// wrap the session in the transaction-protection proxy	WITHOUT_CLASSIFICATION	0.9999996346717734	WITHOUT_CLASSIFICATION	3.653282266468895E-7	TEST
// then bind it	WITHOUT_CLASSIFICATION	0.9999841115533846	WITHOUT_CLASSIFICATION	1.5888446615395573E-5	TEST
// try to make sure we don't wrap and already wrapped session	WITHOUT_CLASSIFICATION	0.9999997329113071	WITHOUT_CLASSIFICATION	2.6708869289012047E-7	TEST
// allow these to go through the the real session no matter what	WITHOUT_CLASSIFICATION	0.9999992650959661	WITHOUT_CLASSIFICATION	7.349040338846754E-7	TEST
// limit the methods available if no transaction is active	WITHOUT_CLASSIFICATION	0.9999999169451231	WITHOUT_CLASSIFICATION	8.305487681090092E-8	TEST
// allow these (deprecated) methods to pass through	WITHOUT_CLASSIFICATION	0.9999988487401392	WITHOUT_CLASSIFICATION	1.1512598607702333E-6	TEST
// serialization ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999992377099783	WITHOUT_CLASSIFICATION	7.622900217048943E-7	TEST
// We could register the session against the transaction even though it is // not started, but we'd have no guarentee of ever getting the map // entries cleaned up (aside from spawning threads).	WITHOUT_CLASSIFICATION	0.9999998200921804	WITHOUT_CLASSIFICATION	1.7990781966855366E-7	TEST
//cannot be instantiated	WITHOUT_CLASSIFICATION	0.9999669530041531	WITHOUT_CLASSIFICATION	3.30469958468898E-5	TEST
//private String propertyName;	WITHOUT_CLASSIFICATION	0.9999951366459934	WITHOUT_CLASSIFICATION	4.863354006685652E-6	TEST
/*public PropertyProjection project() {	WITHOUT_CLASSIFICATION	0.9999975610457253	WITHOUT_CLASSIFICATION	2.43895427463418E-6	TEST
//String[] fk = StringHelper.qualify( "collection_", cp.getKeyColumnNames() );	WITHOUT_CLASSIFICATION	0.9999989777263475	WITHOUT_CLASSIFICATION	1.0222736524998213E-6	TEST
//" collection_ where " +	WITHOUT_CLASSIFICATION	0.999997206221223	WITHOUT_CLASSIFICATION	2.793778776899645E-6	TEST
//unsupported	WITHOUT_CLASSIFICATION	0.9999271545142207	WITHOUT_CLASSIFICATION	7.284548577931061E-5	TEST
//unsupported	WITHOUT_CLASSIFICATION	0.9999271545142207	WITHOUT_CLASSIFICATION	7.284548577931061E-5	TEST
//cannot be instantiated	WITHOUT_CLASSIFICATION	0.9999669530041531	WITHOUT_CLASSIFICATION	3.30469958468898E-5	TEST
//the following two lines were added to ensure that this.params is not null, which //can happen with two-deep nested subqueries	WITHOUT_CLASSIFICATION	0.9999508215606406	WITHOUT_CLASSIFICATION	4.917843935932262E-5	TEST
//with two-deep subqueries, the same alias would get generated for //both using the old method (criteriaQuery.generateSQLAlias()), so //that is now used as a fallback if the main criteria alias isn't set	WITHOUT_CLASSIFICATION	0.9999993721762003	WITHOUT_CLASSIFICATION	6.278237997568862E-7	TEST
//implicit polymorphism not supported (would need a union)	WITHOUT_CLASSIFICATION	0.9999770496587421	WITHOUT_CLASSIFICATION	2.295034125786453E-5	TEST
//pull off the last ", "	WITHOUT_CLASSIFICATION	0.9999879497482075	WITHOUT_CLASSIFICATION	1.2050251792563712E-5	TEST
//$NON-NLS-1	WITHOUT_CLASSIFICATION	0.9999487841310666	WITHOUT_CLASSIFICATION	5.1215868933380825E-5	TEST
// we have the form: trim(trimSource) //      so we trim leading and trailing spaces	WITHOUT_CLASSIFICATION	0.999999686130036	WITHOUT_CLASSIFICATION	3.1386996410946357E-7	TEST
// we have the form: trim(from trimSource). //      This is functionally equivalent to trim(trimSource)	WITHOUT_CLASSIFICATION	0.9999973201218174	WITHOUT_CLASSIFICATION	2.6798781827015193E-6	TEST
// NOT_SUPPORTED_SHOULD_USE_JDBC3_PreparedStatement.getGeneratedKeys_method	WITHOUT_CLASSIFICATION	0.9999981640005354	WITHOUT_CLASSIFICATION	1.835999464633686E-6	TEST
// potentialTrimCharacterArgIndex = 1 assumes that a // trim-specification has been specified.  we handle the // exception to that explicitly	WITHOUT_CLASSIFICATION	0.9999999166521162	WITHOUT_CLASSIFICATION	8.33478838951132E-8	TEST
// Overridden informational metadata ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999996037043624	WITHOUT_CLASSIFICATION	3.962956376501321E-7	TEST
// Oracle did add support for ANSI CASE statements in 9i	WITHOUT_CLASSIFICATION	0.9999992780587544	WITHOUT_CLASSIFICATION	7.219412455568976E-7	TEST
// the standard SQL function name is current_timestamp...	WITHOUT_CLASSIFICATION	0.9999978316099016	WITHOUT_CLASSIFICATION	2.168390098323874E-6	TEST
// Informix doesn't have a bit type	WITHOUT_CLASSIFICATION	0.9999981909683215	WITHOUT_CLASSIFICATION	1.8090316785309074E-6	TEST
// or BYTE // or TEXT? // or MONEY	WITHOUT_CLASSIFICATION	0.9999628392690318	WITHOUT_CLASSIFICATION	3.7160730968239446E-5	TEST
// strip table-owner because Informix always returns constraint names as "<table-owner>.<constraint-name>"	WITHOUT_CLASSIFICATION	0.9999999424956992	WITHOUT_CLASSIFICATION	5.750430081589898E-8	TEST
// build the map of standard ANSI SQL aggregation functions ~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999995809836729	WITHOUT_CLASSIFICATION	4.1901632712063773E-7	TEST
//pre H3.2 behavior: super.getReturnType(ct, m);	WITHOUT_CLASSIFICATION	0.9999975764932862	WITHOUT_CLASSIFICATION	2.423506713636021E-6	TEST
// finally use the sqltype if == on Hibernate types did not find a match.	WITHOUT_CLASSIFICATION	0.9999981134262379	WITHOUT_CLASSIFICATION	1.8865737620812213E-6	TEST
//because numeric can be anything	WITHOUT_CLASSIFICATION	0.9999988431345933	WITHOUT_CLASSIFICATION	1.1568654066119506E-6	TEST
// constructors and factory methods ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999996444586797	WITHOUT_CLASSIFICATION	3.555413203098753E-7	TEST
// standard sql92 functions (can be overridden by subclasses)	WITHOUT_CLASSIFICATION	0.9999997402951745	WITHOUT_CLASSIFICATION	2.5970482553783904E-7	TEST
//map second/minute/hour/day/month/year to ANSI extract(), override on subclasses	WITHOUT_CLASSIFICATION	0.9999998375629436	WITHOUT_CLASSIFICATION	1.6243705645917302E-7	TEST
// register hibernate types for default use in scalar sqlquery type auto detection	WITHOUT_CLASSIFICATION	0.9999996689688709	WITHOUT_CLASSIFICATION	3.310311289886643E-7	TEST
// database type mapping support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999996412837514	WITHOUT_CLASSIFICATION	3.587162485352235E-7	TEST
// hibernate type mapping support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999978082363036	WITHOUT_CLASSIFICATION	2.191763696351695E-6	TEST
// keyword support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999895548503835	WITHOUT_CLASSIFICATION	1.0445149616530566E-5	TEST
// native identifier generatiion ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999989852470011	WITHOUT_CLASSIFICATION	1.014752998836763E-6	TEST
// IDENTITY support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999637337869939	WITHOUT_CLASSIFICATION	3.6266213006147146E-5	TEST
// SEQUENCE support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999873207476557	WITHOUT_CLASSIFICATION	1.2679252344336951E-5	TEST
// GUID support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999818003754307	WITHOUT_CLASSIFICATION	1.8199624569282075E-5	TEST
// limit/offset support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999944870870978	WITHOUT_CLASSIFICATION	5.51291290223984E-6	TEST
// by default we report no support	WITHOUT_CLASSIFICATION	0.999999544073591	WITHOUT_CLASSIFICATION	4.5592640903792027E-7	TEST
// by default we report no support for NOWAIT lock semantics	WITHOUT_CLASSIFICATION	0.9999994650855925	WITHOUT_CLASSIFICATION	5.349144074901226E-7	TEST
// table support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999965950712123	WITHOUT_CLASSIFICATION	3.4049287877780202E-6	TEST
// temporary table support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999975161025978	WITHOUT_CLASSIFICATION	2.483897402176115E-6	TEST
// callable statement support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999991263546034	WITHOUT_CLASSIFICATION	8.736453967222895E-7	TEST
// current timestamp support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999951605105982	WITHOUT_CLASSIFICATION	4.839489401849252E-6	TEST
// SQLException support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999992385666047	WITHOUT_CLASSIFICATION	7.614333954516357E-7	TEST
// miscellaneous support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999987398080078	WITHOUT_CLASSIFICATION	1.2601919922693048E-6	TEST
// identifier quoting support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999975415539482	WITHOUT_CLASSIFICATION	2.4584460518949673E-6	TEST
// DDL support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999841726010417	WITHOUT_CLASSIFICATION	1.5827398958392563E-5	TEST
// grrr... for differentiation of mysql storage engines	WITHOUT_CLASSIFICATION	0.9999998284815483	WITHOUT_CLASSIFICATION	1.7151845174368498E-7	TEST
// Informational metadata ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999983712738809	WITHOUT_CLASSIFICATION	1.6287261190527172E-6	TEST
// return false here, as most databases do not properly support this construct...	WITHOUT_CLASSIFICATION	0.9999996670989547	WITHOUT_CLASSIFICATION	3.329010452615275E-7	TEST
// Mckoi has no known variation of a "SELECT ... FOR UPDATE" syntax...	WITHOUT_CLASSIFICATION	0.9999999350517456	WITHOUT_CLASSIFICATION	6.494825443060813E-8	TEST
// Oracle8 and previous define only a "DATE" type which //      is used to represent all aspects of date/time	WITHOUT_CLASSIFICATION	0.9999998140346372	WITHOUT_CLASSIFICATION	1.8596536272838258E-7	TEST
//starts with 1, implicitly	WITHOUT_CLASSIFICATION	0.9999676443256275	WITHOUT_CLASSIFICATION	3.235567437257093E-5	TEST
//" cascade";	WITHOUT_CLASSIFICATION	0.9999898987879688	WITHOUT_CLASSIFICATION	1.0101212031124643E-5	TEST
//trim off the length/precision/scale	WITHOUT_CLASSIFICATION	0.9999979682668116	WITHOUT_CLASSIFICATION	2.0317331883336218E-6	TEST
/*public boolean dropTemporaryTableAfterUse() {	WITHOUT_CLASSIFICATION	0.9999970592330673	WITHOUT_CLASSIFICATION	2.9407669326935135E-6	TEST
// CHECK VIOLATION	WITHOUT_CLASSIFICATION	0.9999882790120368	WITHOUT_CLASSIFICATION	1.1720987963149426E-5	TEST
// UNIQUE VIOLATION	WITHOUT_CLASSIFICATION	0.9999826275524308	WITHOUT_CLASSIFICATION	1.737244756912926E-5	TEST
// FOREIGN KEY VIOLATION	WITHOUT_CLASSIFICATION	0.999985846437453	WITHOUT_CLASSIFICATION	1.4153562546948257E-5	TEST
// Overridden informational metadata ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999996037043624	WITHOUT_CLASSIFICATION	3.962956376501321E-7	TEST
// NOT NULL VIOLATION	WITHOUT_CLASSIFICATION	0.9998392709449612	WITHOUT_CLASSIFICATION	1.607290550389312E-4	TEST
// ALL OTHER	WITHOUT_CLASSIFICATION	0.9999834513104576	WITHOUT_CLASSIFICATION	1.654868954242535E-5	TEST
// Register the type of the out param - PostgreSQL uses Types.OTHER	WITHOUT_CLASSIFICATION	0.9999963226440252	WITHOUT_CLASSIFICATION	3.6773559748017255E-6	TEST
// seems to not really... //	WITHOUT_CLASSIFICATION	0.9999991087338603	WITHOUT_CLASSIFICATION	8.912661397920983E-7	TEST
// seems to have spotty LOB suppport	WITHOUT_CLASSIFICATION	0.9999969244007209	WITHOUT_CLASSIFICATION	3.0755992791177324E-6	TEST
// HHH-2300	WITHOUT_CLASSIFICATION	0.9999858453563066	WITHOUT_CLASSIFICATION	1.4154643693331867E-5	TEST
// ignore (probably H2 not in the classpath)	WITHOUT_CLASSIFICATION	0.9999997209125302	WITHOUT_CLASSIFICATION	2.790874698061527E-7	TEST
// Numeric Functions ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999971997311079	WITHOUT_CLASSIFICATION	2.800268892062855E-6	TEST
// String Functions ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999987648335831	WITHOUT_CLASSIFICATION	1.235166416879321E-6	TEST
// Time and Date Functions ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999958814667478	WITHOUT_CLASSIFICATION	4.118533252153353E-6	TEST
// System Functions ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999959001485886	WITHOUT_CLASSIFICATION	4.099851411316064E-6	TEST
// not null is implicit	WITHOUT_CLASSIFICATION	0.9999953828006766	WITHOUT_CLASSIFICATION	4.617199323421143E-6	TEST
// 23000: Check constraint violation: {0} // 23001: Unique index or primary key violation: {0}	WITHOUT_CLASSIFICATION	0.9999999858543791	WITHOUT_CLASSIFICATION	1.4145620929575017E-8	TEST
// Display the dialect version.	WITHOUT_CLASSIFICATION	0.9999984794756619	WITHOUT_CLASSIFICATION	1.520524338115014E-6	TEST
// The RDMS concat() function only supports 2 parameters	WITHOUT_CLASSIFICATION	0.9999981134591279	WITHOUT_CLASSIFICATION	1.8865408720382095E-6	TEST
// Dialect method overrides ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999983393992248	WITHOUT_CLASSIFICATION	1.660600775261471E-6	TEST
// Original Dialect.java returns " for update";	WITHOUT_CLASSIFICATION	0.9999979939169462	WITHOUT_CLASSIFICATION	2.0060830537947286E-6	TEST
// Verify the state of this new method in Hibernate 3.0 Dialect.java	WITHOUT_CLASSIFICATION	0.9999992891264787	WITHOUT_CLASSIFICATION	7.108735212100076E-7	TEST
// Origial Dialect.java returns true;	WITHOUT_CLASSIFICATION	0.9999988223458486	WITHOUT_CLASSIFICATION	1.1776541514363018E-6	TEST
// The keyword used to specify a nullable column.	WITHOUT_CLASSIFICATION	0.9999998721367743	WITHOUT_CLASSIFICATION	1.2786322571721592E-7	TEST
// *** Sequence methods - start. The RDMS dialect needs these	WITHOUT_CLASSIFICATION	0.9999995274815094	WITHOUT_CLASSIFICATION	4.7251849057903906E-7	TEST
// methods to make it possible to use the Native Id generator	WITHOUT_CLASSIFICATION	0.9999995496498795	WITHOUT_CLASSIFICATION	4.503501204597433E-7	TEST
// The where clause was added to eliminate this statement from Brute Force Searches.	WITHOUT_CLASSIFICATION	0.9999992204562527	WITHOUT_CLASSIFICATION	7.795437473282996E-7	TEST
// *** Sequence methods - end	WITHOUT_CLASSIFICATION	0.9999998585150666	WITHOUT_CLASSIFICATION	1.4148493343221936E-7	TEST
// Overridden informational metadata ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999996037043624	WITHOUT_CLASSIFICATION	3.962956376501321E-7	TEST
//starts with 1, implicitly	WITHOUT_CLASSIFICATION	0.9999676443256275	WITHOUT_CLASSIFICATION	3.235567437257093E-5	TEST
// We must return a valid RDMS/RSA command from this method to // prevent RDMS/RSA from issuing *ERROR 400	WITHOUT_CLASSIFICATION	0.9999998192130672	WITHOUT_CLASSIFICATION	1.807869327880036E-7	TEST
// Used with DROP TABLE to delete all records in the table.	WITHOUT_CLASSIFICATION	0.9999993175247809	WITHOUT_CLASSIFICATION	6.824752190094748E-7	TEST
// RDMS supports the UNION ALL clause.	WITHOUT_CLASSIFICATION	0.9999938199112055	WITHOUT_CLASSIFICATION	6.180088794507677E-6	TEST
// RDMS has no known variation of a "SELECT ... FOR UPDATE" syntax...	WITHOUT_CLASSIFICATION	0.9999997157544102	WITHOUT_CLASSIFICATION	2.842455898657549E-7	TEST
// Multi-param dialect functions...	WITHOUT_CLASSIFICATION	0.999999621126375	WITHOUT_CLASSIFICATION	3.788736251122845E-7	TEST
// function templates	WITHOUT_CLASSIFICATION	0.9999973567418965	WITHOUT_CLASSIFICATION	2.643258103554497E-6	TEST
//not null is implicit	WITHOUT_CLASSIFICATION	0.9999751653524427	WITHOUT_CLASSIFICATION	2.483464755736907E-5	TEST
// this assumes schema support, which is present in 1.8.0 and later...	WITHOUT_CLASSIFICATION	0.9999962461840597	WITHOUT_CLASSIFICATION	3.7538159402839104E-6	TEST
// HSQLDB only supports READ_UNCOMMITTED transaction isolation	WITHOUT_CLASSIFICATION	0.9999992366953111	WITHOUT_CLASSIFICATION	7.633046889928303E-7	TEST
// Multi-param string dialect functions...	WITHOUT_CLASSIFICATION	0.9999998139882939	WITHOUT_CLASSIFICATION	1.8601170605631496E-7	TEST
// Multi-param numeric dialect functions...	WITHOUT_CLASSIFICATION	0.9999998154350508	WITHOUT_CLASSIFICATION	1.845649492841356E-7	TEST
// Multi-param date dialect functions...	WITHOUT_CLASSIFICATION	0.9999994878766794	WITHOUT_CLASSIFICATION	5.121233206797292E-7	TEST
// simple nullability constraint	WITHOUT_CLASSIFICATION	0.9999998803094668	WITHOUT_CLASSIFICATION	1.1969053311367093E-7	TEST
// Overridden informational metadata ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999996037043624	WITHOUT_CLASSIFICATION	3.962956376501321E-7	TEST
// Overridden informational metadata ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999996037043624	WITHOUT_CLASSIFICATION	3.962956376501321E-7	TEST
// not final-static to avoid possible classcast exceptions if using different oracle drivers.	WITHOUT_CLASSIFICATION	0.9999999865554206	WITHOUT_CLASSIFICATION	1.3444579411737568E-8	TEST
//	WITHOUT_CLASSIFICATION	0.999928714121282	WITHOUT_CLASSIFICATION	7.128587871800795E-5	TEST
// TimesTen has no BLOB/CLOB support, but these types may be suitable  // for some applications. The length is limited to 4 million bytes.	WITHOUT_CLASSIFICATION	0.9999991859908832	WITHOUT_CLASSIFICATION	8.140091167174971E-7	TEST
// new methods in dialect3	WITHOUT_CLASSIFICATION	0.9999997612862905	WITHOUT_CLASSIFICATION	2.3871370950113736E-7	TEST
/*public boolean supportsForUpdateNowait() {	WITHOUT_CLASSIFICATION	0.9999864124524915	WITHOUT_CLASSIFICATION	1.358754750832861E-5	TEST
// TimesTen has no known variation of a "SELECT ... FOR UPDATE" syntax...	WITHOUT_CLASSIFICATION	0.9999998912479865	WITHOUT_CLASSIFICATION	1.0875201350683244E-7	TEST
// iterate entries ordered by capacity to find first fit	WITHOUT_CLASSIFICATION	0.9999934235842145	WITHOUT_CLASSIFICATION	6.576415785397455E-6	TEST
// add new ordered map	WITHOUT_CLASSIFICATION	0.9999989378815262	WITHOUT_CLASSIFICATION	1.0621184738734114E-6	TEST
//	WITHOUT_CLASSIFICATION	0.999928714121282	WITHOUT_CLASSIFICATION	7.128587871800795E-5	TEST
// Overridden informational metadata ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999996037043624	WITHOUT_CLASSIFICATION	3.962956376501321E-7	TEST
//	WITHOUT_CLASSIFICATION	0.999928714121282	WITHOUT_CLASSIFICATION	7.128587871800795E-5	TEST
// sql server just returns automatically	WITHOUT_CLASSIFICATION	0.999999320096754	WITHOUT_CLASSIFICATION	6.799032460407313E-7	TEST
//	WITHOUT_CLASSIFICATION	0.999928714121282	WITHOUT_CLASSIFICATION	7.128587871800795E-5	TEST
//registerColumnType data types	WITHOUT_CLASSIFICATION	0.9999896660651828	WITHOUT_CLASSIFICATION	1.0333934817194534E-5	TEST
// hibernate seems to ignore this type...	WITHOUT_CLASSIFICATION	0.9999936714838019	WITHOUT_CLASSIFICATION	6.328516198067719E-6	TEST
// IBID for current_time and current_date	WITHOUT_CLASSIFICATION	0.9999961986717746	WITHOUT_CLASSIFICATION	3.8013282253063745E-6	TEST
// Tell hibernate to use getBytes instead of getBinaryStream	WITHOUT_CLASSIFICATION	0.9999928664099131	WITHOUT_CLASSIFICATION	7.133590086906869E-6	TEST
// No batch statements	WITHOUT_CLASSIFICATION	0.9999951262587001	WITHOUT_CLASSIFICATION	4.8737412999139905E-6	TEST
/*	WITHOUT_CLASSIFICATION	0.9999244183183397	WITHOUT_CLASSIFICATION	7.558168166027218E-5	TEST
//no pointbase BIT	WITHOUT_CLASSIFICATION	0.9999961361175232	WITHOUT_CLASSIFICATION	3.863882476793264E-6	TEST
//no pointbase TINYINT	WITHOUT_CLASSIFICATION	0.9999929767823582	WITHOUT_CLASSIFICATION	7.023217641793505E-6	TEST
// Pointbase has no known variation of a "SELECT ... FOR UPDATE" syntax...	WITHOUT_CLASSIFICATION	0.9999999714553679	WITHOUT_CLASSIFICATION	2.8544632039486493E-8	TEST
//starts with 1, implicitly	WITHOUT_CLASSIFICATION	0.9999676443256275	WITHOUT_CLASSIFICATION	3.235567437257093E-5	TEST
// The current_timestamp is more accurate, but only known to be supported // in SQL Server 7.0 and later (i.e., Sybase not known to support it at all)	WITHOUT_CLASSIFICATION	0.9999992707876317	WITHOUT_CLASSIFICATION	7.292123681813769E-7	TEST
// SQL Server (at least up through 2005) does not support defining // cascade delete constraints which can circel back to the mutating // table	WITHOUT_CLASSIFICATION	0.9999999905423886	WITHOUT_CLASSIFICATION	9.457611329753258E-9	TEST
// here assume SQLServer2005 using snapshot isolation, which does not have this problem	WITHOUT_CLASSIFICATION	0.9999997896588724	WITHOUT_CLASSIFICATION	2.1034112771427054E-7	TEST
//	WITHOUT_CLASSIFICATION	0.999928714121282	WITHOUT_CLASSIFICATION	7.128587871800795E-5	TEST
//	WITHOUT_CLASSIFICATION	0.999928714121282	WITHOUT_CLASSIFICATION	7.128587871800795E-5	TEST
//	WITHOUT_CLASSIFICATION	0.999928714121282	WITHOUT_CLASSIFICATION	7.128587871800795E-5	TEST
//starts with 1, implicitly	WITHOUT_CLASSIFICATION	0.9999676443256275	WITHOUT_CLASSIFICATION	3.235567437257093E-5	TEST
/* package-private */	WITHOUT_CLASSIFICATION	0.9999965877074806	WITHOUT_CLASSIFICATION	3.412292519405248E-6	TEST
// sql server just returns automatically	WITHOUT_CLASSIFICATION	0.999999320096754	WITHOUT_CLASSIFICATION	6.799032460407313E-7	TEST
//Sybase BIT type does not support null values	WITHOUT_CLASSIFICATION	0.9999959601095187	WITHOUT_CLASSIFICATION	4.039890481211299E-6	TEST
//	WITHOUT_CLASSIFICATION	0.999928714121282	WITHOUT_CLASSIFICATION	7.128587871800795E-5	TEST
// Overridden informational metadata ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999996037043624	WITHOUT_CLASSIFICATION	3.962956376501321E-7	TEST
//	WITHOUT_CLASSIFICATION	0.999928714121282	WITHOUT_CLASSIFICATION	7.128587871800795E-5	TEST
//not null ... (start with 1) is implicit	WITHOUT_CLASSIFICATION	0.9999419021674654	WITHOUT_CLASSIFICATION	5.80978325346967E-5	TEST
// Overridden informational metadata ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999996037043624	WITHOUT_CLASSIFICATION	3.962956376501321E-7	TEST
// Oracle driver reports to support getGeneratedKeys(), but they only // support the version taking an array of the names of the columns to // be returned (via its RETURNING clause).  No other driver seems to // support this overloaded version.	WITHOUT_CLASSIFICATION	0.9999999315507304	WITHOUT_CLASSIFICATION	6.844926960986286E-8	TEST
// Multi-param string dialect functions...	WITHOUT_CLASSIFICATION	0.9999998139882939	WITHOUT_CLASSIFICATION	1.8601170605631496E-7	TEST
// Multi-param numeric dialect functions...	WITHOUT_CLASSIFICATION	0.9999998154350508	WITHOUT_CLASSIFICATION	1.845649492841356E-7	TEST
// Multi-param date dialect functions...	WITHOUT_CLASSIFICATION	0.9999994878766794	WITHOUT_CLASSIFICATION	5.121233206797292E-7	TEST
// add another (inner) nested select // add the main query // close off the inner nested select	WITHOUT_CLASSIFICATION	0.9999973846637049	WITHOUT_CLASSIFICATION	2.6153362950579504E-6	TEST
// add the main query	WITHOUT_CLASSIFICATION	0.9999986499259675	WITHOUT_CLASSIFICATION	1.3500740325565127E-6	TEST
//add the restriction to the outer select	WITHOUT_CLASSIFICATION	0.99999058145822	WITHOUT_CLASSIFICATION	9.41854177996992E-6	TEST
// This assumes you will want to ignore any update counts 	WITHOUT_CLASSIFICATION	0.9999960077395889	WITHOUT_CLASSIFICATION	3.992260411081914E-6	TEST
// You may still have other ResultSets or update counts left to process here  // but you can't do it now or the ResultSet you just got will be closed 	WITHOUT_CLASSIFICATION	0.9999990036894271	WITHOUT_CLASSIFICATION	9.963105728812521E-7	TEST
// Overridden informational metadata ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999996037043624	WITHOUT_CLASSIFICATION	3.962956376501321E-7	TEST
//starts with 1, implicitly	WITHOUT_CLASSIFICATION	0.9999676443256275	WITHOUT_CLASSIFICATION	3.235567437257093E-5	TEST
// simple nullability constraint	WITHOUT_CLASSIFICATION	0.9999998803094668	WITHOUT_CLASSIFICATION	1.1969053311367093E-7	TEST
// not final-static to avoid possible classcast exceptions if using different oracle drivers.	WITHOUT_CLASSIFICATION	0.9999999865554206	WITHOUT_CLASSIFICATION	1.3444579411737568E-8	TEST
//	WITHOUT_CLASSIFICATION	0.999928714121282	WITHOUT_CLASSIFICATION	7.128587871800795E-5	TEST
// features which change between 8i, 9i, and 10g ~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999907411887886	WITHOUT_CLASSIFICATION	9.258811211480102E-6	TEST
// features which remain constant across 8i, 9i, and 10g ~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.999999317482371	WITHOUT_CLASSIFICATION	6.825176289727701E-7	TEST
// binary %Stream // character %Stream	WITHOUT_CLASSIFICATION	0.9999964591711291	WITHOUT_CLASSIFICATION	3.54082887088753E-6	TEST
//getDefaultProperties().setProperty(Environment.STATEMENT_BATCH_SIZE, NO_BATCH);	WITHOUT_CLASSIFICATION	0.9999982585694254	WITHOUT_CLASSIFICATION	1.741430574706226E-6	TEST
// hibernate impelemnts cast in Dialect.java	WITHOUT_CLASSIFICATION	0.9999981736274327	WITHOUT_CLASSIFICATION	1.8263725672588015E-6	TEST
// aggregate functions shouldn't be registered, right? //registerFunction( "list", new StandardSQLFunction("list",Hibernate.STRING) ); // stopped on $list	WITHOUT_CLASSIFICATION	0.9999997013474874	WITHOUT_CLASSIFICATION	2.986525126702624E-7	TEST
// DDL support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999841726010417	WITHOUT_CLASSIFICATION	1.5827398958392563E-5	TEST
// below is for Cache' that don't have str in 2007.1 there is str and we register str directly	WITHOUT_CLASSIFICATION	0.9999957588124052	WITHOUT_CLASSIFICATION	4.241187594818024E-6	TEST
// note that %string is deprecated	WITHOUT_CLASSIFICATION	0.9999870702303636	WITHOUT_CLASSIFICATION	1.292976963629022E-5	TEST
// %upper is deprecated	WITHOUT_CLASSIFICATION	0.999992970556713	WITHOUT_CLASSIFICATION	7.029443287040636E-6	TEST
// The syntax used to add a foreign key constraint to a table.	WITHOUT_CLASSIFICATION	0.9999997792787445	WITHOUT_CLASSIFICATION	2.207212554010458E-7	TEST
// identifier-commalist	WITHOUT_CLASSIFICATION	0.9999993339020185	WITHOUT_CLASSIFICATION	6.66097981483964E-7	TEST
// IDENTITY support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999637337869939	WITHOUT_CLASSIFICATION	3.6266213006147146E-5	TEST
// SEQUENCE support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999873207476557	WITHOUT_CLASSIFICATION	1.2679252344336951E-5	TEST
// temporary table support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999975161025978	WITHOUT_CLASSIFICATION	2.483897402176115E-6	TEST
// identifier-commalist	WITHOUT_CLASSIFICATION	0.9999993339020185	WITHOUT_CLASSIFICATION	6.66097981483964E-7	TEST
// The syntax used to add a column to a table	WITHOUT_CLASSIFICATION	0.9999997363275049	WITHOUT_CLASSIFICATION	2.63672495085603E-7	TEST
// Completely optional cascading drop clause.	WITHOUT_CLASSIFICATION	0.9999998648057583	WITHOUT_CLASSIFICATION	1.351942415987048E-7	TEST
// lock acquisition support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999990510155605	WITHOUT_CLASSIFICATION	9.489844395010023E-7	TEST
// LIMIT support (ala TOP) ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999888579615915	WITHOUT_CLASSIFICATION	1.1142038408512162E-5	TEST
// InterSystems Cache' does not current support "SELECT ... FOR UPDATE" syntax... // Set your transaction mode to READ_COMMITTED before using	WITHOUT_CLASSIFICATION	0.9999999033195287	WITHOUT_CLASSIFICATION	9.668047125466946E-8	TEST
// Overridden informational metadata ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999996037043624	WITHOUT_CLASSIFICATION	3.962956376501321E-7	TEST
// Overridden informational metadata ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999996037043624	WITHOUT_CLASSIFICATION	3.962956376501321E-7	TEST
/*<String>*/	WITHOUT_CLASSIFICATION	0.999978430894025	WITHOUT_CLASSIFICATION	2.1569105974995855E-5	TEST
// callable statement support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999991263546034	WITHOUT_CLASSIFICATION	8.736453967222895E-7	TEST
// miscellaneous support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999987398080078	WITHOUT_CLASSIFICATION	1.2601919922693048E-6	TEST
// The keyword used to specify a nullable column.	WITHOUT_CLASSIFICATION	0.9999998721367743	WITHOUT_CLASSIFICATION	1.2786322571721592E-7	TEST
// Does the LIMIT clause come at the start of the SELECT statement, rather than at the end?	WITHOUT_CLASSIFICATION	0.9999996806895368	WITHOUT_CLASSIFICATION	3.1931046311665963E-7	TEST
// Does the LIMIT clause take a "maximum" row number instead of a total number of returned rows?	WITHOUT_CLASSIFICATION	0.9999971933474948	WITHOUT_CLASSIFICATION	2.8066525050834642E-6	TEST
// The name of the SQL function that transforms a string to lowercase	WITHOUT_CLASSIFICATION	0.9999998922885116	WITHOUT_CLASSIFICATION	1.0771148838288039E-7	TEST
// Create an OuterJoinGenerator for this dialect.	WITHOUT_CLASSIFICATION	0.9999962295015294	WITHOUT_CLASSIFICATION	3.770498470543793E-6	TEST
// The keyword used to insert a row without specifying // any column values	WITHOUT_CLASSIFICATION	0.9999998578579599	WITHOUT_CLASSIFICATION	1.4214204016774444E-7	TEST
//registerFunction( "trim", new StandardSQLFunction( "trim", Hibernate.STRING ) );	WITHOUT_CLASSIFICATION	0.9999983008967994	WITHOUT_CLASSIFICATION	1.6991032006150723E-6	TEST
//skip the FROM keyword in params	WITHOUT_CLASSIFICATION	0.9999888085094807	WITHOUT_CLASSIFICATION	1.1191490519238148E-5	TEST
/*package*/	WITHOUT_CLASSIFICATION	0.9999753172071789	WITHOUT_CLASSIFICATION	2.4682792821087808E-5	TEST
// potentialTrimCharacterArgIndex = 1 assumes that a // trim-specification has been specified.  we handle the // exception to that explicitly	WITHOUT_CLASSIFICATION	0.9999999166521162	WITHOUT_CLASSIFICATION	8.33478838951132E-8	TEST
// SQLFunction implementation	WITHOUT_CLASSIFICATION	0.9999997865368205	WITHOUT_CLASSIFICATION	2.1346317953295678E-7	TEST
// conceivable that the dialect ctor could throw HibernateExceptions, so don't re-wrap	WITHOUT_CLASSIFICATION	0.9999998192224975	WITHOUT_CLASSIFICATION	1.8077750256307124E-7	TEST
// register the standard dialect resolver	WITHOUT_CLASSIFICATION	0.9999907639476691	WITHOUT_CLASSIFICATION	9.236052331005693E-6	TEST
// register resolvers set via Environment property	WITHOUT_CLASSIFICATION	0.9999986564481779	WITHOUT_CLASSIFICATION	1.3435518220891361E-6	TEST
// kept for backward compatibility until after the 3.1beta5 release of HA	WITHOUT_CLASSIFICATION	0.999994400844195	WITHOUT_CLASSIFICATION	5.599155805056743E-6	TEST
//cache the hashcode	WITHOUT_CLASSIFICATION	0.9999896116669941	WITHOUT_CLASSIFICATION	1.0388333005890503E-5	TEST
// the CascadingAction contract ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999994820329496	WITHOUT_CLASSIFICATION	5.179670503814639E-7	TEST
// the CascadingAction implementations ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999997279730389	WITHOUT_CLASSIFICATION	2.7202696099567936E-7	TEST
// delete does cascade to uninitialized collections	WITHOUT_CLASSIFICATION	0.9999986849393572	WITHOUT_CLASSIFICATION	1.3150606427928227E-6	TEST
// orphans should be deleted during delete	WITHOUT_CLASSIFICATION	0.9999934616500193	WITHOUT_CLASSIFICATION	6.5383499806195175E-6	TEST
/*(LockMode) anything*/	WITHOUT_CLASSIFICATION	0.9999968074865861	WITHOUT_CLASSIFICATION	3.1925134138742708E-6	TEST
// lock doesn't cascade to uninitialized collections	WITHOUT_CLASSIFICATION	0.9999990915268856	WITHOUT_CLASSIFICATION	9.0847311438037E-7	TEST
// refresh doesn't cascade to uninitialized collections	WITHOUT_CLASSIFICATION	0.9999992656209745	WITHOUT_CLASSIFICATION	7.343790254495037E-7	TEST
// evicts don't cascade to uninitialized collections	WITHOUT_CLASSIFICATION	0.9999993604998697	WITHOUT_CLASSIFICATION	6.395001302097423E-7	TEST
// saves / updates don't cascade to uninitialized collections	WITHOUT_CLASSIFICATION	0.9999984506251013	WITHOUT_CLASSIFICATION	1.5493748986831246E-6	TEST
// orphans should be deleted during save/update	WITHOUT_CLASSIFICATION	0.999993449293769	WITHOUT_CLASSIFICATION	6.550706231085407E-6	TEST
// for deprecated saveOrUpdateCopy()	WITHOUT_CLASSIFICATION	0.9999947855344928	WITHOUT_CLASSIFICATION	5.214465507203547E-6	TEST
// persists don't cascade to uninitialized collections	WITHOUT_CLASSIFICATION	0.9999993781315363	WITHOUT_CLASSIFICATION	6.218684636170766E-7	TEST
//a proxy cannot be transient and it breaks ForeignKeys.isTransient	WITHOUT_CLASSIFICATION	0.9999965355364403	WITHOUT_CLASSIFICATION	3.46446355967849E-6	TEST
// replicate does cascade to uninitialized collections	WITHOUT_CLASSIFICATION	0.9999992231224889	WITHOUT_CLASSIFICATION	7.768775109855372E-7	TEST
// static helper methods ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999992740877505	WITHOUT_CLASSIFICATION	7.25912249556762E-7	TEST
// handles arrays and newly instantiated collections	WITHOUT_CLASSIFICATION	0.9999968165189052	WITHOUT_CLASSIFICATION	3.1834810949529077E-6	TEST
// Actually the semantics of the next three are really "Bag" // Note that, unlike objects, collection insertions, updates, // deletions are not really remembered between flushes. We // just re-use the same Lists for convenience.	WITHOUT_CLASSIFICATION	0.9999994837590566	WITHOUT_CLASSIFICATION	5.16240943432636E-7	TEST
// Add these directly to the executions queue	WITHOUT_CLASSIFICATION	0.9999996661636178	WITHOUT_CLASSIFICATION	3.338363822225004E-7	TEST
// continue loop	WITHOUT_CLASSIFICATION	0.9999993488864378	WITHOUT_CLASSIFICATION	6.511135621033556E-7	TEST
//sort the updates by fk	WITHOUT_CLASSIFICATION	0.9998334071559225	WITHOUT_CLASSIFICATION	1.6659284407740936E-4	TEST
//sort the updates by pk	WITHOUT_CLASSIFICATION	0.9998241084775915	WITHOUT_CLASSIFICATION	1.758915224084772E-4	TEST
// the mapping of entity names to their latest batch numbers.	WITHOUT_CLASSIFICATION	0.9999949193439166	WITHOUT_CLASSIFICATION	5.080656083324859E-6	TEST
// the map of batch numbers to EntityInsertAction lists	WITHOUT_CLASSIFICATION	0.9999998198813818	WITHOUT_CLASSIFICATION	1.8011861818081794E-7	TEST
//optimize the hash size to eliminate a rehash.	WITHOUT_CLASSIFICATION	0.9999923723463882	WITHOUT_CLASSIFICATION	7.627653611916517E-6	TEST
// the list of entity names that indicate the batch number	WITHOUT_CLASSIFICATION	0.9999970685552768	WITHOUT_CLASSIFICATION	2.9314447232305583E-6	TEST
// remove the current element from insertions. It will be added back later.	WITHOUT_CLASSIFICATION	0.9999995657553026	WITHOUT_CLASSIFICATION	4.342446974061694E-7	TEST
// the entity associated with the current action.	WITHOUT_CLASSIFICATION	0.9999964081617263	WITHOUT_CLASSIFICATION	3.591838273649027E-6	TEST
// There is already an existing batch for this type of entity. // Check to see if the latest batch is acceptable.	WITHOUT_CLASSIFICATION	0.999996680100044	WITHOUT_CLASSIFICATION	3.3198999560041035E-6	TEST
// now rebuild the insertions list. There is a batch for each entry in the name list.	WITHOUT_CLASSIFICATION	0.9999994729289893	WITHOUT_CLASSIFICATION	5.270710107856118E-7	TEST
// the current batch number is the latest batch for this entity type.	WITHOUT_CLASSIFICATION	0.9999081982635438	WITHOUT_CLASSIFICATION	9.180173645612048E-5	TEST
// loop through all the associations of the current entity and make sure that they are processed // before the current batch number	WITHOUT_CLASSIFICATION	0.9999998897556247	WITHOUT_CLASSIFICATION	1.102443752574335E-7	TEST
// find the batch number associated with the current association, if any.	WITHOUT_CLASSIFICATION	0.9999986024636773	WITHOUT_CLASSIFICATION	1.3975363226821228E-6	TEST
// create a new batch for this type. The batch number is the number of current batches.	WITHOUT_CLASSIFICATION	0.9999945150353393	WITHOUT_CLASSIFICATION	5.484964660737123E-6	TEST
// loop through all the associated entities and make sure they have been // processed before the latest // batch associated with this entity type.	WITHOUT_CLASSIFICATION	0.9999573738324953	WITHOUT_CLASSIFICATION	4.2626167504787474E-5	TEST
// since this entity will now be processed in the latest possible batch, // we can be assured that it will come after all other associations, // there's not need to continue checking.	WITHOUT_CLASSIFICATION	0.9999972689117408	WITHOUT_CLASSIFICATION	2.731088259155998E-6	TEST
//cascade to current collection elements	WITHOUT_CLASSIFICATION	0.9999993776578454	WITHOUT_CLASSIFICATION	6.223421546376964E-7	TEST
//not really necessary, but good for consistency...	WITHOUT_CLASSIFICATION	0.9999938386842944	WITHOUT_CLASSIFICATION	6.161315705597183E-6	TEST
// we can't cascade to non-embedded elements	WITHOUT_CLASSIFICATION	0.9999996438003924	WITHOUT_CLASSIFICATION	3.561996076050587E-7	TEST
//a newly instantiated collection can't have orphans	WITHOUT_CLASSIFICATION	0.9999961454832649	WITHOUT_CLASSIFICATION	3.85451673506708E-6	TEST
// handle orphaned entities!!	WITHOUT_CLASSIFICATION	0.9999973877909955	WITHOUT_CLASSIFICATION	2.6122090046473367E-6	TEST
// Loaded entity instances, by EntityUniqueKey	WITHOUT_CLASSIFICATION	0.9999988044752962	WITHOUT_CLASSIFICATION	1.1955247037660275E-6	TEST
// Identity map of EntityEntry instances, by the entity instance	WITHOUT_CLASSIFICATION	0.999999438806142	WITHOUT_CLASSIFICATION	5.611938581088634E-7	TEST
// Entity proxies, by EntityKey	WITHOUT_CLASSIFICATION	0.9999955349982911	WITHOUT_CLASSIFICATION	4.465001708994607E-6	TEST
// Snapshots of current database state for entities // that have *not* been loaded	WITHOUT_CLASSIFICATION	0.9999996375910043	WITHOUT_CLASSIFICATION	3.624089956437322E-7	TEST
// Identity map of array holder ArrayHolder instances, by the array instance	WITHOUT_CLASSIFICATION	0.9999995375408444	WITHOUT_CLASSIFICATION	4.624591556059816E-7	TEST
// Collection wrappers, by the CollectionKey //key=CollectionKey, value=PersistentCollection	WITHOUT_CLASSIFICATION	0.9999994896527267	WITHOUT_CLASSIFICATION	5.103472732430321E-7	TEST
// Set of EntityKeys of deleted objects	WITHOUT_CLASSIFICATION	0.9999978478625634	WITHOUT_CLASSIFICATION	2.1521374365610733E-6	TEST
// properties that we have tried to load, and not found in the database	WITHOUT_CLASSIFICATION	0.9999993509408927	WITHOUT_CLASSIFICATION	6.490591072973324E-7	TEST
// A list of collection wrappers that were instantiating during result set // processing, that we will need to initialize at the end of the query	WITHOUT_CLASSIFICATION	0.9999999855908396	WITHOUT_CLASSIFICATION	1.4409160377989192E-8	TEST
// A container for collections we load up when the owning entity is not // yet loaded ... for now, this is purely transient!	WITHOUT_CLASSIFICATION	0.9999993750697235	WITHOUT_CLASSIFICATION	6.249302766169143E-7	TEST
// Downgrade locks	WITHOUT_CLASSIFICATION	0.9999988910453156	WITHOUT_CLASSIFICATION	1.108954684464912E-6	TEST
// any earlier proxy takes precedence	WITHOUT_CLASSIFICATION	0.9999990812998186	WITHOUT_CLASSIFICATION	9.187001814972148E-7	TEST
//unwrap the object	WITHOUT_CLASSIFICATION	0.9999944645611216	WITHOUT_CLASSIFICATION	5.535438878376418E-6	TEST
//initialize + unwrap the object	WITHOUT_CLASSIFICATION	0.9999932371495799	WITHOUT_CLASSIFICATION	6.762850420085081E-6	TEST
//return the proxied object	WITHOUT_CLASSIFICATION	0.9999909583342295	WITHOUT_CLASSIFICATION	9.041665770589977E-6	TEST
//overwrite old proxy	WITHOUT_CLASSIFICATION	0.9999554289258962	WITHOUT_CLASSIFICATION	4.4571074103770663E-5	TEST
// early exit...	WITHOUT_CLASSIFICATION	0.9999984843846258	WITHOUT_CLASSIFICATION	1.5156153741323743E-6	TEST
// or should it actually throw an exception?	WITHOUT_CLASSIFICATION	0.9999971970375732	WITHOUT_CLASSIFICATION	2.8029624268980433E-6	TEST
//treat it just like a new collection	WITHOUT_CLASSIFICATION	0.9999990955886059	WITHOUT_CLASSIFICATION	9.044113940904099E-7	TEST
//do this work only at the very highest level of the load //don't let this method be called recursively	WITHOUT_CLASSIFICATION	0.9999917610166877	WITHOUT_CLASSIFICATION	8.238983312191E-6	TEST
//note that each iteration of the loop may add new elements	WITHOUT_CLASSIFICATION	0.999998509974958	WITHOUT_CLASSIFICATION	1.4900250420061276E-6	TEST
//it might be an unwrapped collection reference! //try to find a wrapper (slowish)	WITHOUT_CLASSIFICATION	0.9999993051067241	WITHOUT_CLASSIFICATION	6.948932760169656E-7	TEST
/*public boolean isNonExistant(EntityKey key) {	WITHOUT_CLASSIFICATION	0.9999928530562583	WITHOUT_CLASSIFICATION	7.146943741760236E-6	TEST
/*public boolean isNonExistant(EntityUniqueKey key) {	WITHOUT_CLASSIFICATION	0.999993823398353	WITHOUT_CLASSIFICATION	6.1766016470916405E-6	TEST
// iterate all the entities currently associated with the persistence context.	WITHOUT_CLASSIFICATION	0.9999949176684386	WITHOUT_CLASSIFICATION	5.082331561398025E-6	TEST
// does this entity entry pertain to the entity persister in which we are interested (owner)?	WITHOUT_CLASSIFICATION	0.9999779559290004	WITHOUT_CLASSIFICATION	2.204407099961236E-5	TEST
//check if the managed object is the parent	WITHOUT_CLASSIFICATION	0.999986334797987	WITHOUT_CLASSIFICATION	1.3665202013080145E-5	TEST
// otherwise, the proxy was pruned during the serialization process	WITHOUT_CLASSIFICATION	0.9999996065526385	WITHOUT_CLASSIFICATION	3.93447361436672E-7	TEST
// adds remove as a sort-of alias for delete...	WITHOUT_CLASSIFICATION	0.9999996702961435	WITHOUT_CLASSIFICATION	3.2970385658968047E-7	TEST
//bad cast	WITHOUT_CLASSIFICATION	0.999988146424695	WITHOUT_CLASSIFICATION	1.1853575305012318E-5	TEST
//return lhsPersister.getSubclassPropertyColumnNames(property);	WITHOUT_CLASSIFICATION	0.9999937465020955	WITHOUT_CLASSIFICATION	6.2534979045474E-6	TEST
//property-refs for associations defined on a //component are not supported, so no need to slice	WITHOUT_CLASSIFICATION	0.9999998189728173	WITHOUT_CLASSIFICATION	1.810271826260976E-7	TEST
//if there is no property-ref, assume the join //is to the subclass table (ie. the table of the //subclass that the association belongs to)	WITHOUT_CLASSIFICATION	0.9999995620447941	WITHOUT_CLASSIFICATION	4.379552058221307E-7	TEST
//handle a property-ref	WITHOUT_CLASSIFICATION	0.9999963572616425	WITHOUT_CLASSIFICATION	3.6427383576261954E-6	TEST
/*NativeSQLQueryReturn*/	WITHOUT_CLASSIFICATION	0.9999915385323663	WITHOUT_CLASSIFICATION	8.461467633714364E-6	TEST
//final boolean forceCacheRefresh,	WITHOUT_CLASSIFICATION	0.9999915222852946	WITHOUT_CLASSIFICATION	8.477714705325177E-6	TEST
// why is all others non final ?	WITHOUT_CLASSIFICATION	0.9999937035781401	WITHOUT_CLASSIFICATION	6.296421859837565E-6	TEST
//this.forceCacheRefresh = forceCacheRefresh;	WITHOUT_CLASSIFICATION	0.9999724379675328	WITHOUT_CLASSIFICATION	2.7562032467251508E-5	TEST
// HELLA IMPORTANT OPTIMIZATION!!!	WITHOUT_CLASSIFICATION	0.9999648838648068	WITHOUT_CLASSIFICATION	3.511613519328882E-5	TEST
/*return that.type.equals(type) && 	WITHOUT_CLASSIFICATION	0.999985562219245	WITHOUT_CLASSIFICATION	1.4437780755052848E-5	TEST
//Must occur after resolving identifiers!	WITHOUT_CLASSIFICATION	0.9999808220305904	WITHOUT_CLASSIFICATION	1.917796940965196E-5	TEST
//take a snapshot	WITHOUT_CLASSIFICATION	0.9999911643287668	WITHOUT_CLASSIFICATION	8.835671233305311E-6	TEST
// do a check	WITHOUT_CLASSIFICATION	0.9999980355494421	WITHOUT_CLASSIFICATION	1.96445055777881E-6	TEST
// the owning entity may have been deleted and its identifier unset due to // identifier-rollback; in which case, try to look up its identifier from // the persistence context	WITHOUT_CLASSIFICATION	0.9999998117525002	WITHOUT_CLASSIFICATION	1.8824749978494772E-7	TEST
// do the work	WITHOUT_CLASSIFICATION	0.999994695010377	WITHOUT_CLASSIFICATION	5.304989623101092E-6	TEST
// We've been here before	WITHOUT_CLASSIFICATION	0.9999916828401468	WITHOUT_CLASSIFICATION	8.317159853132798E-6	TEST
// it is or was referenced _somewhere_	WITHOUT_CLASSIFICATION	0.9999964131008322	WITHOUT_CLASSIFICATION	3.58689916783173E-6	TEST
// do the work	WITHOUT_CLASSIFICATION	0.999994695010377	WITHOUT_CLASSIFICATION	5.304989623101092E-6	TEST
// if either its role changed,	WITHOUT_CLASSIFICATION	0.9999976311298879	WITHOUT_CLASSIFICATION	2.368870112106288E-6	TEST
// or its key changed	WITHOUT_CLASSIFICATION	0.9999926973768443	WITHOUT_CLASSIFICATION	7.302623155763529E-6	TEST
// we will need to create new entries	WITHOUT_CLASSIFICATION	0.999998487236226	WITHOUT_CLASSIFICATION	1.5127637739220393E-6	TEST
// we will need to remove ye olde entries	WITHOUT_CLASSIFICATION	0.9999964179049602	WITHOUT_CLASSIFICATION	3.5820950398162398E-6	TEST
// force initialize!	WITHOUT_CLASSIFICATION	0.9999991227463993	WITHOUT_CLASSIFICATION	8.772536006490551E-7	TEST
// else if it's elements changed	WITHOUT_CLASSIFICATION	0.9999967413754507	WITHOUT_CLASSIFICATION	3.258624549229028E-6	TEST
//ATTRIBUTES MAINTAINED BETWEEN FLUSH CYCLES	WITHOUT_CLASSIFICATION	0.9998887692782155	WITHOUT_CLASSIFICATION	1.1123072178445244E-4	TEST
// session-start/post-flush persistent state	WITHOUT_CLASSIFICATION	0.9999984242498254	WITHOUT_CLASSIFICATION	1.5757501744961518E-6	TEST
// allow the CollectionSnapshot to be serialized	WITHOUT_CLASSIFICATION	0.9999992818134839	WITHOUT_CLASSIFICATION	7.181865161427902E-7	TEST
// ATTRIBUTES USED ONLY DURING FLUSH CYCLE	WITHOUT_CLASSIFICATION	0.9999797289789583	WITHOUT_CLASSIFICATION	2.0271021041784112E-5	TEST
// "current" means the reference that was found during flush() 	WITHOUT_CLASSIFICATION	0.9999992590662778	WITHOUT_CLASSIFICATION	7.409337221755801E-7	TEST
// "loaded" means the reference that is consistent  // with the current database state	WITHOUT_CLASSIFICATION	0.9999988868229543	WITHOUT_CLASSIFICATION	1.1131770456026646E-6	TEST
// during flush, we navigate the object graph to // collections and decide what to do with them	WITHOUT_CLASSIFICATION	0.9999997391220017	WITHOUT_CLASSIFICATION	2.6087799835783715E-7	TEST
// if we instantiate a collection during the flush() process, // we must ignore it for the rest of the flush()	WITHOUT_CLASSIFICATION	0.9999998384489454	WITHOUT_CLASSIFICATION	1.6155105466825635E-7	TEST
// new collections that get found + wrapped // during flush shouldn't be ignored	WITHOUT_CLASSIFICATION	0.9999993672345764	WITHOUT_CLASSIFICATION	6.327654236048756E-7	TEST
//a newly wrapped collection is NOT dirty (or we get unnecessary version updates)	WITHOUT_CLASSIFICATION	0.9997571510783667	WITHOUT_CLASSIFICATION	2.4284892163329357E-4	TEST
//collection.clearDirty()	WITHOUT_CLASSIFICATION	0.9999931293078695	WITHOUT_CLASSIFICATION	6.87069213056044E-6	TEST
//collection.clearDirty()	WITHOUT_CLASSIFICATION	0.9999931293078695	WITHOUT_CLASSIFICATION	6.87069213056044E-6	TEST
// detached collections that get found + reattached // during flush shouldn't be ignored	WITHOUT_CLASSIFICATION	0.9999989352615515	WITHOUT_CLASSIFICATION	1.0647384485573852E-6	TEST
//optimization	WITHOUT_CLASSIFICATION	0.9999860642425583	WITHOUT_CLASSIFICATION	1.393575744167918E-5	TEST
//optimization //optimization	WITHOUT_CLASSIFICATION	0.9999942111114447	WITHOUT_CLASSIFICATION	5.7888885552843785E-6	TEST
//re-snapshot	WITHOUT_CLASSIFICATION	0.9999844882818861	WITHOUT_CLASSIFICATION	1.5511718113924832E-5	TEST
// for convenience to save some lookups	WITHOUT_CLASSIFICATION	0.9999996731452916	WITHOUT_CLASSIFICATION	3.2685470848111357E-7	TEST
//NOTE: this is not updated when properties are fetched lazily!	WITHOUT_CLASSIFICATION	0.9997257379176531	WITHOUT_CLASSIFICATION	2.742620823469366E-4	TEST
//memory optimization	WITHOUT_CLASSIFICATION	0.9999967644286437	WITHOUT_CLASSIFICATION	3.2355713562967735E-6	TEST
// use the id value of a newly instantiated instance as the unsaved-value	WITHOUT_CLASSIFICATION	0.9999972759035103	WITHOUT_CLASSIFICATION	2.724096489720199E-6	TEST
// copied from Session:	WITHOUT_CLASSIFICATION	0.9999983942208024	WITHOUT_CLASSIFICATION	1.6057791976496855E-6	TEST
// this should not happen since the DTD prevents it	WITHOUT_CLASSIFICATION	0.9999954496883487	WITHOUT_CLASSIFICATION	4.550311651188875E-6	TEST
// JoinProcessor needs to know if the where clause fragment came from a dynamic filter or not so it // can put the where clause fragment in the right place in the SQL AST.   'hasFilterCondition' keeps track // of that fact.	WITHOUT_CLASSIFICATION	0.9999999950149554	WITHOUT_CLASSIFICATION	4.985044576886273E-9	TEST
// the current join represents the join between a many-to-many association table // and its "target" table.  Here we need to apply any additional filters // defined specifically on the many-to-many	WITHOUT_CLASSIFICATION	0.9999999351967441	WITHOUT_CLASSIFICATION	6.480325593032118E-8	TEST
//check basic level one nullablilty	WITHOUT_CLASSIFICATION	0.9999989750523883	WITHOUT_CLASSIFICATION	1.0249476115874863E-6	TEST
//values is not null and is checkable, we'll look deeper	WITHOUT_CLASSIFICATION	0.9999915542951273	WITHOUT_CLASSIFICATION	8.445704872676528E-6	TEST
//for non null args, check for components and elements containing components	WITHOUT_CLASSIFICATION	0.9999998067131987	WITHOUT_CLASSIFICATION	1.932868014382979E-7	TEST
//cache the hashcode	WITHOUT_CLASSIFICATION	0.9999896116669941	WITHOUT_CLASSIFICATION	1.0388333005890503E-5	TEST
//persistent collections may have components	WITHOUT_CLASSIFICATION	0.9999981769330222	WITHOUT_CLASSIFICATION	1.8230669779160773E-6	TEST
//check for all components values in the collection	WITHOUT_CLASSIFICATION	0.9999988433899738	WITHOUT_CLASSIFICATION	1.156610026256458E-6	TEST
/* will check current level if some of them are not null	WITHOUT_CLASSIFICATION	0.9999996503617176	WITHOUT_CLASSIFICATION	3.4963828250852297E-7	TEST
//do the test	WITHOUT_CLASSIFICATION	0.998398787100096	WITHOUT_CLASSIFICATION	0.001601212899903985	TEST
// if its an uninitialized proxy it can't be transient	WITHOUT_CLASSIFICATION	0.9999993572622845	WITHOUT_CLASSIFICATION	6.427377154075938E-7	TEST
//unwrap it	WITHOUT_CLASSIFICATION	0.9999860824854417	WITHOUT_CLASSIFICATION	1.3917514558306014E-5	TEST
// See if the entity is already bound to this session, if not look at the // entity identifier and assume that the entity is persistent if the // id is not "unsaved" (that is, we rely on foreign keys to keep // database integrity)	WITHOUT_CLASSIFICATION	0.999999730249662	WITHOUT_CLASSIFICATION	2.6975033803619377E-7	TEST
// an unfetched association can only point to // an entity that already exists in the db	WITHOUT_CLASSIFICATION	0.9999997888113438	WITHOUT_CLASSIFICATION	2.1118865631734076E-7	TEST
// let the interceptor inspect the instance to decide	WITHOUT_CLASSIFICATION	0.9999983389374879	WITHOUT_CLASSIFICATION	1.6610625121365856E-6	TEST
// let the persister inspect the instance to decide	WITHOUT_CLASSIFICATION	0.9999947604351752	WITHOUT_CLASSIFICATION	5.239564824809705E-6	TEST
// we use the assumed value, if there is one, to avoid hitting // the database	WITHOUT_CLASSIFICATION	0.9999996003335903	WITHOUT_CLASSIFICATION	3.996664098206901E-7	TEST
// hit the database, after checking the session cache for a snapshot	WITHOUT_CLASSIFICATION	0.9999987861535699	WITHOUT_CLASSIFICATION	1.2138464301457951E-6	TEST
// context-entity-identifier returns null explicitly if the entity // is not associated with the persistence context; so make some // deeper checks...	WITHOUT_CLASSIFICATION	0.9999999538811841	WITHOUT_CLASSIFICATION	4.611881582584067E-8	TEST
//int count = 0;	WITHOUT_CLASSIFICATION	0.9999894013963841	WITHOUT_CLASSIFICATION	1.0598603615837498E-5	TEST
//the first key found after the given key	WITHOUT_CLASSIFICATION	0.9998612720776727	WITHOUT_CLASSIFICATION	1.3872792232721414E-4	TEST
//checkForEnd = false;	WITHOUT_CLASSIFICATION	0.9999957058151374	WITHOUT_CLASSIFICATION	4.294184862531901E-6	TEST
//count++;	WITHOUT_CLASSIFICATION	0.9999736861928957	WITHOUT_CLASSIFICATION	2.6313807104226782E-5	TEST
//end of array, start filling again from start	WITHOUT_CLASSIFICATION	0.9999933410764507	WITHOUT_CLASSIFICATION	6.658923549376924E-6	TEST
//we ran out of keys to try	WITHOUT_CLASSIFICATION	0.9999943426815265	WITHOUT_CLASSIFICATION	5.657318473380166E-6	TEST
//first element of array is reserved for the actual instance we are loading!	WITHOUT_CLASSIFICATION	0.9999972291432785	WITHOUT_CLASSIFICATION	2.770856721538581E-6	TEST
//the first id found after the given id	WITHOUT_CLASSIFICATION	0.9998670911949122	WITHOUT_CLASSIFICATION	1.3290880508764867E-4	TEST
//we ran out of ids to try	WITHOUT_CLASSIFICATION	0.9999953403971115	WITHOUT_CLASSIFICATION	4.659602888517544E-6	TEST
// look for existing collection as part of the persistence context	WITHOUT_CLASSIFICATION	0.9999996367335712	WITHOUT_CLASSIFICATION	3.632664288151789E-7	TEST
// ignore this row of results! Note the early exit	WITHOUT_CLASSIFICATION	0.9999867368082418	WITHOUT_CLASSIFICATION	1.3263191758161733E-5	TEST
// initialize this collection	WITHOUT_CLASSIFICATION	0.99999735775289	WITHOUT_CLASSIFICATION	2.642247109995048E-6	TEST
// create one	WITHOUT_CLASSIFICATION	0.9999990323732733	WITHOUT_CLASSIFICATION	9.676267267482374E-7	TEST
// warning: can cause a recursive calls! (proxy initialization)	WITHOUT_CLASSIFICATION	0.999999968542681	WITHOUT_CLASSIFICATION	3.145731897325876E-8	TEST
// there were no queued additions // and the role has a cache	WITHOUT_CLASSIFICATION	0.999999852501476	WITHOUT_CLASSIFICATION	1.4749852403219547E-7	TEST
// and this is not a forced initialization during flush	WITHOUT_CLASSIFICATION	0.9999967530530094	WITHOUT_CLASSIFICATION	3.2469469906227198E-6	TEST
// some filters affecting the collection are enabled on the session, so do not do the put into the cache.	WITHOUT_CLASSIFICATION	0.9999999787028148	WITHOUT_CLASSIFICATION	2.1297185190531262E-8	TEST
// cleanup code ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999984581280222	WITHOUT_CLASSIFICATION	1.541871977759329E-6	TEST
// loading collection xrefs ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.99999958690318	WITHOUT_CLASSIFICATION	4.130968200312407E-7	TEST
// Collection load contexts ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999990362331993	WITHOUT_CLASSIFICATION	9.637668006917005E-7	TEST
// simple cache of param metadata based on query string.  Ideally, the // original "user-supplied query" string should be used to retreive this // metadata (i.e., not the para-list-expanded query string) to avoid // unnecessary cache entries. // Used solely for caching param metadata for native-sql queries, see // getSQLParameterMetadata() for a discussion as to why...	WITHOUT_CLASSIFICATION	0.9999999724909668	WITHOUT_CLASSIFICATION	2.7509033172647158E-8	TEST
// the cache of the actual plans...	WITHOUT_CLASSIFICATION	0.9999990002470648	WITHOUT_CLASSIFICATION	9.99752935203899E-7	TEST
/*package*/	WITHOUT_CLASSIFICATION	0.9999753172071789	WITHOUT_CLASSIFICATION	2.4682792821087808E-5	TEST
/*package*/	WITHOUT_CLASSIFICATION	0.9999753172071789	WITHOUT_CLASSIFICATION	2.4682792821087808E-5	TEST
// assumes that types are all of span 1	WITHOUT_CLASSIFICATION	0.9999984368160156	WITHOUT_CLASSIFICATION	1.563183984370192E-6	TEST
// for native-sql queries, the param metadata is determined outside // any relation to a query plan, because query plan creation and/or // retreival for a native-sql query depends on all of the return // types having been set, which might not be the case up-front when // param metadata would be most useful	WITHOUT_CLASSIFICATION	0.9999999851433858	WITHOUT_CLASSIFICATION	1.485661426154753E-8	TEST
// don't care...	WITHOUT_CLASSIFICATION	0.99999952343517	WITHOUT_CLASSIFICATION	4.765648299429004E-7	TEST
// Recognition code ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999987652889051	WITHOUT_CLASSIFICATION	1.2347110949153724E-6	TEST
// don't care...	WITHOUT_CLASSIFICATION	0.99999952343517	WITHOUT_CLASSIFICATION	4.765648299429004E-7	TEST
// NOTE : firstRow is zero-based	WITHOUT_CLASSIFICATION	0.9998657120228279	WITHOUT_CLASSIFICATION	1.3428797717212075E-4	TEST
// break the outer loop !!!	WITHOUT_CLASSIFICATION	0.9999946551430009	WITHOUT_CLASSIFICATION	5.344856999217249E-6	TEST
// named parameter	WITHOUT_CLASSIFICATION	0.9999966123334123	WITHOUT_CLASSIFICATION	3.387666587727197E-6	TEST
// could be either an ordinal or JPA-positional parameter	WITHOUT_CLASSIFICATION	0.9999995550381483	WITHOUT_CLASSIFICATION	4.44961851683975E-7	TEST
// a peek ahead showed this as an JPA-positional parameter	WITHOUT_CLASSIFICATION	0.9999973167916694	WITHOUT_CLASSIFICATION	2.6832083305275596E-6	TEST
// make sure this "name" is an integral	WITHOUT_CLASSIFICATION	0.9999790825137463	WITHOUT_CLASSIFICATION	2.0917486253686255E-5	TEST
// pre-determine and cache the hashcode	WITHOUT_CLASSIFICATION	0.9999989765196585	WITHOUT_CLASSIFICATION	1.0234803414738668E-6	TEST
// perform the actual work	WITHOUT_CLASSIFICATION	0.9999985056403963	WITHOUT_CLASSIFICATION	1.4943596037965E-6	TEST
// if everything went ok, commit the transaction and close the obtained // connection handle...	WITHOUT_CLASSIFICATION	0.9999999648493748	WITHOUT_CLASSIFICATION	3.515062507712156E-8	TEST
// at some point the processing went bad, so we need to: //      1) make sure the connection handle gets released //      2) try to cleanup the JTA context as much as possible	WITHOUT_CLASSIFICATION	0.9999999719409809	WITHOUT_CLASSIFICATION	2.805901912137006E-8	TEST
// finally handle the exception	WITHOUT_CLASSIFICATION	0.9999969059351763	WITHOUT_CLASSIFICATION	3.0940648238044163E-6	TEST
// a "detached" collection that belonged to a different entity	WITHOUT_CLASSIFICATION	0.9999996465423223	WITHOUT_CLASSIFICATION	3.5345767759445766E-7	TEST
//saveOrUpdateCopy() is deprecated!	WITHOUT_CLASSIFICATION	0.9999422534885039	WITHOUT_CLASSIFICATION	5.7746511496161E-5	TEST
// collectionPersister should not be null, but we don't want to throw // an exception if it is null	WITHOUT_CLASSIFICATION	0.9999998186181523	WITHOUT_CLASSIFICATION	1.813818475422967E-7	TEST
// otherwise a null or brand new collection // this will also (inefficiently) handle arrays, which // have no snapshot, so we can't do any better //processArrayOrNewCollection(collection, type);	WITHOUT_CLASSIFICATION	0.9999997376583799	WITHOUT_CLASSIFICATION	2.6234162000611606E-7	TEST
// a "detached" collection that originally belonged to the same entity	WITHOUT_CLASSIFICATION	0.999999247048458	WITHOUT_CLASSIFICATION	7.529515420624037E-7	TEST
//do nothing	WITHOUT_CLASSIFICATION	0.9999794288590677	WITHOUT_CLASSIFICATION	2.057114093234398E-5	TEST
//do nothing	WITHOUT_CLASSIFICATION	0.9999794288590677	WITHOUT_CLASSIFICATION	2.057114093234398E-5	TEST
//Force a substitution!	WITHOUT_CLASSIFICATION	0.9999977076482477	WITHOUT_CLASSIFICATION	2.2923517523222924E-6	TEST
// The user requested a "greater" (i.e. more restrictive) form of // pessimistic lock	WITHOUT_CLASSIFICATION	0.9999974371760284	WITHOUT_CLASSIFICATION	2.562823971515814E-6	TEST
// the database now holds a lock + the object is flushed from the cache, // so release the soft lock	WITHOUT_CLASSIFICATION	0.9999997658114794	WITHOUT_CLASSIFICATION	2.3418852063446006E-7	TEST
// now update the object .. has to be outside the main if block above (because of collections)	WITHOUT_CLASSIFICATION	0.9999999334260508	WITHOUT_CLASSIFICATION	6.657394923461742E-8	TEST
// Search for collections by reachability, updating their role. // We don't want to touch collections reachable from a deleted object	WITHOUT_CLASSIFICATION	0.999999941727868	WITHOUT_CLASSIFICATION	5.827213185736184E-8	TEST
// this is a situation where the entity id is assigned by a post-insert generator // and was saved outside the transaction forcing it to be delayed	WITHOUT_CLASSIFICATION	0.9999996844349218	WITHOUT_CLASSIFICATION	3.1556507826994257E-7	TEST
// NOTE: we need to do the wrap here even if its not "dirty", // because collections need wrapping but changes to _them_ // don't dirty the container. Also, for versioned data, we // need to wrap before calling searchForDirtyCollections	WITHOUT_CLASSIFICATION	0.9999999455814136	WITHOUT_CLASSIFICATION	5.441858641975466E-8	TEST
//grab its state saved at deletion	WITHOUT_CLASSIFICATION	0.9999919854818308	WITHOUT_CLASSIFICATION	8.01451816924056E-6	TEST
// grab its current state	WITHOUT_CLASSIFICATION	0.9999978552711548	WITHOUT_CLASSIFICATION	2.1447288450574893E-6	TEST
// schedule the update // note that we intentionally do _not_ pass in currentPersistentState!	WITHOUT_CLASSIFICATION	0.9999932608061355	WITHOUT_CLASSIFICATION	6.7391938645159485E-6	TEST
// substitutes into values by side-effect	WITHOUT_CLASSIFICATION	0.999996239266026	WITHOUT_CLASSIFICATION	3.7607339739818647E-6	TEST
// give the Interceptor a chance to process property values, if the properties // were modified by the Interceptor, we need to set them back to the object	WITHOUT_CLASSIFICATION	0.9999998096930607	WITHOUT_CLASSIFICATION	1.9030693931760128E-7	TEST
// compare to cached state (ignoring collections unless versioned)	WITHOUT_CLASSIFICATION	0.9999998679307555	WITHOUT_CLASSIFICATION	1.320692444815758E-7	TEST
// if it was dirtied by a collection only	WITHOUT_CLASSIFICATION	0.9999994604103816	WITHOUT_CLASSIFICATION	5.395896184402348E-7	TEST
// increment the version number (if necessary)	WITHOUT_CLASSIFICATION	0.9999998496390069	WITHOUT_CLASSIFICATION	1.5036099320095344E-7	TEST
// check nullability but do not perform command execute // we'll use scheduled updates for that.	WITHOUT_CLASSIFICATION	0.9999997175465406	WITHOUT_CLASSIFICATION	2.824534594843665E-7	TEST
//give the Interceptor a chance to modify property values	WITHOUT_CLASSIFICATION	0.9999965121407312	WITHOUT_CLASSIFICATION	3.4878592688658787E-6	TEST
//now we might need to recalculate the dirtyProperties array	WITHOUT_CLASSIFICATION	0.9999972558283059	WITHOUT_CLASSIFICATION	2.7441716941086527E-6	TEST
//use the current version	WITHOUT_CLASSIFICATION	0.999997150949138	WITHOUT_CLASSIFICATION	2.849050861993085E-6	TEST
// Interceptor returned null, so do the dirtycheck ourself, if possible	WITHOUT_CLASSIFICATION	0.9999997545392281	WITHOUT_CLASSIFICATION	2.45460771935429E-7	TEST
// object loaded by update()	WITHOUT_CLASSIFICATION	0.9999851784225422	WITHOUT_CLASSIFICATION	1.4821577457765501E-5	TEST
// dirty check against the usual snapshot of the entity	WITHOUT_CLASSIFICATION	0.9999986526452062	WITHOUT_CLASSIFICATION	1.347354793839212E-6	TEST
// dirty check against the database snapshot, if possible/necessary	WITHOUT_CLASSIFICATION	0.9999993413354095	WITHOUT_CLASSIFICATION	6.586645905696595E-7	TEST
// the Interceptor handled the dirty checking	WITHOUT_CLASSIFICATION	0.9999973090124683	WITHOUT_CLASSIFICATION	2.6909875316370212E-6	TEST
//even process null collections	WITHOUT_CLASSIFICATION	0.9999980545458812	WITHOUT_CLASSIFICATION	1.945454118856663E-6	TEST
// get the id from the object	WITHOUT_CLASSIFICATION	0.9999924782194852	WITHOUT_CLASSIFICATION	7.521780514856017E-6	TEST
//always do an INSERT, and let it fail by constraint violation	WITHOUT_CLASSIFICATION	0.9999987432136012	WITHOUT_CLASSIFICATION	1.25678639881125E-6	TEST
//what is the version on the database?	WITHOUT_CLASSIFICATION	0.9999849519797275	WITHOUT_CLASSIFICATION	1.5048020272555838E-5	TEST
/// HHH-2378	WITHOUT_CLASSIFICATION	0.9999793990304074	WITHOUT_CLASSIFICATION	2.0600969592634428E-5	TEST
//will result in a SQL UPDATE:	WITHOUT_CLASSIFICATION	0.9999970728061528	WITHOUT_CLASSIFICATION	2.9271938471968084E-6	TEST
//else do nothing (don't even reassociate object!)	WITHOUT_CLASSIFICATION	0.9999995397535875	WITHOUT_CLASSIFICATION	4.6024641254254797E-7	TEST
// no existing row - do an insert	WITHOUT_CLASSIFICATION	0.9999997587018602	WITHOUT_CLASSIFICATION	2.4129813987865385E-7	TEST
//refresh() does not pass an entityName	WITHOUT_CLASSIFICATION	0.9999732347059795	WITHOUT_CLASSIFICATION	2.6765294020401605E-5	TEST
//do not return a proxy! //(this option indicates we are initializing a proxy)	WITHOUT_CLASSIFICATION	0.9999988645513921	WITHOUT_CLASSIFICATION	1.1354486079703993E-6	TEST
//return a proxy if appropriate	WITHOUT_CLASSIFICATION	0.9999947776146487	WITHOUT_CLASSIFICATION	5.2223853513029355E-6	TEST
// return existing object or initialized proxy (unless deleted)	WITHOUT_CLASSIFICATION	0.9999995246274327	WITHOUT_CLASSIFICATION	4.7537256729043923E-7	TEST
// return new uninitialized proxy	WITHOUT_CLASSIFICATION	0.9999982348832916	WITHOUT_CLASSIFICATION	1.765116708325106E-6	TEST
// this object was already loaded	WITHOUT_CLASSIFICATION	0.9999905654657273	WITHOUT_CLASSIFICATION	9.434534272671761E-6	TEST
// Entity was found in second-level cache...	WITHOUT_CLASSIFICATION	0.9999998284868948	WITHOUT_CLASSIFICATION	1.7151310527733512E-7	TEST
// make it circular-reference safe	WITHOUT_CLASSIFICATION	0.999999601817558	WITHOUT_CLASSIFICATION	3.9818244199145677E-7	TEST
// intializes result by side-effect	WITHOUT_CLASSIFICATION	0.9999994899123279	WITHOUT_CLASSIFICATION	5.10087672034924E-7	TEST
// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ // Pre-flushing section // ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999997566091474	WITHOUT_CLASSIFICATION	2.433908526218945E-7	TEST
//some statistics	WITHOUT_CLASSIFICATION	0.9999914857496336	WITHOUT_CLASSIFICATION	8.514250366359011E-6	TEST
//safe from concurrent modification because of how entryList() is implemented on IdentityMap	WITHOUT_CLASSIFICATION	0.9999993883782087	WITHOUT_CLASSIFICATION	6.116217912896696E-7	TEST
// Initialize dirty flags for arrays + collections with composite elements // and reset reached, doupdate, etc.	WITHOUT_CLASSIFICATION	0.9999997986758208	WITHOUT_CLASSIFICATION	2.0132417925803755E-7	TEST
// Among other things, updateReachables() will recursively load all // collections that are moving roles. This might cause entities to // be loaded.	WITHOUT_CLASSIFICATION	0.9999997495742233	WITHOUT_CLASSIFICATION	2.50425776658846E-7	TEST
// So this needs to be safe from concurrent modification problems. // It is safe because of how IdentityMap implements entrySet()	WITHOUT_CLASSIFICATION	0.9999999608470073	WITHOUT_CLASSIFICATION	3.9152992783604444E-8	TEST
// Update the status of the object and if necessary, schedule an update	WITHOUT_CLASSIFICATION	0.999994391969548	WITHOUT_CLASSIFICATION	5.608030452026948E-6	TEST
// Schedule updates to collections:	WITHOUT_CLASSIFICATION	0.9999933439789154	WITHOUT_CLASSIFICATION	6.656021084602887E-6	TEST
// we need to lock the collection caches before // executing entity inserts/updates in order to // account for bidi associations	WITHOUT_CLASSIFICATION	0.9999998066938679	WITHOUT_CLASSIFICATION	1.9330613217970908E-7	TEST
// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ // Post-flushing section // ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999993820988213	WITHOUT_CLASSIFICATION	6.179011786061759E-7	TEST
//the database has changed now, so the subselect results need to be invalidated	WITHOUT_CLASSIFICATION	0.9999801194236521	WITHOUT_CLASSIFICATION	1.9880576348014225E-5	TEST
//if the collection is dereferenced, remove from the session cache //iter.remove(); //does not work, since the entrySet is not backed by the set	WITHOUT_CLASSIFICATION	0.9999997466435423	WITHOUT_CLASSIFICATION	2.5335645765683906E-7	TEST
//otherwise recreate the mapping between the collection and its key	WITHOUT_CLASSIFICATION	0.9999976919101422	WITHOUT_CLASSIFICATION	2.308089857784644E-6	TEST
//get a snapshot	WITHOUT_CLASSIFICATION	0.9999872511245362	WITHOUT_CLASSIFICATION	1.2748875463683097E-5	TEST
/* package-private */	WITHOUT_CLASSIFICATION	0.9999965877074806	WITHOUT_CLASSIFICATION	3.412292519405248E-6	TEST
/* package-private */	WITHOUT_CLASSIFICATION	0.9999965877074806	WITHOUT_CLASSIFICATION	3.412292519405248E-6	TEST
// key is an entity involved with the operation performed by the listener; // value is a flag indicating if the listener explicitly operates on the entity	WITHOUT_CLASSIFICATION	0.9999982199836722	WITHOUT_CLASSIFICATION	1.7800163277007365E-6	TEST
// EARLY EXIT!!!	WITHOUT_CLASSIFICATION	0.9999883217648048	WITHOUT_CLASSIFICATION	1.1678235195267495E-5	TEST
//ie. the entity came in from update()	WITHOUT_CLASSIFICATION	0.9999885519113001	WITHOUT_CLASSIFICATION	1.1448088699945634E-5	TEST
// before any callbacks, etc, so subdeletions see that this deletion happened first	WITHOUT_CLASSIFICATION	0.999998886894262	WITHOUT_CLASSIFICATION	1.1131057379371602E-6	TEST
// Ensures that containing deletions happen before sub-deletions	WITHOUT_CLASSIFICATION	0.9999996475869497	WITHOUT_CLASSIFICATION	3.5241305038764147E-7	TEST
//	WITHOUT_CLASSIFICATION	0.999928714121282	WITHOUT_CLASSIFICATION	7.128587871800795E-5	TEST
// cascade-delete to collections BEFORE the collection owner is deleted	WITHOUT_CLASSIFICATION	0.9999984183607601	WITHOUT_CLASSIFICATION	1.5816392398917927E-6	TEST
// cascade-delete to many-to-one AFTER the parent was deleted	WITHOUT_CLASSIFICATION	0.9999993698617742	WITHOUT_CLASSIFICATION	6.30138225726169E-7	TEST
// if it is an initialized proxy, let cascade // handle it later on	WITHOUT_CLASSIFICATION	0.9999989954837832	WITHOUT_CLASSIFICATION	1.0045162168230963E-6	TEST
//assign the requested id to the proxy, *before* //reassociating the proxy	WITHOUT_CLASSIFICATION	0.999988996413745	WITHOUT_CLASSIFICATION	1.100358625506619E-5	TEST
// an uninitialized proxy, noop, don't even need to // return an id, since it is never a save()	WITHOUT_CLASSIFICATION	0.9999997678740132	WITHOUT_CLASSIFICATION	2.3212598669892688E-7	TEST
//initialize properties of the event:	WITHOUT_CLASSIFICATION	0.9999956483651389	WITHOUT_CLASSIFICATION	4.351634861020168E-6	TEST
//return the id in the event object	WITHOUT_CLASSIFICATION	0.9999947183533228	WITHOUT_CLASSIFICATION	5.281646677291266E-6	TEST
//TRANSIENT or DELETED	WITHOUT_CLASSIFICATION	0.9999301492822262	WITHOUT_CLASSIFICATION	6.985071777378732E-5	TEST
// use the id assigned to the instance	WITHOUT_CLASSIFICATION	0.999998574233695	WITHOUT_CLASSIFICATION	1.4257663051334043E-6	TEST
// assume this is a newly instantiated transient object // which should be saved rather than updated	WITHOUT_CLASSIFICATION	0.999908201193798	WITHOUT_CLASSIFICATION	9.179880620213407E-5	TEST
// this is a transient object with existing persistent state not loaded by the session	WITHOUT_CLASSIFICATION	0.9999958964768652	WITHOUT_CLASSIFICATION	4.103523134827217E-6	TEST
// a collection loaded in the current session // can not possibly be the collection belonging // to the entity passed to update()	WITHOUT_CLASSIFICATION	0.9999998800050786	WITHOUT_CLASSIFICATION	1.1999492146564597E-7	TEST
//cachedState,	WITHOUT_CLASSIFICATION	0.999951782132301	WITHOUT_CLASSIFICATION	4.8217867699119176E-5	TEST
//assume true, since we don't really know, and it doesn't matter	WITHOUT_CLASSIFICATION	0.9999920602466784	WITHOUT_CLASSIFICATION	7.939753321598808E-6	TEST
//a "detached" collection!	WITHOUT_CLASSIFICATION	0.9999959724240688	WITHOUT_CLASSIFICATION	4.027575931148874E-6	TEST
// if the collection belonged to a different entity, // clean up the existing state of the collection	WITHOUT_CLASSIFICATION	0.999999957605421	WITHOUT_CLASSIFICATION	4.2394579051260685E-8	TEST
//log.debug( "calling onLoad()" );	WITHOUT_CLASSIFICATION	0.9999951061103338	WITHOUT_CLASSIFICATION	4.893889666183022E-6	TEST
//EARLY EXIT!	WITHOUT_CLASSIFICATION	0.9999506752157185	WITHOUT_CLASSIFICATION	4.9324784281489196E-5	TEST
// note: performExecutions() clears all collectionXxxxtion  // collections (the collection actions) in the session	WITHOUT_CLASSIFICATION	0.9999999594105449	WITHOUT_CLASSIFICATION	4.05894552280559E-8	TEST
// if no array holder we found an unwrappered array (this can't occur, // because we now always call wrap() before getting to here) // return (ah==null) ? true : searchForDirtyCollections(ah, type);	WITHOUT_CLASSIFICATION	0.9999999535796025	WITHOUT_CLASSIFICATION	4.64203974728742E-8	TEST
// if not wrappered yet, its dirty (this can't occur, because // we now always call wrap() before getting to here) // return ( ! (obj instanceof PersistentCollection) ) ? //true : searchForDirtyCollections( (PersistentCollection) obj, type );	WITHOUT_CLASSIFICATION	0.9999999770380574	WITHOUT_CLASSIFICATION	2.296194254422492E-8	TEST
//we need to check even if it was not initialized, because of delayed adds!	WITHOUT_CLASSIFICATION	0.9999997609108265	WITHOUT_CLASSIFICATION	2.3908917346723907E-7	TEST
//NOTE: EARLY EXIT!	WITHOUT_CLASSIFICATION	0.9998631359598267	WITHOUT_CLASSIFICATION	1.368640401732885E-4	TEST
// find any entities that are still transient after retry	WITHOUT_CLASSIFICATION	0.9999910035350227	WITHOUT_CLASSIFICATION	8.996464977432098E-6	TEST
//EARLY EXIT!	WITHOUT_CLASSIFICATION	0.9999506752157185	WITHOUT_CLASSIFICATION	4.9324784281489196E-5	TEST
// Check the persistence context for an entry relating to this // entity to be merged...	WITHOUT_CLASSIFICATION	0.9999997490910381	WITHOUT_CLASSIFICATION	2.509089618975698E-7	TEST
// we have specialized case of a detached entity from the // perspective of the merge operation.  Specifically, we // have an incoming entity instance which has a corresponding // entry in the current persistence context, but registered // under a different entity instance	WITHOUT_CLASSIFICATION	0.9999999978753188	WITHOUT_CLASSIFICATION	2.124681277490106E-9	TEST
//DELETED	WITHOUT_CLASSIFICATION	0.9997959710923809	WITHOUT_CLASSIFICATION	2.040289076189409E-4	TEST
//before cascade!	WITHOUT_CLASSIFICATION	0.9999928671894988	WITHOUT_CLASSIFICATION	7.1328105012458416E-6	TEST
// cascade first, so that all unsaved objects get their // copy created before we actually copy //cascadeOnMerge(event, persister, entity, copyCache, Cascades.CASCADE_BEFORE_MERGE);	WITHOUT_CLASSIFICATION	0.999998528744539	WITHOUT_CLASSIFICATION	1.4712554610069979E-6	TEST
//this bit is only *really* absolutely necessary for handling //requestedId, but is also good if we merge multiple object //graphs, since it helps ensure uniqueness	WITHOUT_CLASSIFICATION	0.9999971469008403	WITHOUT_CLASSIFICATION	2.85309915974485E-6	TEST
// continue...; we'll find out if it ends up not getting saved later	WITHOUT_CLASSIFICATION	0.9999997927394711	WITHOUT_CLASSIFICATION	2.0726052888671964E-7	TEST
// cascade first, so that all unsaved objects get their // copy created before we actually copy	WITHOUT_CLASSIFICATION	0.9999949961796155	WITHOUT_CLASSIFICATION	5.0038203845026155E-6	TEST
// check that entity id = requestedId	WITHOUT_CLASSIFICATION	0.9999713096117127	WITHOUT_CLASSIFICATION	2.869038828733352E-5	TEST
//before cascade!	WITHOUT_CLASSIFICATION	0.9999928671894988	WITHOUT_CLASSIFICATION	7.1328105012458416E-6	TEST
// we got here because we assumed that an instance // with an assigned id was detached, when it was // really persistent	WITHOUT_CLASSIFICATION	0.9999983180362956	WITHOUT_CLASSIFICATION	1.6819637043959072E-6	TEST
// cascade first, so that all unsaved objects get their  // copy created before we actually copy	WITHOUT_CLASSIFICATION	0.9999946155664844	WITHOUT_CLASSIFICATION	5.384433515611922E-6	TEST
//copyValues works by reflection, so explicitly mark the entity instance dirty	WITHOUT_CLASSIFICATION	0.9999993093110748	WITHOUT_CLASSIFICATION	6.906889251450208E-7	TEST
//EARLY EXIT	WITHOUT_CLASSIFICATION	0.9999500455557626	WITHOUT_CLASSIFICATION	4.995444423731915E-5	TEST
//source.getBatcher().executeBatch(); //found another way to ensure that all batched joined inserts have been executed	WITHOUT_CLASSIFICATION	0.9999980638644456	WITHOUT_CLASSIFICATION	1.9361355544142487E-6	TEST
// substitutes into values by side-effect	WITHOUT_CLASSIFICATION	0.999996239266026	WITHOUT_CLASSIFICATION	3.7607339739818647E-6	TEST
//now done in EntityIdentityInsertAction //persister.setIdentifier( entity, id, source.getEntityMode() );	WITHOUT_CLASSIFICATION	0.9999994673781797	WITHOUT_CLASSIFICATION	5.326218202844184E-7	TEST
//source.getPersistenceContext().removeNonExist( new EntityKey( id, persister, source.getEntityMode() ) );	WITHOUT_CLASSIFICATION	0.9999989509038687	WITHOUT_CLASSIFICATION	1.0490961313488557E-6	TEST
//keep the existing version number in the case of replicate!	WITHOUT_CLASSIFICATION	0.9999998039242998	WITHOUT_CLASSIFICATION	1.9607570021861683E-7	TEST
// cascade-save to many-to-one BEFORE the parent is saved	WITHOUT_CLASSIFICATION	0.9999992901002078	WITHOUT_CLASSIFICATION	7.098997920938106E-7	TEST
//pass this as an argument only to avoid double looking	WITHOUT_CLASSIFICATION	0.9999921868061434	WITHOUT_CLASSIFICATION	7.813193856493701E-6	TEST
// the object is persistent	WITHOUT_CLASSIFICATION	0.9999855009984078	WITHOUT_CLASSIFICATION	1.4499001592241456E-5	TEST
//the entity is associated with the session, so check its status	WITHOUT_CLASSIFICATION	0.9999762992835624	WITHOUT_CLASSIFICATION	2.3700716437583636E-5	TEST
// do nothing for persistent instances	WITHOUT_CLASSIFICATION	0.9999985041139213	WITHOUT_CLASSIFICATION	1.4958860787221806E-6	TEST
//ie. e.status==DELETED	WITHOUT_CLASSIFICATION	0.9999691255529423	WITHOUT_CLASSIFICATION	3.087444705768264E-5	TEST
// the object is transient or detached	WITHOUT_CLASSIFICATION	0.999992202662961	WITHOUT_CLASSIFICATION	7.797337039025124E-6	TEST
//NOTE EARLY EXIT!	WITHOUT_CLASSIFICATION	0.9998964998789003	WITHOUT_CLASSIFICATION	1.0350012109969473E-4	TEST
// Private constructor - stops checkstyle from complaining.	WITHOUT_CLASSIFICATION	0.9999998523097836	WITHOUT_CLASSIFICATION	1.4769021639608876E-7	TEST
// First, try to find a matching constructor accepting a ViolatedConstraintNameExtracter param...	WITHOUT_CLASSIFICATION	0.9999997891122764	WITHOUT_CLASSIFICATION	2.1088772359297346E-7	TEST
// eat it and try next	WITHOUT_CLASSIFICATION	0.9999986327063307	WITHOUT_CLASSIFICATION	1.367293669167798E-6	TEST
// Otherwise, try to use the no-arg constructor	WITHOUT_CLASSIFICATION	0.9999996687569392	WITHOUT_CLASSIFICATION	3.312430607840468E-7	TEST
// oracle sql-state code for deadlock	WITHOUT_CLASSIFICATION	0.9999979440517	WITHOUT_CLASSIFICATION	2.055948300120627E-6	TEST
// CollectionPropertyMapping processes everything except 'index'.	WITHOUT_CLASSIFICATION	0.9999999116999683	WITHOUT_CLASSIFICATION	8.83000317338707E-8	TEST
// remove initial ", "	WITHOUT_CLASSIFICATION	0.9999993935463453	WITHOUT_CLASSIFICATION	6.064536546623842E-7	TEST
// remove initial " and "	WITHOUT_CLASSIFICATION	0.9999993695998179	WITHOUT_CLASSIFICATION	6.304001820480972E-7	TEST
//beforeClassTokens.add("new"); DEFINITELY DON'T HAVE THIS!!	WITHOUT_CLASSIFICATION	0.9999897223551665	WITHOUT_CLASSIFICATION	1.0277644833513507E-5	TEST
//notAfterClassTokens.add(",");	WITHOUT_CLASSIFICATION	0.9999655822551005	WITHOUT_CLASSIFICATION	3.441774489952303E-5	TEST
// just especially for the trivial collection filter	WITHOUT_CLASSIFICATION	0.9999974533816771	WITHOUT_CLASSIFICATION	2.54661832280201E-6	TEST
//update last non-whitespace token, if necessary	WITHOUT_CLASSIFICATION	0.9999916746048493	WITHOUT_CLASSIFICATION	8.325395150826066E-6	TEST
// select-range is terminated by declaration of "from"	WITHOUT_CLASSIFICATION	0.9999968002546225	WITHOUT_CLASSIFICATION	3.1997453776405833E-6	TEST
//scan for next non-whitespace token	WITHOUT_CLASSIFICATION	0.9999852809574283	WITHOUT_CLASSIFICATION	1.4719042571617119E-5	TEST
// Note this!!	WITHOUT_CLASSIFICATION	0.9998900059823161	WITHOUT_CLASSIFICATION	1.0999401768391412E-4	TEST
// Error message constants.	WITHOUT_CLASSIFICATION	0.9999993450318377	WITHOUT_CLASSIFICATION	6.54968162317776E-7	TEST
// handle trace logging ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999983743257914	WITHOUT_CLASSIFICATION	1.625674208565141E-6	TEST
// semantic action handling ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999996680973966	WITHOUT_CLASSIFICATION	3.3190260335214746E-7	TEST
// Handle collection-fiter compilation. // IMPORTANT NOTE: This is modifying the INPUT (HQL) tree, not the output tree!	WITHOUT_CLASSIFICATION	0.9999980526854378	WITHOUT_CLASSIFICATION	1.9473145621684597E-6	TEST
// Show the modified AST.	WITHOUT_CLASSIFICATION	0.9999848467557099	WITHOUT_CLASSIFICATION	1.515324429013954E-5	TEST
// Create a parameter specification for the collection filter...	WITHOUT_CLASSIFICATION	0.9999997744815932	WITHOUT_CLASSIFICATION	2.255184069547016E-7	TEST
// Use the delegate.	WITHOUT_CLASSIFICATION	0.9999885487700229	WITHOUT_CLASSIFICATION	1.1451229977171122E-5	TEST
// Use the delegate.	WITHOUT_CLASSIFICATION	0.9999885487700229	WITHOUT_CLASSIFICATION	1.1451229977171122E-5	TEST
// Get the names of the columns used to link between the collection // owner and the collection elements.	WITHOUT_CLASSIFICATION	0.9999998311072344	WITHOUT_CLASSIFICATION	1.688927656372135E-7	TEST
// The path AST should be a DotNode, and it should have been evaluated already.	WITHOUT_CLASSIFICATION	0.9999760627642958	WITHOUT_CLASSIFICATION	2.3937235704128654E-5	TEST
// Tell the dot node about the join type.	WITHOUT_CLASSIFICATION	0.9999984681250502	WITHOUT_CLASSIFICATION	1.5318749498230248E-6	TEST
// Re-arrange the tree so that the collection function is the root and the lhs is the path.	WITHOUT_CLASSIFICATION	0.9999957780467224	WITHOUT_CLASSIFICATION	4.221953277736868E-6	TEST
// Don't forget to resolve the argument! // Resolve the collection function now.	WITHOUT_CLASSIFICATION	0.9999996943563595	WITHOUT_CLASSIFICATION	3.056436405768958E-7	TEST
// Resolve everything up to this dot, but don't resolve the placeholders yet.	WITHOUT_CLASSIFICATION	0.9999989176496511	WITHOUT_CLASSIFICATION	1.082350348882834E-6	TEST
// Should mean that no such property was found	WITHOUT_CLASSIFICATION	0.9999987981098685	WITHOUT_CLASSIFICATION	1.2018901314989903E-6	TEST
// Was there an explicit select expression?	WITHOUT_CLASSIFICATION	0.9999991897015326	WITHOUT_CLASSIFICATION	8.10298467473977E-7	TEST
// Attach any mapping-defined "ORDER BY" fragments	WITHOUT_CLASSIFICATION	0.9999993598475225	WITHOUT_CLASSIFICATION	6.401524774201539E-7	TEST
// Use the explicitly declared select expression; determine the // return types indicated by each select token	WITHOUT_CLASSIFICATION	0.9999996870474582	WITHOUT_CLASSIFICATION	3.1295254172564943E-7	TEST
// After that, process the JOINs. // Invoke a delegate to do the work, as this is farily complex.	WITHOUT_CLASSIFICATION	0.9999795216681618	WITHOUT_CLASSIFICATION	2.0478331838121918E-5	TEST
// Make #@%$^#^&# sure no alias is applied to the table name	WITHOUT_CLASSIFICATION	0.999997013722558	WITHOUT_CLASSIFICATION	2.9862774419410366E-6	TEST
// We need to generate ids as part of this bulk insert. // // Note that this is only supported for sequence-style generators and // post-insert-style generators; basically, only in-db generators	WITHOUT_CLASSIFICATION	0.9999824759798328	WITHOUT_CLASSIFICATION	1.7524020167225454E-5	TEST
// Use the delegate.	WITHOUT_CLASSIFICATION	0.9999885487700229	WITHOUT_CLASSIFICATION	1.1451229977171122E-5	TEST
// We need to seed the version value as part of this bulk insert	WITHOUT_CLASSIFICATION	0.9999974957880878	WITHOUT_CLASSIFICATION	2.5042119121225882E-6	TEST
// we need to wrtap the param in a cast()	WITHOUT_CLASSIFICATION	0.9999980763970637	WITHOUT_CLASSIFICATION	1.9236029362302097E-6	TEST
// This is called when it's time to fully resolve a path expression.	WITHOUT_CLASSIFICATION	0.9999976679792353	WITHOUT_CLASSIFICATION	2.3320207646434806E-6	TEST
// Generate implicit joins, only if necessary.	WITHOUT_CLASSIFICATION	0.999999519528417	WITHOUT_CLASSIFICATION	4.804715829604717E-7	TEST
// Notify the FROM element that it is being referenced by the select.	WITHOUT_CLASSIFICATION	0.9999924654492452	WITHOUT_CLASSIFICATION	7.534550754804219E-6	TEST
// Turn off includeSubclasses on all FromElements.	WITHOUT_CLASSIFICATION	0.9999998153918856	WITHOUT_CLASSIFICATION	1.8460811439606906E-7	TEST
// create the node initially with the param name so that it shows // appropriately in the "original text" attribute	WITHOUT_CLASSIFICATION	0.9999996059281667	WITHOUT_CLASSIFICATION	3.940718333734814E-7	TEST
// Use the delegate, resolve identifiers as FROM element aliases.	WITHOUT_CLASSIFICATION	0.9999984177460066	WITHOUT_CLASSIFICATION	1.5822539934690559E-6	TEST
// select clauses for insert statements should alwasy be treated as shallow	WITHOUT_CLASSIFICATION	0.9999982997513814	WITHOUT_CLASSIFICATION	1.7002486186776596E-6	TEST
// no need to even collect this information if the persister is considered multi-table	WITHOUT_CLASSIFICATION	0.9999990627570228	WITHOUT_CLASSIFICATION	9.372429772203722E-7	TEST
// Make sure that the persister is versioned	WITHOUT_CLASSIFICATION	0.9999149784988707	WITHOUT_CLASSIFICATION	8.502150112926986E-5	TEST
// handle trace logging ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999983743257914	WITHOUT_CLASSIFICATION	1.625674208565141E-6	TEST
// Use the delegate.	WITHOUT_CLASSIFICATION	0.9999885487700229	WITHOUT_CLASSIFICATION	1.1451229977171122E-5	TEST
// --Commented out by Inspection (12/11/04 10:56 AM): int getWarningCount();	WITHOUT_CLASSIFICATION	0.9999997680058524	WITHOUT_CLASSIFICATION	2.3199414755646333E-7	TEST
// Alias references and identifiers use the same node class.	WITHOUT_CLASSIFICATION	0.999999826115184	WITHOUT_CLASSIFICATION	1.738848159769169E-7	TEST
// switch	WITHOUT_CLASSIFICATION	0.9999947795282802	WITHOUT_CLASSIFICATION	5.220471719790795E-6	TEST
// make a new one	WITHOUT_CLASSIFICATION	0.9999987398007071	WITHOUT_CLASSIFICATION	1.2601992928693696E-6	TEST
// just do the regular thing if you can't find the ctor // Your AST must have default ctor to use this.	WITHOUT_CLASSIFICATION	0.9999998244919355	WITHOUT_CLASSIFICATION	1.755080644583225E-7	TEST
// Initialize SQL nodes here.	WITHOUT_CLASSIFICATION	0.999999117637424	WITHOUT_CLASSIFICATION	8.823625760063702E-7	TEST
// semantic action processing ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999997636031653	WITHOUT_CLASSIFICATION	2.3639683459901453E-7	TEST
// if template is null we just write the function out as it appears in the hql statement	WITHOUT_CLASSIFICATION	0.9999998427692106	WITHOUT_CLASSIFICATION	1.5723078932967212E-7	TEST
// this function has a template -> redirect output and catch the arguments	WITHOUT_CLASSIFICATION	0.9999989549998153	WITHOUT_CLASSIFICATION	1.0450001846848293E-6	TEST
// --- Inner classes (moved here from sql-gen.g) ---	WITHOUT_CLASSIFICATION	0.9999993959921181	WITHOUT_CLASSIFICATION	6.040078819780348E-7	TEST
// check two "adjecent" nodes at the top of the from-clause tree	WITHOUT_CLASSIFICATION	0.9999999401187236	WITHOUT_CLASSIFICATION	5.988127638606242E-8	TEST
///////////////////////////////////////////////////////////////////////	WITHOUT_CLASSIFICATION	0.9997836593576488	WITHOUT_CLASSIFICATION	2.1634064235125618E-4	TEST
// these are just two unrelated table references	WITHOUT_CLASSIFICATION	0.9999961827135019	WITHOUT_CLASSIFICATION	3.817286498126457E-6	TEST
// again, both should be FromElements	WITHOUT_CLASSIFICATION	0.999994633294427	WITHOUT_CLASSIFICATION	5.366705572968716E-6	TEST
// NOTE : firstRow is zero-based	WITHOUT_CLASSIFICATION	0.9998657120228279	WITHOUT_CLASSIFICATION	1.3428797717212075E-4	TEST
// right represents a joins originating from left; or // both right and left reprersent joins originating from the same FromElement	WITHOUT_CLASSIFICATION	0.9999998508014019	WITHOUT_CLASSIFICATION	1.4919859826307304E-7	TEST
// check a set of parent/child nodes in the from-clause tree // to determine if a comma is required between them	WITHOUT_CLASSIFICATION	0.9999998763267075	WITHOUT_CLASSIFICATION	1.2367329260812932E-7	TEST
// right represents a joins originating from left...	WITHOUT_CLASSIFICATION	0.9999997351910721	WITHOUT_CLASSIFICATION	2.6480892788596584E-7	TEST
// all clear	WITHOUT_CLASSIFICATION	0.999998092393257	WITHOUT_CLASSIFICATION	1.907606743010939E-6	TEST
// Ignore the token class name parameter, and use a specific token class.	WITHOUT_CLASSIFICATION	0.9999993106864448	WITHOUT_CLASSIFICATION	6.893135552110528E-7	TEST
//overriden to avoid System.exit	WITHOUT_CLASSIFICATION	0.9999926805995311	WITHOUT_CLASSIFICATION	7.3194004689366865E-6	TEST
//overriden to avoid System.exit	WITHOUT_CLASSIFICATION	0.9999926805995311	WITHOUT_CLASSIFICATION	7.3194004689366865E-6	TEST
// remember that ordinal parameters numbers are 1-based!!!	WITHOUT_CLASSIFICATION	0.999998716912868	WITHOUT_CLASSIFICATION	1.2830871320345068E-6	TEST
// don't care about other param types here, just those explicitly user-defined...	WITHOUT_CLASSIFICATION	0.9999997836065775	WITHOUT_CLASSIFICATION	2.1639342249840228E-7	TEST
// If the query is already compiled, skip the compilation.	WITHOUT_CLASSIFICATION	0.9999995162548277	WITHOUT_CLASSIFICATION	4.837451722440449E-7	TEST
// Remember the parameters for the compilation.	WITHOUT_CLASSIFICATION	0.9999989836737476	WITHOUT_CLASSIFICATION	1.0163262523664123E-6	TEST
// PHASE 1 : Parse the HQL into an AST.	WITHOUT_CLASSIFICATION	0.999998619879238	WITHOUT_CLASSIFICATION	1.380120762035771E-6	TEST
// PHASE 2 : Analyze the HQL AST, and produce an SQL AST.	WITHOUT_CLASSIFICATION	0.9999987663744657	WITHOUT_CLASSIFICATION	1.2336255341963897E-6	TEST
// PHASE 3 : Generate the SQL.	WITHOUT_CLASSIFICATION	0.9999964355580807	WITHOUT_CLASSIFICATION	3.5644419193117075E-6	TEST
// we do not actually propogate ANTLRExceptions as a cause, so // log it here for diagnostic purposes	WITHOUT_CLASSIFICATION	0.999999777816138	WITHOUT_CLASSIFICATION	2.2218386191281419E-7	TEST
// we do not actually propogate ANTLRExceptions as a cause, so // log it here for diagnostic purposes	WITHOUT_CLASSIFICATION	0.999999777816138	WITHOUT_CLASSIFICATION	2.2218386191281419E-7	TEST
//only needed during compilation phase...	WITHOUT_CLASSIFICATION	0.9999996989419601	WITHOUT_CLASSIFICATION	3.0105803998044207E-7	TEST
// Transform the tree.	WITHOUT_CLASSIFICATION	0.9999943515626151	WITHOUT_CLASSIFICATION	5.6484373848904214E-6	TEST
// Parse the query string into an HQL AST.	WITHOUT_CLASSIFICATION	0.9999995536791847	WITHOUT_CLASSIFICATION	4.463208153783624E-7	TEST
// Delegate to the QueryLoader...	WITHOUT_CLASSIFICATION	0.9999914617884909	WITHOUT_CLASSIFICATION	8.538211509182417E-6	TEST
// Delegate to the QueryLoader...	WITHOUT_CLASSIFICATION	0.9999914617884909	WITHOUT_CLASSIFICATION	8.538211509182417E-6	TEST
// Delegate to the QueryLoader...	WITHOUT_CLASSIFICATION	0.9999914617884909	WITHOUT_CLASSIFICATION	8.538211509182417E-6	TEST
// NOTE : ( max - 1 ) because first is zero-based while max is not...	WITHOUT_CLASSIFICATION	0.9999952443001543	WITHOUT_CLASSIFICATION	4.755699845658117E-6	TEST
// -- Package local methods for the QueryLoader delegate --	WITHOUT_CLASSIFICATION	0.9999992875014085	WITHOUT_CLASSIFICATION	7.124985914658746E-7	TEST
// If there are no collection fetches, then no further checks are needed	WITHOUT_CLASSIFICATION	0.9999994848888545	WITHOUT_CLASSIFICATION	5.151111454155835E-7	TEST
// A shallow query is ok (although technically there should be no fetching here...)	WITHOUT_CLASSIFICATION	0.9999838538484633	WITHOUT_CLASSIFICATION	1.614615153669712E-5	TEST
// should be the first, but just to be safe...	WITHOUT_CLASSIFICATION	0.9999872046800926	WITHOUT_CLASSIFICATION	1.2795319907379669E-5	TEST
// Use the delegate.	WITHOUT_CLASSIFICATION	0.9999885487700229	WITHOUT_CLASSIFICATION	1.1451229977171122E-5	TEST
// Use the delegate.	WITHOUT_CLASSIFICATION	0.9999885487700229	WITHOUT_CLASSIFICATION	1.1451229977171122E-5	TEST
// Impl Note: allows multiple collection fetches as long as the // entire fecthed graph still "points back" to a single // root entity for return	WITHOUT_CLASSIFICATION	0.9999994441058708	WITHOUT_CLASSIFICATION	5.558941291032827E-7	TEST
// Otherwise, we have a non-scalar select with defined collection fetch(es). // Make sure that there is only a single root entity in the return (no tuples)	WITHOUT_CLASSIFICATION	0.9999995617398563	WITHOUT_CLASSIFICATION	4.3826014373610805E-7	TEST
// This is not strictly true.  We actually just need to make sure that // it is ordered by root-entity PK and that that order-by comes before // any non-root-entity ordering...	WITHOUT_CLASSIFICATION	0.9999966212019189	WITHOUT_CLASSIFICATION	3.3787980809899096E-6	TEST
//	WITHOUT_CLASSIFICATION	0.999928714121282	WITHOUT_CLASSIFICATION	7.128587871800795E-5	TEST
// we are already processing a dot-structure	WITHOUT_CLASSIFICATION	0.9999997522681819	WITHOUT_CLASSIFICATION	2.4773181806663496E-7	TEST
// igndore it...	WITHOUT_CLASSIFICATION	0.9999978174329497	WITHOUT_CLASSIFICATION	2.18256705021751E-6	TEST
// we are now at a new tree level	WITHOUT_CLASSIFICATION	0.9999989336088093	WITHOUT_CLASSIFICATION	1.0663911906574567E-6	TEST
// [jsd] The fix for HHH-558...	WITHOUT_CLASSIFICATION	0.9999941752351545	WITHOUT_CLASSIFICATION	5.824764845425413E-6	TEST
// If the token can tell us if it could be an identifier...	WITHOUT_CLASSIFICATION	0.9999950912078834	WITHOUT_CLASSIFICATION	4.90879211646742E-6	TEST
// ... and the expected token type was an identifier, then:	WITHOUT_CLASSIFICATION	0.99999821092407	WITHOUT_CLASSIFICATION	1.789075929913074E-6	TEST
// Use the token as an identifier.	WITHOUT_CLASSIFICATION	0.9999927521731138	WITHOUT_CLASSIFICATION	7.247826886317369E-6	TEST
// Add the token to the AST.	WITHOUT_CLASSIFICATION	0.9999883157502846	WITHOUT_CLASSIFICATION	1.1684249715418843E-5	TEST
// (NOT (EQ a b) ) => (NE a b)	WITHOUT_CLASSIFICATION	0.9999609738365101	WITHOUT_CLASSIFICATION	3.90261634898993E-5	TEST
// (NOT (NE a b) ) => (EQ a b)	WITHOUT_CLASSIFICATION	0.9999609738365101	WITHOUT_CLASSIFICATION	3.90261634898993E-5	TEST
// (NOT (LT a b) ) => (GE a b)	WITHOUT_CLASSIFICATION	0.9999689836208872	WITHOUT_CLASSIFICATION	3.10163791128425E-5	TEST
// (NOT (GE a b) ) => (LT a b)	WITHOUT_CLASSIFICATION	0.9999689836208872	WITHOUT_CLASSIFICATION	3.10163791128425E-5	TEST
// (NOT (LE a b) ) => (GT a b)	WITHOUT_CLASSIFICATION	0.9999691453436117	WITHOUT_CLASSIFICATION	3.085465638828421E-5	TEST
// (NOT (LIKE a b) ) => (NOT_LIKE a b)	WITHOUT_CLASSIFICATION	0.999949946126694	WITHOUT_CLASSIFICATION	5.005387330602695E-5	TEST
// (NOT (NOT_LIKE a b) ) => (LIKE a b)	WITHOUT_CLASSIFICATION	0.999949946126694	WITHOUT_CLASSIFICATION	5.005387330602695E-5	TEST
// (NOT (IS_NOT_NULL a b) ) => (IS_NULL a b)	WITHOUT_CLASSIFICATION	0.9999443805951891	WITHOUT_CLASSIFICATION	5.561940481084586E-5	TEST
// (NOT (BETWEEN a b) ) => (NOT_BETWEEN a b)	WITHOUT_CLASSIFICATION	0.9999267001533664	WITHOUT_CLASSIFICATION	7.329984663363396E-5	TEST
// Initialize the error handling delegate.	WITHOUT_CLASSIFICATION	0.999991140440591	WITHOUT_CLASSIFICATION	8.859559409013723E-6	TEST
//overriden to avoid System.exit	WITHOUT_CLASSIFICATION	0.9999926805995311	WITHOUT_CLASSIFICATION	7.3194004689366865E-6	TEST
// if // if // Otherwise, handle the error normally.	WITHOUT_CLASSIFICATION	0.9999979598734419	WITHOUT_CLASSIFICATION	2.040126558147278E-6	TEST
// (NOT (NOT_BETWEEN a b) ) => (BETWEEN a b)	WITHOUT_CLASSIFICATION	0.9999267001533664	WITHOUT_CLASSIFICATION	7.329984663363396E-5	TEST
/* This can never happen because this rule will always eliminate the child NOT.	WITHOUT_CLASSIFICATION	0.9999780293259809	WITHOUT_CLASSIFICATION	2.197067401910811E-5	TEST
// Just add a 'not' parent.	WITHOUT_CLASSIFICATION	0.9999979745731109	WITHOUT_CLASSIFICATION	2.025426889178945E-6	TEST
// (EQ NULL b) => (IS_NULL b)	WITHOUT_CLASSIFICATION	0.9999760982168053	WITHOUT_CLASSIFICATION	2.3901783194620902E-5	TEST
// (EQ a NULL) => (IS_NULL a)	WITHOUT_CLASSIFICATION	0.9999884087365244	WITHOUT_CLASSIFICATION	1.1591263475641403E-5	TEST
// NOTE: Because we're using ASTUtil.createParent(), the tree must be created from the bottom up. // IS EMPTY x => (EXISTS (QUERY (SELECT_FROM (FROM x) ) ) )	WITHOUT_CLASSIFICATION	0.999999258731943	WITHOUT_CLASSIFICATION	7.412680571119992E-7	TEST
// Add NOT if it's negated.	WITHOUT_CLASSIFICATION	0.999818529949051	WITHOUT_CLASSIFICATION	1.8147005094902902E-4	TEST
// Create nodes that track line and column number.	WITHOUT_CLASSIFICATION	0.9999992624424121	WITHOUT_CLASSIFICATION	7.375575877572894E-7	TEST
// Case 1: Multi token keywords GROUP BY and ORDER BY // The next token ( LT(2) ) should be 'by'... otherwise, this is just an ident.	WITHOUT_CLASSIFICATION	0.9999932241986095	WITHOUT_CLASSIFICATION	6.775801390535743E-6	TEST
// Case 2: The current token is after FROM and before '.'.	WITHOUT_CLASSIFICATION	0.9999175148667819	WITHOUT_CLASSIFICATION	8.248513321805693E-5	TEST
// This handles HHH-354, where there is a strange property name in a where clause. // If the lookahead contains a DOT then something that isn't an IDENT...	WITHOUT_CLASSIFICATION	0.9999995705411	WITHOUT_CLASSIFICATION	4.2945889998132405E-7	TEST
// See if the second lookahed token can be an identifier.	WITHOUT_CLASSIFICATION	0.9999990191198854	WITHOUT_CLASSIFICATION	9.808801145706451E-7	TEST
// Set it!	WITHOUT_CLASSIFICATION	0.9999941159586209	WITHOUT_CLASSIFICATION	5.8840413790622885E-6	TEST
// ignore	WITHOUT_CLASSIFICATION	0.9999977344954267	WITHOUT_CLASSIFICATION	2.26550457329293E-6	TEST
// strip the " where "	WITHOUT_CLASSIFICATION	0.9999950068175597	WITHOUT_CLASSIFICATION	4.993182440300293E-6	TEST
// Don't really know all the codes required to adequately decipher returned jdbc exceptions here. // simply allow the failure to be eaten and the subsequent insert-selects/deletes should fail	WITHOUT_CLASSIFICATION	0.9999999296896651	WITHOUT_CLASSIFICATION	7.031033491352642E-8	TEST
// at the very least cleanup the data :)	WITHOUT_CLASSIFICATION	0.9999986781311897	WITHOUT_CLASSIFICATION	1.321868810307795E-6	TEST
// First, save off the pertinent ids, as the return value	WITHOUT_CLASSIFICATION	0.9999994292670215	WITHOUT_CLASSIFICATION	5.707329784934937E-7	TEST
// jdbc params are 1-based	WITHOUT_CLASSIFICATION	0.9999987592173917	WITHOUT_CLASSIFICATION	1.24078260832277E-6	TEST
// jdbc params are 1-based	WITHOUT_CLASSIFICATION	0.9999987592173917	WITHOUT_CLASSIFICATION	1.24078260832277E-6	TEST
// Start performing the updates	WITHOUT_CLASSIFICATION	0.9999892481513981	WITHOUT_CLASSIFICATION	1.0751848601914727E-5	TEST
// First, save off the pertinent ids, saving the number of pertinent ids for return	WITHOUT_CLASSIFICATION	0.9999996057602081	WITHOUT_CLASSIFICATION	3.942397919513376E-7	TEST
// Start performing the deletes	WITHOUT_CLASSIFICATION	0.9999966522863911	WITHOUT_CLASSIFICATION	3.347713608832974E-6	TEST
// otherwise, everything ok.	WITHOUT_CLASSIFICATION	0.9999966644491334	WITHOUT_CLASSIFICATION	3.3355508666625692E-6	TEST
// visit width-first, then depth	WITHOUT_CLASSIFICATION	0.9999903844629525	WITHOUT_CLASSIFICATION	9.615537047497106E-6	TEST
// if the types report logical equivalence, return true...	WITHOUT_CLASSIFICATION	0.9999998175003971	WITHOUT_CLASSIFICATION	1.8249960282280284E-7	TEST
// otherwise, perform a "deep equivalence" check...	WITHOUT_CLASSIFICATION	0.9999997967563521	WITHOUT_CLASSIFICATION	2.0324364794580517E-7	TEST
// If there is no WHERE node, make one.	WITHOUT_CLASSIFICATION	0.9999964142758518	WITHOUT_CLASSIFICATION	3.5857241482810707E-6	TEST
// inject the WHERE after the parent	WITHOUT_CLASSIFICATION	0.9999802653528611	WITHOUT_CLASSIFICATION	1.973464713886223E-5	TEST
// Never include subclasses for implied from elements.	WITHOUT_CLASSIFICATION	0.9999985580881514	WITHOUT_CLASSIFICATION	1.441911848623208E-6	TEST
// Moved here from SelectClause [jsd]	WITHOUT_CLASSIFICATION	0.9999994495544031	WITHOUT_CLASSIFICATION	5.504455968749063E-7	TEST
///////////////////////////////////////////////////////////////////////////	WITHOUT_CLASSIFICATION	0.9997836593576488	WITHOUT_CLASSIFICATION	2.1634064235125618E-4	TEST
// Use the table fromElement and the property name to get the array of column names.	WITHOUT_CLASSIFICATION	0.9999997272796127	WITHOUT_CLASSIFICATION	2.727203873287616E-7	TEST
// Set the attributes of the property reference expression.	WITHOUT_CLASSIFICATION	0.9999995213139217	WITHOUT_CLASSIFICATION	4.786860784420299E-7	TEST
// If the uresolved property path isn't set yet, just use the property name.	WITHOUT_CLASSIFICATION	0.9999960190264902	WITHOUT_CLASSIFICATION	3.980973509801212E-6	TEST
// The 'from element' that the property is in.	WITHOUT_CLASSIFICATION	0.9999827305313335	WITHOUT_CLASSIFICATION	1.726946866652381E-5	TEST
// Prepare the left hand side and get the data type.	WITHOUT_CLASSIFICATION	0.999997520922783	WITHOUT_CLASSIFICATION	2.4790772168749944E-6	TEST
// Prepare the left hand side and get the data type.	WITHOUT_CLASSIFICATION	0.999997520922783	WITHOUT_CLASSIFICATION	2.4790772168749944E-6	TEST
// If this dot has already been resolved, stop now.	WITHOUT_CLASSIFICATION	0.9999851859628612	WITHOUT_CLASSIFICATION	1.4814037138845128E-5	TEST
// If there is no data type for this node, and we're at the end of the path (top most dot node), then // this might be a Java constant.	WITHOUT_CLASSIFICATION	0.9999990399911728	WITHOUT_CLASSIFICATION	9.600088271611722E-7	TEST
// The property is a collection...	WITHOUT_CLASSIFICATION	0.9999987978994131	WITHOUT_CLASSIFICATION	1.2021005868716646E-6	TEST
// The property is a component...	WITHOUT_CLASSIFICATION	0.9999990254185631	WITHOUT_CLASSIFICATION	9.745814368624519E-7	TEST
// The property is another class..	WITHOUT_CLASSIFICATION	0.9999969125066226	WITHOUT_CLASSIFICATION	3.087493377511938E-6	TEST
// Otherwise, this is a primitive type.	WITHOUT_CLASSIFICATION	0.9999902434931346	WITHOUT_CLASSIFICATION	9.7565068653594E-6	TEST
//foo.bars.size (also handles deprecated stuff like foo.bars.maxelement for backwardness)	WITHOUT_CLASSIFICATION	0.9999979344847325	WITHOUT_CLASSIFICATION	2.0655152674091702E-6	TEST
// This 'dot' expression now refers to the resulting from element.	WITHOUT_CLASSIFICATION	0.9999994044801014	WITHOUT_CLASSIFICATION	5.955198986361966E-7	TEST
// Always add the collection's query spaces.	WITHOUT_CLASSIFICATION	0.9999995314685242	WITHOUT_CLASSIFICATION	4.6853147586362297E-7	TEST
// in non-select queries, the only time we should need to join is if we are in a subquery from clause	WITHOUT_CLASSIFICATION	0.9999997400872723	WITHOUT_CLASSIFICATION	2.599127277164416E-7	TEST
// this is the regression style determination which matches the logic of the classic translator	WITHOUT_CLASSIFICATION	0.9999991665029794	WITHOUT_CLASSIFICATION	8.334970205283184E-7	TEST
// This 'dot' expression now refers to the resulting from element.	WITHOUT_CLASSIFICATION	0.9999994044801014	WITHOUT_CLASSIFICATION	5.955198986361966E-7	TEST
// even though we might find a pre-existing element by join path, we may not be able to reuse it...	WITHOUT_CLASSIFICATION	0.9999999501669794	WITHOUT_CLASSIFICATION	4.983302061302483E-8	TEST
// NOTE : addDuplicateAlias() already performs nullness checks on the alias.	WITHOUT_CLASSIFICATION	0.9999974901533377	WITHOUT_CLASSIFICATION	2.5098466622309013E-6	TEST
// if the from-clauses are the same, we can be a little more aggressive in terms of what we reuse	WITHOUT_CLASSIFICATION	0.9999998249969977	WITHOUT_CLASSIFICATION	1.7500300219810492E-7	TEST
// again, null != null here	WITHOUT_CLASSIFICATION	0.9999985946025663	WITHOUT_CLASSIFICATION	1.4053974336384412E-6	TEST
// If this is an implied join in a from element, then use the impled join type which is part of the // tree parser's state (set by the gramamar actions).	WITHOUT_CLASSIFICATION	0.9999991845532368	WITHOUT_CLASSIFICATION	8.154467633048609E-7	TEST
// otherwise (subquery case) dont reuse the fromElement if we are processing the from-clause of the subquery	WITHOUT_CLASSIFICATION	0.9999999846877232	WITHOUT_CLASSIFICATION	1.531227673926421E-8	TEST
// we know only the lhs-hand type, so use that	WITHOUT_CLASSIFICATION	0.9999983484170337	WITHOUT_CLASSIFICATION	1.651582966307495E-6	TEST
// the referenced node text is the special 'id'	WITHOUT_CLASSIFICATION	0.9999964943878513	WITHOUT_CLASSIFICATION	3.5056121486457635E-6	TEST
// only the identifier property field name can be a reference to the associated entity's PK...	WITHOUT_CLASSIFICATION	0.9999994677665467	WITHOUT_CLASSIFICATION	5.322334533063608E-7	TEST
// special shortcut for id properties, skip the join! // this must only occur at the _end_ of a path expression	WITHOUT_CLASSIFICATION	0.9999995860973381	WITHOUT_CLASSIFICATION	4.139026619410921E-7	TEST
// Append the new property name onto the unresolved path.	WITHOUT_CLASSIFICATION	0.9999988592353735	WITHOUT_CLASSIFICATION	1.1407646264712126E-6	TEST
// If the lhs is a collection, use CollectionPropertyMapping	WITHOUT_CLASSIFICATION	0.9999996341213772	WITHOUT_CLASSIFICATION	3.658786228558691E-7	TEST
// Tell the destination fromElement to 'includeSubclasses'.	WITHOUT_CLASSIFICATION	0.9999995587423369	WITHOUT_CLASSIFICATION	4.412576629666918E-7	TEST
// Use theta style (for regression) // Move the node up, after the origin node.	WITHOUT_CLASSIFICATION	0.9999984847168222	WITHOUT_CLASSIFICATION	1.5152831778072268E-6	TEST
// Don't resolve the node again.	WITHOUT_CLASSIFICATION	0.9999975758573917	WITHOUT_CLASSIFICATION	2.424142608263918E-6	TEST
// for expected parameter type injection, we expect that the lhs represents // some form of property ref and that the children of the in-list represent // one-or-more params.	WITHOUT_CLASSIFICATION	0.9999996104317678	WITHOUT_CLASSIFICATION	3.8956823221073566E-7	TEST
// we need to strip off the embedded parens so that sql-gen does not double these up	WITHOUT_CLASSIFICATION	0.9999992667828234	WITHOUT_CLASSIFICATION	7.332171766753902E-7	TEST
// we have something like : "? [op] rhs"	WITHOUT_CLASSIFICATION	0.9999991166010181	WITHOUT_CLASSIFICATION	8.833989818341611E-7	TEST
// we have something like : "lhs [op] ?"	WITHOUT_CLASSIFICATION	0.9999986684693154	WITHOUT_CLASSIFICATION	1.3315306846517478E-6	TEST
// we know only the rhs-hand type, so use that	WITHOUT_CLASSIFICATION	0.999998865987841	WITHOUT_CLASSIFICATION	1.1340121589074318E-6	TEST
// handle the (assumed) valid cases: // #1 - the only valid datetime addition synatx is one or the other is a datetime (but not both)	WITHOUT_CLASSIFICATION	0.9999996764466927	WITHOUT_CLASSIFICATION	3.2355330727330576E-7	TEST
// one or the other needs to be a datetime for us to get into this method in the first place...	WITHOUT_CLASSIFICATION	0.999999012628871	WITHOUT_CLASSIFICATION	9.873711289643675E-7	TEST
// #3 - note that this is also true of "datetime - :param"...	WITHOUT_CLASSIFICATION	0.999991561562755	WITHOUT_CLASSIFICATION	8.438437244915765E-6	TEST
// #2	WITHOUT_CLASSIFICATION	0.9999861304340348	WITHOUT_CLASSIFICATION	1.3869565965232276E-5	TEST
// Generate the inner join -- The elements need to be joined to the collection they are in.	WITHOUT_CLASSIFICATION	0.9999997974607344	WITHOUT_CLASSIFICATION	2.0253926553033013E-7	TEST
// nothing to do	WITHOUT_CLASSIFICATION	0.9999968844391838	WITHOUT_CLASSIFICATION	3.1155608163207418E-6	TEST
// The 'from element' that represents the elements of the collection.	WITHOUT_CLASSIFICATION	0.9999993351930381	WITHOUT_CLASSIFICATION	6.648069619243407E-7	TEST
// Add the condition to the join sequence that qualifies the indexed element.	WITHOUT_CLASSIFICATION	0.9999998381709247	WITHOUT_CLASSIFICATION	1.6182907523658935E-7	TEST
// Sometimes use the element table alias, sometimes use the... umm... collection table alias (many to many)	WITHOUT_CLASSIFICATION	0.9999999613045569	WITHOUT_CLASSIFICATION	3.8695443035056525E-8	TEST
// Now, set the text for this node.  It should be the element columns.	WITHOUT_CLASSIFICATION	0.9999557862388779	WITHOUT_CLASSIFICATION	4.4213761122014236E-5	TEST
// Get the function return value type, based on the type of the first argument.	WITHOUT_CLASSIFICATION	0.9999997814570794	WITHOUT_CLASSIFICATION	2.1854292070551902E-7	TEST
// This will call initialize(tok)!	WITHOUT_CLASSIFICATION	0.9999947414936263	WITHOUT_CLASSIFICATION	5.258506373654033E-6	TEST
// mutation depends on the types of nodes invloved...	WITHOUT_CLASSIFICATION	0.9999998838329908	WITHOUT_CLASSIFICATION	1.1616700923678925E-7	TEST
// "pass along" our initial embedded parameter node(s) to the first generated // sql fragment so that it can be handled later for parameter binding...	WITHOUT_CLASSIFICATION	0.9999997738368287	WITHOUT_CLASSIFICATION	2.261631712746935E-7	TEST
// logic operators by definition resolve to booleans	WITHOUT_CLASSIFICATION	0.9999998891761948	WITHOUT_CLASSIFICATION	1.1082380523613902E-7	TEST
// Generated select expressions are already resolved, nothing to do.	WITHOUT_CLASSIFICATION	0.9999999326613263	WITHOUT_CLASSIFICATION	6.733867379351609E-8	TEST
// The path may be a reference to an alias defined in the parent query.	WITHOUT_CLASSIFICATION	0.9999991625684322	WITHOUT_CLASSIFICATION	8.374315677783881E-7	TEST
// The HQL class alias refers to the class name.	WITHOUT_CLASSIFICATION	0.9999984756414657	WITHOUT_CLASSIFICATION	1.5243585342689881E-6	TEST
// Associate the table alias with the element.	WITHOUT_CLASSIFICATION	0.9999969721507046	WITHOUT_CLASSIFICATION	3.0278492953806793E-6	TEST
// try the parent FromClause...	WITHOUT_CLASSIFICATION	0.9999994860456107	WITHOUT_CLASSIFICATION	5.139543893714774E-7	TEST
// Add the new node to the map so that we don't create it twice.	WITHOUT_CLASSIFICATION	0.9999996870050438	WITHOUT_CLASSIFICATION	3.129949560902092E-7	TEST
// Make sure that all from elements registered with this FROM clause are actually in the AST.	WITHOUT_CLASSIFICATION	0.9999939345934968	WITHOUT_CLASSIFICATION	6.065406503225824E-6	TEST
// Invoke setScalarColumnText on each constructor argument.	WITHOUT_CLASSIFICATION	0.9999998795232348	WITHOUT_CLASSIFICATION	1.2047676516750034E-7	TEST
// Collect the select expressions, skip the first child because it is the class name.	WITHOUT_CLASSIFICATION	0.9999985007230475	WITHOUT_CLASSIFICATION	1.499276952477804E-6	TEST
// return an empty Type array	WITHOUT_CLASSIFICATION	0.9999995171054123	WITHOUT_CLASSIFICATION	4.828945876064412E-7	TEST
// Constructors are always considered scalar results.	WITHOUT_CLASSIFICATION	0.999999762543408	WITHOUT_CLASSIFICATION	2.3745659196680974E-7	TEST
// this is the exception returned by ReflectHelper.getConstructor() if it cannot // locate an appropriate constructor	WITHOUT_CLASSIFICATION	0.9999991501537167	WITHOUT_CLASSIFICATION	8.498462832078918E-7	TEST
// if there is no order by, make one	WITHOUT_CLASSIFICATION	0.9999989444267827	WITHOUT_CLASSIFICATION	1.0555732173396336E-6	TEST
// Find the WHERE; if there is no WHERE, find the FROM...	WITHOUT_CLASSIFICATION	0.9999940187773264	WITHOUT_CLASSIFICATION	5.981222673612734E-6	TEST
// Now, inject the newly built ORDER BY into the tree	WITHOUT_CLASSIFICATION	0.9999944621464538	WITHOUT_CLASSIFICATION	5.537853546143938E-6	TEST
// ParameterContainer impl ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999982954972765	WITHOUT_CLASSIFICATION	1.7045027235093838E-6	TEST
// logic operators by definition resolve to boolean.	WITHOUT_CLASSIFICATION	0.9999998627031783	WITHOUT_CLASSIFICATION	1.3729682175680681E-7	TEST
// Render the identifier select fragment using the table alias.	WITHOUT_CLASSIFICATION	0.9999997191137234	WITHOUT_CLASSIFICATION	2.8088627660145175E-7	TEST
// Class names in the FROM clause result in a JoinSequence (the old FromParser does this).	WITHOUT_CLASSIFICATION	0.9999996935768338	WITHOUT_CLASSIFICATION	3.0642316611651596E-7	TEST
// For many-to-many joins, use the tablename from the queryable collection for the default text.	WITHOUT_CLASSIFICATION	0.9999999496083757	WITHOUT_CLASSIFICATION	5.0391624410907155E-8	TEST
// Otherwise, use the property mapping.	WITHOUT_CLASSIFICATION	0.999998090266661	WITHOUT_CLASSIFICATION	1.9097333390408423E-6	TEST
// should be safe to only ever expect EntityPersister references here	WITHOUT_CLASSIFICATION	0.9999976387681835	WITHOUT_CLASSIFICATION	2.3612318165409933E-6	TEST
// If the property is a special collection property name, return a CollectionPropertyMapping.	WITHOUT_CLASSIFICATION	0.9999997383891082	WITHOUT_CLASSIFICATION	2.6161089184068076E-7	TEST
// Collection of components.	WITHOUT_CLASSIFICATION	0.999999761188866	WITHOUT_CLASSIFICATION	2.388111339751109E-7	TEST
// make sure the lhs is "assignable"...	WITHOUT_CLASSIFICATION	0.9999951808368658	WITHOUT_CLASSIFICATION	4.819163134246935E-6	TEST
// false indicates to not generate parens around the assignment	WITHOUT_CLASSIFICATION	0.999998001129681	WITHOUT_CLASSIFICATION	1.9988703190566666E-6	TEST
// Register the FromElement with the FROM clause, now that we have the names and aliases.	WITHOUT_CLASSIFICATION	0.9999972080556484	WITHOUT_CLASSIFICATION	2.791944351494509E-6	TEST
// currently allowed...	WITHOUT_CLASSIFICATION	0.9999985263720148	WITHOUT_CLASSIFICATION	1.4736279852746036E-6	TEST
// HHH-276 : implied joins in a subselect where clause - The destination needs to be added // to the destination's from clause. // Not sure if this is will fix everything, but it works.	WITHOUT_CLASSIFICATION	0.9999997711120692	WITHOUT_CLASSIFICATION	2.288879308321863E-7	TEST
//return classAlias == null ? className : classAlias;	WITHOUT_CLASSIFICATION	0.9999969920394659	WITHOUT_CLASSIFICATION	3.007960534085046E-6	TEST
// This is an explicit FROM element.	WITHOUT_CLASSIFICATION	0.9999929612527875	WITHOUT_CLASSIFICATION	7.038747212496154E-6	TEST
// ParameterContainer impl ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999982954972765	WITHOUT_CLASSIFICATION	1.7045027235093838E-6	TEST
// Fetch can't be used with scroll() or iterate().	WITHOUT_CLASSIFICATION	0.9999902135247842	WITHOUT_CLASSIFICATION	9.786475215746163E-6	TEST
// If it's not implied or it is implied and it's a many to many join where the target wasn't found.	WITHOUT_CLASSIFICATION	0.999995556420714	WITHOUT_CLASSIFICATION	4.443579286032001E-6	TEST
// Since this is an explicit FROM element, it can't be implied in the FROM clause.	WITHOUT_CLASSIFICATION	0.9999987579699863	WITHOUT_CLASSIFICATION	1.2420300137494648E-6	TEST
// Do nothing, eplicit from elements are *always* in the projection list.	WITHOUT_CLASSIFICATION	0.9999999202762578	WITHOUT_CLASSIFICATION	7.972374210183138E-8	TEST
// propertyName refers to something like collection.size...	WITHOUT_CLASSIFICATION	0.9999998459204356	WITHOUT_CLASSIFICATION	1.54079564309625E-7	TEST
// property name is a sub-path of a component...	WITHOUT_CLASSIFICATION	0.9999997344924112	WITHOUT_CLASSIFICATION	2.655075888913713E-7	TEST
// Always add the collection's query spaces.	WITHOUT_CLASSIFICATION	0.9999995314685242	WITHOUT_CLASSIFICATION	4.6853147586362297E-7	TEST
// nothing to do; even if the operand is a parameter, no way we could // infer an appropriate expected type here	WITHOUT_CLASSIFICATION	0.9999999036989337	WITHOUT_CLASSIFICATION	9.630106639249107E-8	TEST
// logic operators by definition resolve to booleans	WITHOUT_CLASSIFICATION	0.9999998891761948	WITHOUT_CLASSIFICATION	1.1082380523613902E-7	TEST
// DotNode uses null here...	WITHOUT_CLASSIFICATION	0.9999989525745122	WITHOUT_CLASSIFICATION	1.0474254877669269E-6	TEST
// We represent a from-clause alias	WITHOUT_CLASSIFICATION	0.9999996593395718	WITHOUT_CLASSIFICATION	3.4066042825135904E-7	TEST
// we are the LHS of the DOT representing a naked comp-prop-ref	WITHOUT_CLASSIFICATION	0.9999994954615207	WITHOUT_CLASSIFICATION	5.045384793743402E-7	TEST
// we are the RHS of the DOT representing a naked comp-prop-ref	WITHOUT_CLASSIFICATION	0.9999994369314226	WITHOUT_CLASSIFICATION	5.630685773636978E-7	TEST
// we represent a naked (simple) prop-ref	WITHOUT_CLASSIFICATION	0.9999988800746709	WITHOUT_CLASSIFICATION	1.1199253291378389E-6	TEST
// EARLY EXIT!!!  return so the resolve call explicitly coming from DotNode can // resolve this...	WITHOUT_CLASSIFICATION	0.9999999329014154	WITHOUT_CLASSIFICATION	6.709858450730171E-8	TEST
// assume this ident's text does *not* refer to a property on the given persister	WITHOUT_CLASSIFICATION	0.9999984071986976	WITHOUT_CLASSIFICATION	1.5928013024099911E-6	TEST
// just ignore it for now, it'll get resolved later...	WITHOUT_CLASSIFICATION	0.9999941696003233	WITHOUT_CLASSIFICATION	5.830399676735017E-6	TEST
// This is not actually a constant, but a reference to FROM element.	WITHOUT_CLASSIFICATION	0.9999986818434518	WITHOUT_CLASSIFICATION	1.3181565483160882E-6	TEST
// check to see if our "propPath" actually // represents a property on the persister	WITHOUT_CLASSIFICATION	0.9999994155017325	WITHOUT_CLASSIFICATION	5.844982673956276E-7	TEST
// these pieces are needed for usage in select clause	WITHOUT_CLASSIFICATION	0.9999990587084185	WITHOUT_CLASSIFICATION	9.412915814295848E-7	TEST
// used to set the type of the parent dot node	WITHOUT_CLASSIFICATION	0.9999992898506052	WITHOUT_CLASSIFICATION	7.101493947604928E-7	TEST
// assume we do *not* refer to a property on the given persister	WITHOUT_CLASSIFICATION	0.9999996675935914	WITHOUT_CLASSIFICATION	3.3240640866535824E-7	TEST
// assume we do *not* refer to a property on the given persister	WITHOUT_CLASSIFICATION	0.9999996675935914	WITHOUT_CLASSIFICATION	3.3240640866535824E-7	TEST
// naked property-refs cannot be used with an aliased from element	WITHOUT_CLASSIFICATION	0.9999996926805108	WITHOUT_CLASSIFICATION	3.073194891138065E-7	TEST
// this piece is needed for usage in select clause	WITHOUT_CLASSIFICATION	0.9999924261662629	WITHOUT_CLASSIFICATION	7.573833737110109E-6	TEST
// do *not* over-write the column text, as that has already been // "rendered" during resolve	WITHOUT_CLASSIFICATION	0.9999999099252087	WITHOUT_CLASSIFICATION	9.007479129440082E-8	TEST
// for some reason the antlr.CommonAST initialization routines force // this method to get called twice.  The first time with an empty string	WITHOUT_CLASSIFICATION	0.9999999254223609	WITHOUT_CLASSIFICATION	7.457763901959061E-8	TEST
// Look up class name using the first identifier in the path.	WITHOUT_CLASSIFICATION	0.999999470504054	WITHOUT_CLASSIFICATION	5.294959459159067E-7	TEST
// Add to the query spaces.	WITHOUT_CLASSIFICATION	0.9999985696447011	WITHOUT_CLASSIFICATION	1.4303552989507017E-6	TEST
// If the from element isn't in the same clause, create a new from element.	WITHOUT_CLASSIFICATION	0.9999998589270118	WITHOUT_CLASSIFICATION	1.4107298805899112E-7	TEST
// This is the root level node. // Generate an explicit from clause at the root.	WITHOUT_CLASSIFICATION	0.9999985247691122	WITHOUT_CLASSIFICATION	1.4752308877587704E-6	TEST
// Correlated subqueries create 'special' implied from nodes // because correlated subselects can't use an ANSI-style join	WITHOUT_CLASSIFICATION	0.999999948584678	WITHOUT_CLASSIFICATION	5.1415322069168735E-8	TEST
// super-duper-classic-parser-regression-testing-mojo-magic...	WITHOUT_CLASSIFICATION	0.9999992854445906	WITHOUT_CLASSIFICATION	7.145554093117966E-7	TEST
// A collection of entities...	WITHOUT_CLASSIFICATION	0.9999996203137799	WITHOUT_CLASSIFICATION	3.7968622018840753E-7	TEST
// A collection of components...	WITHOUT_CLASSIFICATION	0.9999997698137951	WITHOUT_CLASSIFICATION	2.30186204929666E-7	TEST
// A collection of scalar elements...	WITHOUT_CLASSIFICATION	0.9999999188422898	WITHOUT_CLASSIFICATION	8.115771024692359E-8	TEST
// according to both the ANSI-SQL and EJB3 specs, trim can either take // exactly one parameter or a variable number of parameters between 1 and 4. // from the SQL spec: // // <trim function> ::= //      TRIM <left paren> <trim operands> <right paren> // // <trim operands> ::= //      [ [ <trim specification> ] [ <trim character> ] FROM ] <trim source> // // <trim specification> ::= //      LEADING //      | TRAILING //      | BOTH // // If only <trim specification> is omitted, BOTH is assumed; // if <trim character> is omitted, space is assumed	WITHOUT_CLASSIFICATION	0.9999999718019108	WITHOUT_CLASSIFICATION	2.81980892415425E-8	TEST
// Don't include sub-classes for implied collection joins or subquery joins.	WITHOUT_CLASSIFICATION	0.9999998652087934	WITHOUT_CLASSIFICATION	1.347912066691417E-7	TEST
// Treat explict from elements in sub-queries properly.	WITHOUT_CLASSIFICATION	0.9999995610839932	WITHOUT_CLASSIFICATION	4.389160067817908E-7	TEST
//	WITHOUT_CLASSIFICATION	0.999928714121282	WITHOUT_CLASSIFICATION	7.128587871800795E-5	TEST
// the "root from-element" in correlated subqueries do need this piece	WITHOUT_CLASSIFICATION	0.9999966259244867	WITHOUT_CLASSIFICATION	3.3740755133318514E-6	TEST
// Create the FROM element for the target (the elements of the collection).	WITHOUT_CLASSIFICATION	0.999999396654059	WITHOUT_CLASSIFICATION	6.03345940992643E-7	TEST
// If the join is implied, then don't include sub-classes on the element.	WITHOUT_CLASSIFICATION	0.9999991249894038	WITHOUT_CLASSIFICATION	8.750105962111003E-7	TEST
// Overridden informational metadata ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999996037043624	WITHOUT_CLASSIFICATION	3.962956376501321E-7	TEST
// The associated entity is implied, but it must be included in the FROM. // The collection alias is the role.	WITHOUT_CLASSIFICATION	0.9999992121629431	WITHOUT_CLASSIFICATION	7.878370568297228E-7	TEST
// Tag this node as a JOIN. // Don't include subclasses in the join. // This is a clollection join.	WITHOUT_CLASSIFICATION	0.9999991088602099	WITHOUT_CLASSIFICATION	8.911397899365157E-7	TEST
// Get the class name of the associated entity.	WITHOUT_CLASSIFICATION	0.9999979646100804	WITHOUT_CLASSIFICATION	2.035389919525875E-6	TEST
//  origin, path, implied, columns, classAlias,	WITHOUT_CLASSIFICATION	0.9999995931653656	WITHOUT_CLASSIFICATION	4.0683463431992405E-7	TEST
/*implied*/	WITHOUT_CLASSIFICATION	0.9999522286283792	WITHOUT_CLASSIFICATION	4.77713716207925E-5	TEST
// For implied many-to-many, just add the end join.	WITHOUT_CLASSIFICATION	0.9999983533875634	WITHOUT_CLASSIFICATION	1.646612436689857E-6	TEST
// Overridden informational metadata ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999996037043624	WITHOUT_CLASSIFICATION	3.962956376501321E-7	TEST
// Overridden informational metadata ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999996037043624	WITHOUT_CLASSIFICATION	3.962956376501321E-7	TEST
// the standard SQL function name is current_timestamp...	WITHOUT_CLASSIFICATION	0.9999978316099016	WITHOUT_CLASSIFICATION	2.168390098323874E-6	TEST
// This causes the factory to instantiate the desired class.	WITHOUT_CLASSIFICATION	0.9999980671813277	WITHOUT_CLASSIFICATION	1.9328186724469995E-6	TEST
//private Type[] sqlResultTypes;	WITHOUT_CLASSIFICATION	0.9999871770159312	WITHOUT_CLASSIFICATION	1.2822984068805837E-5	TEST
// Frontbase has no known variation of a "SELECT ... FOR UPDATE" syntax...	WITHOUT_CLASSIFICATION	0.9999999629933661	WITHOUT_CLASSIFICATION	3.7006633880576405E-8	TEST
/*	WITHOUT_CLASSIFICATION	0.9999244183183397	WITHOUT_CLASSIFICATION	7.558168166027218E-5	TEST
/*public Type[] getSqlResultTypes() {	WITHOUT_CLASSIFICATION	0.999960578361446	WITHOUT_CLASSIFICATION	3.942163855388209E-5	TEST
// First, collect all of the select expressions. // NOTE: This must be done *before* invoking setScalarColumnText() because setScalarColumnText() // changes the AST!!!	WITHOUT_CLASSIFICATION	0.9999999465604142	WITHOUT_CLASSIFICATION	5.343958570436542E-8	TEST
// First allow the actual type to control the return value. (the actual underlying sqltype could actually be different)	WITHOUT_CLASSIFICATION	0.9999995722717875	WITHOUT_CLASSIFICATION	4.2772821247545723E-7	TEST
//sqlResultTypeList.addAll( constructorArgumentTypeList );	WITHOUT_CLASSIFICATION	0.9999989873702337	WITHOUT_CLASSIFICATION	1.0126297662660044E-6	TEST
// If the data type is not an association type, it could not have been in the FROM clause.	WITHOUT_CLASSIFICATION	0.9999997401127501	WITHOUT_CLASSIFICATION	2.5988724997484287E-7	TEST
//sqlResultTypeList.add( type );	WITHOUT_CLASSIFICATION	0.9999824441472994	WITHOUT_CLASSIFICATION	1.7555852700559918E-5	TEST
// Always add the type to the return type list.	WITHOUT_CLASSIFICATION	0.9999986763237143	WITHOUT_CLASSIFICATION	1.3236762856793848E-6	TEST
// add the fetched entities	WITHOUT_CLASSIFICATION	0.9999959616004168	WITHOUT_CLASSIFICATION	4.038399583121938E-6	TEST
// Get ready to start adding nodes.	WITHOUT_CLASSIFICATION	0.9999992926460597	WITHOUT_CLASSIFICATION	7.073539402757492E-7	TEST
// function support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999969515178647	WITHOUT_CLASSIFICATION	3.048482135302313E-6	TEST
// If there are any scalars (non-entities) selected, render the select column aliases.	WITHOUT_CLASSIFICATION	0.9999997724306119	WITHOUT_CLASSIFICATION	2.2756938819827672E-7	TEST
/*sqlResultTypeList,*/	WITHOUT_CLASSIFICATION	0.9999620824259752	WITHOUT_CLASSIFICATION	3.791757402486043E-5	TEST
/*ArrayList sqlResultTypeList,*/	WITHOUT_CLASSIFICATION	0.9999823277872598	WITHOUT_CLASSIFICATION	1.7672212740166866E-5	TEST
//sqlResultTypes = ( Type[] ) sqlResultTypeList.toArray( new Type[sqlResultTypeList.size()] );	WITHOUT_CLASSIFICATION	0.9999948144078245	WITHOUT_CLASSIFICATION	5.185592175649025E-6	TEST
// lock acquisition support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999990510155605	WITHOUT_CLASSIFICATION	9.489844395010023E-7	TEST
//TODO:	WITHOUT_CLASSIFICATION	0.9991251580755662	WITHOUT_CLASSIFICATION	8.748419244336783E-4	TEST
// Add the type to the list of returned sqlResultTypes.	WITHOUT_CLASSIFICATION	0.9999968325289615	WITHOUT_CLASSIFICATION	3.167471038384055E-6	TEST
// Generate an 2d array of column names, the first dimension is parallel with the // return types array.  The second dimension is the list of column names for each // type.	WITHOUT_CLASSIFICATION	0.9999997525902473	WITHOUT_CLASSIFICATION	2.4740975266025166E-7	TEST
// Generate the select expression.	WITHOUT_CLASSIFICATION	0.9999988982219474	WITHOUT_CLASSIFICATION	1.1017780525432636E-6	TEST
// union subclass support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999977824312464	WITHOUT_CLASSIFICATION	2.217568753571197E-6	TEST
// Skip 'DISTINCT' and 'ALL', so we return the first expression node.	WITHOUT_CLASSIFICATION	0.9999997090518848	WITHOUT_CLASSIFICATION	2.909481151441646E-7	TEST
// Create SQL_TOKEN nodes for the columns.	WITHOUT_CLASSIFICATION	0.9999989189223851	WITHOUT_CLASSIFICATION	1.081077614837348E-6	TEST
// Generate the property select tokens.	WITHOUT_CLASSIFICATION	0.9999944586812627	WITHOUT_CLASSIFICATION	5.541318737309839E-6	TEST
// Get the function name node.	WITHOUT_CLASSIFICATION	0.9999991460716128	WITHOUT_CLASSIFICATION	8.539283872413461E-7	TEST
// Method expressions in a SELECT should always be considered scalar.	WITHOUT_CLASSIFICATION	0.9999999357622743	WITHOUT_CLASSIFICATION	6.423772570698717E-8	TEST
// If this is 'elements' then create a new FROM element.	WITHOUT_CLASSIFICATION	0.9999940242508002	WITHOUT_CLASSIFICATION	5.9757491998838455E-6	TEST
// Not elements(x)	WITHOUT_CLASSIFICATION	0.9999936563344491	WITHOUT_CLASSIFICATION	6.34366555094996E-6	TEST
// Dialect function	WITHOUT_CLASSIFICATION	0.9999974379920198	WITHOUT_CLASSIFICATION	2.5620079801609917E-6	TEST
// Collection 'property function'	WITHOUT_CLASSIFICATION	0.9999991979204116	WITHOUT_CLASSIFICATION	8.020795884719965E-7	TEST
// If the constant is an IDENT, figure out what it means...	WITHOUT_CLASSIFICATION	0.9999983186881973	WITHOUT_CLASSIFICATION	1.6813118027078935E-6	TEST
// IDENT is a class alias in the FROM.	WITHOUT_CLASSIFICATION	0.9999849194233323	WITHOUT_CLASSIFICATION	1.5080576667650978E-5	TEST
// Resolve to an identity column.	WITHOUT_CLASSIFICATION	0.9999995423356632	WITHOUT_CLASSIFICATION	4.576643367387766E-7	TEST
// Otherwise, it's a literal.	WITHOUT_CLASSIFICATION	0.9999868839943403	WITHOUT_CLASSIFICATION	1.3116005659687718E-5	TEST
// the name of an entity class	WITHOUT_CLASSIFICATION	0.9999996226967035	WITHOUT_CLASSIFICATION	3.7730329641128046E-7	TEST
//the class discriminator value	WITHOUT_CLASSIFICATION	0.99999704024247	WITHOUT_CLASSIFICATION	2.9597575298550874E-6	TEST
// Chop off the rest of the tree.	WITHOUT_CLASSIFICATION	0.9999650235101369	WITHOUT_CLASSIFICATION	3.4976489863066627E-5	TEST
// Add a space before the display text.	WITHOUT_CLASSIFICATION	0.9999973247759326	WITHOUT_CLASSIFICATION	2.6752240674171294E-6	TEST
// Find or create the WHERE clause	WITHOUT_CLASSIFICATION	0.9999988197904488	WITHOUT_CLASSIFICATION	1.180209551158783E-6	TEST
// child == parent.getFirstChild()	WITHOUT_CLASSIFICATION	0.9999979699141707	WITHOUT_CLASSIFICATION	2.03008582929028E-6	TEST
// Find or create the WHERE clause	WITHOUT_CLASSIFICATION	0.9999988197904488	WITHOUT_CLASSIFICATION	1.180209551158783E-6	TEST
// Filter conditions need to be inserted before the HQL where condition and the // theta join node.  This is because org.hibernate.loader.Loader binds the filter parameters first, // then it binds all the HQL query parameters, see org.hibernate.loader.Loader.processFilterParameters().	WITHOUT_CLASSIFICATION	0.999999781456701	WITHOUT_CLASSIFICATION	2.1854329911762109E-7	TEST
// Put the FILTERS node before the HQL condition and theta joins	WITHOUT_CLASSIFICATION	0.9999997015923541	WITHOUT_CLASSIFICATION	2.984076458738226E-7	TEST
// add the current fragment to the FILTERS node	WITHOUT_CLASSIFICATION	0.9999995217146903	WITHOUT_CLASSIFICATION	4.782853096660282E-7	TEST
// Create a new THETA_JOINS node as a parent of all filters	WITHOUT_CLASSIFICATION	0.9999996749698242	WITHOUT_CLASSIFICATION	3.250301757770461E-7	TEST
// Put the THETA_JOINS node before the HQL condition, after the filters.	WITHOUT_CLASSIFICATION	0.9999985238621846	WITHOUT_CLASSIFICATION	1.4761378154249725E-6	TEST
// add the current fragment to the THETA_JOINS node	WITHOUT_CLASSIFICATION	0.9999991031255108	WITHOUT_CLASSIFICATION	8.968744892665176E-7	TEST
// First, try to get the persister using the given name directly.	WITHOUT_CLASSIFICATION	0.9999986069742683	WITHOUT_CLASSIFICATION	1.3930257316261618E-6	TEST
// unable to locate it using this name	WITHOUT_CLASSIFICATION	0.9999936248427884	WITHOUT_CLASSIFICATION	6.375157211562625E-6	TEST
// If that didn't work, try using the 'import' name.	WITHOUT_CLASSIFICATION	0.9999978709946218	WITHOUT_CLASSIFICATION	2.1290053781837626E-6	TEST
// Implicit joins use theta style (WHERE pk = fk), explicit joins use JOIN (after from)	WITHOUT_CLASSIFICATION	0.9999976520380638	WITHOUT_CLASSIFICATION	2.3479619361602283E-6	TEST
// locate the registered function by the given name	WITHOUT_CLASSIFICATION	0.9999979978451761	WITHOUT_CLASSIFICATION	2.0021548239644023E-6	TEST
// determine the type of the first argument...	WITHOUT_CLASSIFICATION	0.9999994436486414	WITHOUT_CLASSIFICATION	5.563513587428863E-7	TEST
// Use the DOT node to emit the first column name. // Create the column names, folled by the column aliases.	WITHOUT_CLASSIFICATION	0.9999973780517925	WITHOUT_CLASSIFICATION	2.621948207418065E-6	TEST
// Note: this simply constructs a "raw" SQL_TOKEN representing the // where fragment and injects this into the tree.  This "works"; // however it is probably not the best long-term solution. // // At some point we probably want to apply an additional grammar to // properly tokenize this where fragment into constituent parts // focused on the operators embedded within the fragment.	WITHOUT_CLASSIFICATION	0.9999999428875546	WITHOUT_CLASSIFICATION	5.711244539679278E-8	TEST
// Append the text of the current node.	WITHOUT_CLASSIFICATION	0.9999984217027387	WITHOUT_CLASSIFICATION	1.5782972613319146E-6	TEST
// If the node has a first child, recurse into the first child.	WITHOUT_CLASSIFICATION	0.9999993293295711	WITHOUT_CLASSIFICATION	6.706704288926113E-7	TEST
// If there is a second child (RHS), recurse into that child.	WITHOUT_CLASSIFICATION	0.9999972816707217	WITHOUT_CLASSIFICATION	2.718329278384729E-6	TEST
// Iterate through the alias,JoinSequence pairs and generate SQL token nodes.	WITHOUT_CLASSIFICATION	0.9999975335853922	WITHOUT_CLASSIFICATION	2.466414607777051E-6	TEST
// If the from element represents a JOIN_FRAGMENT and it is // a theta-style join, convert its type from JOIN_FRAGMENT // to FROM_FRAGMENT	WITHOUT_CLASSIFICATION	0.9999998271854109	WITHOUT_CLASSIFICATION	1.728145890949254E-7	TEST
// this is used during SqlGenerator processing	WITHOUT_CLASSIFICATION	0.999996149029819	WITHOUT_CLASSIFICATION	3.850970180960902E-6	TEST
// If there is a FROM fragment and the FROM element is an explicit, then add the from part.	WITHOUT_CLASSIFICATION	0.9999984173614535	WITHOUT_CLASSIFICATION	1.5826385466056772E-6	TEST
/*&& StringHelper.isNotEmpty( frag )*/	WITHOUT_CLASSIFICATION	0.9999962961544425	WITHOUT_CLASSIFICATION	3.7038455573951934E-6	TEST
// The FROM fragment will probably begin with ', '.  Remove this if it is present.	WITHOUT_CLASSIFICATION	0.999989030574975	WITHOUT_CLASSIFICATION	1.096942502506188E-5	TEST
// This uses a PathExpressionParser but notice that compound paths are not valid, // only bare names and simple paths:	WITHOUT_CLASSIFICATION	0.999999865463539	WITHOUT_CLASSIFICATION	1.345364609276505E-7	TEST
// SELECT p FROM p IN CLASS eg.Person ORDER BY p.Name, p.Address, p	WITHOUT_CLASSIFICATION	0.9999978766830584	WITHOUT_CLASSIFICATION	2.1233169416030845E-6	TEST
// The reason for this is SQL doesn't let you sort by an expression you are // not returning in the result set.	WITHOUT_CLASSIFICATION	0.999999826019544	WITHOUT_CLASSIFICATION	1.7398045600557193E-7	TEST
//named query parameter	WITHOUT_CLASSIFICATION	0.9999842589914071	WITHOUT_CLASSIFICATION	1.574100859291672E-5	TEST
//default mode	WITHOUT_CLASSIFICATION	0.9999909475229012	WITHOUT_CLASSIFICATION	9.052477098848107E-6	TEST
//QueryJoinFragment join = q.createJoinFragment(useThetaStyleJoin);	WITHOUT_CLASSIFICATION	0.9999993062543335	WITHOUT_CLASSIFICATION	6.937456664977252E-7	TEST
//reset the dotcount (but not the path) //after reset!	WITHOUT_CLASSIFICATION	0.9999746537913683	WITHOUT_CLASSIFICATION	2.5346208631727004E-5	TEST
//after reset!	WITHOUT_CLASSIFICATION	0.9999354828616286	WITHOUT_CLASSIFICATION	6.451713837146718E-5	TEST
// we don't need to worry about any condition in the ON clause // here (toFromFragmentString), since anything in the ON condition // is already applied to the whole query	WITHOUT_CLASSIFICATION	0.9999999943865286	WITHOUT_CLASSIFICATION	5.613471319272722E-9	TEST
// bit_length feels a bit broken to me. We have to cast to char in order to // pass when a numeric value is supplied. But of course the answers given will // be wildly different for these two datatypes. 1234.5678 will be 9 bytes as // a char string but will be 8 or 16 bytes as a true numeric. // Jay Nance 2006-09-22	WITHOUT_CLASSIFICATION	0.999999126021312	WITHOUT_CLASSIFICATION	8.739786880350486E-7	TEST
// dotcount>=2	WITHOUT_CLASSIFICATION	0.9999952384598881	WITHOUT_CLASSIFICATION	4.761540111963308E-6	TEST
// Do the corresponding RHS	WITHOUT_CLASSIFICATION	0.9999992633426514	WITHOUT_CLASSIFICATION	7.366573485780539E-7	TEST
//if its "id"	WITHOUT_CLASSIFICATION	0.9999611356071402	WITHOUT_CLASSIFICATION	3.8864392859869886E-5	TEST
//or its the id property name	WITHOUT_CLASSIFICATION	0.999992125279581	WITHOUT_CLASSIFICATION	7.874720418975543E-6	TEST
//join = q.createJoinFragment(useThetaStyleJoin);	WITHOUT_CLASSIFICATION	0.9999992132148849	WITHOUT_CLASSIFICATION	7.867851151005251E-7	TEST
//important!!	WITHOUT_CLASSIFICATION	0.9999810931616592	WITHOUT_CLASSIFICATION	1.8906838340833465E-5	TEST
//String[] keyCols = collPersister.getKeyColumnNames();	WITHOUT_CLASSIFICATION	0.9999885348445531	WITHOUT_CLASSIFICATION	1.1465155446950648E-5	TEST
// an association	WITHOUT_CLASSIFICATION	0.9999989258320567	WITHOUT_CLASSIFICATION	1.0741679432474654E-6	TEST
//allow index() function:	WITHOUT_CLASSIFICATION	0.9999951082565255	WITHOUT_CLASSIFICATION	4.891743474537616E-6	TEST
// here assume SQLServer2005 using snapshot isolation, which does not have this problem	WITHOUT_CLASSIFICATION	0.9999997896588724	WITHOUT_CLASSIFICATION	2.1034112771427054E-7	TEST
// The reason for this is SQL doesn't let you sort by an expression you are // not returning in the result set.	WITHOUT_CLASSIFICATION	0.999999826019544	WITHOUT_CLASSIFICATION	1.7398045600557193E-7	TEST
//many-to-many	WITHOUT_CLASSIFICATION	0.9999642514107143	WITHOUT_CLASSIFICATION	3.574858928561903E-5	TEST
// collections of values	WITHOUT_CLASSIFICATION	0.9999991672452693	WITHOUT_CLASSIFICATION	8.327547306374003E-7	TEST
//opening paren in new Foo ( ... )	WITHOUT_CLASSIFICATION	0.9999970711088363	WITHOUT_CLASSIFICATION	2.928891163688818E-6	TEST
//if we are inside a new Result(), but not inside a nested function	WITHOUT_CLASSIFICATION	0.9999951564207112	WITHOUT_CLASSIFICATION	4.843579288802971E-6	TEST
//special case	WITHOUT_CLASSIFICATION	0.9999946239492242	WITHOUT_CLASSIFICATION	5.37605077575516E-6	TEST
// the name of an SQL function	WITHOUT_CLASSIFICATION	0.9999994707302071	WITHOUT_CLASSIFICATION	5.292697928376467E-7	TEST
//null child could occur for no from clause in a filter	WITHOUT_CLASSIFICATION	0.9999991181265624	WITHOUT_CLASSIFICATION	8.818734375987163E-7	TEST
//this is basically a copy/paste of OrderByParser ... might be worth refactoring	WITHOUT_CLASSIFICATION	0.9999894885729907	WITHOUT_CLASSIFICATION	1.0511427009337857E-5	TEST
// SELECT p FROM p IN CLASS eg.Person GROUP BY p.Name, p.Address, p	WITHOUT_CLASSIFICATION	0.9999981821921161	WITHOUT_CLASSIFICATION	1.8178078838676121E-6	TEST
// return aliases not supported in classic translator!	WITHOUT_CLASSIFICATION	0.9999991915699289	WITHOUT_CLASSIFICATION	8.084300711583356E-7	TEST
//register collection role	WITHOUT_CLASSIFICATION	0.9999900242981946	WITHOUT_CLASSIFICATION	9.975701805311998E-6	TEST
// The keyword used to specify an identity column, if identity column key generation is supported.	WITHOUT_CLASSIFICATION	0.9999994977323591	WITHOUT_CLASSIFICATION	5.022676409617109E-7	TEST
//.getElementPropertyMapping();	WITHOUT_CLASSIFICATION	0.9999939775083683	WITHOUT_CLASSIFICATION	6.0224916316995765E-6	TEST
//crossJoins.add(name);	WITHOUT_CLASSIFICATION	0.9999912187654707	WITHOUT_CLASSIFICATION	8.781234529358649E-6	TEST
//ie no select clause in HQL	WITHOUT_CLASSIFICATION	0.9999990146658047	WITHOUT_CLASSIFICATION	9.853341953997324E-7	TEST
// initialize the Set of queried identifier spaces (ie. tables)	WITHOUT_CLASSIFICATION	0.9999995590390954	WITHOUT_CLASSIFICATION	4.4096090459346505E-7	TEST
//ie. no select clause	WITHOUT_CLASSIFICATION	0.9999971075702617	WITHOUT_CLASSIFICATION	2.8924297381741734E-6	TEST
//there _was_ a select clause	WITHOUT_CLASSIFICATION	0.9999983016852946	WITHOUT_CLASSIFICATION	1.6983147054123591E-6	TEST
// return the concrete type, or the underlying type if a concrete type // was not specified	WITHOUT_CLASSIFICATION	0.9999998383143877	WITHOUT_CLASSIFICATION	1.6168561234438777E-7	TEST
//many-to-many	WITHOUT_CLASSIFICATION	0.9999642514107143	WITHOUT_CLASSIFICATION	3.574858928561903E-5	TEST
//q.addCollection(collectionName, collectionRole);	WITHOUT_CLASSIFICATION	0.9999945722912931	WITHOUT_CLASSIFICATION	5.427708707007619E-6	TEST
// classic parser does not support bulk manipulation statements	WITHOUT_CLASSIFICATION	0.9999998821740834	WITHOUT_CLASSIFICATION	1.1782591652137967E-7	TEST
// can't cache this stuff either (per-invocation)	WITHOUT_CLASSIFICATION	0.999998932656442	WITHOUT_CLASSIFICATION	1.0673435579173115E-6	TEST
// unfortunately this stuff can't be cached because // it is per-invocation, not constant for the // QueryTranslator instance	WITHOUT_CLASSIFICATION	0.9999962866220805	WITHOUT_CLASSIFICATION	3.7133779196088853E-6	TEST
// This is the legacy behaviour for HQL queries...	WITHOUT_CLASSIFICATION	0.999965027873606	WITHOUT_CLASSIFICATION	3.497212639402085E-5	TEST
// not known!	WITHOUT_CLASSIFICATION	0.9999891386148851	WITHOUT_CLASSIFICATION	1.0861385114923719E-5	TEST
// not known!	WITHOUT_CLASSIFICATION	0.9999891386148851	WITHOUT_CLASSIFICATION	1.0861385114923719E-5	TEST
// we have the form: trim(trimSource) //      so we trim leading and trailing spaces // EARLY EXIT!!!!	WITHOUT_CLASSIFICATION	0.999999855121344	WITHOUT_CLASSIFICATION	1.4487865600889118E-7	TEST
// not known!	WITHOUT_CLASSIFICATION	0.9999891386148851	WITHOUT_CLASSIFICATION	1.0861385114923719E-5	TEST
// not known!	WITHOUT_CLASSIFICATION	0.9999891386148851	WITHOUT_CLASSIFICATION	1.0861385114923719E-5	TEST
//Need this, since join condition can appear inside parens!	WITHOUT_CLASSIFICATION	0.9999940675371108	WITHOUT_CLASSIFICATION	5.932462889052865E-6	TEST
//tokens that close a sub expression //tokens that open a sub expression //tokens that would indicate a sub expression is a boolean expression	WITHOUT_CLASSIFICATION	0.9999896167153252	WITHOUT_CLASSIFICATION	1.038328467492832E-5	TEST
//expressionTerminators.add(","); // deliberately excluded	WITHOUT_CLASSIFICATION	0.9999996637169543	WITHOUT_CLASSIFICATION	3.3628304576732447E-7	TEST
//expressionOpeners.add(","); // deliberately excluded	WITHOUT_CLASSIFICATION	0.999999609459807	WITHOUT_CLASSIFICATION	3.905401930371208E-7	TEST
// we have the form: trim(from trimSource). //      This is functionally equivalent to trim(trimSource) // EARLY EXIT!!!!	WITHOUT_CLASSIFICATION	0.9999988166008843	WITHOUT_CLASSIFICATION	1.1833991157336612E-6	TEST
// otherwise, a trim-specification and/or a trim-character // have been specified;  we need to decide which options // are present and "do the right thing" // should leading trim-characters be trimmed? // should trailing trim-characters be trimmed? // the trim-character (what is to be trimmed off?) // the trim-source (from where should it be trimmed?)	WITHOUT_CLASSIFICATION	0.9999998271168765	WITHOUT_CLASSIFICATION	1.7288312348647267E-7	TEST
//Inside a BETWEEN ... AND ... expression	WITHOUT_CLASSIFICATION	0.9999974463561874	WITHOUT_CLASSIFICATION	2.5536438125958683E-6	TEST
//were an odd or even number of NOTs encountered //the join string built up by compound paths inside this expression //a flag indicating if the subexpression is known to be boolean	WITHOUT_CLASSIFICATION	0.9999994158812185	WITHOUT_CLASSIFICATION	5.841187813821912E-7	TEST
//ie. a many-to-many	WITHOUT_CLASSIFICATION	0.9999910664477232	WITHOUT_CLASSIFICATION	8.93355227674175E-6	TEST
//Cope with [,]	WITHOUT_CLASSIFICATION	0.999958091800861	WITHOUT_CLASSIFICATION	4.190819913895089E-5	TEST
//Cope with a continued path expression (ie. ].baz)	WITHOUT_CLASSIFICATION	0.9999989277079271	WITHOUT_CLASSIFICATION	1.0722920728644133E-6	TEST
//NOTE: early return	WITHOUT_CLASSIFICATION	0.999981410832385	WITHOUT_CLASSIFICATION	1.8589167614989763E-5	TEST
//Cope with a subselect	WITHOUT_CLASSIFICATION	0.9999926132128993	WITHOUT_CLASSIFICATION	7.386787100760322E-6	TEST
//Cope with special cases of AND, NOT, ()	WITHOUT_CLASSIFICATION	0.9999563827331537	WITHOUT_CLASSIFICATION	4.3617266846274684E-5	TEST
//Close extra brackets we opened	WITHOUT_CLASSIFICATION	0.9999979212838145	WITHOUT_CLASSIFICATION	2.0787161855422504E-6	TEST
//take note when this is a boolean expression	WITHOUT_CLASSIFICATION	0.9999863457746256	WITHOUT_CLASSIFICATION	1.3654225374469418E-5	TEST
// assumes that types are all of span 1	WITHOUT_CLASSIFICATION	0.9999984368160156	WITHOUT_CLASSIFICATION	1.563183984370192E-6	TEST
//process a token, mapping OO path expressions to SQL expressions	WITHOUT_CLASSIFICATION	0.9999985342357895	WITHOUT_CLASSIFICATION	1.4657642103645261E-6	TEST
//Open any extra brackets we might need.	WITHOUT_CLASSIFICATION	0.9999959863474306	WITHOUT_CLASSIFICATION	4.013652569470684E-6	TEST
//Cope with special cases of AND, NOT, )	WITHOUT_CLASSIFICATION	0.9999553138167265	WITHOUT_CLASSIFICATION	4.468618327351018E-5	TEST
// the next one up must also be	WITHOUT_CLASSIFICATION	0.9999979378562104	WITHOUT_CLASSIFICATION	2.062143789503385E-6	TEST
// Add any joins	WITHOUT_CLASSIFICATION	0.9999961689364704	WITHOUT_CLASSIFICATION	3.8310635296510395E-6	TEST
// assumes that types are all of span 1	WITHOUT_CLASSIFICATION	0.9999984368160156	WITHOUT_CLASSIFICATION	1.563183984370192E-6	TEST
//named query parameter	WITHOUT_CLASSIFICATION	0.9999842589914071	WITHOUT_CLASSIFICATION	1.574100859291672E-5	TEST
//path expression	WITHOUT_CLASSIFICATION	0.9999968911478538	WITHOUT_CLASSIFICATION	3.1088521461212907E-6	TEST
// saves / updates don't cascade to uninitialized collections	WITHOUT_CLASSIFICATION	0.9999984506251013	WITHOUT_CLASSIFICATION	1.5493748986831246E-6	TEST
// persists don't cascade to uninitialized collections	WITHOUT_CLASSIFICATION	0.9999993781315363	WITHOUT_CLASSIFICATION	6.218684636170766E-7	TEST
//anything else	WITHOUT_CLASSIFICATION	0.9999946970860469	WITHOUT_CLASSIFICATION	5.302913953093922E-6	TEST
// the path expression continues after a ]	WITHOUT_CLASSIFICATION	0.9999983350020966	WITHOUT_CLASSIFICATION	1.6649979034432291E-6	TEST
// careful with this!	WITHOUT_CLASSIFICATION	0.9999933501364727	WITHOUT_CLASSIFICATION	6.649863527242866E-6	TEST
// the path expression ends at the ]	WITHOUT_CLASSIFICATION	0.999997207354327	WITHOUT_CLASSIFICATION	2.792645672993787E-6	TEST
// "finish off" the join	WITHOUT_CLASSIFICATION	0.9999901109049946	WITHOUT_CLASSIFICATION	9.88909500534176E-6	TEST
//NOTICE: no " or . since they are part of (compound) identifiers	WITHOUT_CLASSIFICATION	0.9999987921796479	WITHOUT_CLASSIFICATION	1.2078203520559838E-6	TEST
//cannot instantiate	WITHOUT_CLASSIFICATION	0.9999899312075101	WITHOUT_CLASSIFICATION	1.0068792489882073E-5	TEST
// start by looking for HQL keywords...	WITHOUT_CLASSIFICATION	0.9999988560585876	WITHOUT_CLASSIFICATION	1.1439414123104817E-6	TEST
// inner joins can be abbreviated to 'join'	WITHOUT_CLASSIFICATION	0.9999979238495015	WITHOUT_CLASSIFICATION	2.0761504984922963E-6	TEST
// 'outer' is optional and is ignored	WITHOUT_CLASSIFICATION	0.9999912746391889	WITHOUT_CLASSIFICATION	8.725360811009734E-6	TEST
// now anything that is not a HQL keyword	WITHOUT_CLASSIFICATION	0.9999954890378245	WITHOUT_CLASSIFICATION	4.510962175490631E-6	TEST
// process the "old" HQL style where aliases appear _first_ // ie. using the IN or IN CLASS constructions	WITHOUT_CLASSIFICATION	0.9999999539091161	WITHOUT_CLASSIFICATION	4.609088386797892E-8	TEST
// treat it as a classname	WITHOUT_CLASSIFICATION	0.9999996766647801	WITHOUT_CLASSIFICATION	3.233352200074145E-7	TEST
// treat it as a path expression	WITHOUT_CLASSIFICATION	0.9999991454917819	WITHOUT_CLASSIFICATION	8.545082181264023E-7	TEST
// starts with the name of a mapped class (new style)	WITHOUT_CLASSIFICATION	0.999999401001066	WITHOUT_CLASSIFICATION	5.989989340665016E-7	TEST
// starts with a path expression (new style)	WITHOUT_CLASSIFICATION	0.9999992929756705	WITHOUT_CLASSIFICATION	7.07024329477608E-7	TEST
//allow ODMG OQL style: from Person p, p.cars c	WITHOUT_CLASSIFICATION	0.9999917330669408	WITHOUT_CLASSIFICATION	8.266933059110307E-6	TEST
//handle quoted strings	WITHOUT_CLASSIFICATION	0.9999821509364455	WITHOUT_CLASSIFICATION	1.7849063554481507E-5	TEST
// Object insertions, updates, and deletions have list semantics because // they must happen in the right order so as to respect referential // integrity	WITHOUT_CLASSIFICATION	0.999999915218365	WITHOUT_CLASSIFICATION	8.478163499047351E-8	TEST
// "finish off" the join	WITHOUT_CLASSIFICATION	0.9999901109049946	WITHOUT_CLASSIFICATION	9.88909500534176E-6	TEST
//ignore whitespace	WITHOUT_CLASSIFICATION	0.9999914314784453	WITHOUT_CLASSIFICATION	8.568521554783592E-6	TEST
//do replacements	WITHOUT_CLASSIFICATION	0.9999984344894507	WITHOUT_CLASSIFICATION	1.5655105492366478E-6	TEST
//handle HQL2 collection syntax	WITHOUT_CLASSIFICATION	0.9999978232826368	WITHOUT_CLASSIFICATION	2.1767173632967693E-6	TEST
// uuid.hex is deprecated	WITHOUT_CLASSIFICATION	0.9999929890670879	WITHOUT_CLASSIFICATION	7.010932912066196E-6	TEST
// AbstractSelectingDelegate impl ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999959072548392	WITHOUT_CLASSIFICATION	4.092745160793905E-6	TEST
//hilo params	WITHOUT_CLASSIFICATION	0.9999824912299865	WITHOUT_CLASSIFICATION	1.750877001340805E-5	TEST
//sql = query;	WITHOUT_CLASSIFICATION	0.9999887947492181	WITHOUT_CLASSIFICATION	1.120525078179318E-5	TEST
// performance opt	WITHOUT_CLASSIFICATION	0.9999992322713197	WITHOUT_CLASSIFICATION	7.677286802912862E-7	TEST
//sql = update;	WITHOUT_CLASSIFICATION	0.9999804066175724	WITHOUT_CLASSIFICATION	1.9593382427640926E-5	TEST
//hilo config	WITHOUT_CLASSIFICATION	0.9999851625909377	WITHOUT_CLASSIFICATION	1.4837409062139378E-5	TEST
// so we "clock over" on the first invocation	WITHOUT_CLASSIFICATION	0.9999996492395006	WITHOUT_CLASSIFICATION	3.5076049948909023E-7	TEST
// don't allow comments on these insert statements as comments totally // blow up the Oracle getGeneratedKeys "support" :(	WITHOUT_CLASSIFICATION	0.9999950081763161	WITHOUT_CLASSIFICATION	4.99182368396091E-6	TEST
//abort the save (the object is already saved by a circular cascade)	WITHOUT_CLASSIFICATION	0.9999915084844083	WITHOUT_CLASSIFICATION	8.491515591657048E-6	TEST
//throw new IdentifierGenerationException("save associated object first, or disable cascade for inverse association");	WITHOUT_CLASSIFICATION	0.9999997975153158	WITHOUT_CLASSIFICATION	2.02484684181382E-7	TEST
// intentionally empty	WITHOUT_CLASSIFICATION	0.9999979935046034	WITHOUT_CLASSIFICATION	2.006495396559204E-6	TEST
//do nothing to avoid a lazy property initialization	WITHOUT_CLASSIFICATION	0.9999994102268821	WITHOUT_CLASSIFICATION	5.89773117971056E-7	TEST
//keep the behavior consistent even for boundary usages	WITHOUT_CLASSIFICATION	0.999986940021277	WITHOUT_CLASSIFICATION	1.3059978723140052E-5	TEST
// so we "clock over" on the first invocation	WITHOUT_CLASSIFICATION	0.9999996492395006	WITHOUT_CLASSIFICATION	3.5076049948909023E-7	TEST
// do nothing until we hit the rsult set containing the generated id	WITHOUT_CLASSIFICATION	0.9999992538893355	WITHOUT_CLASSIFICATION	7.46110664382831E-7	TEST
/* COLUMN and TABLE should be renamed but it would break the public API */	WITHOUT_CLASSIFICATION	0.9999958298375484	WITHOUT_CLASSIFICATION	4.170162451500029E-6	TEST
// Loaded entity instances, by EntityKey	WITHOUT_CLASSIFICATION	0.9999983166418283	WITHOUT_CLASSIFICATION	1.6833581716882908E-6	TEST
// if the given name is un-qualified we may neen to qualify it	WITHOUT_CLASSIFICATION	0.999994309352573	WITHOUT_CLASSIFICATION	5.690647426935018E-6	TEST
// the default...	WITHOUT_CLASSIFICATION	0.9999981002006861	WITHOUT_CLASSIFICATION	1.8997993139206862E-6	TEST
// unfortunately not really safe to normalize this // to 1 as an initial value like we do the others // because we would not be able to control this if // we are using a sequence...	WITHOUT_CLASSIFICATION	0.9999998838432477	WITHOUT_CLASSIFICATION	1.1615675236464958E-7	TEST
// intentionally empty	WITHOUT_CLASSIFICATION	0.9999979935046034	WITHOUT_CLASSIFICATION	2.006495396559204E-6	TEST
// Identity map of CollectionEntry instances, by the collection wrapper	WITHOUT_CLASSIFICATION	0.9999999078744003	WITHOUT_CLASSIFICATION	9.212559968943287E-8	TEST
// general purpose parameters ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999970467841884	WITHOUT_CLASSIFICATION	2.9532158115728766E-6	TEST
// table-specific parameters ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999983130158937	WITHOUT_CLASSIFICATION	1.6869841064071836E-6	TEST
// Configurable implementation ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999997175192835	WITHOUT_CLASSIFICATION	2.8248071646955883E-7	TEST
// IdentifierGenerator implementation ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999994105116878	WITHOUT_CLASSIFICATION	5.894883121373307E-7	TEST
// PersistentIdentifierGenerator implementation ~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999994420333604	WITHOUT_CLASSIFICATION	5.579666395391844E-7	TEST
// prepare and execute the insert	WITHOUT_CLASSIFICATION	0.999999327267294	WITHOUT_CLASSIFICATION	6.72732705910518E-7	TEST
// prepare and execute the insert	WITHOUT_CLASSIFICATION	0.999999327267294	WITHOUT_CLASSIFICATION	6.72732705910518E-7	TEST
//fetch the generated id in a separate query	WITHOUT_CLASSIFICATION	0.9999912781276563	WITHOUT_CLASSIFICATION	8.72187234372038E-6	TEST
// we just hit the last position	WITHOUT_CLASSIFICATION	0.9999973294561981	WITHOUT_CLASSIFICATION	2.670543801869842E-6	TEST
// scroll ahead	WITHOUT_CLASSIFICATION	0.9999987502821313	WITHOUT_CLASSIFICATION	1.249717868746244E-6	TEST
// scroll backward	WITHOUT_CLASSIFICATION	0.9999981041006583	WITHOUT_CLASSIFICATION	1.8958993417129946E-6	TEST
// we have not yet hit the last result...	WITHOUT_CLASSIFICATION	0.999998070319831	WITHOUT_CLASSIFICATION	1.9296801689080837E-6	TEST
// Constructors ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999956993477481	WITHOUT_CLASSIFICATION	4.300652251849638E-6	TEST
// State ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999775794272232	WITHOUT_CLASSIFICATION	2.2420572776768803E-5	TEST
// Criteria impl ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999953673583635	WITHOUT_CLASSIFICATION	4.632641636496248E-6	TEST
// do this when all the properties are updateable since there is // a certain likelihood that the information will already be // snapshot-cached.	WITHOUT_CLASSIFICATION	0.9999982437872319	WITHOUT_CLASSIFICATION	1.7562127681545858E-6	TEST
// Inner classes ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999958446873471	WITHOUT_CLASSIFICATION	4.155312652867161E-6	TEST
// Constructors ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999956993477481	WITHOUT_CLASSIFICATION	4.300652251849638E-6	TEST
// State ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999775794272232	WITHOUT_CLASSIFICATION	2.2420572776768803E-5	TEST
// Criteria impl ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999953673583635	WITHOUT_CLASSIFICATION	4.632641636496248E-6	TEST
// Caches	WITHOUT_CLASSIFICATION	0.9999965964920401	WITHOUT_CLASSIFICATION	3.4035079599886186E-6	TEST
//Generators:	WITHOUT_CLASSIFICATION	0.9999854094113748	WITHOUT_CLASSIFICATION	1.4590588625185258E-5	TEST
// cache region is defined by the root-class in the hierarchy...	WITHOUT_CLASSIFICATION	0.9999992030384703	WITHOUT_CLASSIFICATION	7.969615296255972E-7	TEST
//check if the detached object being merged is the parent	WITHOUT_CLASSIFICATION	0.9999910866900944	WITHOUT_CLASSIFICATION	8.913309905572973E-6	TEST
// after *all* persisters and named queries are registered	WITHOUT_CLASSIFICATION	0.9999948123310537	WITHOUT_CLASSIFICATION	5.187668946263792E-6	TEST
// if we get here, it is possible that we have a proxy 'in the way' of the merge map resolution... // 	WITHOUT_CLASSIFICATION	0.9999998549609265	WITHOUT_CLASSIFICATION	1.4503907349896242E-7	TEST
//JNDI + Serialization:	WITHOUT_CLASSIFICATION	0.9999939272141175	WITHOUT_CLASSIFICATION	6.072785882569997E-6	TEST
//checking for named queries	WITHOUT_CLASSIFICATION	0.9999938203675117	WITHOUT_CLASSIFICATION	6.179632488251128E-6	TEST
//stats	WITHOUT_CLASSIFICATION	0.9999396263968254	WITHOUT_CLASSIFICATION	6.037360317460989E-5	TEST
// EntityNotFoundDelegate	WITHOUT_CLASSIFICATION	0.9999901083219337	WITHOUT_CLASSIFICATION	9.891678066237206E-6	TEST
// Check named HQL queries	WITHOUT_CLASSIFICATION	0.9999990863796182	WITHOUT_CLASSIFICATION	9.136203818388929E-7	TEST
// this will throw an error if there's something wrong.	WITHOUT_CLASSIFICATION	0.9999993937428079	WITHOUT_CLASSIFICATION	6.062571920192518E-7	TEST
//prevents this session from adding things to cache	WITHOUT_CLASSIFICATION	0.9999986766597165	WITHOUT_CLASSIFICATION	1.3233402835376146E-6	TEST
// from javax.naming.Referenceable	WITHOUT_CLASSIFICATION	0.999999577093173	WITHOUT_CLASSIFICATION	4.229068270404354E-7	TEST
// look for the instance by uuid	WITHOUT_CLASSIFICATION	0.9999956098239834	WITHOUT_CLASSIFICATION	4.390176016605903E-6	TEST
//for a dynamic-class	WITHOUT_CLASSIFICATION	0.999995781882773	WITHOUT_CLASSIFICATION	4.218117226991187E-6	TEST
//test this entity to see if we must query it	WITHOUT_CLASSIFICATION	0.9996142991064648	WITHOUT_CLASSIFICATION	3.85700893535175E-4	TEST
//NOTE EARLY EXIT	WITHOUT_CLASSIFICATION	0.9998951787113213	WITHOUT_CLASSIFICATION	1.0482128867873045E-4	TEST
// for backward-compatability	WITHOUT_CLASSIFICATION	0.9999991080577586	WITHOUT_CLASSIFICATION	8.919422413748387E-7	TEST
// ignore this error for now	WITHOUT_CLASSIFICATION	0.9999845024832487	WITHOUT_CLASSIFICATION	1.54975167513541E-5	TEST
//to stop the class from being unloaded	WITHOUT_CLASSIFICATION	0.9999945363431454	WITHOUT_CLASSIFICATION	5.463656854607499E-6	TEST
// in case we were deserialized in a different JVM, look for an instance with the same name // (alternatively we could do an actual JNDI lookup here....)	WITHOUT_CLASSIFICATION	0.9999998927361613	WITHOUT_CLASSIFICATION	1.072638386356213E-7	TEST
//must add to JNDI _after_ adding to HashMaps, because some JNDI servers use serialization	WITHOUT_CLASSIFICATION	0.9999993425559954	WITHOUT_CLASSIFICATION	6.574440046282853E-7	TEST
// Make sure this is a defined parameter and check the incoming value type	WITHOUT_CLASSIFICATION	0.9999952946900046	WITHOUT_CLASSIFICATION	4.705309995355246E-6	TEST
// for each of the defined parameters, make sure its value // has been set	WITHOUT_CLASSIFICATION	0.999999205606765	WITHOUT_CLASSIFICATION	7.943932348887928E-7	TEST
//we never need to apply locks to the SQL	WITHOUT_CLASSIFICATION	0.999988666211243	WITHOUT_CLASSIFICATION	1.1333788756924871E-5	TEST
// inserts ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999942535842926	WITHOUT_CLASSIFICATION	5.746415707287403E-6	TEST
// deletes ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999640725370881	WITHOUT_CLASSIFICATION	3.5927462911989994E-5	TEST
// during deserialization, we need to reconnect all proxies and // collections to this session, as well as the EntityEntry and // CollectionEntry instances; these associations are transient // because serialization is used for different things.	WITHOUT_CLASSIFICATION	0.9999999892864335	WITHOUT_CLASSIFICATION	1.0713566392370978E-8	TEST
// updates ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999441867127171	WITHOUT_CLASSIFICATION	5.581328728294823E-5	TEST
// loading ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999911987923986	WITHOUT_CLASSIFICATION	8.801207601380877E-6	TEST
//final boolean forceCacheRefresh,	WITHOUT_CLASSIFICATION	0.9999915222852946	WITHOUT_CLASSIFICATION	8.477714705325177E-6	TEST
//final boolean forceCacheRefresh,	WITHOUT_CLASSIFICATION	0.9999915222852946	WITHOUT_CLASSIFICATION	8.477714705325177E-6	TEST
// first, try to load it from the temp PC associated to this SS	WITHOUT_CLASSIFICATION	0.9999904846898576	WITHOUT_CLASSIFICATION	9.515310142340113E-6	TEST
// if the metadata allowed proxy creation and caller did not request forceful eager loading, // generate a proxy	WITHOUT_CLASSIFICATION	0.9999998045435268	WITHOUT_CLASSIFICATION	1.9545647322555513E-7	TEST
// otherwise immediately materialize it	WITHOUT_CLASSIFICATION	0.9999901249181745	WITHOUT_CLASSIFICATION	9.875081825409818E-6	TEST
/////////////////////////////////////////////////////////////////////////////////////////////////////	WITHOUT_CLASSIFICATION	0.9997836593576488	WITHOUT_CLASSIFICATION	2.1634064235125618E-4	TEST
// no auto-flushing to support in stateless session	WITHOUT_CLASSIFICATION	0.9999995520588388	WITHOUT_CLASSIFICATION	4.479411610633247E-7	TEST
//after setting values to object, entityMode	WITHOUT_CLASSIFICATION	0.9999924162756335	WITHOUT_CLASSIFICATION	7.583724366443586E-6	TEST
//for EJB3	WITHOUT_CLASSIFICATION	0.9999639824132726	WITHOUT_CLASSIFICATION	3.601758672748124E-5	TEST
// just ignore	WITHOUT_CLASSIFICATION	0.9999970239773086	WITHOUT_CLASSIFICATION	2.9760226913827117E-6	TEST
// do a check	WITHOUT_CLASSIFICATION	0.9999980355494421	WITHOUT_CLASSIFICATION	1.96445055777881E-6	TEST
// saveOrUpdate() operations ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999938880601351	WITHOUT_CLASSIFICATION	6.111939864867868E-6	TEST
// update() operations ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999925762482134	WITHOUT_CLASSIFICATION	7.423751786559035E-6	TEST
// lock() operations ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999986387382979	WITHOUT_CLASSIFICATION	1.3612617021412971E-6	TEST
// persist() operations ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999957940464028	WITHOUT_CLASSIFICATION	4.2059535971378345E-6	TEST
// persistOnFlush() operations ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999975938825066	WITHOUT_CLASSIFICATION	2.4061174933564293E-6	TEST
// merge() operations ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999973950454519	WITHOUT_CLASSIFICATION	2.6049545480726097E-6	TEST
// saveOrUpdateCopy() operations ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999969394978557	WITHOUT_CLASSIFICATION	3.060502144210589E-6	TEST
// delete() operations ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999975963292076	WITHOUT_CLASSIFICATION	2.4036707923344475E-6	TEST
// load()/get() operations ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999979959994617	WITHOUT_CLASSIFICATION	2.004000538241456E-6	TEST
// refresh() operations ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999962024043626	WITHOUT_CLASSIFICATION	3.7975956374873447E-6	TEST
// replicate() operations ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999979263611845	WITHOUT_CLASSIFICATION	2.0736388154557675E-6	TEST
// do not auto-flush while outside a transaction	WITHOUT_CLASSIFICATION	0.9999998451056408	WITHOUT_CLASSIFICATION	1.5489435922898312E-7	TEST
// this is an internal error of some sort...	WITHOUT_CLASSIFICATION	0.9999900880877903	WITHOUT_CLASSIFICATION	9.911912209700452E-6	TEST
//stops flush being called multiple times if this method is recursively called	WITHOUT_CLASSIFICATION	0.9999894213233239	WITHOUT_CLASSIFICATION	1.0578676676160833E-5	TEST
//only collections belonging to deleted entities are allowed to be dereferenced in the case of orphan delete	WITHOUT_CLASSIFICATION	0.9999997560386709	WITHOUT_CLASSIFICATION	2.439613291887335E-7	TEST
// if it was previously unreferenced, we need to flush in order to // get its state into the database in order to execute query	WITHOUT_CLASSIFICATION	0.999999792112136	WITHOUT_CLASSIFICATION	2.078878640691268E-7	TEST
// not for internal use:	WITHOUT_CLASSIFICATION	0.9999952489044012	WITHOUT_CLASSIFICATION	4.751095598745182E-6	TEST
// otherwise, we only need to flush if there are in-memory changes // to the queried tables	WITHOUT_CLASSIFICATION	0.9999997642296325	WITHOUT_CLASSIFICATION	2.3577036757035795E-7	TEST
// might need to run a different filter entirely after the flush // because the collection role may have changed	WITHOUT_CLASSIFICATION	0.9999978746577586	WITHOUT_CLASSIFICATION	2.1253422413469888E-6	TEST
//stops flush being called multiple times if this method is recursively called	WITHOUT_CLASSIFICATION	0.9999894213233239	WITHOUT_CLASSIFICATION	1.0578676676160833E-5	TEST
//stops flush being called multiple times if this method is recursively called	WITHOUT_CLASSIFICATION	0.9999894213233239	WITHOUT_CLASSIFICATION	1.0578676676160833E-5	TEST
//if it is initialized, see if the underlying //instance is contained, since we need to  //account for the fact that it might have been //evicted	WITHOUT_CLASSIFICATION	0.9999948387233186	WITHOUT_CLASSIFICATION	5.161276681305516E-6	TEST
// basically just an adapted copy of find(CriteriaImpl)	WITHOUT_CLASSIFICATION	0.9999976971907893	WITHOUT_CLASSIFICATION	2.302809210682251E-6	TEST
// it is possible for this method to be called during flush processing, // so make certain that we do not accidently initialize an uninitialized proxy	WITHOUT_CLASSIFICATION	0.9999998705776318	WITHOUT_CLASSIFICATION	1.2942236827894515E-7	TEST
// nothing to do in a stateful session	WITHOUT_CLASSIFICATION	0.9999994080288861	WITHOUT_CLASSIFICATION	5.919711139304439E-7	TEST
// ignore	WITHOUT_CLASSIFICATION	0.9999977344954267	WITHOUT_CLASSIFICATION	2.26550457329293E-6	TEST
// ignore this error for now	WITHOUT_CLASSIFICATION	0.9999845024832487	WITHOUT_CLASSIFICATION	1.54975167513541E-5	TEST
// we need to writeObject() on this since interceptor is user defined	WITHOUT_CLASSIFICATION	0.9999950600175795	WITHOUT_CLASSIFICATION	4.939982420457799E-6	TEST
// the old-time stand-by...	WITHOUT_CLASSIFICATION	0.9999970753260314	WITHOUT_CLASSIFICATION	2.9246739686860837E-6	TEST
// parameter bind values...	WITHOUT_CLASSIFICATION	0.9999970862855165	WITHOUT_CLASSIFICATION	2.9137144833161896E-6	TEST
// Parameter handling code ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999988249616757	WITHOUT_CLASSIFICATION	1.1750383242526516E-6	TEST
// prepend value and type list with null for any positions before the wanted position.	WITHOUT_CLASSIFICATION	0.999985023372897	WITHOUT_CLASSIFICATION	1.4976627102989507E-5	TEST
// Execution methods ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999995769938019	WITHOUT_CLASSIFICATION	4.2300619806464937E-7	TEST
// we have a CGLIB enhanced entity	WITHOUT_CLASSIFICATION	0.9999991498800138	WITHOUT_CLASSIFICATION	8.501199861685807E-7	TEST
// we have a CGLIB enhanced entity	WITHOUT_CLASSIFICATION	0.9999991498800138	WITHOUT_CLASSIFICATION	8.501199861685807E-7	TEST
// we have a Javassist enhanced entity	WITHOUT_CLASSIFICATION	0.9999976445789839	WITHOUT_CLASSIFICATION	2.3554210161695306E-6	TEST
// we have a Javassist enhanced entity	WITHOUT_CLASSIFICATION	0.9999976445789839	WITHOUT_CLASSIFICATION	2.3554210161695306E-6	TEST
// FieldInterceptor impl ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999949738588768	WITHOUT_CLASSIFICATION	5.026141123105953E-6	TEST
// subclass accesses ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999948946069143	WITHOUT_CLASSIFICATION	5.105393085739934E-6	TEST
//let's assume that there is only one lazy fetch group, for now!	WITHOUT_CLASSIFICATION	0.9999861314466139	WITHOUT_CLASSIFICATION	1.3868553386095342E-5	TEST
// FieldHandler impl ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999938898725546	WITHOUT_CLASSIFICATION	6.1101274454453594E-6	TEST
// should *not* need to grow beyond the size of the total number of columns in the rs	WITHOUT_CLASSIFICATION	0.9999991703123244	WITHOUT_CLASSIFICATION	8.296876755693322E-7	TEST
// should probably no-op commit/rollback here, at least in JTA scenarios	WITHOUT_CLASSIFICATION	0.9999998483034462	WITHOUT_CLASSIFICATION	1.5169655377898082E-7	TEST
// Base Expectation impls ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999997026487221	WITHOUT_CLASSIFICATION	2.9735127800960745E-7	TEST
// Various Expectation instances ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999997143286484	WITHOUT_CLASSIFICATION	2.856713515401013E-7	TEST
// explicitly perform no checking...	WITHOUT_CLASSIFICATION	0.999999607117655	WITHOUT_CLASSIFICATION	3.9288234491489653E-7	TEST
// used from testsuite	WITHOUT_CLASSIFICATION	0.999792941092503	WITHOUT_CLASSIFICATION	2.070589074969128E-4	TEST
// assume we are in an auto-commit state	WITHOUT_CLASSIFICATION	0.9999994748120745	WITHOUT_CLASSIFICATION	5.251879254286173E-7	TEST
/*package*/	WITHOUT_CLASSIFICATION	0.9999753172071789	WITHOUT_CLASSIFICATION	2.4682792821087808E-5	TEST
// register synch; stats.connect()	WITHOUT_CLASSIFICATION	0.9999970118487068	WITHOUT_CLASSIFICATION	2.9881512931768087E-6	TEST
//noncritical, swallow and let the other propagate!	WITHOUT_CLASSIFICATION	0.9999797789435304	WITHOUT_CLASSIFICATION	2.022105646956204E-5	TEST
// calls executeBatch()	WITHOUT_CLASSIFICATION	0.9999986886870387	WITHOUT_CLASSIFICATION	1.311312961367257E-6	TEST
//no big deal	WITHOUT_CLASSIFICATION	0.999991841957414	WITHOUT_CLASSIFICATION	8.15804258592552E-6	TEST
// no big deal	WITHOUT_CLASSIFICATION	0.9999987107070872	WITHOUT_CLASSIFICATION	1.2892929127932843E-6	TEST
// no big deal	WITHOUT_CLASSIFICATION	0.9999987107070872	WITHOUT_CLASSIFICATION	1.2892929127932843E-6	TEST
// sybase driver (jConnect) throwing NPE here in certain // cases, but we'll just handle the general "unexpected" case	WITHOUT_CLASSIFICATION	0.9999999129573278	WITHOUT_CLASSIFICATION	8.704267223282317E-8	TEST
// see explanation above...	WITHOUT_CLASSIFICATION	0.9999998861058272	WITHOUT_CLASSIFICATION	1.1389417281666834E-7	TEST
// If we are in the process of releasing, no sense // checking for aggressive-release possibility.	WITHOUT_CLASSIFICATION	0.9999999628875975	WITHOUT_CLASSIFICATION	3.711240238892192E-8	TEST
// EARLY EXIT!!!!	WITHOUT_CLASSIFICATION	0.9999883217955281	WITHOUT_CLASSIFICATION	1.167820447185562E-5	TEST
// ResultSet impl ("overridden") ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999987472059737	WITHOUT_CLASSIFICATION	1.2527940262594598E-6	TEST
// ResultSet impl (delegated) ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999819399512205	WITHOUT_CLASSIFICATION	1.806004877941165E-5	TEST
// refer to comment in StatefulPersistenceContext.addCollection()	WITHOUT_CLASSIFICATION	0.9999998241937521	WITHOUT_CLASSIFICATION	1.7580624796547817E-7	TEST
// ConnectionManager.Callback implementation ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.999999779093654	WITHOUT_CLASSIFICATION	2.2090634603153855E-7	TEST
// Note : success = false, because we don't know the outcome of the transaction	WITHOUT_CLASSIFICATION	0.9999994789619382	WITHOUT_CLASSIFICATION	5.210380618923546E-7	TEST
// we already have a callback registered; either a local // (org.hibernate.Transaction) transaction has accepted // callback responsibilities, or we have previously // registered a transaction synch.	WITHOUT_CLASSIFICATION	0.9999998995393163	WITHOUT_CLASSIFICATION	1.0046068359023939E-7	TEST
// the configured transaction-factory says it only supports // local callback mode, so no sense attempting to register a // JTA Synchronization	WITHOUT_CLASSIFICATION	0.9999999796065914	WITHOUT_CLASSIFICATION	2.039340867639737E-8	TEST
// transactions marked for rollback-only cause some TM impls to throw exceptions	WITHOUT_CLASSIFICATION	0.9999999071370975	WITHOUT_CLASSIFICATION	9.286290249692504E-8	TEST
// serialization ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999992377099783	WITHOUT_CLASSIFICATION	7.622900217048943E-7	TEST
//postInitialize() will be called after initialization	WITHOUT_CLASSIFICATION	0.9999846013962261	WITHOUT_CLASSIFICATION	1.539860377389339E-5	TEST
// cannot handle single quotes	WITHOUT_CLASSIFICATION	0.99999510767652	WITHOUT_CLASSIFICATION	4.892323479996157E-6	TEST
// todo : for 4.0 //	WITHOUT_CLASSIFICATION	0.9999924629063675	WITHOUT_CLASSIFICATION	7.537093632552831E-6	TEST
// note that for sequential scrolling, we make the assumption that // the first persister element is the "root entity"	WITHOUT_CLASSIFICATION	0.99999928905742	WITHOUT_CLASSIFICATION	7.109425800243456E-7	TEST
// don't even bother trying to read further	WITHOUT_CLASSIFICATION	0.9999989644589204	WITHOUT_CLASSIFICATION	1.0355410795608852E-6	TEST
// don't even bother trying to read any further	WITHOUT_CLASSIFICATION	0.9999992244597626	WITHOUT_CLASSIFICATION	7.755402373246841E-7	TEST
// position cursor to the last row	WITHOUT_CLASSIFICATION	0.9999992860028789	WITHOUT_CLASSIFICATION	7.139971211739619E-7	TEST
// sequentially read the result set in reverse until we recognize // a change in the key value.  At that point, we are pointed at // the last physical sequential row for the logical row in which // we are interested in processing	WITHOUT_CLASSIFICATION	0.9999938827110126	WITHOUT_CLASSIFICATION	6.117288987377271E-6	TEST
// Read backwards until we read past the first physical sequential // row with the key we are interested in loading	WITHOUT_CLASSIFICATION	0.9999923794369614	WITHOUT_CLASSIFICATION	7.620563038585297E-6	TEST
// Finally, read ahead one row to position result set cursor // at the first physical row we are interested in loading	WITHOUT_CLASSIFICATION	0.9999992276114065	WITHOUT_CLASSIFICATION	7.723885934456465E-7	TEST
// now get an existing proxy for each row element (if there is one)	WITHOUT_CLASSIFICATION	0.9999996649167776	WITHOUT_CLASSIFICATION	3.350832223588936E-7	TEST
// force the proxy to resolve itself	WITHOUT_CLASSIFICATION	0.9999939254655574	WITHOUT_CLASSIFICATION	6.074534442578377E-6	TEST
// this is equivalent to the old behavior...	WITHOUT_CLASSIFICATION	0.9999327518863911	WITHOUT_CLASSIFICATION	6.724811360885631E-5	TEST
//if null, owner will be retrieved from session	WITHOUT_CLASSIFICATION	0.9999986227551791	WITHOUT_CLASSIFICATION	1.3772448209588388E-6	TEST
//final String queryString, 	WITHOUT_CLASSIFICATION	0.9999968855890721	WITHOUT_CLASSIFICATION	3.11441092787123E-6	TEST
// if it was a reference to self, don't need to nullify // unless we are using native id generation, in which // case we definitely need to nullify	WITHOUT_CLASSIFICATION	0.999999972275971	WITHOUT_CLASSIFICATION	2.772402892360884E-8	TEST
//end of array, start filling again from start	WITHOUT_CLASSIFICATION	0.9999933410764507	WITHOUT_CLASSIFICATION	6.658923549376924E-6	TEST
// in an effort to avoid concurrent-modification-exceptions (from // potential recursive calls back through here as a result of the // eventual call to PersistentCollection#endRead), we scan the // internal loadingCollections map for matches and store those matches // in a temp collection.  the temp collection is then used to "drive" // the #endRead processing.	WITHOUT_CLASSIFICATION	0.9999999971177936	WITHOUT_CLASSIFICATION	2.882206334816267E-9	TEST
//we can reuse it for each row	WITHOUT_CLASSIFICATION	0.99999544855759	WITHOUT_CLASSIFICATION	4.551442409919831E-6	TEST
//can't reuse in this case	WITHOUT_CLASSIFICATION	0.999992659991261	WITHOUT_CLASSIFICATION	7.340008739060988E-6	TEST
// First we need to suspend any current JTA transaction and obtain // a JDBC connection	WITHOUT_CLASSIFICATION	0.9999999108589777	WITHOUT_CLASSIFICATION	8.914102226049539E-8	TEST
//getResultList(results);	WITHOUT_CLASSIFICATION	0.9999559884425677	WITHOUT_CLASSIFICATION	4.401155743230534E-5	TEST
//if we only returned one entity, query by key is more efficient	WITHOUT_CLASSIFICATION	0.9999956073997481	WITHOUT_CLASSIFICATION	4.39260025184458E-6	TEST
// a collection loaded in the current session // can not possibly be the collection belonging // to the entity passed to update()	WITHOUT_CLASSIFICATION	0.9999998800050786	WITHOUT_CLASSIFICATION	1.1999492146564597E-7	TEST
// handle empty collection	WITHOUT_CLASSIFICATION	0.9999996520961911	WITHOUT_CLASSIFICATION	3.4790380887059426E-7	TEST
// else no collection element, but also no owner	WITHOUT_CLASSIFICATION	0.9999999397899844	WITHOUT_CLASSIFICATION	6.02100155909073E-8	TEST
//handle empty collections	WITHOUT_CLASSIFICATION	0.9999987864913311	WITHOUT_CLASSIFICATION	1.2135086688635946E-6	TEST
// else this is not a collection initializer (and empty collections will // be detected by looking for the owner's identifier in the result set)	WITHOUT_CLASSIFICATION	0.9999997843465075	WITHOUT_CLASSIFICATION	2.1565349252157482E-7	TEST
// validate() instances of Validatable	WITHOUT_CLASSIFICATION	0.9999964932922613	WITHOUT_CLASSIFICATION	3.506707738739401E-6	TEST
// if we know there is exactly 1 row, we can skip. // it would be great if we could _always_ skip this; // it is a problem for <key-many-to-one>	WITHOUT_CLASSIFICATION	0.9999996744069567	WITHOUT_CLASSIFICATION	3.2559304334128754E-7	TEST
// remove all collections for the entity from the session-level cache	WITHOUT_CLASSIFICATION	0.9999999157238019	WITHOUT_CLASSIFICATION	8.427619817249505E-8	TEST
//null version means the object is in the process of being loaded somewhere else in the ResultSet	WITHOUT_CLASSIFICATION	0.9999996598758836	WITHOUT_CLASSIFICATION	3.401241164401342E-7	TEST
//problematic for <key-many-to-one>!	WITHOUT_CLASSIFICATION	0.9999969766521064	WITHOUT_CLASSIFICATION	3.0233478934989993E-6	TEST
//use the id passed in	WITHOUT_CLASSIFICATION	0.9999731479912605	WITHOUT_CLASSIFICATION	2.685200873960951E-5	TEST
//do nothing	WITHOUT_CLASSIFICATION	0.9999794288590677	WITHOUT_CLASSIFICATION	2.057114093234398E-5	TEST
// prefer re-generation of identity!	WITHOUT_CLASSIFICATION	0.9999995617611271	WITHOUT_CLASSIFICATION	4.3823887284002E-7	TEST
//no point doing this if NONE was requested	WITHOUT_CLASSIFICATION	0.9993868963499781	WITHOUT_CLASSIFICATION	6.131036500218898E-4	TEST
//If the object is already loaded, return the loaded one	WITHOUT_CLASSIFICATION	0.9999950829079947	WITHOUT_CLASSIFICATION	4.917092005368229E-6	TEST
//its already loaded so don't need to hydrate it	WITHOUT_CLASSIFICATION	0.9999920680296595	WITHOUT_CLASSIFICATION	7.931970340614363E-6	TEST
// cascade the refresh prior to refreshing this entity	WITHOUT_CLASSIFICATION	0.9999978550386764	WITHOUT_CLASSIFICATION	2.1449613235224137E-6	TEST
//the load() which takes an entity does not pass an entityName	WITHOUT_CLASSIFICATION	0.9999698954898973	WITHOUT_CLASSIFICATION	3.0104510102582565E-5	TEST
//we only check the version when _upgrading_ lock modes	WITHOUT_CLASSIFICATION	0.9999990531819769	WITHOUT_CLASSIFICATION	9.468180230728027E-7	TEST
// look for a proxy	WITHOUT_CLASSIFICATION	0.9999946186805175	WITHOUT_CLASSIFICATION	5.381319482403289E-6	TEST
//we need to upgrade the lock mode to the mode requested	WITHOUT_CLASSIFICATION	0.9999127399934911	WITHOUT_CLASSIFICATION	8.726000650886542E-5	TEST
//its the given optional object	WITHOUT_CLASSIFICATION	0.9999957727236369	WITHOUT_CLASSIFICATION	4.227276363036699E-6	TEST
// instantiate a new instance	WITHOUT_CLASSIFICATION	0.9999989672912867	WITHOUT_CLASSIFICATION	1.0327087133247141E-6	TEST
//need to hydrate it.	WITHOUT_CLASSIFICATION	0.9999473127257108	WITHOUT_CLASSIFICATION	5.2687274289131785E-5	TEST
// return a newly loaded object	WITHOUT_CLASSIFICATION	0.9999989590872804	WITHOUT_CLASSIFICATION	1.0409127195867526E-6	TEST
//will be ignored, using the existing Entry instead	WITHOUT_CLASSIFICATION	0.9999960450480985	WITHOUT_CLASSIFICATION	3.95495190153289E-6	TEST
// key is an entity involved with the operation performed by the listener; // value can be either a copy of the entity or the entity itself	WITHOUT_CLASSIFICATION	0.9999993266414814	WITHOUT_CLASSIFICATION	6.733585185126961E-7	TEST
//materialize associations (and initialize the object) later	WITHOUT_CLASSIFICATION	0.9999980780509719	WITHOUT_CLASSIFICATION	1.9219490281546286E-6	TEST
// Get the persister for the _subclass_	WITHOUT_CLASSIFICATION	0.9999764271201597	WITHOUT_CLASSIFICATION	2.357287984025454E-5	TEST
// ok in normal Hibernate usage to delete a detached entity; JPA however // forbids it, thus this is a hook for HEM to affect this behavior	WITHOUT_CLASSIFICATION	0.9999990218976565	WITHOUT_CLASSIFICATION	9.781023433808577E-7	TEST
// the entry will be removed after the flush, and will no longer // override the stale snapshot // This is now handled by removeEntity() in EntityDeleteAction //persistenceContext.removeDatabaseSnapshot(key);	WITHOUT_CLASSIFICATION	0.9999997974102938	WITHOUT_CLASSIFICATION	2.0258970627954992E-7	TEST
//addInitializedCollection(collection, persister, id);	WITHOUT_CLASSIFICATION	0.999995911506288	WITHOUT_CLASSIFICATION	4.088493711985922E-6	TEST
//EARLY EXIT!	WITHOUT_CLASSIFICATION	0.9999506752157185	WITHOUT_CLASSIFICATION	4.9324784281489196E-5	TEST
//EARLY EXIT!	WITHOUT_CLASSIFICATION	0.9999506752157185	WITHOUT_CLASSIFICATION	4.9324784281489196E-5	TEST
/*|| oj.getJoinable().consumesCollectionAlias() */	WITHOUT_CLASSIFICATION	0.9999985205348567	WITHOUT_CLASSIFICATION	1.47946514329934E-6	TEST
// here we do not bother with the discriminator.	WITHOUT_CLASSIFICATION	0.9999984379272816	WITHOUT_CLASSIFICATION	1.5620727183759596E-6	TEST
// Code to handle subclasses of topClass	WITHOUT_CLASSIFICATION	0.9999994553417073	WITHOUT_CLASSIFICATION	5.446582926470504E-7	TEST
//woops we got an instance of another class hierarchy branch	WITHOUT_CLASSIFICATION	0.9999979836233158	WITHOUT_CLASSIFICATION	2.0163766842393406E-6	TEST
// we can go straight to the first required row	WITHOUT_CLASSIFICATION	0.999998199265564	WITHOUT_CLASSIFICATION	1.8007344360356967E-6	TEST
// we need to step through the rows one row at a time (slow)	WITHOUT_CLASSIFICATION	0.9999974992474944	WITHOUT_CLASSIFICATION	2.5007525055709915E-6	TEST
// synchronized to avoid multi-thread access issues; defined as method synch to avoid // potential deadlock issues due to nature of code.	WITHOUT_CLASSIFICATION	0.999999985414487	WITHOUT_CLASSIFICATION	1.4585513093325168E-8	TEST
// Allows various loaders (ok mainly the QueryLoader :) to check // whether scrolling of their result set should be allowed. // // By default it is allowed.	WITHOUT_CLASSIFICATION	0.9999992240586109	WITHOUT_CLASSIFICATION	7.759413891531448E-7	TEST
//before adding to collection!	WITHOUT_CLASSIFICATION	0.9999991171924646	WITHOUT_CLASSIFICATION	8.82807535443868E-7	TEST
// if the current depth is 0, the root thing being loaded is the // many-to-many collection itself.  Here, it is alright to use // an inner join...	WITHOUT_CLASSIFICATION	0.9999999612611217	WITHOUT_CLASSIFICATION	3.8738878332277355E-8	TEST
//operations which cascade as far as the collection also cascade to collection elements	WITHOUT_CLASSIFICATION	0.9999996308308932	WITHOUT_CLASSIFICATION	3.6916910687425913E-7	TEST
// simple, because we can't have a one-to-one or a collection  // (or even a property-ref) in a composite-element:	WITHOUT_CLASSIFICATION	0.9999999941049533	WITHOUT_CLASSIFICATION	5.895046629413806E-9	TEST
//a composite key	WITHOUT_CLASSIFICATION	0.999994576124788	WITHOUT_CLASSIFICATION	5.423875211908635E-6	TEST
// if no batch, use "foo = ? and bar = ?"	WITHOUT_CLASSIFICATION	0.9999994580047763	WITHOUT_CLASSIFICATION	5.419952236876199E-7	TEST
//it must be a collection fetch	WITHOUT_CLASSIFICATION	0.9999962091819571	WITHOUT_CLASSIFICATION	3.7908180428047196E-6	TEST
// needed later for many-to-many/filter application	WITHOUT_CLASSIFICATION	0.9999991338266171	WITHOUT_CLASSIFICATION	8.661733828635869E-7	TEST
/*&& etype.isReferenceToPrimaryKey()*/	WITHOUT_CLASSIFICATION	0.9999983817555844	WITHOUT_CLASSIFICATION	1.6182444155919237E-6	TEST
// it might still need to apply a collection ordering based on a // many-to-many defined order-by...	WITHOUT_CLASSIFICATION	0.9999999810354213	WITHOUT_CLASSIFICATION	1.8964578769291267E-8	TEST
// if a composite key, use "( (foo = ? and bar = ?) or (foo = ? and bar = ?) )" for batching //TODO: unnecessary for databases with ANSI-style joins	WITHOUT_CLASSIFICATION	0.9999982968523019	WITHOUT_CLASSIFICATION	1.7031476980575253E-6	TEST
// belong to other persister // belong to other persister	WITHOUT_CLASSIFICATION	0.9999872673326934	WITHOUT_CLASSIFICATION	1.273266730647303E-5	TEST
// we found it	WITHOUT_CLASSIFICATION	0.9999936754872376	WITHOUT_CLASSIFICATION	6.324512762429127E-6	TEST
//we can use an inner join for the many-to-many	WITHOUT_CLASSIFICATION	0.9999973256973873	WITHOUT_CLASSIFICATION	2.6743026127543287E-6	TEST
//disable a join back to this same association	WITHOUT_CLASSIFICATION	0.9999973324975464	WITHOUT_CLASSIFICATION	2.667502453593216E-6	TEST
//NOTE: unlike all other Loaders, this one is NOT //      multithreaded, or cacheable!!	WITHOUT_CLASSIFICATION	0.9999814389744444	WITHOUT_CLASSIFICATION	1.856102555572482E-5	TEST
//the user visible aliases, which are unknown to the superclass, //these are not the actual "physical" SQL aliases	WITHOUT_CLASSIFICATION	0.9999993141774084	WITHOUT_CLASSIFICATION	6.858225916454768E-7	TEST
//root entity comes *last*	WITHOUT_CLASSIFICATION	0.9999985033603337	WITHOUT_CLASSIFICATION	1.496639666320464E-6	TEST
//deliberately ignore return value!	WITHOUT_CLASSIFICATION	0.9999843554712775	WITHOUT_CLASSIFICATION	1.564452872245224E-5	TEST
//alias may be null //EARLY EXIT	WITHOUT_CLASSIFICATION	0.9999933491356447	WITHOUT_CLASSIFICATION	6.650864355273963E-6	TEST
// if it is a compound path	WITHOUT_CLASSIFICATION	0.9999977866373647	WITHOUT_CLASSIFICATION	2.2133626352803047E-6	TEST
// otherwise assume the parent is the the criteria that created us	WITHOUT_CLASSIFICATION	0.9999910917818333	WITHOUT_CLASSIFICATION	8.908218166653273E-6	TEST
// if its the root criteria, we are done	WITHOUT_CLASSIFICATION	0.9999989582225728	WITHOUT_CLASSIFICATION	1.041777427204048E-6	TEST
// otherwise, recurse	WITHOUT_CLASSIFICATION	0.9999970108995561	WITHOUT_CLASSIFICATION	2.989100443926699E-6	TEST
//the criteria instance	WITHOUT_CLASSIFICATION	0.999994708058018	WITHOUT_CLASSIFICATION	5.2919419819554504E-6	TEST
// the entity name	WITHOUT_CLASSIFICATION	0.9999977657520298	WITHOUT_CLASSIFICATION	2.2342479702004744E-6	TEST
//not found in inner query , try the outer query	WITHOUT_CLASSIFICATION	0.9998789492520305	WITHOUT_CLASSIFICATION	1.2105074796956075E-4	TEST
//not found in inner query , try the outer query	WITHOUT_CLASSIFICATION	0.9998789492520305	WITHOUT_CLASSIFICATION	1.2105074796956075E-4	TEST
//it refers to an alias of a projection	WITHOUT_CLASSIFICATION	0.9999982449139331	WITHOUT_CLASSIFICATION	1.7550860670133426E-6	TEST
//should never happen, i think	WITHOUT_CLASSIFICATION	0.9999913850806105	WITHOUT_CLASSIFICATION	8.614919389524242E-6	TEST
// Detect discriminator values...	WITHOUT_CLASSIFICATION	0.9999984688077856	WITHOUT_CLASSIFICATION	1.531192214387156E-6	TEST
// Convert the string value into the proper type.	WITHOUT_CLASSIFICATION	0.9999982910432693	WITHOUT_CLASSIFICATION	1.7089567306299956E-6	TEST
// and the qualifier is not the alias of this criteria //      -> check to see if we belong to some criteria other //          than the one that created us	WITHOUT_CLASSIFICATION	0.9999991924011381	WITHOUT_CLASSIFICATION	8.075988619119083E-7	TEST
//it does not refer to an alias of a projection, //look for a property	WITHOUT_CLASSIFICATION	0.9999991015124406	WITHOUT_CLASSIFICATION	8.984875592560235E-7	TEST
// Otherwise, this is an ordinary value.	WITHOUT_CLASSIFICATION	0.9999801169750452	WITHOUT_CLASSIFICATION	1.9883024954729956E-5	TEST
// Currently *not* cachable if autodiscover types is in effect (e.g. "select * ...")	WITHOUT_CLASSIFICATION	0.9999998720132086	WITHOUT_CLASSIFICATION	1.2798679149968576E-7	TEST
//	WITHOUT_CLASSIFICATION	0.999928714121282	WITHOUT_CLASSIFICATION	7.128587871800795E-5	TEST
// this is only needed (afaict) for ResultTransformer processing...	WITHOUT_CLASSIFICATION	0.9999941579668855	WITHOUT_CLASSIFICATION	5.842033114530711E-6	TEST
// determine if the collection elements are entities...	WITHOUT_CLASSIFICATION	0.9999999186380084	WITHOUT_CLASSIFICATION	8.136199162271244E-8	TEST
// build an array with indices equal to the total number // of actual returns in the result Hibernate will return // for this query (scalars + non-scalars)	WITHOUT_CLASSIFICATION	0.9999989606858374	WITHOUT_CLASSIFICATION	1.0393141626130277E-6	TEST
// replace {....} with corresponding column aliases	WITHOUT_CLASSIFICATION	0.99999986445241	WITHOUT_CLASSIFICATION	1.3554759005867594E-7	TEST
// No additional open braces found in the string, append the // rest of the string in its entirty and quit this loop	WITHOUT_CLASSIFICATION	0.9999992149869209	WITHOUT_CLASSIFICATION	7.850130789712407E-7	TEST
// apend everything up until the next encountered open brace	WITHOUT_CLASSIFICATION	0.9999995756742351	WITHOUT_CLASSIFICATION	4.2432576483535107E-7	TEST
// it is a simple table alias {foo}	WITHOUT_CLASSIFICATION	0.9999967578686968	WITHOUT_CLASSIFICATION	3.2421313032667912E-6	TEST
// passing through anything we do not know : to support jdbc escape sequences HB-898	WITHOUT_CLASSIFICATION	0.9999998199399854	WITHOUT_CLASSIFICATION	1.8006001463733968E-7	TEST
// passing through anything we do not know : to support jdbc escape sequences HB-898	WITHOUT_CLASSIFICATION	0.9999998199399854	WITHOUT_CLASSIFICATION	1.8006001463733968E-7	TEST
// The current alias is referencing the collection to be eagerly fetched	WITHOUT_CLASSIFICATION	0.999998331487539	WITHOUT_CLASSIFICATION	1.6685124609405196E-6	TEST
// it is a property reference {foo.bar}	WITHOUT_CLASSIFICATION	0.9999991108772835	WITHOUT_CLASSIFICATION	8.891227164872777E-7	TEST
// Possibly handle :something parameters for the query ?	WITHOUT_CLASSIFICATION	0.9999980494194114	WITHOUT_CLASSIFICATION	1.950580588666646E-6	TEST
// Let return-propertys override whatever the persister has for aliases.	WITHOUT_CLASSIFICATION	0.99999547472656	WITHOUT_CLASSIFICATION	4.5252734399664955E-6	TEST
//	WITHOUT_CLASSIFICATION	0.999928714121282	WITHOUT_CLASSIFICATION	7.128587871800795E-5	TEST
/*package*/	WITHOUT_CLASSIFICATION	0.9999753172071789	WITHOUT_CLASSIFICATION	2.4682792821087808E-5	TEST
//NOTE: EARLY EXIT!	WITHOUT_CLASSIFICATION	0.9998631359598267	WITHOUT_CLASSIFICATION	1.368640401732885E-4	TEST
//	WITHOUT_CLASSIFICATION	0.999928714121282	WITHOUT_CLASSIFICATION	7.128587871800795E-5	TEST
// Now, process the returns	WITHOUT_CLASSIFICATION	0.999992768073319	WITHOUT_CLASSIFICATION	7.231926681029776E-6	TEST
//	WITHOUT_CLASSIFICATION	0.999928714121282	WITHOUT_CLASSIFICATION	7.128587871800795E-5	TEST
// already been processed...	WITHOUT_CLASSIFICATION	0.9999988849147734	WITHOUT_CLASSIFICATION	1.1150852266483428E-6	TEST
// already been processed...	WITHOUT_CLASSIFICATION	0.9999988849147734	WITHOUT_CLASSIFICATION	1.1150852266483428E-6	TEST
// Make sure the owner alias is known...	WITHOUT_CLASSIFICATION	0.9999902662440999	WITHOUT_CLASSIFICATION	9.733755900147236E-6	TEST
// first, break down the returns into maps keyed by alias // so that role returns can be more easily resolved to their owners	WITHOUT_CLASSIFICATION	0.999999530366914	WITHOUT_CLASSIFICATION	4.696330859972394E-7	TEST
//	WITHOUT_CLASSIFICATION	0.999928714121282	WITHOUT_CLASSIFICATION	7.128587871800795E-5	TEST
// If this return's alias has not been processed yet, do so b4 further processing of this return	WITHOUT_CLASSIFICATION	0.9999989445481314	WITHOUT_CLASSIFICATION	1.055451868580014E-6	TEST
//	WITHOUT_CLASSIFICATION	0.999928714121282	WITHOUT_CLASSIFICATION	7.128587871800795E-5	TEST
// for merging of versioned entities, we consider the version having // been changed only when: // 1) the two version values are different; //      *AND* // 2) The target actually represents database state! // // This second condition is a special case which allows // an entity to be merged during the same transaction // (though during a seperate operation) in which it was // originally persisted/saved	WITHOUT_CLASSIFICATION	0.999999986356903	WITHOUT_CLASSIFICATION	1.3643096980811621E-8	TEST
// this is the second pass through on a merge op, so here we limit the // replacement to associations types (value types were already replaced // during the first pass)	WITHOUT_CLASSIFICATION	0.9999999064374364	WITHOUT_CLASSIFICATION	9.35625634824475E-8	TEST
//EARLY EXIT	WITHOUT_CLASSIFICATION	0.9999500455557626	WITHOUT_CLASSIFICATION	4.995444423731915E-5	TEST
// cascade-save to collections AFTER the collection owner was saved	WITHOUT_CLASSIFICATION	0.9999998445523662	WITHOUT_CLASSIFICATION	1.5544763370192418E-7	TEST
// Initialize the error handling delegate.	WITHOUT_CLASSIFICATION	0.999991140440591	WITHOUT_CLASSIFICATION	8.859559409013723E-6	TEST
// Use the delegate.	WITHOUT_CLASSIFICATION	0.9999885487700229	WITHOUT_CLASSIFICATION	1.1451229977171122E-5	TEST
// currently only the Hibernate-supplied DbTimestampType is supported here	WITHOUT_CLASSIFICATION	0.999981919914451	WITHOUT_CLASSIFICATION	1.8080085548989377E-5	TEST
// This is called when it's time to fully resolve a path expression.	WITHOUT_CLASSIFICATION	0.9999976679792353	WITHOUT_CLASSIFICATION	2.3320207646434806E-6	TEST
// make a new one	WITHOUT_CLASSIFICATION	0.9999987398007071	WITHOUT_CLASSIFICATION	1.2601992928693696E-6	TEST
// not so sure this is even valid subtree.  but if it was, it'd // represent two unrelated table references...	WITHOUT_CLASSIFICATION	0.9999987313381365	WITHOUT_CLASSIFICATION	1.2686618634797225E-6	TEST
// (NOT (GT a b) ) => (LE a b)	WITHOUT_CLASSIFICATION	0.9999691453436117	WITHOUT_CLASSIFICATION	3.085465638828421E-5	TEST
//private Type[] sqlResultTypes;	WITHOUT_CLASSIFICATION	0.9999871770159312	WITHOUT_CLASSIFICATION	1.2822984068805837E-5	TEST
//include the discriminator and class-level where, but not filters	WITHOUT_CLASSIFICATION	0.9999985920667707	WITHOUT_CLASSIFICATION	1.4079332293925789E-6	TEST
//sqlResultTypes = selectClause.getSqlResultTypes();	WITHOUT_CLASSIFICATION	0.9999956521961653	WITHOUT_CLASSIFICATION	4.347803834747062E-6	TEST
//by default	WITHOUT_CLASSIFICATION	0.999991602167428	WITHOUT_CLASSIFICATION	8.397832571925554E-6	TEST
// This is now handled earlier in this method.	WITHOUT_CLASSIFICATION	0.9999920001447811	WITHOUT_CLASSIFICATION	7.999855219002947E-6	TEST
// -- Loader implementation --	WITHOUT_CLASSIFICATION	0.9999998419816802	WITHOUT_CLASSIFICATION	1.5801831970684743E-7	TEST
// -- Loader overrides --	WITHOUT_CLASSIFICATION	0.9999969473518608	WITHOUT_CLASSIFICATION	3.052648139212536E-6	TEST
// (NOT (IS_NULL a b) ) => (IS_NOT_NULL a b)	WITHOUT_CLASSIFICATION	0.9999443805951891	WITHOUT_CLASSIFICATION	5.561940481084586E-5	TEST
//NONE, because its the requested lock mode, not the actual! 	WITHOUT_CLASSIFICATION	0.9999411148037841	WITHOUT_CLASSIFICATION	5.888519621593445E-5	TEST
// meant to handle dynamic instantiation queries...	WITHOUT_CLASSIFICATION	0.9999998573810647	WITHOUT_CLASSIFICATION	1.42618935357528E-7	TEST
// --- Query translator methods ---	WITHOUT_CLASSIFICATION	0.9999997037995222	WITHOUT_CLASSIFICATION	2.962004778536669E-7	TEST
// -- Implementation private methods --	WITHOUT_CLASSIFICATION	0.9999998234016985	WITHOUT_CLASSIFICATION	1.765983014880306E-7	TEST
//deduplicate unique constraints sharing the same columns //this is needed by Hibernate Annotations since it creates automagically // unique constraints for the user	WITHOUT_CLASSIFICATION	0.9999979461120911	WITHOUT_CLASSIFICATION	2.053887908987416E-6	TEST
// Try to find out the name of the primary key to create it as identity if the IdentityGenerator is used	WITHOUT_CLASSIFICATION	0.9999995166181621	WITHOUT_CLASSIFICATION	4.833818378911207E-7	TEST
// to support dialects that have their own identity data type	WITHOUT_CLASSIFICATION	0.9999994857339569	WITHOUT_CLASSIFICATION	5.142660430687012E-7	TEST
// Prepare the left hand side and get the data type.	WITHOUT_CLASSIFICATION	0.999997520922783	WITHOUT_CLASSIFICATION	2.4790772168749944E-6	TEST
//used also for generation of FK names!	WITHOUT_CLASSIFICATION	0.9999979070696641	WITHOUT_CLASSIFICATION	2.092930335977188E-6	TEST
//usually useless	WITHOUT_CLASSIFICATION	0.999915655442941	WITHOUT_CLASSIFICATION	8.43445570588887E-5	TEST
// added this caching as I noticed that getType() is being called multiple times...	WITHOUT_CLASSIFICATION	0.9999936368345478	WITHOUT_CLASSIFICATION	6.363165452257538E-6	TEST
//do not add unique constraint on DB not supporting unique and nullable columns	WITHOUT_CLASSIFICATION	0.9999996575766008	WITHOUT_CLASSIFICATION	3.424233991982202E-7	TEST
//for backward compatibility, disable this:	WITHOUT_CLASSIFICATION	0.9999951484857651	WITHOUT_CLASSIFICATION	4.851514234937442E-6	TEST
//may be final //may be final //may be final	WITHOUT_CLASSIFICATION	0.9999617015641459	WITHOUT_CLASSIFICATION	3.8298435854191577E-5	TEST
//may be final	WITHOUT_CLASSIFICATION	0.9999766063379671	WITHOUT_CLASSIFICATION	2.3393662032968117E-5	TEST
// may be final	WITHOUT_CLASSIFICATION	0.9999946775055653	WITHOUT_CLASSIFICATION	5.322494434761937E-6	TEST
// Custom SQL	WITHOUT_CLASSIFICATION	0.9999945041412603	WITHOUT_CLASSIFICATION	5.49585873956876E-6	TEST
//Primary key constraint	WITHOUT_CLASSIFICATION	0.9999985306676031	WITHOUT_CLASSIFICATION	1.469332396843415E-6	TEST
// the root of the incoming property path matched one // of the embedded composite identifier properties	WITHOUT_CLASSIFICATION	0.9999998515167985	WITHOUT_CLASSIFICATION	1.4848320152896602E-7	TEST
// ignore it...	WITHOUT_CLASSIFICATION	0.9999985399011924	WITHOUT_CLASSIFICATION	1.4600988076149466E-6	TEST
//flat recursive algorithm	WITHOUT_CLASSIFICATION	0.9999973500372865	WITHOUT_CLASSIFICATION	2.649962713384895E-6	TEST
//an identifier mapper => getKey will be included in the getNonDuplicatedPropertyIterator() //and checked later, so it needs to be excluded	WITHOUT_CLASSIFICATION	0.9999987006656073	WITHOUT_CLASSIFICATION	1.2993343926674186E-6	TEST
//if the hibernate-mapping did not specify a schema/catalog, use the defaults //specified by properties - but note that if the schema/catalog were specified //in hibernate-mapping, or as params, they will already be initialized and //will override the values set here (they are in identifierGeneratorProperties)	WITHOUT_CLASSIFICATION	0.9999999860555242	WITHOUT_CLASSIFICATION	1.3944475846149189E-8	TEST
//pass the entity-name, if not a collection-id	WITHOUT_CLASSIFICATION	0.9999983903404677	WITHOUT_CLASSIFICATION	1.609659532344873E-6	TEST
// Custom SQL	WITHOUT_CLASSIFICATION	0.9999945041412603	WITHOUT_CLASSIFICATION	5.49585873956876E-6	TEST
//Primary key constraint	WITHOUT_CLASSIFICATION	0.9999985306676031	WITHOUT_CLASSIFICATION	1.469332396843415E-6	TEST
//pass the column name (a generated id almost always has a single column)	WITHOUT_CLASSIFICATION	0.9999844686900979	WITHOUT_CLASSIFICATION	1.5531309902013964E-5	TEST
//needed to satisfy KeyValue	WITHOUT_CLASSIFICATION	0.9999833740979437	WITHOUT_CLASSIFICATION	1.6625902056352724E-5	TEST
// empty means no scoping	WITHOUT_CLASSIFICATION	0.9999997410240966	WITHOUT_CLASSIFICATION	2.589759033816152E-7	TEST
// index should be last column listed	WITHOUT_CLASSIFICATION	0.9999834658376118	WITHOUT_CLASSIFICATION	1.6534162388200764E-5	TEST
//if it is a formula index, use the element columns in the PK	WITHOUT_CLASSIFICATION	0.9999991973090461	WITHOUT_CLASSIFICATION	8.026909540503667E-7	TEST
// don't create a unique key, 'cos some // databases don't like a UK on nullable // columns	WITHOUT_CLASSIFICATION	0.9999999602471146	WITHOUT_CLASSIFICATION	3.975288545490612E-8	TEST
/*ArrayList list = new ArrayList();	WITHOUT_CLASSIFICATION	0.9999854685832852	WITHOUT_CLASSIFICATION	1.4531416714694381E-5	TEST
// }	WITHOUT_CLASSIFICATION	0.9999907992357349	WITHOUT_CLASSIFICATION	9.200764265235855E-6	TEST
// no foreign key element of for a one-to-many	WITHOUT_CLASSIFICATION	0.9999997414396776	WITHOUT_CLASSIFICATION	2.58560322406473E-7	TEST
//TODO: we could just return all false...	WITHOUT_CLASSIFICATION	0.9999552266794144	WITHOUT_CLASSIFICATION	4.477332058560034E-5	TEST
// the case of a foreign key to something other than the pk is handled in createPropertyRefConstraints	WITHOUT_CLASSIFICATION	0.9999997343884458	WITHOUT_CLASSIFICATION	2.65611554245425E-7	TEST
//TODO: we could just return all false...	WITHOUT_CLASSIFICATION	0.9999552266794144	WITHOUT_CLASSIFICATION	4.477332058560034E-5	TEST
// if the property mapping consists of all formulas,  // make it non-updateable	WITHOUT_CLASSIFICATION	0.9999999475487205	WITHOUT_CLASSIFICATION	5.2451279545683106E-8	TEST
//columnUpdateability.length==0 ||	WITHOUT_CLASSIFICATION	0.9999909569663444	WITHOUT_CLASSIFICATION	9.043033655605155E-6	TEST
// if the property mapping consists of all formulas,  // make it insertable	WITHOUT_CLASSIFICATION	0.9999999600347144	WITHOUT_CLASSIFICATION	3.9965285684942885E-8	TEST
// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ // stuff that is Tuplizer-centric ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ // ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999951575459606	WITHOUT_CLASSIFICATION	4.842454039409822E-6	TEST
// expected type is intrinsic here...	WITHOUT_CLASSIFICATION	0.9999974061728766	WITHOUT_CLASSIFICATION	2.5938271233522144E-6	TEST
//}	WITHOUT_CLASSIFICATION	0.9999644354865893	WITHOUT_CLASSIFICATION	3.556451341072568E-5	TEST
//}	WITHOUT_CLASSIFICATION	0.9999644354865893	WITHOUT_CLASSIFICATION	3.556451341072568E-5	TEST
//return memberPersister.getPropertyType(propertyName);	WITHOUT_CLASSIFICATION	0.999984594630858	WITHOUT_CLASSIFICATION	1.5405369142107505E-5	TEST
//return memberPersister.toColumns(alias, propertyName);	WITHOUT_CLASSIFICATION	0.999993597773293	WITHOUT_CLASSIFICATION	6.402226706964226E-6	TEST
//return memberPersister.getType();	WITHOUT_CLASSIFICATION	0.9999810028062683	WITHOUT_CLASSIFICATION	1.8997193731733358E-5	TEST
/*&& !indexIsFormula*/	WITHOUT_CLASSIFICATION	0.9999972188332746	WITHOUT_CLASSIFICATION	2.781166725353801E-6	TEST
//	WITHOUT_CLASSIFICATION	0.999928714121282	WITHOUT_CLASSIFICATION	7.128587871800795E-5	TEST
//instanceof AssociationType;	WITHOUT_CLASSIFICATION	0.9999986247220408	WITHOUT_CLASSIFICATION	1.3752779591525572E-6	TEST
// we need to determine the best way to know that two joinables // represent a single many-to-many...	WITHOUT_CLASSIFICATION	0.9999980419145413	WITHOUT_CLASSIFICATION	1.9580854586947135E-6	TEST
//strip leading ','	WITHOUT_CLASSIFICATION	0.9999963917079185	WITHOUT_CLASSIFICATION	3.60829208139139E-6	TEST
//public boolean isSubselectLoadable();	WITHOUT_CLASSIFICATION	0.9999961328583691	WITHOUT_CLASSIFICATION	3.867141630866652E-6	TEST
// KEY	WITHOUT_CLASSIFICATION	0.999987090740685	WITHOUT_CLASSIFICATION	1.2909259314975125E-5	TEST
//columns	WITHOUT_CLASSIFICATION	0.9999827273778358	WITHOUT_CLASSIFICATION	1.727262216424966E-5	TEST
//SQL statements	WITHOUT_CLASSIFICATION	0.9999905869073087	WITHOUT_CLASSIFICATION	9.41309269119739E-6	TEST
//extra information about the element type	WITHOUT_CLASSIFICATION	0.9999992809765857	WITHOUT_CLASSIFICATION	7.19023414317565E-7	TEST
//types	WITHOUT_CLASSIFICATION	0.9999602717116469	WITHOUT_CLASSIFICATION	3.9728288353131415E-5	TEST
// custom sql	WITHOUT_CLASSIFICATION	0.9999966199960285	WITHOUT_CLASSIFICATION	3.380003971589337E-6	TEST
//private final String unquotedIdentifierColumnName;	WITHOUT_CLASSIFICATION	0.9999903430361475	WITHOUT_CLASSIFICATION	9.656963852592836E-6	TEST
// dynamic filters specifically for many-to-many inside the collection	WITHOUT_CLASSIFICATION	0.9999995427138311	WITHOUT_CLASSIFICATION	4.572861689039746E-7	TEST
// dynamic filters for the collection	WITHOUT_CLASSIFICATION	0.999998845276346	WITHOUT_CLASSIFICATION	1.1547236540587305E-6	TEST
// NativeSQL: collect key column and auto-aliases	WITHOUT_CLASSIFICATION	0.999997683010584	WITHOUT_CLASSIFICATION	2.3169894160489413E-6	TEST
//unquotedKeyColumnNames = StringHelper.unQuote(keyColumnAliases);	WITHOUT_CLASSIFICATION	0.9999924489932926	WITHOUT_CLASSIFICATION	7.551006707349964E-6	TEST
//ELEMENT	WITHOUT_CLASSIFICATION	0.9998786907481111	WITHOUT_CLASSIFICATION	1.2130925188894095E-4	TEST
// NativeSQL: collect element column and auto-aliases	WITHOUT_CLASSIFICATION	0.9999987753113341	WITHOUT_CLASSIFICATION	1.2246886659421505E-6	TEST
// INDEX AND ROW SELECT	WITHOUT_CLASSIFICATION	0.9999639831001749	WITHOUT_CLASSIFICATION	3.601689982517549E-5	TEST
// NativeSQL: collect index column and auto-aliases	WITHOUT_CLASSIFICATION	0.9999989034525999	WITHOUT_CLASSIFICATION	1.0965474001600073E-6	TEST
//unquotedIdentifierColumnName = identifierColumnAlias;	WITHOUT_CLASSIFICATION	0.9999884013175054	WITHOUT_CLASSIFICATION	1.1598682494461836E-5	TEST
//unquotedIdentifierColumnName = null;	WITHOUT_CLASSIFICATION	0.9999875821922738	WITHOUT_CLASSIFICATION	1.2417807726164314E-5	TEST
//GENERATE THE SQL:	WITHOUT_CLASSIFICATION	0.9999474127934243	WITHOUT_CLASSIFICATION	5.258720657577085E-5	TEST
// for non-arrays, we don't need to know the element class //elementType.returnedClass();	WITHOUT_CLASSIFICATION	0.9999999093480225	WITHOUT_CLASSIFICATION	9.065197749251613E-8	TEST
//not all classpersisters implement PropertyMapping!	WITHOUT_CLASSIFICATION	0.9999974200701601	WITHOUT_CLASSIFICATION	2.579929839921801E-6	TEST
// Handle any filters applied to this collection	WITHOUT_CLASSIFICATION	0.9999966961268867	WITHOUT_CLASSIFICATION	3.3038731134321973E-6	TEST
// Handle any filters applied to this collection for many-to-many	WITHOUT_CLASSIFICATION	0.9999980903316995	WITHOUT_CLASSIFICATION	1.9096683004757038E-6	TEST
//if there is a user-specified loader, return that //TODO: filters!?	WITHOUT_CLASSIFICATION	0.9999197700829043	WITHOUT_CLASSIFICATION	8.02299170956889E-5	TEST
// Take care of any entities that might have // been evicted!	WITHOUT_CLASSIFICATION	0.999997957007961	WITHOUT_CLASSIFICATION	2.0429920389227313E-6	TEST
//strip leading ','	WITHOUT_CLASSIFICATION	0.9999963917079185	WITHOUT_CLASSIFICATION	3.60829208139139E-6	TEST
// Run a subquery loader	WITHOUT_CLASSIFICATION	0.9999988892268765	WITHOUT_CLASSIFICATION	1.1107731234386911E-6	TEST
//needed by arrays	WITHOUT_CLASSIFICATION	0.9999752648022674	WITHOUT_CLASSIFICATION	2.4735197732602593E-5	TEST
//TODO: something with formulas...	WITHOUT_CLASSIFICATION	0.9999406592836669	WITHOUT_CLASSIFICATION	5.9340716333176496E-5	TEST
//an assertion	WITHOUT_CLASSIFICATION	0.9999968637730418	WITHOUT_CLASSIFICATION	3.1362269583850005E-6	TEST
// Remove all the old entries	WITHOUT_CLASSIFICATION	0.9999974847142619	WITHOUT_CLASSIFICATION	2.5152857381327906E-6	TEST
//create all the new entries	WITHOUT_CLASSIFICATION	0.9999967284483111	WITHOUT_CLASSIFICATION	3.2715516888848007E-6	TEST
/*&& !indexIsFormula*/	WITHOUT_CLASSIFICATION	0.9999972188332746	WITHOUT_CLASSIFICATION	2.781166725353801E-6	TEST
/*&& !indexIsFormula*/	WITHOUT_CLASSIFICATION	0.9999972188332746	WITHOUT_CLASSIFICATION	2.781166725353801E-6	TEST
//delete all the deleted entries	WITHOUT_CLASSIFICATION	0.9999770803849791	WITHOUT_CLASSIFICATION	2.291961502082095E-5	TEST
//insert all the new entries	WITHOUT_CLASSIFICATION	0.9999966525509172	WITHOUT_CLASSIFICATION	3.347449082736273E-6	TEST
//==elementType ??	WITHOUT_CLASSIFICATION	0.9999923683312476	WITHOUT_CLASSIFICATION	7.631668752352502E-6	TEST
//update all the modified entries	WITHOUT_CLASSIFICATION	0.9999771153920008	WITHOUT_CLASSIFICATION	2.288460799917493E-5	TEST
//identifier collections not supported for 1-to-many	WITHOUT_CLASSIFICATION	0.9999966432226176	WITHOUT_CLASSIFICATION	3.356777382367882E-6	TEST
// update removed rows fks to null	WITHOUT_CLASSIFICATION	0.999993186900565	WITHOUT_CLASSIFICATION	6.813099435001307E-6	TEST
// will still be issued when it used to be null	WITHOUT_CLASSIFICATION	0.9999932343196083	WITHOUT_CLASSIFICATION	6.765680391669984E-6	TEST
// now update all changed or added rows fks	WITHOUT_CLASSIFICATION	0.9999923016717437	WITHOUT_CLASSIFICATION	7.698328256221233E-6	TEST
//	WITHOUT_CLASSIFICATION	0.999928714121282	WITHOUT_CLASSIFICATION	7.128587871800795E-5	TEST
//use suffix for the entity columns	WITHOUT_CLASSIFICATION	0.9999961334322413	WITHOUT_CLASSIFICATION	3.8665677587189824E-6	TEST
// the class hierarchy structure	WITHOUT_CLASSIFICATION	0.9999972670260442	WITHOUT_CLASSIFICATION	2.732973955750357E-6	TEST
//private final String rootTableName;	WITHOUT_CLASSIFICATION	0.9999915791479483	WITHOUT_CLASSIFICATION	8.420852051669406E-6	TEST
//INITIALIZATION:	WITHOUT_CLASSIFICATION	0.9998114308058731	WITHOUT_CLASSIFICATION	1.8856919412687812E-4	TEST
//Custom SQL	WITHOUT_CLASSIFICATION	0.9999744173336282	WITHOUT_CLASSIFICATION	2.55826663717666E-5	TEST
// the class hierarchy structure	WITHOUT_CLASSIFICATION	0.9999972670260442	WITHOUT_CLASSIFICATION	2.732973955750357E-6	TEST
// Execute the SQL:	WITHOUT_CLASSIFICATION	0.9999953120060472	WITHOUT_CLASSIFICATION	4.687993952801619E-6	TEST
// This could also just be true all the time...	WITHOUT_CLASSIFICATION	0.9999944244765068	WITHOUT_CLASSIFICATION	5.575523493196121E-6	TEST
//chop the last union (all)	WITHOUT_CLASSIFICATION	0.9999908812579412	WITHOUT_CLASSIFICATION	9.118742058744269E-6	TEST
//TODO: check this....	WITHOUT_CLASSIFICATION	0.9995853611928491	WITHOUT_CLASSIFICATION	4.146388071508398E-4	TEST
//INITIALIZATION:	WITHOUT_CLASSIFICATION	0.9998114308058731	WITHOUT_CLASSIFICATION	1.8856919412687812E-4	TEST
// properties of this class, including inherited properties	WITHOUT_CLASSIFICATION	0.9999980324136775	WITHOUT_CLASSIFICATION	1.967586322568758E-6	TEST
// the closure of all properties in the entire hierarchy including // subclasses and superclasses of this class	WITHOUT_CLASSIFICATION	0.9999998362267606	WITHOUT_CLASSIFICATION	1.637732393547973E-7	TEST
// the closure of all columns used by the entire hierarchy including // subclasses and superclasses of this class	WITHOUT_CLASSIFICATION	0.9999998022394414	WITHOUT_CLASSIFICATION	1.9776055853067726E-7	TEST
// subclass discrimination works by assigning particular // values to certain combinations of null primary key // values in the outer join using an SQL CASE	WITHOUT_CLASSIFICATION	0.9999999948238595	WITHOUT_CLASSIFICATION	5.176140605426832E-9	TEST
//MULTITABLES	WITHOUT_CLASSIFICATION	0.9998951527631467	WITHOUT_CLASSIFICATION	1.0484723685327273E-4	TEST
// Custom sql	WITHOUT_CLASSIFICATION	0.9999947867635849	WITHOUT_CLASSIFICATION	5.213236415167729E-6	TEST
// subclass closure properties	WITHOUT_CLASSIFICATION	0.9999989503657031	WITHOUT_CLASSIFICATION	1.049634296977821E-6	TEST
// SUBCLASSES	WITHOUT_CLASSIFICATION	0.9999902765900089	WITHOUT_CLASSIFICATION	9.72340999112496E-6	TEST
//( (Column) model.getTable().getPrimaryKey().getColumnIterator().next() ).getName();	WITHOUT_CLASSIFICATION	0.9999819334346609	WITHOUT_CLASSIFICATION	1.806656533913564E-5	TEST
//( (Column) sc.getTable().getPrimaryKey().getColumnIterator().next() ).getName();	WITHOUT_CLASSIFICATION	0.9999858753081342	WITHOUT_CLASSIFICATION	1.4124691865766623E-5	TEST
// don't need subclass tables, because they can't appear in conditions	WITHOUT_CLASSIFICATION	0.9999998862502262	WITHOUT_CLASSIFICATION	1.1374977379553645E-7	TEST
// special case where we need to force incloude all subclass joins	WITHOUT_CLASSIFICATION	0.9999998407274423	WITHOUT_CLASSIFICATION	1.592725577224732E-7	TEST
// the class hierarchy structure	WITHOUT_CLASSIFICATION	0.9999972670260442	WITHOUT_CLASSIFICATION	2.732973955750357E-6	TEST
// properties of this class, including inherited properties	WITHOUT_CLASSIFICATION	0.9999980324136775	WITHOUT_CLASSIFICATION	1.967586322568758E-6	TEST
// the closure of all columns used by the entire hierarchy including // subclasses and superclasses of this class	WITHOUT_CLASSIFICATION	0.9999998022394414	WITHOUT_CLASSIFICATION	1.9776055853067726E-7	TEST
//get em on the second pass!	WITHOUT_CLASSIFICATION	0.9999942281524099	WITHOUT_CLASSIFICATION	5.77184759015448E-6	TEST
// now look up the object we are really interested in! // (this lets us correctly handle proxies and multi-row // or multi-column queries)	WITHOUT_CLASSIFICATION	0.9999904738986314	WITHOUT_CLASSIFICATION	9.52610136858567E-6	TEST
// discriminator column	WITHOUT_CLASSIFICATION	0.999999502730162	WITHOUT_CLASSIFICATION	4.97269837960241E-7	TEST
//INITIALIZATION:	WITHOUT_CLASSIFICATION	0.9998114308058731	WITHOUT_CLASSIFICATION	1.8856919412687812E-4	TEST
//private final Map propertyTableNumbersByName = new HashMap();	WITHOUT_CLASSIFICATION	0.9999985021343847	WITHOUT_CLASSIFICATION	1.4978656152968279E-6	TEST
// CLASS + TABLE	WITHOUT_CLASSIFICATION	0.9999884104450678	WITHOUT_CLASSIFICATION	1.1589554932190483E-5	TEST
// DISCRIMINATOR	WITHOUT_CLASSIFICATION	0.999973543662616	WITHOUT_CLASSIFICATION	2.645633738391752E-5	TEST
// PROPERTIES	WITHOUT_CLASSIFICATION	0.9999831940962501	WITHOUT_CLASSIFICATION	1.6805903749899836E-5	TEST
// SUBCLASSES	WITHOUT_CLASSIFICATION	0.9999902765900089	WITHOUT_CLASSIFICATION	9.72340999112496E-6	TEST
// Execute the SQL:	WITHOUT_CLASSIFICATION	0.9999953120060472	WITHOUT_CLASSIFICATION	4.687993952801619E-6	TEST
// JOINS	WITHOUT_CLASSIFICATION	0.9999830630758171	WITHOUT_CLASSIFICATION	1.6936924182991405E-5	TEST
//propertyTableNumbersByName.put( prop.getName(), join );	WITHOUT_CLASSIFICATION	0.9999819485638682	WITHOUT_CLASSIFICATION	1.8051436131677207E-5	TEST
//Access cached SQL	WITHOUT_CLASSIFICATION	0.9999781762578305	WITHOUT_CLASSIFICATION	2.182374216945625E-5	TEST
//figure out which tables need to be fetched	WITHOUT_CLASSIFICATION	0.9999750650704001	WITHOUT_CLASSIFICATION	2.4934929599952298E-5	TEST
//figure out which columns are needed	WITHOUT_CLASSIFICATION	0.9999947246128266	WITHOUT_CLASSIFICATION	5.2753871734485E-6	TEST
//figure out which formulas are needed	WITHOUT_CLASSIFICATION	0.9999925657567178	WITHOUT_CLASSIFICATION	7.434243282190064E-6	TEST
//render the SQL	WITHOUT_CLASSIFICATION	0.9999867707175674	WITHOUT_CLASSIFICATION	1.322928243271439E-5	TEST
// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ // stuff that is Tuplizer-centric ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ // ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999951575459606	WITHOUT_CLASSIFICATION	4.842454039409822E-6	TEST
// moved up from AbstractEntityPersister ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999972649514884	WITHOUT_CLASSIFICATION	2.7350485115213212E-6	TEST
// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999398011200608	WITHOUT_CLASSIFICATION	6.019887993916417E-5	TEST
// The optional SQL string defined in the where attribute	WITHOUT_CLASSIFICATION	0.9999996512606127	WITHOUT_CLASSIFICATION	3.487393872476561E-7	TEST
//information about lazy properties of this class	WITHOUT_CLASSIFICATION	0.9999979346289487	WITHOUT_CLASSIFICATION	2.0653710512265503E-6	TEST
//information about all properties in class hierarchy	WITHOUT_CLASSIFICATION	0.9999994234541683	WITHOUT_CLASSIFICATION	5.765458317104832E-7	TEST
//information about all columns/formulas in class hierarchy	WITHOUT_CLASSIFICATION	0.9999995122525251	WITHOUT_CLASSIFICATION	4.87747474899971E-7	TEST
// dynamic filters attached to the class-level	WITHOUT_CLASSIFICATION	0.9999989917551366	WITHOUT_CLASSIFICATION	1.0082448634181966E-6	TEST
// SQL strings	WITHOUT_CLASSIFICATION	0.9999971860427117	WITHOUT_CLASSIFICATION	2.813957288317085E-6	TEST
// for objects that came in via update()	WITHOUT_CLASSIFICATION	0.9999939801159915	WITHOUT_CLASSIFICATION	6.019884008492251E-6	TEST
// PROPERTIES	WITHOUT_CLASSIFICATION	0.9999831940962501	WITHOUT_CLASSIFICATION	1.6805903749899836E-5	TEST
// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999398011200608	WITHOUT_CLASSIFICATION	6.019887993916417E-5	TEST
// IDENTIFIER	WITHOUT_CLASSIFICATION	0.9999586072402231	WITHOUT_CLASSIFICATION	4.139275977684231E-5	TEST
// VERSION	WITHOUT_CLASSIFICATION	0.9999878813625364	WITHOUT_CLASSIFICATION	1.2118637463553809E-5	TEST
//WHERE STRING	WITHOUT_CLASSIFICATION	0.9999171093726174	WITHOUT_CLASSIFICATION	8.289062738270356E-5	TEST
// SUBCLASS PROPERTY CLOSURE	WITHOUT_CLASSIFICATION	0.9999887493637137	WITHOUT_CLASSIFICATION	1.1250636286250934E-5	TEST
//before add :-)	WITHOUT_CLASSIFICATION	0.9999835762345994	WITHOUT_CLASSIFICATION	1.6423765400460993E-5	TEST
// Handle any filters applied to the class level	WITHOUT_CLASSIFICATION	0.999997769503129	WITHOUT_CLASSIFICATION	2.2304968710313756E-6	TEST
// only one-to-one is lazy fetched	WITHOUT_CLASSIFICATION	0.9999878493997078	WITHOUT_CLASSIFICATION	1.2150600292309097E-5	TEST
//note early exit here:	WITHOUT_CLASSIFICATION	0.9999894677111951	WITHOUT_CLASSIFICATION	1.0532288804805746E-5	TEST
// object have been loaded with setReadOnly(true); HHH-2236	WITHOUT_CLASSIFICATION	0.9999991537696742	WITHOUT_CLASSIFICATION	8.46230325789453E-7	TEST
// NOTE: this assumes something about how propertySelectFragment is implemented by the subclass!	WITHOUT_CLASSIFICATION	0.9999887924257594	WITHOUT_CLASSIFICATION	1.1207574240626407E-5	TEST
//strip leading ", "	WITHOUT_CLASSIFICATION	0.9999968196975647	WITHOUT_CLASSIFICATION	3.1803024352728546E-6	TEST
//if there is no resulting row, return null	WITHOUT_CLASSIFICATION	0.9999880300923859	WITHOUT_CLASSIFICATION	1.196990761401628E-5	TEST
//otherwise return the "hydrated" state (ie. associations are not resolved)	WITHOUT_CLASSIFICATION	0.9999969507031657	WITHOUT_CLASSIFICATION	3.04929683434928E-6	TEST
//null owner ok??	WITHOUT_CLASSIFICATION	0.999954438428259	WITHOUT_CLASSIFICATION	4.5561571741004746E-5	TEST
// null sql means that the only lazy properties // are shared PK one-to-one associations which are // handled differently in the Type#nullSafeGet code...	WITHOUT_CLASSIFICATION	0.9999999914384838	WITHOUT_CLASSIFICATION	8.561516151320411E-9	TEST
// Create a new FROM node for the referenced class.	WITHOUT_CLASSIFICATION	0.99999944253489	WITHOUT_CLASSIFICATION	5.57465109912477E-7	TEST
// the difficulty here is exactly what do we update in order to // force the version to be incremented in the db...	WITHOUT_CLASSIFICATION	0.9999991818610015	WITHOUT_CLASSIFICATION	8.18138998642675E-7	TEST
// performance op to avoid the array search	WITHOUT_CLASSIFICATION	0.999999418291584	WITHOUT_CLASSIFICATION	5.817084159713007E-7	TEST
// properly handle property-ref-based associations	WITHOUT_CLASSIFICATION	0.9999996087836698	WITHOUT_CLASSIFICATION	3.9121633023481517E-7	TEST
//Enable for HHH-440, which we don't like:	WITHOUT_CLASSIFICATION	0.9999947679955093	WITHOUT_CLASSIFICATION	5.232004490598969E-6	TEST
// ALIASES	WITHOUT_CLASSIFICATION	0.9999928003258555	WITHOUT_CLASSIFICATION	7.199674144468461E-6	TEST
// aliases named identifier ( alias.idname )	WITHOUT_CLASSIFICATION	0.9999979869434301	WITHOUT_CLASSIFICATION	2.0130565698409438E-6	TEST
// aliases for composite-id's	WITHOUT_CLASSIFICATION	0.9999991187963749	WITHOUT_CLASSIFICATION	8.812036249714728E-7	TEST
// Fetch embedded identifiers propertynames from the "virtual" identifier component	WITHOUT_CLASSIFICATION	0.9999997042376666	WITHOUT_CLASSIFICATION	2.9576233339864154E-7	TEST
// embedded composite ids ( alias.idname1, alias.idname2 )	WITHOUT_CLASSIFICATION	0.9999991115445043	WITHOUT_CLASSIFICATION	8.884554956842527E-7	TEST
// TODO: skip formulas?	WITHOUT_CLASSIFICATION	0.9998282902951038	WITHOUT_CLASSIFICATION	1.7170970489617453E-4	TEST
//don't need filters for the static loaders	WITHOUT_CLASSIFICATION	0.9999792509367903	WITHOUT_CLASSIFICATION	2.0749063209722373E-5	TEST
//do two passes, for collection property-ref!	WITHOUT_CLASSIFICATION	0.9999975788341056	WITHOUT_CLASSIFICATION	2.4211658944902813E-6	TEST
// select the correct row by either pk or rowid	WITHOUT_CLASSIFICATION	0.9999966033722983	WITHOUT_CLASSIFICATION	3.396627701642773E-6	TEST
//TODO: eventually, rowIdName[j]	WITHOUT_CLASSIFICATION	0.9997436345709257	WITHOUT_CLASSIFICATION	2.5636542907425436E-4	TEST
// this is a property of the table, which we are updating	WITHOUT_CLASSIFICATION	0.9999977064008775	WITHOUT_CLASSIFICATION	2.2935991226063184E-6	TEST
// special shortcut for id properties, skip the join! // this must only occur at the _end_ of a path expression	WITHOUT_CLASSIFICATION	0.9999995860973381	WITHOUT_CLASSIFICATION	4.139026619410921E-7	TEST
// we are using "all" or "dirty" property-based optimistic locking	WITHOUT_CLASSIFICATION	0.9999998540341285	WITHOUT_CLASSIFICATION	1.4596587158333098E-7	TEST
// nothing to do; even if the operand is a parameter, no way we could // infer an appropriate expected type here	WITHOUT_CLASSIFICATION	0.9999999036989337	WITHOUT_CLASSIFICATION	9.630106639249107E-8	TEST
// this property belongs on the table and is to be inserted	WITHOUT_CLASSIFICATION	0.9999801872962011	WITHOUT_CLASSIFICATION	1.9812703798927672E-5	TEST
// add normal properties	WITHOUT_CLASSIFICATION	0.9999993933265533	WITHOUT_CLASSIFICATION	6.066734466162911E-7	TEST
// add the discriminator	WITHOUT_CLASSIFICATION	0.999999091296827	WITHOUT_CLASSIFICATION	9.087031730054019E-7	TEST
// more specifically : "? [op] datetime" //      1) if the operator is MINUS, the param needs to be of //          some datetime type //      2) if the operator is PLUS, the param needs to be of //          some numeric type	WITHOUT_CLASSIFICATION	0.9999990140189071	WITHOUT_CLASSIFICATION	9.859810928210318E-7	TEST
// add normal properties	WITHOUT_CLASSIFICATION	0.9999993933265533	WITHOUT_CLASSIFICATION	6.066734466162911E-7	TEST
// this property belongs on the table and is to be inserted	WITHOUT_CLASSIFICATION	0.9999801872962011	WITHOUT_CLASSIFICATION	1.9812703798927672E-5	TEST
// add the discriminator	WITHOUT_CLASSIFICATION	0.999999091296827	WITHOUT_CLASSIFICATION	9.087031730054019E-7	TEST
// add the primary key	WITHOUT_CLASSIFICATION	0.9999965414309251	WITHOUT_CLASSIFICATION	3.4585690750542965E-6	TEST
// delegate already handles PK columns	WITHOUT_CLASSIFICATION	0.9999986528249575	WITHOUT_CLASSIFICATION	1.3471750425192122E-6	TEST
// we can't batch joined inserts, *especially* not if it is an identity insert; // nor can we batch statements where the expectation is based on an output param	WITHOUT_CLASSIFICATION	0.9999999901157673	WITHOUT_CLASSIFICATION	9.884232541353347E-9	TEST
// Render the SQL query	WITHOUT_CLASSIFICATION	0.9999978762111634	WITHOUT_CLASSIFICATION	2.1237888365615503E-6	TEST
// Write the values of fields onto the prepared statement - we MUST use the state at the time the // insert was issued (cos of foreign key constraints). Not necessarily the object's current state	WITHOUT_CLASSIFICATION	0.9999995843579986	WITHOUT_CLASSIFICATION	4.1564200137709884E-7	TEST
// TODO : shouldnt inserts be Expectations.NONE?	WITHOUT_CLASSIFICATION	0.9999925612262323	WITHOUT_CLASSIFICATION	7.438773767651606E-6	TEST
//don't bother trying to update, we know there is no row there yet	WITHOUT_CLASSIFICATION	0.999976174491739	WITHOUT_CLASSIFICATION	2.3825508260964806E-5	TEST
//if all fields are null, we might need to delete existing row	WITHOUT_CLASSIFICATION	0.9999968696481772	WITHOUT_CLASSIFICATION	3.1303518227214638E-6	TEST
//there is probably a row there, so try to update //if no rows were updated, we will find out	WITHOUT_CLASSIFICATION	0.999986577717251	WITHOUT_CLASSIFICATION	1.3422282749040703E-5	TEST
//note: updates to joined tables can't be batched...	WITHOUT_CLASSIFICATION	0.9999549833396322	WITHOUT_CLASSIFICATION	4.501666036794184E-5	TEST
// starting index	WITHOUT_CLASSIFICATION	0.9999992661304484	WITHOUT_CLASSIFICATION	7.338695514828851E-7	TEST
//Now write the values of fields onto the prepared statement	WITHOUT_CLASSIFICATION	0.9999630153516855	WITHOUT_CLASSIFICATION	3.6984648314567684E-5	TEST
// Write any appropriate versioning conditional parameters	WITHOUT_CLASSIFICATION	0.999999791119003	WITHOUT_CLASSIFICATION	2.0888099702463962E-7	TEST
//Render the SQL query	WITHOUT_CLASSIFICATION	0.9999894685399895	WITHOUT_CLASSIFICATION	1.0531460010508455E-5	TEST
// Do the key. The key is immutable so we can use the _current_ object state - not necessarily // the state at the time the delete was issued	WITHOUT_CLASSIFICATION	0.9999997457752942	WITHOUT_CLASSIFICATION	2.542247057926552E-7	TEST
// We should use the _current_ object state (ie. after any updates that occurred during flush)	WITHOUT_CLASSIFICATION	0.9999506662016795	WITHOUT_CLASSIFICATION	4.933379832052663E-5	TEST
// this property belongs to the table and it is not specifically // excluded from optimistic locking by optimistic-lock="false"	WITHOUT_CLASSIFICATION	0.99999959029482	WITHOUT_CLASSIFICATION	4.0970518007761757E-7	TEST
//note: dirtyFields==null means we had no snapshot, and we couldn't get one using select-before-update //	WITHOUT_CLASSIFICATION	0.9999998570562526	WITHOUT_CLASSIFICATION	1.4294374736287502E-7	TEST
// more specifically : "datetime [op] ?" //      1) if the operator is MINUS, we really cannot determine //          the expected type as either another datetime or //          numeric would be valid //      2) if the operator is PLUS, the param needs to be of //          some numeric type	WITHOUT_CLASSIFICATION	0.9999996773996706	WITHOUT_CLASSIFICATION	3.226003294071854E-7	TEST
// For the case of dynamic-update="true", we need to generate the UPDATE SQL	WITHOUT_CLASSIFICATION	0.9999995050694441	WITHOUT_CLASSIFICATION	4.949305559472199E-7	TEST
// don't need to check laziness (dirty checking algorithm handles that)	WITHOUT_CLASSIFICATION	0.9999992344657774	WITHOUT_CLASSIFICATION	7.655342226055871E-7	TEST
// For the case of dynamic-update="false", or no snapshot, we use the static SQL	WITHOUT_CLASSIFICATION	0.9999998927213501	WITHOUT_CLASSIFICATION	1.072786497789568E-7	TEST
// if not "get", then try "is"	WITHOUT_CLASSIFICATION	0.999994879009585	WITHOUT_CLASSIFICATION	5.120990415009904E-6	TEST
// Now update only the tables with dirty properties (and the table with the version number)	WITHOUT_CLASSIFICATION	0.9999973046949309	WITHOUT_CLASSIFICATION	2.69530506899926E-6	TEST
// For the case of dynamic-insert="true", we need to generate the INSERT SQL	WITHOUT_CLASSIFICATION	0.9999995252680888	WITHOUT_CLASSIFICATION	4.7473191118396895E-7	TEST
// For the case of dynamic-insert="true", we need to generate the INSERT SQL	WITHOUT_CLASSIFICATION	0.9999995252680888	WITHOUT_CLASSIFICATION	4.7473191118396895E-7	TEST
// For the case of dynamic-insert="false", use the static SQL	WITHOUT_CLASSIFICATION	0.9999998804324571	WITHOUT_CLASSIFICATION	1.195675429093844E-7	TEST
// For the case of dynamic-insert="false", use the static SQL	WITHOUT_CLASSIFICATION	0.9999998804324571	WITHOUT_CLASSIFICATION	1.195675429093844E-7	TEST
// not supported	WITHOUT_CLASSIFICATION	0.9999919237152397	WITHOUT_CLASSIFICATION	8.076284760332158E-6	TEST
// this property belongs to the table and it is not specifically // excluded from optimistic locking by optimistic-lock="false"	WITHOUT_CLASSIFICATION	0.99999959029482	WITHOUT_CLASSIFICATION	4.0970518007761757E-7	TEST
// we need to utilize dynamic delete statements	WITHOUT_CLASSIFICATION	0.999998789808508	WITHOUT_CLASSIFICATION	1.2101914919546366E-6	TEST
// otherwise, utilize the static delete statements	WITHOUT_CLASSIFICATION	0.9999990087005466	WITHOUT_CLASSIFICATION	9.91299453408525E-7	TEST
//just a performance opt!	WITHOUT_CLASSIFICATION	0.9999966383370311	WITHOUT_CLASSIFICATION	3.3616629689333645E-6	TEST
//just a performance opt!	WITHOUT_CLASSIFICATION	0.9999966383370311	WITHOUT_CLASSIFICATION	3.3616629689333645E-6	TEST
//all joins join to the pk of the driving table	WITHOUT_CLASSIFICATION	0.9999981764580618	WITHOUT_CLASSIFICATION	1.8235419381016805E-6	TEST
//notice that we skip the first table; it is the driving table!	WITHOUT_CLASSIFICATION	0.9999909606568388	WITHOUT_CLASSIFICATION	9.03934316118044E-6	TEST
//we can inner join to superclass tables (the row MUST be there) //we can never inner join to subclass tables	WITHOUT_CLASSIFICATION	0.9999991873408145	WITHOUT_CLASSIFICATION	8.126591855380195E-7	TEST
//skip the driving table	WITHOUT_CLASSIFICATION	0.9999979913693917	WITHOUT_CLASSIFICATION	2.00863060825773E-6	TEST
//get 'em in the right order (not that it really matters)	WITHOUT_CLASSIFICATION	0.9999749035616586	WITHOUT_CLASSIFICATION	2.509643834135753E-5	TEST
// here, we work under the following assumptions: //      ------------ valid cases -------------------------------------- //      1) datetime + {something other than datetime} : always results //              in a datetime ( db will catch invalid conversions ) //      2) datetime - datetime : always results in a DOUBLE //      3) datetime - {something other than datetime} : always results //              in a datetime ( db will catch invalid conversions ) //      ------------ invalid cases ------------------------------------ //      4) datetime + datetime //      5) {something other than datetime} - datetime //      6) datetime * {any type} //      7) datetime / {any type} //      8) {any type} / datetime // doing so allows us to properly handle parameters as either the left // or right side here in the majority of cases	WITHOUT_CLASSIFICATION	0.9999999993726622	WITHOUT_CLASSIFICATION	6.273378373702403E-10	TEST
//render the where and from parts	WITHOUT_CLASSIFICATION	0.9999894716785351	WITHOUT_CLASSIFICATION	1.0528321464844488E-5	TEST
//we *could* regerate this inside each called method!	WITHOUT_CLASSIFICATION	0.9999962662468064	WITHOUT_CLASSIFICATION	3.73375319361835E-6	TEST
//now render the joins	WITHOUT_CLASSIFICATION	0.999986896395088	WITHOUT_CLASSIFICATION	1.3103604912005328E-5	TEST
// This will add the new from element to the origin.	WITHOUT_CLASSIFICATION	0.9999983891715124	WITHOUT_CLASSIFICATION	1.6108284876310808E-6	TEST
//now render the select clause	WITHOUT_CLASSIFICATION	0.9999980924448797	WITHOUT_CLASSIFICATION	1.907555120371957E-6	TEST
//now tie it all together	WITHOUT_CLASSIFICATION	0.9999891630593436	WITHOUT_CLASSIFICATION	1.0836940656423599E-5	TEST
//insert/update/delete SQL	WITHOUT_CLASSIFICATION	0.9999957662594073	WITHOUT_CLASSIFICATION	4.233740592651269E-6	TEST
//select SQL	WITHOUT_CLASSIFICATION	0.9999829377125237	WITHOUT_CLASSIFICATION	1.70622874762789E-5	TEST
//no need to check laziness, dirty checking handles that	WITHOUT_CLASSIFICATION	0.999994335836335	WITHOUT_CLASSIFICATION	5.664163664929025E-6	TEST
// Fully resolve the map reference, create implicit joins.	WITHOUT_CLASSIFICATION	0.9999988698521006	WITHOUT_CLASSIFICATION	1.1301478994252095E-6	TEST
// temporary ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999919604237504	WITHOUT_CLASSIFICATION	8.039576249586282E-6	TEST
// The basic implementation is to simply use the node's text	WITHOUT_CLASSIFICATION	0.9999986016453182	WITHOUT_CLASSIFICATION	1.3983546818600115E-6	TEST
// for dialects which are known to not support ANSI-SQL row-value-constructor syntax, // we should mutate the tree.	WITHOUT_CLASSIFICATION	0.9999993389012451	WITHOUT_CLASSIFICATION	6.61098754751134E-7	TEST
// Due to the complexity in initializing the SelectClause, do not generate one here. // If it is not found; simply return null... // // Also, do not cache since it gets generated well after we are created.	WITHOUT_CLASSIFICATION	0.9999998187568963	WITHOUT_CLASSIFICATION	1.8124310373301398E-7	TEST
// check the version unsaved-value, if appropriate	WITHOUT_CLASSIFICATION	0.9999994965449929	WITHOUT_CLASSIFICATION	5.034550071784073E-7	TEST
// let this take precedence if defined, since it works for // assigned identifiers	WITHOUT_CLASSIFICATION	0.9999976730527904	WITHOUT_CLASSIFICATION	2.3269472096075413E-6	TEST
// check the id unsaved-value	WITHOUT_CLASSIFICATION	0.9999968987414548	WITHOUT_CLASSIFICATION	3.101258545145999E-6	TEST
// check to see if it is in the second-level cache	WITHOUT_CLASSIFICATION	0.9999993290360312	WITHOUT_CLASSIFICATION	6.709639687012126E-7	TEST
///////////////////////////////////////////////////////////////////////	WITHOUT_CLASSIFICATION	0.9997836593576488	WITHOUT_CLASSIFICATION	2.1634064235125618E-4	TEST
// For property references generate <tablealias>.<columnname> as <projectionalias>	WITHOUT_CLASSIFICATION	0.9999998680031618	WITHOUT_CLASSIFICATION	1.319968381628505E-7	TEST
// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999398011200608	WITHOUT_CLASSIFICATION	6.019887993916417E-5	TEST
//if there is no resulting row, return null	WITHOUT_CLASSIFICATION	0.9999880300923859	WITHOUT_CLASSIFICATION	1.196990761401628E-5	TEST
//force immediate execution of the insert	WITHOUT_CLASSIFICATION	0.9999989973985225	WITHOUT_CLASSIFICATION	1.0026014774405466E-6	TEST
// If this from element is a collection and the path is a collection property (maxIndex, etc.) then // generate a sub-query.	WITHOUT_CLASSIFICATION	0.9999994341540697	WITHOUT_CLASSIFICATION	5.658459303119942E-7	TEST
// entities ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.999985859464578	WITHOUT_CLASSIFICATION	1.4140535422044363E-5	TEST
// collections ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999973815878059	WITHOUT_CLASSIFICATION	2.6184121940518327E-6	TEST
//cannot occur	WITHOUT_CLASSIFICATION	0.9999882475385911	WITHOUT_CLASSIFICATION	1.1752461408851448E-5	TEST
//cannot occur	WITHOUT_CLASSIFICATION	0.9999882475385911	WITHOUT_CLASSIFICATION	1.1752461408851448E-5	TEST
// only carry on if the method has no parameters	WITHOUT_CLASSIFICATION	0.9999997914142348	WITHOUT_CLASSIFICATION	2.08585765129445E-7	TEST
// try "get"	WITHOUT_CLASSIFICATION	0.9999920291109645	WITHOUT_CLASSIFICATION	7.970889035515524E-6	TEST
// do nothing...	WITHOUT_CLASSIFICATION	0.9999978581688516	WITHOUT_CLASSIFICATION	2.141831148510792E-6	TEST
// do nothing...	WITHOUT_CLASSIFICATION	0.9999978581688516	WITHOUT_CLASSIFICATION	2.141831148510792E-6	TEST
// should be safe to only ever expect EntityPersister references here	WITHOUT_CLASSIFICATION	0.9999976387681835	WITHOUT_CLASSIFICATION	2.3612318165409933E-6	TEST
// this page intentionally left blank :)	WITHOUT_CLASSIFICATION	0.9999566018672953	WITHOUT_CLASSIFICATION	4.3398132704638206E-5	TEST
// do not do anything	WITHOUT_CLASSIFICATION	0.9999971857917604	WITHOUT_CLASSIFICATION	2.8142082394675012E-6	TEST
//	WITHOUT_CLASSIFICATION	0.999928714121282	WITHOUT_CLASSIFICATION	7.128587871800795E-5	TEST
// ignore	WITHOUT_CLASSIFICATION	0.9999977344954267	WITHOUT_CLASSIFICATION	2.26550457329293E-6	TEST
//cant instantiate	WITHOUT_CLASSIFICATION	0.9999903906641163	WITHOUT_CLASSIFICATION	9.609335883672511E-6	TEST
//if it is a property of an embedded component, invoke on the "identifier"	WITHOUT_CLASSIFICATION	0.9999990321857661	WITHOUT_CLASSIFICATION	9.678142338636195E-7	TEST
// otherwise:	WITHOUT_CLASSIFICATION	0.9999916513376237	WITHOUT_CLASSIFICATION	8.348662376242699E-6	TEST
// skip finalize methods	WITHOUT_CLASSIFICATION	0.9999994809798135	WITHOUT_CLASSIFICATION	5.190201864965023E-7	TEST
// note: interfaces is assumed to already contain HibernateProxy.class	WITHOUT_CLASSIFICATION	0.9999992885591328	WITHOUT_CLASSIFICATION	7.114408671565469E-7	TEST
// note: interfaces is assumed to already contain HibernateProxy.class	WITHOUT_CLASSIFICATION	0.9999992885591328	WITHOUT_CLASSIFICATION	7.114408671565469E-7	TEST
// HHH-2481 make sure the callback gets cleared, otherwise the instance stays in a static thread local.	WITHOUT_CLASSIFICATION	0.9999996094985865	WITHOUT_CLASSIFICATION	3.905014135514589E-7	TEST
// while constructor is running	WITHOUT_CLASSIFICATION	0.9999962209650683	WITHOUT_CLASSIFICATION	3.779034931675401E-6	TEST
// while constructor is running	WITHOUT_CLASSIFICATION	0.9999962209650683	WITHOUT_CLASSIFICATION	3.779034931675401E-6	TEST
// note: interface is assumed to already contain HibernateProxy.class	WITHOUT_CLASSIFICATION	0.9999995095322922	WITHOUT_CLASSIFICATION	4.904677077171714E-7	TEST
// interfaces // arguments	WITHOUT_CLASSIFICATION	0.9999993807848454	WITHOUT_CLASSIFICATION	6.192151545385309E-7	TEST
//TODO!	WITHOUT_CLASSIFICATION	0.9994757874440752	WITHOUT_CLASSIFICATION	5.242125559247988E-4	TEST
// Get the caller	WITHOUT_CLASSIFICATION	0.9999962052532977	WITHOUT_CLASSIFICATION	3.794746702383766E-6	TEST
// Get the caller principals	WITHOUT_CLASSIFICATION	0.9999982902334777	WITHOUT_CLASSIFICATION	1.7097665222557972E-6	TEST
//private static final Alias DEFAULT_ALIAS = new Alias(10, null);	WITHOUT_CLASSIFICATION	0.9999992568906425	WITHOUT_CLASSIFICATION	7.43109357527255E-7	TEST
// Needed to bump this up to DotNode, because that is the only thing which currently // knows about the property-ref path in the correct format; it is either this, or // recurse over the DotNodes constructing the property path just like DotNode does // internally	WITHOUT_CLASSIFICATION	0.9999912871349107	WITHOUT_CLASSIFICATION	8.712865089269937E-6	TEST
//if the identifier is quoted, remove the quotes	WITHOUT_CLASSIFICATION	0.999885362993217	WITHOUT_CLASSIFICATION	1.1463700678308738E-4	TEST
//truncate the identifier to the max alias length, less the suffix length	WITHOUT_CLASSIFICATION	0.9999907233053782	WITHOUT_CLASSIFICATION	9.276694621774873E-6	TEST
//full joins are not supported.. yet!	WITHOUT_CLASSIFICATION	0.9999899125935844	WITHOUT_CLASSIFICATION	1.008740641565539E-5	TEST
// null is not considered the same type as Integer. //$NON-NLS-1 //$NON-NLS-1	WITHOUT_CLASSIFICATION	0.9999998744916365	WITHOUT_CLASSIFICATION	1.255083634854458E-7	TEST
// the outerJoinsAfterWhere needs to come before where clause to properly // handle dynamic filters	WITHOUT_CLASSIFICATION	0.9999996327523685	WITHOUT_CLASSIFICATION	3.672476315008611E-7	TEST
//$NON-NLS-1	WITHOUT_CLASSIFICATION	0.9999487841310666	WITHOUT_CLASSIFICATION	5.1215868933380825E-5	TEST
//$NON-NLS-1	WITHOUT_CLASSIFICATION	0.9999487841310666	WITHOUT_CLASSIFICATION	5.1215868933380825E-5	TEST
//$NON-NLS-1	WITHOUT_CLASSIFICATION	0.9999487841310666	WITHOUT_CLASSIFICATION	5.1215868933380825E-5	TEST
//$NON-NLS-1	WITHOUT_CLASSIFICATION	0.9999487841310666	WITHOUT_CLASSIFICATION	5.1215868933380825E-5	TEST
// strip off any leading 'and' token	WITHOUT_CLASSIFICATION	0.9999983756538376	WITHOUT_CLASSIFICATION	1.6243461623733048E-6	TEST
// if the condition is not already there...	WITHOUT_CLASSIFICATION	0.9999997197468965	WITHOUT_CLASSIFICATION	2.8025310354821615E-7	TEST
//dontSpace.add("'");	WITHOUT_CLASSIFICATION	0.9999897855009308	WITHOUT_CLASSIFICATION	1.0214499069283747E-5	TEST
//for MySQL	WITHOUT_CLASSIFICATION	0.9999399424477288	WITHOUT_CLASSIFICATION	6.005755227120822E-5	TEST
//HashMap columnsUnique = new HashMap();	WITHOUT_CLASSIFICATION	0.9999977524965814	WITHOUT_CLASSIFICATION	2.2475034186107607E-6	TEST
//null caused some problems	WITHOUT_CLASSIFICATION	0.9999988729392686	WITHOUT_CLASSIFICATION	1.1270607314661092E-6	TEST
/*package*/	WITHOUT_CLASSIFICATION	0.9999753172071789	WITHOUT_CLASSIFICATION	2.4682792821087808E-5	TEST
//not sure if this would ever be null but wanted to be careful	WITHOUT_CLASSIFICATION	0.9999744685856836	WITHOUT_CLASSIFICATION	2.553141431639698E-5	TEST
//even on inverse="true"	WITHOUT_CLASSIFICATION	0.9999963394748088	WITHOUT_CLASSIFICATION	3.660525191051785E-6	TEST
/*package*/	WITHOUT_CLASSIFICATION	0.9999753172071789	WITHOUT_CLASSIFICATION	2.4682792821087808E-5	TEST
/*package*/	WITHOUT_CLASSIFICATION	0.9999753172071789	WITHOUT_CLASSIFICATION	2.4682792821087808E-5	TEST
// If true then execute db updates, otherwise just generate and display updates	WITHOUT_CLASSIFICATION	0.9999923779060176	WITHOUT_CLASSIFICATION	7.622093982377056E-6	TEST
// we only release the connection	WITHOUT_CLASSIFICATION	0.9999995111116216	WITHOUT_CLASSIFICATION	4.888883783544887E-7	TEST
// deprecated option...	WITHOUT_CLASSIFICATION	0.9999993669714293	WITHOUT_CLASSIFICATION	6.330285706421553E-7	TEST
//if an exception occurs during flush, user must call rollback()	WITHOUT_CLASSIFICATION	0.9999998449224259	WITHOUT_CLASSIFICATION	1.5507757408469908E-7	TEST
//actually, this last test is probably unnecessary, since  //beforeCompletion() doesn't get called during rollback	WITHOUT_CLASSIFICATION	0.9992738214275406	WITHOUT_CLASSIFICATION	7.261785724593882E-4	TEST
// this one only really needed for badly-behaved applications! // (if the TransactionManager has a Sychronization registered, // its a noop) // (actually we do need it for downgrading locks)	WITHOUT_CLASSIFICATION	0.9999997817193407	WITHOUT_CLASSIFICATION	2.182806592727372E-7	TEST
// Create an DotNode AST for the path and resolve it.	WITHOUT_CLASSIFICATION	0.9999874780194212	WITHOUT_CLASSIFICATION	1.2521980578863436E-5	TEST
//if an exception occurs during flush, user must call rollback()	WITHOUT_CLASSIFICATION	0.9999998449224259	WITHOUT_CLASSIFICATION	1.5507757408469908E-7	TEST
//if we could not register a synchronization, //do the before/after completion callbacks //ourself (but we need to let jdbcContext //know that this is what we are going to //do, so it doesn't keep trying to register //synchronizations)	WITHOUT_CLASSIFICATION	0.9999978500522307	WITHOUT_CLASSIFICATION	2.149947769221006E-6	TEST
// swallow it, and continue to roll back JTA transaction	WITHOUT_CLASSIFICATION	0.9999998100128701	WITHOUT_CLASSIFICATION	1.8998712987270393E-7	TEST
// so the transaction is already rolled back, by JTA spec	WITHOUT_CLASSIFICATION	0.9999992289800377	WITHOUT_CLASSIFICATION	7.710199624221633E-7	TEST
// this method is a noop if there is a Synchronization!	WITHOUT_CLASSIFICATION	0.9999995313843346	WITHOUT_CLASSIFICATION	4.6861566529925697E-7	TEST
// two conditions where we need to transform this to a theta-join syntax: //      1) 'elem' is the "root from-element" in correlated subqueries //      2) The DotNode.useThetaStyleImplicitJoins has been set to true //          and 'elem' represents an implicit join	WITHOUT_CLASSIFICATION	0.999999845468268	WITHOUT_CLASSIFICATION	1.5453173196571415E-7	TEST
// WebSphere, however, is not a sane JEE/JTA container...	WITHOUT_CLASSIFICATION	0.9999996616793055	WITHOUT_CLASSIFICATION	3.3832069439567816E-7	TEST
// for sane JEE/JTA containers, the transaction itself functions as its identifier...	WITHOUT_CLASSIFICATION	0.9999999466223576	WITHOUT_CLASSIFICATION	5.337764239038892E-8	TEST
//swallow, the transaction was finished	WITHOUT_CLASSIFICATION	0.9999926956316008	WITHOUT_CLASSIFICATION	7.304368399247084E-6	TEST
// all AliasToEntityMapResultTransformer are considered equal ~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999999350579434	WITHOUT_CLASSIFICATION	6.494205662686525E-8	TEST
// Create the join element under the from element.	WITHOUT_CLASSIFICATION	0.9999977463170664	WITHOUT_CLASSIFICATION	2.2536829336565746E-6	TEST
// all DistinctRootEntityResultTransformer are considered equal ~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999998169357012	WITHOUT_CLASSIFICATION	1.8306429888753788E-7	TEST
// map of EntityMode -> Tuplizer	WITHOUT_CLASSIFICATION	0.9999994951857475	WITHOUT_CLASSIFICATION	5.048142524831791E-7	TEST
// this is a virtual id property...	WITHOUT_CLASSIFICATION	0.9999885108893424	WITHOUT_CLASSIFICATION	1.1489110657691196E-5	TEST
//this one needed only for guessEntityMode()	WITHOUT_CLASSIFICATION	0.9999410767073192	WITHOUT_CLASSIFICATION	5.892329268072435E-5	TEST
// create our own copy of the user-supplied tuplizer impl map	WITHOUT_CLASSIFICATION	0.9999996345486742	WITHOUT_CLASSIFICATION	3.6545132581851755E-7	TEST
// todo : move this to SF per HHH-3517; also see HHH-1907 and ComponentMetamodel	WITHOUT_CLASSIFICATION	0.9999991475323553	WITHOUT_CLASSIFICATION	8.524676446532505E-7	TEST
// then the pojo tuplizer, using the dynamic-map tuplizer if no pojo representation is available	WITHOUT_CLASSIFICATION	0.9999999318303807	WITHOUT_CLASSIFICATION	6.816961930375122E-8	TEST
// Build the dynamic-map tuplizer...	WITHOUT_CLASSIFICATION	0.9999986330997316	WITHOUT_CLASSIFICATION	1.366900268422511E-6	TEST
// then dom4j tuplizer, if dom4j representation is available	WITHOUT_CLASSIFICATION	0.9999996104197989	WITHOUT_CLASSIFICATION	3.8958020110682733E-7	TEST
// Build the dynamic-map tuplizer...	WITHOUT_CLASSIFICATION	0.9999986330997316	WITHOUT_CLASSIFICATION	1.366900268422511E-6	TEST
// put the "standard" tuplizers into the tuplizer map first	WITHOUT_CLASSIFICATION	0.9999984770063544	WITHOUT_CLASSIFICATION	1.5229936456469252E-6	TEST
// found a ctor, but it was not publicly accessible so try to request accessibility	WITHOUT_CLASSIFICATION	0.999999351391601	WITHOUT_CLASSIFICATION	6.486083989768724E-7	TEST
//	WITHOUT_CLASSIFICATION	0.999928714121282	WITHOUT_CLASSIFICATION	7.128587871800795E-5	TEST
// cached for efficiency...	WITHOUT_CLASSIFICATION	0.9999977955392116	WITHOUT_CLASSIFICATION	2.2044607883630496E-6	TEST
//	WITHOUT_CLASSIFICATION	0.999928714121282	WITHOUT_CLASSIFICATION	7.128587871800795E-5	TEST
//	WITHOUT_CLASSIFICATION	0.999928714121282	WITHOUT_CLASSIFICATION	7.128587871800795E-5	TEST
//it was not embedded, so the argument is just an id	WITHOUT_CLASSIFICATION	0.9999933550193068	WITHOUT_CLASSIFICATION	6.644980693300371E-6	TEST
// then the pojo tuplizer, using the dynamic-map tuplizer if no pojo representation is available	WITHOUT_CLASSIFICATION	0.9999999318303807	WITHOUT_CLASSIFICATION	6.816961930375122E-8	TEST
// then dom4j tuplizer, if dom4j representation is available	WITHOUT_CLASSIFICATION	0.9999996104197989	WITHOUT_CLASSIFICATION	3.8958020110682733E-7	TEST
// put the "standard" tuplizers into the tuplizer map first	WITHOUT_CLASSIFICATION	0.9999984770063544	WITHOUT_CLASSIFICATION	1.5229936456469252E-6	TEST
// then handle any user-defined entity modes...	WITHOUT_CLASSIFICATION	0.9999991237382576	WITHOUT_CLASSIFICATION	8.762617423340517E-7	TEST
//return currentId;	WITHOUT_CLASSIFICATION	0.9999951131626283	WITHOUT_CLASSIFICATION	4.886837371674258E-6	TEST
//reset the id	WITHOUT_CLASSIFICATION	0.9999528298588098	WITHOUT_CLASSIFICATION	4.717014119014565E-5	TEST
//	WITHOUT_CLASSIFICATION	0.999928714121282	WITHOUT_CLASSIFICATION	7.128587871800795E-5	TEST
//reset the version	WITHOUT_CLASSIFICATION	0.9999876369040785	WITHOUT_CLASSIFICATION	1.2363095921429265E-5	TEST
// the default is to simply not lazy fetch properties for now...	WITHOUT_CLASSIFICATION	0.999998314803153	WITHOUT_CLASSIFICATION	1.6851968469086016E-6	TEST
// Add the second join, the one that ends in the destination table.	WITHOUT_CLASSIFICATION	0.9999990505855483	WITHOUT_CLASSIFICATION	9.494144517667377E-7	TEST
// temporary ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999919604237504	WITHOUT_CLASSIFICATION	8.039576249586282E-6	TEST
// found a ctor, but it was not publicly accessible so try to request accessibility	WITHOUT_CLASSIFICATION	0.999999351391601	WITHOUT_CLASSIFICATION	6.486083989768724E-7	TEST
// determine the id getter and setter methods from the proxy interface (if any) // determine all interfaces needed by the resulting proxy	WITHOUT_CLASSIFICATION	0.9999997854891441	WITHOUT_CLASSIFICATION	2.1451085589501036E-7	TEST
//	WITHOUT_CLASSIFICATION	0.999928714121282	WITHOUT_CLASSIFICATION	7.128587871800795E-5	TEST
//not final because proxy factory creation can fail	WITHOUT_CLASSIFICATION	0.999999254033707	WITHOUT_CLASSIFICATION	7.45966292839183E-7	TEST
// superclass entity-name	WITHOUT_CLASSIFICATION	0.9999996988446127	WITHOUT_CLASSIFICATION	3.011553873860574E-7	TEST
// temporary ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999919604237504	WITHOUT_CLASSIFICATION	8.039576249586282E-6	TEST
// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999398011200608	WITHOUT_CLASSIFICATION	6.019887993916417E-5	TEST
//init the aliases, after initing the constructornode	WITHOUT_CLASSIFICATION	0.9999953821647974	WITHOUT_CLASSIFICATION	4.6178352025459446E-6	TEST
// temporary ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999919604237504	WITHOUT_CLASSIFICATION	8.039576249586282E-6	TEST
// legacy behavior (with no abstract attribute specified)	WITHOUT_CLASSIFICATION	0.9999968616934457	WITHOUT_CLASSIFICATION	3.138306554277722E-6	TEST
// Get ready to start adding nodes.	WITHOUT_CLASSIFICATION	0.9999992926460597	WITHOUT_CLASSIFICATION	7.073539402757492E-7	TEST
// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999398011200608	WITHOUT_CLASSIFICATION	6.019887993916417E-5	TEST
//note: this affects the return value!	WITHOUT_CLASSIFICATION	0.9999027517819397	WITHOUT_CLASSIFICATION	9.724821806037508E-5	TEST
// Need to account for allowable '_' within the variant	WITHOUT_CLASSIFICATION	0.9999287899883283	WITHOUT_CLASSIFICATION	7.121001167161478E-5	TEST
// Add the type to the list of returned sqlResultTypes.	WITHOUT_CLASSIFICATION	0.9999968325289615	WITHOUT_CLASSIFICATION	3.167471038384055E-6	TEST
// Collection Types:	WITHOUT_CLASSIFICATION	0.9999988684612685	WITHOUT_CLASSIFICATION	1.1315387315751649E-6	TEST
// convenience methods relating to operations across arrays of types...	WITHOUT_CLASSIFICATION	0.9999999954159807	WITHOUT_CLASSIFICATION	4.584019262292954E-9	TEST
//lobs cannot be compared	WITHOUT_CLASSIFICATION	0.9999967511712626	WITHOUT_CLASSIFICATION	3.2488287373220196E-6	TEST
//Blobs are ignored by merge()	WITHOUT_CLASSIFICATION	0.9999905747849344	WITHOUT_CLASSIFICATION	9.425215065616587E-6	TEST
//value is the entity name	WITHOUT_CLASSIFICATION	0.99995784196112	WITHOUT_CLASSIFICATION	4.215803887997355E-5	TEST
//EARLY EXIT!	WITHOUT_CLASSIFICATION	0.9999506752157185	WITHOUT_CLASSIFICATION	4.9324784281489196E-5	TEST
// generate id select fragment and then property select fragment for // each expression, just like generateSelectFragments().	WITHOUT_CLASSIFICATION	0.9999995274465835	WITHOUT_CLASSIFICATION	4.72553416439314E-7	TEST
//TODO!	WITHOUT_CLASSIFICATION	0.9994757874440752	WITHOUT_CLASSIFICATION	5.242125559247988E-4	TEST
//xml is the entity name	WITHOUT_CLASSIFICATION	0.9999786899733376	WITHOUT_CLASSIFICATION	2.131002666241572E-5	TEST
//special case ... this is the leaf of the containment graph, even though not immutable	WITHOUT_CLASSIFICATION	0.9999996313467802	WITHOUT_CLASSIFICATION	3.6865321987926333E-7	TEST
//tolerates nulls	WITHOUT_CLASSIFICATION	0.9999839504332465	WITHOUT_CLASSIFICATION	1.604956675347196E-5	TEST
/*sqlResultTypeList,*/	WITHOUT_CLASSIFICATION	0.9999620824259752	WITHOUT_CLASSIFICATION	3.791757402486043E-5	TEST
// metaType is assumed to be single-column type	WITHOUT_CLASSIFICATION	0.9999974780954708	WITHOUT_CLASSIFICATION	2.521904529281736E-6	TEST
// Get all the select expressions (that we just generated) and render the select.	WITHOUT_CLASSIFICATION	0.9999990558369241	WITHOUT_CLASSIFICATION	9.441630759750982E-7	TEST
// Look through the FromElement's children to find any collections of values that should be fetched...	WITHOUT_CLASSIFICATION	0.9999991985560182	WITHOUT_CLASSIFICATION	8.014439819283207E-7	TEST
//return AssociationType.FOREIGN_KEY_TO_PARENT; //this is better but causes a transient object exception...	WITHOUT_CLASSIFICATION	0.9999967022680507	WITHOUT_CLASSIFICATION	3.2977319492625116E-6	TEST
// Use the lower case function name. // Remember whether we're in a SELECT clause or not.	WITHOUT_CLASSIFICATION	0.9999999724492006	WITHOUT_CLASSIFICATION	2.7550799431405032E-8	TEST
// IDENT might be the name of a class.	WITHOUT_CLASSIFICATION	0.9999968707748443	WITHOUT_CLASSIFICATION	3.1292251556319488E-6	TEST
//TODO!!!	WITHOUT_CLASSIFICATION	0.9994783324775103	WITHOUT_CLASSIFICATION	5.216675224897952E-4	TEST
//st.setTimestamp( index,  new Timestamp( cal.getTimeInMillis() ), cal ); //JDK 1.5 only	WITHOUT_CLASSIFICATION	0.9999930079830343	WITHOUT_CLASSIFICATION	6.992016965731217E-6	TEST
//st.setDate( index,  new Date( cal.getTimeInMillis() ), cal ); //JDK 1.5 only	WITHOUT_CLASSIFICATION	0.9999955680468997	WITHOUT_CLASSIFICATION	4.431953100266302E-6	TEST
// both are Timestamps	WITHOUT_CLASSIFICATION	0.999991196084815	WITHOUT_CLASSIFICATION	8.80391518495142E-6	TEST
// at least one is a plain old Date	WITHOUT_CLASSIFICATION	0.9999541202629515	WITHOUT_CLASSIFICATION	4.587973704862049E-5	TEST
//noop	WITHOUT_CLASSIFICATION	0.9999466959964315	WITHOUT_CLASSIFICATION	5.330400356858255E-5	TEST
// if the corresponding SQL value is NULL, the reader we got is NULL as well	WITHOUT_CLASSIFICATION	0.9999986137130205	WITHOUT_CLASSIFICATION	1.386286979580673E-6	TEST
// Fetch Reader content up to the end - and put characters in a StringBuffer	WITHOUT_CLASSIFICATION	0.9999997535164378	WITHOUT_CLASSIFICATION	2.464835622485707E-7	TEST
// Return StringBuffer content as a large String	WITHOUT_CLASSIFICATION	0.9999998297930295	WITHOUT_CLASSIFICATION	1.7020697066004246E-7	TEST
//or Types.LONGVARCHAR?	WITHOUT_CLASSIFICATION	0.9999695141501699	WITHOUT_CLASSIFICATION	3.048584983000998E-5	TEST
//Not called at runtime so doesn't matter if its slow :)	WITHOUT_CLASSIFICATION	0.9999838717882837	WITHOUT_CLASSIFICATION	1.6128211716241634E-5	TEST
//TODO	WITHOUT_CLASSIFICATION	0.9995808801893123	WITHOUT_CLASSIFICATION	4.191198106876538E-4	TEST
// Chop off the rest of the tree.	WITHOUT_CLASSIFICATION	0.9999650235101369	WITHOUT_CLASSIFICATION	3.4976489863066627E-5	TEST
//different nullability rules for pk/fk	WITHOUT_CLASSIFICATION	0.9999951397923595	WITHOUT_CLASSIFICATION	4.860207640474682E-6	TEST
//cache this	WITHOUT_CLASSIFICATION	0.9999592602583934	WITHOUT_CLASSIFICATION	4.073974160643522E-5	TEST
//only really need new array during semiresolve!	WITHOUT_CLASSIFICATION	0.9999951517628788	WITHOUT_CLASSIFICATION	4.8482371212534355E-6	TEST
// Forcefully remove leading ands from where fragments; the grammar will // handle adding them	WITHOUT_CLASSIFICATION	0.999999932984408	WITHOUT_CLASSIFICATION	6.701559192407546E-8	TEST
//TODO!!!!!!!	WITHOUT_CLASSIFICATION	0.9991097617864597	WITHOUT_CLASSIFICATION	8.902382135402716E-4	TEST
// Create a new FILTERS node as a parent of all filters	WITHOUT_CLASSIFICATION	0.9999998269928871	WITHOUT_CLASSIFICATION	1.7300711283588471E-7	TEST
// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999398011200608	WITHOUT_CLASSIFICATION	6.019887993916417E-5	TEST
//public Object instantiate(Object parent, SessionImplementor session) throws HibernateException;	WITHOUT_CLASSIFICATION	0.9999993971044387	WITHOUT_CLASSIFICATION	6.028955613321318E-7	TEST
//nothing to do	WITHOUT_CLASSIFICATION	0.999979540191235	WITHOUT_CLASSIFICATION	2.04598087650578E-5	TEST
//nothing to do	WITHOUT_CLASSIFICATION	0.999979540191235	WITHOUT_CLASSIFICATION	2.04598087650578E-5	TEST
// VersionType impl ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ //      Note : simply returns null for seed() and next() as the only known //      application of binary types for versioning is for use with the //      TIMESTAMP datatype supported by Sybase and SQL Server, which //      are completely db-generated values...	WITHOUT_CLASSIFICATION	0.9999999758747665	WITHOUT_CLASSIFICATION	2.4125233410545253E-8	TEST
//lobs cannot be compared	WITHOUT_CLASSIFICATION	0.9999967511712626	WITHOUT_CLASSIFICATION	3.2488287373220196E-6	TEST
//not really necessary, I guess...	WITHOUT_CLASSIFICATION	0.9999930196985857	WITHOUT_CLASSIFICATION	6.980301414266806E-6	TEST
//Clobs are ignored by merge() operation	WITHOUT_CLASSIFICATION	0.9999948174507658	WITHOUT_CLASSIFICATION	5.18254923422299E-6	TEST
// we do not have to worry about queued additions to uninitialized // collections, since they can only occur for inverse collections!	WITHOUT_CLASSIFICATION	0.9999999580678525	WITHOUT_CLASSIFICATION	4.193214751446316E-8	TEST
// collections cannot be compared	WITHOUT_CLASSIFICATION	0.9999995197596702	WITHOUT_CLASSIFICATION	4.802403298683129E-7	TEST
//remember the uk value	WITHOUT_CLASSIFICATION	0.9999806788186892	WITHOUT_CLASSIFICATION	1.9321181310744898E-5	TEST
//NOOP	WITHOUT_CLASSIFICATION	0.999831061824813	WITHOUT_CLASSIFICATION	1.689381751869128E-4	TEST
//processCollectionProperty(token, q.getCollectionPersister(collectionRole), collectionName);	WITHOUT_CLASSIFICATION	0.9999947216865676	WITHOUT_CLASSIFICATION	5.278313432438483E-6	TEST
//we must use the "remembered" uk value, since it is  //not available from the EntityEntry during assembly	WITHOUT_CLASSIFICATION	0.9999990934769079	WITHOUT_CLASSIFICATION	9.065230921716344E-7	TEST
// collections don't dirty an unversioned parent entity	WITHOUT_CLASSIFICATION	0.9999998052598763	WITHOUT_CLASSIFICATION	1.9474012373146566E-7	TEST
// return false;	WITHOUT_CLASSIFICATION	0.9999990386722577	WITHOUT_CLASSIFICATION	9.613277422467831E-7	TEST
// This just handles a particular case of component // projection, perhaps get rid of it and throw an exception	WITHOUT_CLASSIFICATION	0.9999999161221277	WITHOUT_CLASSIFICATION	8.387787229577128E-8	TEST
//NOTE: we avoid joining to the next table if the named property is just the foreign key value	WITHOUT_CLASSIFICATION	0.9999942703065146	WITHOUT_CLASSIFICATION	5.729693485416671E-6	TEST
// the key is the owning entity itself, so get the ID from the key	WITHOUT_CLASSIFICATION	0.9999898392984524	WITHOUT_CLASSIFICATION	1.0160701547537805E-5	TEST
// if the original is a PersistentCollection, and that original // was not flagged as dirty, then reset the target's dirty flag // here after the copy operation. // </p> // One thing to be careful of here is a "bare" original collection // in which case we should never ever ever reset the dirty flag // on the target because we simply do not know...	WITHOUT_CLASSIFICATION	0.9999998813705071	WITHOUT_CLASSIFICATION	1.1862949284748362E-7	TEST
//ignore subselect keywords	WITHOUT_CLASSIFICATION	0.999996167429272	WITHOUT_CLASSIFICATION	3.832570728024948E-6	TEST
// copy elements into newly empty target collection	WITHOUT_CLASSIFICATION	0.9999997569805926	WITHOUT_CLASSIFICATION	2.4301940734957784E-7	TEST
// for a null target, or a target which is the same as the original, we // need to put the merged elements in a new collection	WITHOUT_CLASSIFICATION	0.9999996953762547	WITHOUT_CLASSIFICATION	3.0462374527268533E-7	TEST
// by default just use an unanticipated capacity since we don't // know how to extract the capacity to use from original here...	WITHOUT_CLASSIFICATION	0.9999999649686654	WITHOUT_CLASSIFICATION	3.50313344847829E-8	TEST
// get the elements back into the target making sure to handle dirty flag	WITHOUT_CLASSIFICATION	0.999999643245544	WITHOUT_CLASSIFICATION	3.567544559689221E-7	TEST
// check if collection is currently being loaded	WITHOUT_CLASSIFICATION	0.9999990001005812	WITHOUT_CLASSIFICATION	9.998994188887264E-7	TEST
// check if it is already completely loaded, but unowned	WITHOUT_CLASSIFICATION	0.999998545156863	WITHOUT_CLASSIFICATION	1.454843136922664E-6	TEST
// cache the actual id of the object, not the value of the // property-ref, which might not be initialized	WITHOUT_CLASSIFICATION	0.9999997495555211	WITHOUT_CLASSIFICATION	2.5044447893944795E-7	TEST
//TODO!!!!!!!	WITHOUT_CLASSIFICATION	0.9991097617864597	WITHOUT_CLASSIFICATION	8.902382135402716E-4	TEST
// create a new collection wrapper, to be initialized later	WITHOUT_CLASSIFICATION	0.9999998669232293	WITHOUT_CLASSIFICATION	1.3307677074112308E-7	TEST
// Some JDBC drivers erroneously return an empty array here for a null DB value :/	WITHOUT_CLASSIFICATION	0.9999999357235015	WITHOUT_CLASSIFICATION	6.427649849414499E-8	TEST
// our column span is the number of columns in the PK	WITHOUT_CLASSIFICATION	0.9999991069537112	WITHOUT_CLASSIFICATION	8.930462888150086E-7	TEST
//cannot batch fetch by unique key (property-ref associations)	WITHOUT_CLASSIFICATION	0.9999983890484022	WITHOUT_CLASSIFICATION	1.610951597848355E-6	TEST
// we already know current is not null...	WITHOUT_CLASSIFICATION	0.9999992306722981	WITHOUT_CLASSIFICATION	7.693277018933338E-7	TEST
// the ids are fully resolved, so compare them with isDirty(), not isModified()	WITHOUT_CLASSIFICATION	0.9999984948775491	WITHOUT_CLASSIFICATION	1.5051224509189853E-6	TEST
//the owner of the association is not the owner of the id	WITHOUT_CLASSIFICATION	0.9999875768132023	WITHOUT_CLASSIFICATION	1.2423186797848671E-5	TEST
// ----------------------------------------------------------- Constructors	WITHOUT_CLASSIFICATION	0.9999976089155718	WITHOUT_CLASSIFICATION	2.391084428265648E-6	TEST
// ----------------------------------------------------- Instance Variables	WITHOUT_CLASSIFICATION	0.9999990238204848	WITHOUT_CLASSIFICATION	9.761795152497178E-7	TEST
//	WITHOUT_CLASSIFICATION	0.999928714121282	WITHOUT_CLASSIFICATION	7.128587871800795E-5	TEST
// --------------------------------------------------------- Public Methods	WITHOUT_CLASSIFICATION	0.999997933702962	WITHOUT_CLASSIFICATION	2.0662970381334857E-6	TEST
// Compare the two maps for equality	WITHOUT_CLASSIFICATION	0.9999986514212734	WITHOUT_CLASSIFICATION	1.3485787265702645E-6	TEST
// Simple tests that require no synchronization	WITHOUT_CLASSIFICATION	0.9999840516651535	WITHOUT_CLASSIFICATION	1.594833484657076E-5	TEST
//Sybase fail if we don't do that, sigh...	WITHOUT_CLASSIFICATION	0.9999978891901798	WITHOUT_CLASSIFICATION	2.110809820062344E-6	TEST
// Handles things like: // a and b or c // a and ( b or c ) // not a and not b // not ( a and b ) // x between y and z            (overloaded "and") // x in ( a, b, c )             (overloaded brackets) // not not a // a is not null                (overloaded "not") // etc...... // and expressions like // foo = bar                    (maps to: foo.id = bar.id) // foo.Bar = 'foo'              (maps to: foo.bar = 'foo') // foo.Bar.Baz = 1.0            (maps to: foo.bar = bar.id and bar.baz = 1.0) // 1.0 = foo.Bar.Baz            (maps to: bar.baz = 1.0 and foo.Bar = bar.id) // foo.Bar.Baz = a.B.C          (maps to: bar.Baz = b.C and foo.Bar = bar.id and a.B = b.id) // foo.Bar.Baz + a.B.C          (maps to: bar.Baz + b.C and foo.Bar = bar.id and a.B = b.id) // ( foo.Bar.Baz + 1.0 ) < 2.0  (maps to: ( bar.Baz + 1.0 ) < 2.0 and foo.Bar = bar.id)	WITHOUT_CLASSIFICATION	0.9999999530012142	WITHOUT_CLASSIFICATION	4.69987857869806E-8	TEST
// release the jdk internal caches everytime to ensure this // plays nicely with destroyable class-loaders	WITHOUT_CLASSIFICATION	0.9999994318392543	WITHOUT_CLASSIFICATION	5.681607457307511E-7	TEST
// release the jdk internal caches everytime to ensure this // plays nicely with destroyable class-loaders	WITHOUT_CLASSIFICATION	0.9999994318392543	WITHOUT_CLASSIFICATION	5.681607457307511E-7	TEST
// try to "pretty print" it	WITHOUT_CLASSIFICATION	0.9999975893845835	WITHOUT_CLASSIFICATION	2.410615416476933E-6	TEST
// otherwise, just dump it	WITHOUT_CLASSIFICATION	0.9999958325950808	WITHOUT_CLASSIFICATION	4.167404919205727E-6	TEST
//its an interface so we can't really tell anything...	WITHOUT_CLASSIFICATION	0.9999946418037766	WITHOUT_CLASSIFICATION	5.358196223387879E-6	TEST
//its an interface so we can't really tell anything...	WITHOUT_CLASSIFICATION	0.9999946418037766	WITHOUT_CLASSIFICATION	5.358196223387879E-6	TEST
// use default behavior	WITHOUT_CLASSIFICATION	0.9999991453847485	WITHOUT_CLASSIFICATION	8.546152514596765E-7	TEST
//NOTE: early return	WITHOUT_CLASSIFICATION	0.999981410832385	WITHOUT_CLASSIFICATION	1.8589167614989763E-5	TEST
// the MRU cache used to keep hard references to the most recently used query plans; // note : LRU here is a bit of a misnomer, it indicates that LRU entries are removed, the // actual kept entries are the MRU entries	WITHOUT_CLASSIFICATION	0.9999995972382525	WITHOUT_CLASSIFICATION	4.0276174753093007E-7	TEST
// we want to be able to just use the defaults, // if JNDI environment properties are not supplied // so don't put null in anywhere	WITHOUT_CLASSIFICATION	0.9999999833776415	WITHOUT_CLASSIFICATION	1.6622358552427864E-8	TEST
// Clone //-----------------------------------------------------------------------	WITHOUT_CLASSIFICATION	0.9999955623981494	WITHOUT_CLASSIFICATION	4.437601850574529E-6	TEST
// Serialize //-----------------------------------------------------------------------	WITHOUT_CLASSIFICATION	0.9999968125262833	WITHOUT_CLASSIFICATION	3.1874737168175117E-6	TEST
// stream closed in the finally	WITHOUT_CLASSIFICATION	0.999997649301138	WITHOUT_CLASSIFICATION	2.350698861990564E-6	TEST
// stream closed in the finally	WITHOUT_CLASSIFICATION	0.999997649301138	WITHOUT_CLASSIFICATION	2.350698861990564E-6	TEST
// Deserialize //-----------------------------------------------------------------------	WITHOUT_CLASSIFICATION	0.9999960304527656	WITHOUT_CLASSIFICATION	3.9695472344194455E-6	TEST
/* static methods only - hide constructor */	WITHOUT_CLASSIFICATION	0.9999998938733932	WITHOUT_CLASSIFICATION	1.0612660676692233E-7	TEST
/*&& !('_'==character)*/	WITHOUT_CLASSIFICATION	0.9999817918903982	WITHOUT_CLASSIFICATION	1.8208109601816808E-5	TEST
// returnign null!	WITHOUT_CLASSIFICATION	0.9999986995805267	WITHOUT_CLASSIFICATION	1.300419473333889E-6	TEST
// returnign null!	WITHOUT_CLASSIFICATION	0.9999986995805267	WITHOUT_CLASSIFICATION	1.300419473333889E-6	TEST
// includes last '.'	WITHOUT_CLASSIFICATION	0.9999979890903179	WITHOUT_CLASSIFICATION	2.0109096821013503E-6	TEST
// +1 to include the following '.'	WITHOUT_CLASSIFICATION	0.9999964380263733	WITHOUT_CLASSIFICATION	3.5619736267012334E-6	TEST
// Impl note: takes advantage of the fact that an escpaed single quote // embedded within a quote-block can really be handled as two seperate // quote-blocks for the purposes of this method...	WITHOUT_CLASSIFICATION	0.9999992880074208	WITHOUT_CLASSIFICATION	7.119925790994908E-7	TEST
// first time we find match!	WITHOUT_CLASSIFICATION	0.9999982178365964	WITHOUT_CLASSIFICATION	1.7821634036585865E-6	TEST
// entityNames may now include slashes for the representations //classname may be an inner class	WITHOUT_CLASSIFICATION	0.9999999109738613	WITHOUT_CLASSIFICATION	8.902613859401117E-8	TEST
// wrapped iterators	WITHOUT_CLASSIFICATION	0.9999940136459005	WITHOUT_CLASSIFICATION	5.986354099535562E-6	TEST
// index of current iterator in the wrapped iterators array	WITHOUT_CLASSIFICATION	0.9999994117041652	WITHOUT_CLASSIFICATION	5.882958348262205E-7	TEST
// the current iterator	WITHOUT_CLASSIFICATION	0.9999971347820701	WITHOUT_CLASSIFICATION	2.8652179299357506E-6	TEST
// the last used iterator	WITHOUT_CLASSIFICATION	0.9999923907557552	WITHOUT_CLASSIFICATION	7.609244244765108E-6	TEST
//it was a boolean expression	WITHOUT_CLASSIFICATION	0.9999987074677354	WITHOUT_CLASSIFICATION	1.2925322645580055E-6	TEST
/*public static Object[] clone(Class elementClass, Object[] array) {	WITHOUT_CLASSIFICATION	0.9999994379004533	WITHOUT_CLASSIFICATION	5.620995465978974E-7	TEST
// call this before any Iterator method to make sure that the current Iterator // is not exhausted	WITHOUT_CLASSIFICATION	0.9999905407503624	WITHOUT_CLASSIFICATION	9.459249637523278E-6	TEST
//doable if needed	WITHOUT_CLASSIFICATION	0.9999886447930841	WITHOUT_CLASSIFICATION	1.1355206915826042E-5	TEST
// set last used iterator here, in case the user calls remove // before calling hasNext() or next() (although they shouldn't)	WITHOUT_CLASSIFICATION	0.999999541718985	WITHOUT_CLASSIFICATION	4.582810150144371E-7	TEST
// peek ahead	WITHOUT_CLASSIFICATION	0.9999942012030293	WITHOUT_CLASSIFICATION	5.798796970808272E-6	TEST
// if we reach the end of the string w/o finding the // matching end, that is an exception	WITHOUT_CLASSIFICATION	0.9999998852421402	WITHOUT_CLASSIFICATION	1.1475785973653266E-7	TEST
// we have a placeholder, spin forward till we find the end	WITHOUT_CLASSIFICATION	0.9999994796594881	WITHOUT_CLASSIFICATION	5.203405119710191E-7	TEST
// make sure spinning forward did not put us past the end of the buffer...	WITHOUT_CLASSIFICATION	0.9999989920016962	WITHOUT_CLASSIFICATION	1.0079983037747722E-6	TEST
// First, try to locate this resource through the current // context classloader.	WITHOUT_CLASSIFICATION	0.9999994926732736	WITHOUT_CLASSIFICATION	5.073267263519522E-7	TEST
// Next, try to locate this resource through this class's classloader	WITHOUT_CLASSIFICATION	0.9999905713563968	WITHOUT_CLASSIFICATION	9.428643603207626E-6	TEST
// Next, try to locate this resource through the system classloader	WITHOUT_CLASSIFICATION	0.9999914143532709	WITHOUT_CLASSIFICATION	8.585646729214947E-6	TEST
// Anywhere else we should look?	WITHOUT_CLASSIFICATION	0.9999941133183006	WITHOUT_CLASSIFICATION	5.886681699511034E-6	TEST
// would need an IdentitySet for this!	WITHOUT_CLASSIFICATION	0.9999725420358668	WITHOUT_CLASSIFICATION	2.745796413311513E-5	TEST
//Arrays.asList doesn't do primitive arrays	WITHOUT_CLASSIFICATION	0.999994883074541	WITHOUT_CLASSIFICATION	5.116925459002591E-6	TEST
//faster?	WITHOUT_CLASSIFICATION	0.9999318780322243	WITHOUT_CLASSIFICATION	6.812196777562313E-5	TEST
// the name of a class	WITHOUT_CLASSIFICATION	0.9999993008217233	WITHOUT_CLASSIFICATION	6.99178276685874E-7	TEST
// Its the listener class name	WITHOUT_CLASSIFICATION	0.9999967211730899	WITHOUT_CLASSIFICATION	3.278826910159021E-6	TEST
//allow 9,8,7,6,5,4,3,2,1	WITHOUT_CLASSIFICATION	0.9999407974281617	WITHOUT_CLASSIFICATION	5.920257183837263E-5	TEST
// default to element set if no elements() specified	WITHOUT_CLASSIFICATION	0.9999997441792521	WITHOUT_CLASSIFICATION	2.5582074789422823E-7	TEST
// look for the instance by uuid	WITHOUT_CLASSIFICATION	0.9999956098239834	WITHOUT_CLASSIFICATION	4.390176016605903E-6	TEST
// in case we were deserialized in a different JVM, look for an instance with the same name // (alternatively we could do an actual JNDI lookup here....)	WITHOUT_CLASSIFICATION	0.9999998927361613	WITHOUT_CLASSIFICATION	1.072638386356213E-7	TEST
// first, lets determine whether to apply cglib or javassist based instrumentation...	WITHOUT_CLASSIFICATION	0.9999998286950638	WITHOUT_CLASSIFICATION	1.7130493616737E-7	TEST
// Make sure we don't override previous set values	WITHOUT_CLASSIFICATION	0.999999364933109	WITHOUT_CLASSIFICATION	6.350668910152703E-7	TEST
//entirely optional!!	WITHOUT_CLASSIFICATION	0.9999932039304575	WITHOUT_CLASSIFICATION	6.796069542540741E-6	TEST
// Its the listener instance (or better be)	WITHOUT_CLASSIFICATION	0.9999482980910096	WITHOUT_CLASSIFICATION	5.170190899041232E-5	TEST
//context.unbind(boundName);	WITHOUT_CLASSIFICATION	0.9999855509207666	WITHOUT_CLASSIFICATION	1.4449079233431624E-5	TEST
//readResolveObject	WITHOUT_CLASSIFICATION	0.9999935065192497	WITHOUT_CLASSIFICATION	6.4934807503987946E-6	TEST
//cfg.setProperty("hibernate.show_sql", "true");	WITHOUT_CLASSIFICATION	0.999997416966391	WITHOUT_CLASSIFICATION	2.5830336089873656E-6	TEST
// Defensive, convenience methods	WITHOUT_CLASSIFICATION	0.9999994972220909	WITHOUT_CLASSIFICATION	5.027779091040765E-7	TEST
// Create the SessionFactory from hibernate.cfg.xml	WITHOUT_CLASSIFICATION	0.9999992957509618	WITHOUT_CLASSIFICATION	7.042490381046662E-7	TEST
// Make sure you log the exception, as it might be swallowed	WITHOUT_CLASSIFICATION	0.9999995884075541	WITHOUT_CLASSIFICATION	4.115924459326304E-7	TEST
// Begin unit of work	WITHOUT_CLASSIFICATION	0.9999951369958588	WITHOUT_CLASSIFICATION	4.863004141137145E-6	TEST
// Write HTML header	WITHOUT_CLASSIFICATION	0.9999969639918502	WITHOUT_CLASSIFICATION	3.036008149736963E-6	TEST
// Handle actions	WITHOUT_CLASSIFICATION	0.999999458640386	WITHOUT_CLASSIFICATION	5.413596139092308E-7	TEST
// Print page	WITHOUT_CLASSIFICATION	0.9999980459132428	WITHOUT_CLASSIFICATION	1.95408675713287E-6	TEST
// Write HTML footer	WITHOUT_CLASSIFICATION	0.9999851902091084	WITHOUT_CLASSIFICATION	1.4809790891635267E-5	TEST
// End unit of work	WITHOUT_CLASSIFICATION	0.9999929324166358	WITHOUT_CLASSIFICATION	7.067583364155424E-6	TEST
// Start the session to be used for this request	WITHOUT_CLASSIFICATION	0.9999870172040702	WITHOUT_CLASSIFICATION	1.2982795929775325E-5	TEST
// make the session available to the session factory's "current context"	WITHOUT_CLASSIFICATION	0.9999999279841383	WITHOUT_CLASSIFICATION	7.201586173762223E-8	TEST
// pass control along to the rest of the processing chain	WITHOUT_CLASSIFICATION	0.9999957550872398	WITHOUT_CLASSIFICATION	4.24491276015589E-6	TEST
// remove session from "current context"	WITHOUT_CLASSIFICATION	0.9999997206325356	WITHOUT_CLASSIFICATION	2.793674643794532E-7	TEST
// Eager fetch the collection so we can use it detached	WITHOUT_CLASSIFICATION	0.9999997465055058	WITHOUT_CLASSIFICATION	2.5349449416470325E-7	TEST
// If we want to handle it bidirectional and detached, we also need to load this // collection with an eager outer-join fetch, this time with Criteria and not HQL:	WITHOUT_CLASSIFICATION	0.9999998371710527	WITHOUT_CLASSIFICATION	1.628289472716479E-7	TEST
/*        Event anEvent = (Event) session                .createCriteria(Event.class).setFetchMode("participants", FetchMode.JOIN)                .add( Expression.eq("id", eventId) )                .uniqueResult(); // Eager fetch the colleciton so we can use it detached        */	WITHOUT_CLASSIFICATION	0.9999999995401095	WITHOUT_CLASSIFICATION	4.5989049420451176E-10	TEST
// End of first unit of work	WITHOUT_CLASSIFICATION	0.9999887201148592	WITHOUT_CLASSIFICATION	1.127988514088892E-5	TEST
// or bidirectional safety method, setting both sides: aPerson.addToEvent(anEvent);	WITHOUT_CLASSIFICATION	0.9999999687477429	WITHOUT_CLASSIFICATION	3.125225704216061E-8	TEST
// Begin second unit of work	WITHOUT_CLASSIFICATION	0.9999990219572801	WITHOUT_CLASSIFICATION	9.780427199291124E-7	TEST
// Reattachment of aPerson	WITHOUT_CLASSIFICATION	0.9999996631306389	WITHOUT_CLASSIFICATION	3.3686936107980266E-7	TEST
// The getEmailAddresses() might trigger a lazy load of the collection	WITHOUT_CLASSIFICATION	0.9999998085935315	WITHOUT_CLASSIFICATION	1.914064684815109E-7	TEST
// We need our tm, so get it now and avoid doing other work // if there is a problem	WITHOUT_CLASSIFICATION	0.9999993248222402	WITHOUT_CLASSIFICATION	6.751777597938076E-7	TEST
// Don't hold the JBC node lock throughout the tx, as that // prevents reads and other updates	WITHOUT_CLASSIFICATION	0.9999983603319837	WITHOUT_CLASSIFICATION	1.6396680163156343E-6	TEST
// Don't hold the JBC node lock throughout the tx, as that // prevents reads and other updates	WITHOUT_CLASSIFICATION	0.9999983603319837	WITHOUT_CLASSIFICATION	1.6396680163156343E-6	TEST
// JBC put a version in the node when it created as part of // some internal operation. We are always newer, but if // the JBC version is > 1 something odd has happened	WITHOUT_CLASSIFICATION	0.9999999935896694	WITHOUT_CLASSIFICATION	6.410330625811415E-9	TEST
//swaldman 2006-08-28: define c3p0-style configuration parameters for properties with //                     hibernate-specific overrides to detect and warn about conflicting //                     declarations	WITHOUT_CLASSIFICATION	0.9999998990685152	WITHOUT_CLASSIFICATION	1.009314848617661E-7	TEST
// Not null if the Isolation level has been specified in the configuration file. // Otherwise, it is left to the Driver's default value.	WITHOUT_CLASSIFICATION	0.9999996112843572	WITHOUT_CLASSIFICATION	3.887156427866554E-7	TEST
// Configured outside of Hibernate (i.e. Servlet container, or Java Bean Container // already has Proxool pools running, and this provider is to just borrow one of these	WITHOUT_CLASSIFICATION	0.9999997864956794	WITHOUT_CLASSIFICATION	2.1350432048250006E-7	TEST
// If you're closing down the ConnectionProvider chances are an // is not a real big deal, just warn	WITHOUT_CLASSIFICATION	0.9999998511870379	WITHOUT_CLASSIFICATION	1.488129620417979E-7	TEST
// (AS is always optional, for consistency with SQL/OQL)	WITHOUT_CLASSIFICATION	0.999994023600371	WITHOUT_CLASSIFICATION	5.9763996288671695E-6	TEST
// process the "new" HQL style where aliases are assigned // _after_ the class name or path expression ie. using // the AS construction	WITHOUT_CLASSIFICATION	0.9999999702424033	WITHOUT_CLASSIFICATION	2.9757596721522766E-8	TEST
// the loaded owner will be set to null after the collection is removed, // so capture its value as the affected owner so it is accessible to // both pre- and post- events	WITHOUT_CLASSIFICATION	0.9999997636626938	WITHOUT_CLASSIFICATION	2.3633730620719215E-7	TEST
// is a primitive type // invokespecial	WITHOUT_CLASSIFICATION	0.9999988836070202	WITHOUT_CLASSIFICATION	1.1163929798226344E-6	TEST
// array of primitive type // do nothing	WITHOUT_CLASSIFICATION	0.9999998271246197	WITHOUT_CLASSIFICATION	1.72875380382504E-7	TEST
// handle a path expression or class name that // appears at the start, in the "new" HQL // style or an alias that appears at the start // in the "old" HQL style	WITHOUT_CLASSIFICATION	0.9999999521243774	WITHOUT_CLASSIFICATION	4.7875622462035995E-8	TEST
//handle <=, >=, !=, is not, not between, not in	WITHOUT_CLASSIFICATION	0.999930977437459	WITHOUT_CLASSIFICATION	6.902256254105659E-5	TEST
// The loop ensures atomicity of the // select + update even for no transaction // or read committed isolation level	WITHOUT_CLASSIFICATION	0.9999996129732646	WITHOUT_CLASSIFICATION	3.870267353605021E-7	TEST
// transfer an explicitly defined entity name // handle the lazy attribute	WITHOUT_CLASSIFICATION	0.9999998896503963	WITHOUT_CLASSIFICATION	1.1034960374223175E-7	TEST
//keep the behavior consistent even for boundary usages	WITHOUT_CLASSIFICATION	0.999986940021277	WITHOUT_CLASSIFICATION	1.3059978723140052E-5	TEST
//keep the behavior consistent even for boundary usages	WITHOUT_CLASSIFICATION	0.999986940021277	WITHOUT_CLASSIFICATION	1.3059978723140052E-5	TEST
// get meta's from // <joined-subclass>	WITHOUT_CLASSIFICATION	0.9999993737148583	WITHOUT_CLASSIFICATION	6.262851417822214E-7	TEST
// parameters on the property mapping should // override parameters in the typedef	WITHOUT_CLASSIFICATION	0.9999995579378985	WITHOUT_CLASSIFICATION	4.4206210148487424E-7	TEST
//fetch="join" overrides default laziness //fetch="join" overrides default laziness	WITHOUT_CLASSIFICATION	0.9999979347298094	WITHOUT_CLASSIFICATION	2.0652701905971896E-6	TEST
//NOTE SPECIAL CASE: // default to join and non-lazy for the "second join" // of the many-to-many	WITHOUT_CLASSIFICATION	0.9999998826110088	WITHOUT_CLASSIFICATION	1.173889911201888E-7	TEST
// so we "clock over" on the first invocation	WITHOUT_CLASSIFICATION	0.9999996492395006	WITHOUT_CLASSIFICATION	3.5076049948909023E-7	TEST
// state ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999758654273929	WITHOUT_CLASSIFICATION	2.4134572607178337E-5	TEST
//	WITHOUT_CLASSIFICATION	0.999928714121282	WITHOUT_CLASSIFICATION	7.128587871800795E-5	TEST
//element //index -> id	WITHOUT_CLASSIFICATION	0.9999940072835448	WITHOUT_CLASSIFICATION	5.992716455201696E-6	TEST
// note that it might be better to iterate the snapshot but this is safe, // assuming the user implements equals() properly, as required by the Set // contract!	WITHOUT_CLASSIFICATION	0.9999976803065167	WITHOUT_CLASSIFICATION	2.319693483261627E-6	TEST
// collections detect changes made via their public interface and mark // themselves as dirty as a performance optimization	WITHOUT_CLASSIFICATION	0.9999999220964029	WITHOUT_CLASSIFICATION	7.790359704981423E-8	TEST
// essentially, if the real session is closed allow any // method call to pass through since the real session // will complain by throwing an appropriate exception; // NOTE that allowing close() above has the same basic effect, //   but we capture that there simply to perform the unbind...	WITHOUT_CLASSIFICATION	0.9999999491510825	WITHOUT_CLASSIFICATION	5.084891758651614E-8	TEST
// The default SQLExceptionConverter for all dialects is based on SQLState // since SQLErrorCode is extremely vendor-specific.  Specific Dialects // may override to return whatever is most appropriate for that vendor.	WITHOUT_CLASSIFICATION	0.9999997421822155	WITHOUT_CLASSIFICATION	2.5781778451114274E-7	TEST
//only necessary for postgre < 7.4 //http://anoncvs.postgresql.org/cvsweb.cgi/pgsql/doc/src/sgml/ref/create_sequence.sgml	WITHOUT_CLASSIFICATION	0.9999991665009846	WITHOUT_CLASSIFICATION	8.334990153125134E-7	TEST
// select topic, syntax from information_schema.help // where section like 'Function%' order by section, topic // // see also ->  http://www.h2database.com/html/functions.html	WITHOUT_CLASSIFICATION	0.9999999789854125	WITHOUT_CLASSIFICATION	2.101458750311232E-8	TEST
// registerColumnType(Types.VARBINARY, "CHARACTER($l)"); // registerColumnType(Types.BLOB, "CHARACTER($l)" );  // For use prior to CP 11.0 // registerColumnType(Types.CLOB, "CHARACTER($l)" );	WITHOUT_CLASSIFICATION	0.9999995825302357	WITHOUT_CLASSIFICATION	4.1746976428699465E-7	TEST
//the BLOB type requires a size arguement - this defaults to //bytes - no arg defaults to 1 whole byte! //other argument mods include K - kilobyte, M - megabyte, G - gigabyte. //refer to the PBdevelopers guide for more info.	WITHOUT_CLASSIFICATION	0.9999994089975136	WITHOUT_CLASSIFICATION	5.910024863684333E-7	TEST
// We must return a valid RDMS/RSA command from this method to // prevent RDMS/RSA from issuing *ERROR 400	WITHOUT_CLASSIFICATION	0.9999998192130672	WITHOUT_CLASSIFICATION	1.807869327880036E-7	TEST
// Oracle driver reports to support getGeneratedKeys(), but they only // support the version taking an array of the names of the columns to // be returned (via its RETURNING clause).  No other driver seems to // support this overloaded version.	WITHOUT_CLASSIFICATION	0.9999999315507304	WITHOUT_CLASSIFICATION	6.844926960986286E-8	TEST
// add the comment // nest the main query in an outer select // add the rownnumber bit into the outer query select list	WITHOUT_CLASSIFICATION	0.9999993109281193	WITHOUT_CLASSIFICATION	6.890718807465579E-7	TEST
//	WITHOUT_CLASSIFICATION	0.999928714121282	WITHOUT_CLASSIFICATION	7.128587871800795E-5	TEST
// Note: For object <-> SQL datatype mappings see: //	WITHOUT_CLASSIFICATION	0.9999997072329891	WITHOUT_CLASSIFICATION	2.9276701088932387E-7	TEST
// TRIM(end_keyword string-expression-1 FROM string-expression-2) // use Hibernate implementation "From" is one of the parameters they pass in position ?3 //registerFunction( "trim", new SQLFunctionTemplate(Hibernate.STRING, "trim(?1 ?2 from ?3)") );	WITHOUT_CLASSIFICATION	0.9999999661354667	WITHOUT_CLASSIFICATION	3.3864533250975716E-8	TEST
// Whether this dialect has an Identity clause added to the data type or a completely seperate identity // data type	WITHOUT_CLASSIFICATION	0.9999995650798369	WITHOUT_CLASSIFICATION	4.3492016302998633E-7	TEST
// According to both the ANSI-SQL and JPA specs, trim takes a variable number of parameters between 1 and 4. // at least one paramer (trimSource) is required.  From the SQL spec: // // <trim function> ::= //      TRIM <left paren> <trim operands> <right paren> // // <trim operands> ::= //      [ [ <trim specification> ] [ <trim character> ] FROM ] <trim source> // // <trim specification> ::= //      LEADING //      | TRAILING //      | BOTH // // If <trim specification> is omitted, BOTH is assumed. // If <trim character> is omitted, space is assumed	WITHOUT_CLASSIFICATION	0.9999999069613245	WITHOUT_CLASSIFICATION	9.303867548406141E-8	TEST
/////////////////////////////////////////////////////////////////////// // Prepare persisters and link them up with their cache // region/access-strategy	WITHOUT_CLASSIFICATION	0.9999987523804275	WITHOUT_CLASSIFICATION	1.2476195724441102E-6	TEST
//Named Queries:	WITHOUT_CLASSIFICATION	0.9999412799265325	WITHOUT_CLASSIFICATION	5.872007346746775E-5	TEST
// this will throw an error if there's something wrong.	WITHOUT_CLASSIFICATION	0.9999993937428079	WITHOUT_CLASSIFICATION	6.062571920192518E-7	TEST
// does not handle arrays (thats ok, cos they can't be lazy) // or newly instantiated collections, so we can do the cast	WITHOUT_CLASSIFICATION	0.9999996257590897	WITHOUT_CLASSIFICATION	3.742409103141592E-7	TEST
// collection deletions are a special case since update() can add // deletions of collections not loaded by the session.	WITHOUT_CLASSIFICATION	0.9999998796165265	WITHOUT_CLASSIFICATION	1.2038347359581377E-7	TEST
// we can do the cast since orphan-delete does not apply to: // 1. newly instantiated collections // 2. arrays (we can't track orphans for detached arrays)	WITHOUT_CLASSIFICATION	0.9999995974729964	WITHOUT_CLASSIFICATION	4.0252700370644123E-7	TEST
// if the natural-id is marked as non-mutable, it is not retrieved during a // normal database-snapshot operation...	WITHOUT_CLASSIFICATION	0.9999999870757322	WITHOUT_CLASSIFICATION	1.2924267835417602E-8	TEST
// watch out for a case where old is still referenced // somewhere in the object graph! (which is a user error)	WITHOUT_CLASSIFICATION	0.9999980420852592	WITHOUT_CLASSIFICATION	1.957914740767592E-6	TEST
//slice, to get the columns for this component //property	WITHOUT_CLASSIFICATION	0.9999922497375993	WITHOUT_CLASSIFICATION	7.750262400661768E-6	TEST
//int result = 17; //result = 37 * result + type.hashCode(); //result = 37 * result + ( value==null ? 0 : value.hashCode() ); //return result;	WITHOUT_CLASSIFICATION	0.9999985915265457	WITHOUT_CLASSIFICATION	1.4084734542573595E-6	TEST
// The CollectionEntry.isReached() stuff is just to detect any silly users   // who set up circular or shared references between/to collections.	WITHOUT_CLASSIFICATION	0.9999993432410275	WITHOUT_CLASSIFICATION	6.567589725405278E-7	TEST
// detached collection wrappers that get found + reattached // during flush shouldn't be ignored	WITHOUT_CLASSIFICATION	0.999999559970123	WITHOUT_CLASSIFICATION	4.400298768701356E-7	TEST
// The unique property value represented here may or may not be // serializable, so we do an explicit check here in order to generate // a better error message	WITHOUT_CLASSIFICATION	0.9999996303020499	WITHOUT_CLASSIFICATION	3.696979502116003E-7	TEST
// if the version of a newly instantiated object is not the same // as the version seed value, use that as the unsaved-value	WITHOUT_CLASSIFICATION	0.9999993863948761	WITHOUT_CLASSIFICATION	6.136051239316922E-7	TEST
// ie. we never have to null out a reference to // an uninitialized proxy	WITHOUT_CLASSIFICATION	0.9999998762372938	WITHOUT_CLASSIFICATION	1.2376270623158425E-7	TEST
// ignore this row, the collection is in process of // being loaded somewhere further "up" the stack	WITHOUT_CLASSIFICATION	0.9999996593552327	WITHOUT_CLASSIFICATION	3.406447671943504E-7	TEST
// Entity load contexts ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ // 	WITHOUT_CLASSIFICATION	0.9999988874517065	WITHOUT_CLASSIFICATION	1.1125482934244765E-6	TEST
// should be ok performance-wise to generate new delegate instances for each // request since these are locally stack-scoped.  Besides, it makes the code // much easier to read than the old TransactionHelper stuff...	WITHOUT_CLASSIFICATION	0.9999967494745308	WITHOUT_CLASSIFICATION	3.2505254691339168E-6	TEST
// this implementation is supposed to tolerate incorrect unsaved-value // mappings, for the purpose of backward-compatibility	WITHOUT_CLASSIFICATION	0.9999993925690718	WITHOUT_CLASSIFICATION	6.074309282358022E-7	TEST
// this implementation is supposed to tolerate incorrect unsaved-value // mappings, for the purpose of backward-compatibility	WITHOUT_CLASSIFICATION	0.9999993925690718	WITHOUT_CLASSIFICATION	6.074309282358022E-7	TEST
// wrap up any new collections directly referenced by the object // or its components	WITHOUT_CLASSIFICATION	0.9999998442323526	WITHOUT_CLASSIFICATION	1.5576764740829438E-7	TEST
// remove any snapshot, not really for memory management purposes, but // rather because it might now be stale, and there is no longer any  // EntityEntry to take precedence // This is now handled by removeEntity() //session.getPersistenceContext().removeDatabaseSnapshot(key);	WITHOUT_CLASSIFICATION	0.9999998932384402	WITHOUT_CLASSIFICATION	1.0676155980780087E-7	TEST
// skip this check for composite-ids relating to dom4j entity-mode; // alternatively, we could add a check to make sure the incoming id value is // an instance of Element...	WITHOUT_CLASSIFICATION	0.9999999522914067	WITHOUT_CLASSIFICATION	4.770859322907404E-8	TEST
// upgrade the lock if necessary: //lock(result, lockMode);	WITHOUT_CLASSIFICATION	0.9999997601367845	WITHOUT_CLASSIFICATION	2.3986321553681454E-7	TEST
// now, any collections that are initialized // inside this block do not get updated - they // are ignored until the next flush	WITHOUT_CLASSIFICATION	0.9999995265471056	WITHOUT_CLASSIFICATION	4.7345289443707896E-7	TEST
//we must clone embedded composite identifiers, or  //we will get back the same instance that we pass in	WITHOUT_CLASSIFICATION	0.999998234320999	WITHOUT_CLASSIFICATION	1.7656790009827227E-6	TEST
// Sub-insertions should occur before containing insertion so // Try to do the callback now	WITHOUT_CLASSIFICATION	0.9999999354766116	WITHOUT_CLASSIFICATION	6.452338833625818E-8	TEST
//the entity is not associated with the session, so //try interceptor and unsaved-value	WITHOUT_CLASSIFICATION	0.9999945756635867	WITHOUT_CLASSIFICATION	5.424336413270063E-6	TEST
//scan the query string for class names appearing in the from clause and replace //with all persistent implementors of the class/interface, returning multiple //query strings (make sure we don't pick up a class in the select clause!)	WITHOUT_CLASSIFICATION	0.9999999786862187	WITHOUT_CLASSIFICATION	2.1313781379439464E-8	TEST
// save() operations ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999974028281944	WITHOUT_CLASSIFICATION	2.5971718056545574E-6	TEST
// evict() operations ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999987004831944	WITHOUT_CLASSIFICATION	1.2995168056562338E-6	TEST
//stops flush being called multiple times if this method is recursively called	WITHOUT_CLASSIFICATION	0.9999894213233239	WITHOUT_CLASSIFICATION	1.0578676676160833E-5	TEST
//if it is an uninitialized proxy, pointing //with this session, then when it is accessed, //the underlying instance will be "contained"	WITHOUT_CLASSIFICATION	0.9999975286520673	WITHOUT_CLASSIFICATION	2.471347932828132E-6	TEST
// Generate an explicit join for the root dot node.   The implied joins will be collected and passed up // to the root dot node.	WITHOUT_CLASSIFICATION	0.9999996424932174	WITHOUT_CLASSIFICATION	3.575067825197315E-7	TEST
// A session is considered to contain an entity only if the entity has // an entry in the session's persistence context and the entry reports // that the entity has not been removed	WITHOUT_CLASSIFICATION	0.9999999451811826	WITHOUT_CLASSIFICATION	5.481881733750779E-8	TEST
// Does the collection referenced by this FromElement // specify an order-by attribute?  If so, attach it to // the query's order-by	WITHOUT_CLASSIFICATION	0.9999998631260689	WITHOUT_CLASSIFICATION	1.368739310567666E-7	TEST
// ... and the token could be an identifer and the error is // a mismatched token error ...	WITHOUT_CLASSIFICATION	0.999995959355152	WITHOUT_CLASSIFICATION	4.040644847985358E-6	TEST
// If a where clause was specified in the update/delete query, use it to limit the // returned ids here...	WITHOUT_CLASSIFICATION	0.9999999149459046	WITHOUT_CLASSIFICATION	8.505409537427756E-8	TEST
//	WITHOUT_CLASSIFICATION	0.999928714121282	WITHOUT_CLASSIFICATION	7.128587871800795E-5	TEST
// Default implementation: // If this node has a data type, and that data type is not an association, then this is scalar.	WITHOUT_CLASSIFICATION	0.9999995012718951	WITHOUT_CLASSIFICATION	4.987281049597754E-7	TEST
// Resolve the LHS fully, generate implicit joins.  Pass in the property name so that the resolver can // discover foreign key (id) properties.	WITHOUT_CLASSIFICATION	0.9999998527374501	WITHOUT_CLASSIFICATION	1.4726254984058948E-7	TEST
// If the propertyType is null and there isn't a parent, just // stop now... there was a problem resolving the node anyway.	WITHOUT_CLASSIFICATION	0.9999998738812137	WITHOUT_CLASSIFICATION	1.2611878628078069E-7	TEST
//We do not look for an existing join on the same path, because //it makes sense to join twice on the same collection role	WITHOUT_CLASSIFICATION	0.9999998866963216	WITHOUT_CLASSIFICATION	1.13303678438053E-7	TEST
// our parent is another dot node, meaning we are being further dereferenced. // thus we need to generate a join unless the parent refers to the associated // entity's PK (because 'our' table would know the FK).	WITHOUT_CLASSIFICATION	0.9999997594228182	WITHOUT_CLASSIFICATION	2.405771818369964E-7	TEST
/*public final Currency getCurrency(int col) throws HibernateException {	WITHOUT_CLASSIFICATION	0.9999958276659723	WITHOUT_CLASSIFICATION	4.17233402776225E-6	TEST
// here, we have two possibilities: // 	WITHOUT_CLASSIFICATION	0.9999982199023677	WITHOUT_CLASSIFICATION	1.7800976323441336E-6	TEST
// Set the unresolved path in this node and the parent. // Set the text for the parent.	WITHOUT_CLASSIFICATION	0.9999809867001934	WITHOUT_CLASSIFICATION	1.9013299806552487E-5	TEST
// Get the first child to be considered.  Sub-classes may do this differently in order to skip nodes that // are not select expressions (e.g. DISTINCT).	WITHOUT_CLASSIFICATION	0.9999998767984694	WITHOUT_CLASSIFICATION	1.2320153070146862E-7	TEST
// If this is an entity and the property is the identifier property, then use getIdentifierType(). //      Note that the propertyName.equals( propertyPath ) checks whether we have a component //      key reference, where the component class property name is the same as the //      entity id property name; if the two are not equal, this is the case and //      we'd need to "fall through" to using the property mapping.	WITHOUT_CLASSIFICATION	0.9999998596131214	WITHOUT_CLASSIFICATION	1.4038687854280667E-7	TEST
// for a subquery, the alias to use depends on a few things (we // already know this is not an overall SELECT): //      1) if this FROM_ELEMENT represents a correlation to the //          outer-most query //              A) if the outer query represents a multi-table //                  persister, we need to use the given alias //                  in anticipation of one of the multi-table //                  executors being used (as this subquery will //                  actually be used in the "id select" phase //                  of that multi-table executor) //              B) otherwise, we need to use the persister's //                  table name as the column qualification //      2) otherwise (not correlated), use the given alias	WITHOUT_CLASSIFICATION	0.9999999960054371	WITHOUT_CLASSIFICATION	3.994562964268299E-9	TEST
// Not a collection? // Return the entity property mapping.	WITHOUT_CLASSIFICATION	0.9999996872068558	WITHOUT_CLASSIFICATION	3.127931442364484E-7	TEST
// collection of <many-to-any/> mappings... // used to circumvent the component-collection check below...	WITHOUT_CLASSIFICATION	0.9999999801302096	WITHOUT_CLASSIFICATION	1.9869790353463204E-8	TEST
// Otherwise, the destination node was implied by the FROM clause and the FROM clause processor // will automatically add it in the right place.	WITHOUT_CLASSIFICATION	0.9999998967226628	WITHOUT_CLASSIFICATION	1.0327733721147775E-7	TEST
// If the first identifier in the path referrs to the class alias (not the class name), then this // is a correlated subselect.  If it's a correlated sub-select, use the existing table alias.  Otherwise // generate a new one.	WITHOUT_CLASSIFICATION	0.9999998227521922	WITHOUT_CLASSIFICATION	1.7724780784111218E-7	TEST
// check to see if our "propPath" actually // represents a property on the persister	WITHOUT_CLASSIFICATION	0.9999994155017325	WITHOUT_CLASSIFICATION	5.844982673956276E-7	TEST
// An ident node can represent an index expression if the ident // represents a naked property ref //      *Note: this makes the assumption (which is currently the case //      in the hql-sql grammar) that the ident is first resolved //      itself (addrExpr -> resolve()).  The other option, if that //      changes, is to call resolve from here; but it is //      currently un-needed overhead.	WITHOUT_CLASSIFICATION	0.9999998537685705	WITHOUT_CLASSIFICATION	1.4623142958621642E-7	TEST
// This uses a PathExpressionParser but notice that compound paths are not valid, // only bare names and simple paths:	WITHOUT_CLASSIFICATION	0.999999865463539	WITHOUT_CLASSIFICATION	1.345364609276505E-7	TEST
// If this is an implied join in a FROM clause, then use ANSI-style joining, and set the // flag on the FromElement that indicates that it was implied in the FROM clause itself.	WITHOUT_CLASSIFICATION	0.9999969449067784	WITHOUT_CLASSIFICATION	3.055093221495224E-6	TEST
//	WITHOUT_CLASSIFICATION	0.999928714121282	WITHOUT_CLASSIFICATION	7.128587871800795E-5	TEST
// For an explicit many-to-many relationship, add a second join from the intermediate  // (many-to-many) table to the destination table.  Also, make sure that the from element's  // idea of the destination is the destination table.	WITHOUT_CLASSIFICATION	0.9999999560982277	WITHOUT_CLASSIFICATION	4.3901772444391255E-8	TEST
// Reset the node type, because the rest of the system is expecting FROM_FRAGMENT, all we wanted was // for the factory to create the right sub-class.  This might get reset again later on anyway to make the // SQL generation simpler.	WITHOUT_CLASSIFICATION	0.9999999532740174	WITHOUT_CLASSIFICATION	4.6725982651878295E-8	TEST
//explicit = true;	WITHOUT_CLASSIFICATION	0.9999935884187795	WITHOUT_CLASSIFICATION	6.411581220439881E-6	TEST
//sqlResultTypeList.add( type ); // Generate the select expression.	WITHOUT_CLASSIFICATION	0.9999996632498149	WITHOUT_CLASSIFICATION	3.36750185017181E-7	TEST
// If the expression list has exactly one expression, and the type of the expression is a collection // then this might be a collection function, such as index(c) or size(c).	WITHOUT_CLASSIFICATION	0.9999994028402571	WITHOUT_CLASSIFICATION	5.97159742918344E-7	TEST
// Need to parse off the column qualifiers; this is assuming (which is true as of now) // that this is only used from update and delete HQL statement parsing	WITHOUT_CLASSIFICATION	0.9999867568998007	WITHOUT_CLASSIFICATION	1.3243100199264235E-5	TEST
// for regression testing against output from the old parser... // found it easiest to simply reorder the FromElements here into ascending order // in terms of injecting them into the resulting sql ast in orders relative to those // expected by the old parser; this is definitely another of those "only needed // for regression purposes".  The SyntheticAndFactory, then, simply injects them as it // encounters them.	WITHOUT_CLASSIFICATION	0.9999993987519796	WITHOUT_CLASSIFICATION	6.012480204632491E-7	TEST
// The uber-rule here is that we need to include  subclass joins if // the FromElement is in any way dereferenced by a property from // the subclass table; otherwise we end up with column references // qualified by a non-existent table reference in the resulting SQL...	WITHOUT_CLASSIFICATION	0.9999999874281428	WITHOUT_CLASSIFICATION	1.2571857247400699E-8	TEST
// classic translator does not support collection of ordinal // param metadata	WITHOUT_CLASSIFICATION	0.9999999646707692	WITHOUT_CLASSIFICATION	3.5329230698322E-8	TEST
// The following variables are stacks that keep information about each subexpression // in the list of nested subexpressions we are currently processing.	WITHOUT_CLASSIFICATION	0.9999997292346962	WITHOUT_CLASSIFICATION	2.707653038407253E-7	TEST
// The loop ensures atomicity of the // select + update even for no transaction // or read committed isolation level	WITHOUT_CLASSIFICATION	0.9999996129732646	WITHOUT_CLASSIFICATION	3.870267353605021E-7	TEST
// should not be able to reach last without maxPosition being set // unless there are no results	WITHOUT_CLASSIFICATION	0.9999997821393096	WITHOUT_CLASSIFICATION	2.1786069040163722E-7	TEST
// we found it in the temp PC.  Should indicate we are in the midst of processing a result set // containing eager fetches via join fetch	WITHOUT_CLASSIFICATION	0.9999999367462821	WITHOUT_CLASSIFICATION	6.325371791791551E-8	TEST
//do not use proxiesByKey, since not all //proxies that point to this session's //instances are in that collection!	WITHOUT_CLASSIFICATION	0.9999996725342993	WITHOUT_CLASSIFICATION	3.2746570060724276E-7	TEST
// if there is no TM configured, we will not be able to access // the javax.transaction.Transaction object in order to // register a synch anyway.	WITHOUT_CLASSIFICATION	0.9999999085480334	WITHOUT_CLASSIFICATION	9.145196648579759E-8	TEST
// Since the result set cursor is always left at the first // physical row after the "last processed", we need to jump // back one position to get the key value we are interested // in skipping	WITHOUT_CLASSIFICATION	0.9999977716529294	WITHOUT_CLASSIFICATION	2.2283470705803546E-6	TEST
//true if this is a query and we are loading multiple instances of the same collection role //otherwise this is a CollectionInitializer and we are loading up a single collection or batch	WITHOUT_CLASSIFICATION	0.9999996797871311	WITHOUT_CLASSIFICATION	3.2021286886748727E-7	TEST
// we don't need to worry about existing version being uninitialized // because this block isn't called by a re-entrant load (re-entrant // loads _always_ have lock mode NONE)	WITHOUT_CLASSIFICATION	0.9999999742606881	WITHOUT_CLASSIFICATION	2.573931183672206E-8	TEST
// add temp entry so that the next step is circular-reference // safe - only needed because some types don't take proper // advantage of two-phase-load (esp. components)	WITHOUT_CLASSIFICATION	0.9999998998730113	WITHOUT_CLASSIFICATION	1.0012698878683535E-7	TEST
// assume we are in an auto-commit state	WITHOUT_CLASSIFICATION	0.9999994748120745	WITHOUT_CLASSIFICATION	5.251879254286173E-7	TEST
// log a message about potential connection leaks	WITHOUT_CLASSIFICATION	0.9999997830669559	WITHOUT_CLASSIFICATION	2.1693304405785031E-7	TEST
//	WITHOUT_CLASSIFICATION	0.999928714121282	WITHOUT_CLASSIFICATION	7.128587871800795E-5	TEST
// this has been shown to happen occasionally in rare cases // when using a transaction manager + transaction-timeout // where the timeout calls back through Hibernate's // registered transaction synchronization on a separate // "reaping" thread.  In cases where that reaping thread // executes through this block at the same time the main // application thread does we can get into situations where // these CMEs occur.  And though it is not "allowed" per-se, // the end result without handling it specifically is infinite // looping.  So here, we simply break the loop	WITHOUT_CLASSIFICATION	0.9999999638238932	WITHOUT_CLASSIFICATION	3.6176106770959965E-8	TEST
// unfortunately this stuff can't be cached because // it is per-invocation, not constant for the // QueryTranslator instance	WITHOUT_CLASSIFICATION	0.9999962866220805	WITHOUT_CLASSIFICATION	3.7133779196088853E-6	TEST
// can't cache this stuff either (per-invocation) // we are given a map of user-alias -> lock mode // create a new map of sql-alias -> lock mode	WITHOUT_CLASSIFICATION	0.9999999851663988	WITHOUT_CLASSIFICATION	1.4833601223859733E-8	TEST
// don't create a unique key, 'cos some // databases don't like a UK on nullable // columns //getCollectionTable().createUniqueKey( getIdentifier().getConstraintColumns() );	WITHOUT_CLASSIFICATION	0.9999999866771957	WITHOUT_CLASSIFICATION	1.3322804182037052E-8	TEST
// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ // stuff that is persister-centric and/or EntityInfo-centric ~~~~~~~~~~~~~~ // ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999958490608345	WITHOUT_CLASSIFICATION	4.150939165421149E-6	TEST
//isSet = collection.isSet(); //isSorted = collection.isSorted();	WITHOUT_CLASSIFICATION	0.999990542635446	WITHOUT_CLASSIFICATION	9.457364554011127E-6	TEST
//lists, arrays //sets, maps, bags	WITHOUT_CLASSIFICATION	0.9999912460978642	WITHOUT_CLASSIFICATION	8.75390213590477E-6	TEST
// we finish all the "removes" first to take care of possible unique // constraints and so that we can take better advantage of batching	WITHOUT_CLASSIFICATION	0.9999986266695453	WITHOUT_CLASSIFICATION	1.3733304546480607E-6	TEST
//use a combination of foreign key columns and pk columns, since //the ordering of removal and addition is not guaranteed when //a child moves from one parent to another	WITHOUT_CLASSIFICATION	0.9999998712799657	WITHOUT_CLASSIFICATION	1.287200343529956E-7	TEST
// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ // stuff that is persister-centric and/or EntityInfo-centric ~~~~~~~~~~~~~~ // ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999958490608345	WITHOUT_CLASSIFICATION	4.150939165421149E-6	TEST
//information about properties of this class, //including inherited properties //(only really needed for updatable/insertable properties)	WITHOUT_CLASSIFICATION	0.999998936850543	WITHOUT_CLASSIFICATION	1.0631494570670566E-6	TEST
// all this only really needs to consider properties // of this class, not its subclasses, but since we // are reusing code used for sequential selects, we // use the subclass closure	WITHOUT_CLASSIFICATION	0.9999999711118037	WITHOUT_CLASSIFICATION	2.8888196268762287E-8	TEST
// Here we render the select column list based on the properties defined as being generated. // For partial component generation, we currently just re-select the whole component // rather than trying to handle the individual generated portions.	WITHOUT_CLASSIFICATION	0.9999999674074853	WITHOUT_CLASSIFICATION	3.2592514726010855E-8	TEST
// this is the root (versioned) table, and we are using version-based // optimistic locking;  if we are not updating the version, also don't // check it (unless this is a "generated" version column)!	WITHOUT_CLASSIFICATION	0.9999999468113744	WITHOUT_CLASSIFICATION	5.3188625618802795E-8	TEST
//optimistic-lock="all", include all updatable properties //optimistic-lock="dirty", include all properties we are updating this time	WITHOUT_CLASSIFICATION	0.9999989903070106	WITHOUT_CLASSIFICATION	1.0096929893645483E-6	TEST
// this property belongs to the table, and it is not specifically // excluded from optimistic locking by optimistic-lock="false"	WITHOUT_CLASSIFICATION	0.9999995697629633	WITHOUT_CLASSIFICATION	4.3023703674355433E-7	TEST
// check to see if the connection is in auto-commit  // mode (no connection means aggressive connection // release outside a JTA transaction context, so MUST // be autocommit mode)	WITHOUT_CLASSIFICATION	0.9999999949112053	WITHOUT_CLASSIFICATION	5.088794710612845E-9	TEST
// need to treat this as if it where optimistic-lock="all" (dirty does *not* make sense); // first we need to locate the "loaded" state // // Note, it potentially could be a proxy, so perform the location the safe way...	WITHOUT_CLASSIFICATION	0.999999953579885	WITHOUT_CLASSIFICATION	4.642011497812703E-8	TEST
// we *always* assume an instance with a null // identifier or no identifier property is unsaved!	WITHOUT_CLASSIFICATION	0.9999998742707746	WITHOUT_CLASSIFICATION	1.257292253504656E-7	TEST
// Need to use the identifier type of the collection owner // since the incoming is value is actually the owner's id. // Using the collection's key type causes problems with // property-ref keys...	WITHOUT_CLASSIFICATION	0.9999975185926483	WITHOUT_CLASSIFICATION	2.481407351580096E-6	TEST
//allow any identifier quoted with backtick //only recognizes identifiers beginning with a letter	WITHOUT_CLASSIFICATION	0.9999803505737083	WITHOUT_CLASSIFICATION	1.964942629175142E-5	TEST
//following doesn't handle (null, not null) but unnecessary //since this would mean all rows	WITHOUT_CLASSIFICATION	0.9999910306757621	WITHOUT_CLASSIFICATION	8.969324237840089E-6	TEST
// IMPL NOTE : due to the delayed population of setters (setters cached // 	WITHOUT_CLASSIFICATION	0.9999977477283841	WITHOUT_CLASSIFICATION	2.252271615917E-6	TEST
// we need to dirty check collections, since they can cause an owner // version number increment	WITHOUT_CLASSIFICATION	0.9999999907177384	WITHOUT_CLASSIFICATION	9.282261563434083E-9	TEST
//return the id, so we can use it to reset the proxy id //return result;	WITHOUT_CLASSIFICATION	0.9999977232382341	WITHOUT_CLASSIFICATION	2.2767617660145096E-6	TEST
//	WITHOUT_CLASSIFICATION	0.999928714121282	WITHOUT_CLASSIFICATION	7.128587871800795E-5	TEST
// cache the actual id of the object, not the value of the // property-ref, which might not be initialized	WITHOUT_CLASSIFICATION	0.9999997495555211	WITHOUT_CLASSIFICATION	2.5044447893944795E-7	TEST
// We now have the value of the property-ref we reference.  However, // we need to dig a little deeper, as that property might also be // an entity type, in which case we need to resolve its identitifier	WITHOUT_CLASSIFICATION	0.9999999033060447	WITHOUT_CLASSIFICATION	9.669395524918746E-8	TEST
// Retrieve the value of the designated column in the current row of this // ResultSet object as a java.io.Reader object	WITHOUT_CLASSIFICATION	0.9999996488518669	WITHOUT_CLASSIFICATION	3.5114813313773557E-7	TEST
//not absolutely necessary, but helps for some //equals()/hashCode() implementations	WITHOUT_CLASSIFICATION	0.9999994675317291	WITHOUT_CLASSIFICATION	5.324682708027528E-7	TEST
//this should be a call to resolve(), not resolveIdentifier(),  //'cos it might be a property-ref, and we did not cache the //referenced value	WITHOUT_CLASSIFICATION	0.9999980456969627	WITHOUT_CLASSIFICATION	1.9543030371637416E-6	TEST
// If we have <tt>not-found="ignore"</tt> association mapped to a // formula, we always need to dirty check it, so we can update the // second-level cache	WITHOUT_CLASSIFICATION	0.9999999695175171	WITHOUT_CLASSIFICATION	3.048248292191549E-8	TEST
// can't just return null here, since that would // cause an owning component to become null	WITHOUT_CLASSIFICATION	0.9999999371641706	WITHOUT_CLASSIFICATION	6.283582945138356E-8	TEST
//for arrays, replaceElements() may return a different reference, since //the array length might not match	WITHOUT_CLASSIFICATION	0.9999997765180358	WITHOUT_CLASSIFICATION	2.234819642168133E-7	TEST
// actual cache of the entries.  soft references are used for both the keys and the // values here since the values pertaining to the MRU entries are kept in a // seperate hard reference cache (to avoid their enqueuement/garbage-collection).	WITHOUT_CLASSIFICATION	0.9999999830632907	WITHOUT_CLASSIFICATION	1.6936709224546464E-8	TEST
// as soon as we encounter our first letter, return the substring // from that position	WITHOUT_CLASSIFICATION	0.9999993342004236	WITHOUT_CLASSIFICATION	6.657995763514056E-7	TEST
// Note : expected in the syntax: //      type=listenerClass //          ({sep}type=listenerClass)* // where {sep} is any whitespace or comma	WITHOUT_CLASSIFICATION	0.9999988872537579	WITHOUT_CLASSIFICATION	1.1127462422310998E-6	TEST
// isTransactionCallbackRegistered denotes whether any Hibernate // Transaction has registered as a callback against this // JDBCContext; only one such callback is allowed.  Directly // serializing this value causes problems with JDBCTransaction, // or really any Transaction impl where the callback is local // to the Transaction instance itself, since that Transaction // is not serialized along with the JDBCContext.  Thus we // handle that fact here explicitly...	WITHOUT_CLASSIFICATION	0.9999998683583171	WITHOUT_CLASSIFICATION	1.316416828262765E-7	TEST
// note that for sequential scrolling, we make the assumption that // the first persister element is the "root entity"	WITHOUT_CLASSIFICATION	0.99999928905742	WITHOUT_CLASSIFICATION	7.109425800243456E-7	TEST
// We call getKeyFromResultSet() here so that we can know the // key value upon which to perform the breaking logic.  However, // it is also then called from getRowFromResultSet() which is certainly // not the most efficient.  But the call here is needed, and there // currently is no other way without refactoring of the doQuery()/getRowFromResultSet() // methods	WITHOUT_CLASSIFICATION	0.9999998254056307	WITHOUT_CLASSIFICATION	1.7459436929857898E-7	TEST
// This check is needed since processing leaves the cursor // after the last physical row for the current logical row; // thus if we are after the last physical row, this might be // caused by either: //      1) scrolling to the last logical row //      2) scrolling past the last logical row // In the latter scenario, the previous logical row // really is the last logical row. // // In all other cases, we should process back two // logical records (the current logic row, plus the // previous logical row).	WITHOUT_CLASSIFICATION	0.9999969316474395	WITHOUT_CLASSIFICATION	3.0683525605358597E-6	TEST
// and perform the load	WITHOUT_CLASSIFICATION	0.9999977290727101	WITHOUT_CLASSIFICATION	2.270927289905774E-6	TEST
//important: reuse the same event instances for performance!	WITHOUT_CLASSIFICATION	0.9999974291602169	WITHOUT_CLASSIFICATION	2.5708397830284345E-6	TEST
//this is a query and we are loading multiple instances of the same collection role	WITHOUT_CLASSIFICATION	0.9999993381133584	WITHOUT_CLASSIFICATION	6.618866416884952E-7	TEST
// we found a collection element in the result set	WITHOUT_CLASSIFICATION	0.9999998865728376	WITHOUT_CLASSIFICATION	1.1342716248277845E-7	TEST
// we did not find a collection element in the result set, so we // ensure that a collection is created with the owner's identifier, // since what we have is an empty collection	WITHOUT_CLASSIFICATION	0.9999997499507547	WITHOUT_CLASSIFICATION	2.5004924534239804E-7	TEST
// this is a collection initializer, so we must create a collection // for each of the passed-in keys, to account for the possibility // that the collection is empty and has no rows in the result set	WITHOUT_CLASSIFICATION	0.9999995295055841	WITHOUT_CLASSIFICATION	4.704944159145405E-7	TEST
// grab its state from the ResultSet and keep it in the Session // (but don't yet initialize the object itself) // note that we acquire LockMode.READ even if it was not requested	WITHOUT_CLASSIFICATION	0.9999999423051668	WITHOUT_CLASSIFICATION	5.7694833294945625E-8	TEST
// a many-to-many; // decrement currentDepth here to allow join across the association table // without exceeding MAX_FETCH_DEPTH (i.e. the "currentDepth - 1" bit)	WITHOUT_CLASSIFICATION	0.9999999954822385	WITHOUT_CLASSIFICATION	4.517761577897123E-9	TEST
// if not a composite key, use "foo in (?, ?, ?)" for batching // if no batch, and not a composite key, use "foo = ?"	WITHOUT_CLASSIFICATION	0.9999999496465733	WITHOUT_CLASSIFICATION	5.035342661877725E-8	TEST
//the user visible aliases, which are unknown to the superclass, //these are not the actual "physical" SQL aliases	WITHOUT_CLASSIFICATION	0.9999993141774084	WITHOUT_CLASSIFICATION	6.858225916454768E-7	TEST
//first look for a reference to a projection alias	WITHOUT_CLASSIFICATION	0.9999977593158691	WITHOUT_CLASSIFICATION	2.2406841309323853E-6	TEST
//first look for a reference to a projection alias	WITHOUT_CLASSIFICATION	0.9999977593158691	WITHOUT_CLASSIFICATION	2.2406841309323853E-6	TEST
//it does not refer to an alias of a projection, //look for a property	WITHOUT_CLASSIFICATION	0.9999991015124406	WITHOUT_CLASSIFICATION	8.984875592560235E-7	TEST
// determine if the collection elements are entities...	WITHOUT_CLASSIFICATION	0.9999999186380084	WITHOUT_CLASSIFICATION	8.136199162271244E-8	TEST
// Let return-propertys override whatever the persister has for aliases.	WITHOUT_CLASSIFICATION	0.99999547472656	WITHOUT_CLASSIFICATION	4.5252734399664955E-6	TEST
/**	WITHOUT_CLASSIFICATION	0.9998890685295254	WITHOUT_CLASSIFICATION	1.1093147047457791E-4	TEST
// ignore	WITHOUT_CLASSIFICATION	0.9999977344954267	WITHOUT_CLASSIFICATION	2.26550457329293E-6	TEST
// ignore	WITHOUT_CLASSIFICATION	0.9999977344954267	WITHOUT_CLASSIFICATION	2.26550457329293E-6	TEST
//        }	WITHOUT_CLASSIFICATION	0.9999842007442569	WITHOUT_CLASSIFICATION	1.579925574315453E-5	TEST
//	WITHOUT_CLASSIFICATION	0.999928714121282	WITHOUT_CLASSIFICATION	7.128587871800795E-5	TEST
//	WITHOUT_CLASSIFICATION	0.999928714121282	WITHOUT_CLASSIFICATION	7.128587871800795E-5	TEST
//include the discriminator and class-level where, but not filters	WITHOUT_CLASSIFICATION	0.9999985920667707	WITHOUT_CLASSIFICATION	1.4079332293925789E-6	TEST
//	WITHOUT_CLASSIFICATION	0.999928714121282	WITHOUT_CLASSIFICATION	7.128587871800795E-5	TEST
//NONE, because its the requested lock mode, not the actual! 	WITHOUT_CLASSIFICATION	0.9999411148037841	WITHOUT_CLASSIFICATION	5.888519621593445E-5	TEST
// at this point we have (drivingSqlAlias) the SQL alias of the driving table // corresponding to the given user alias.  However, the driving table is not // (necessarily) the table against which we want to apply locks.  Mainly, // the exception case here is joined-subclass hierarchies where we instead // want to apply the lock against the root table (for all other strategies, // it just happens that driving and root are the same).	WITHOUT_CLASSIFICATION	0.9999999968564396	WITHOUT_CLASSIFICATION	3.143560444745907E-9	TEST
// the column doesnt exist at all.	WITHOUT_CLASSIFICATION	0.9999965184986993	WITHOUT_CLASSIFICATION	3.4815013007001414E-6	TEST
// we have a mapped identifier property and the root of // the incoming property path matched that identifier // property	WITHOUT_CLASSIFICATION	0.9999996957996261	WITHOUT_CLASSIFICATION	3.0420037379744707E-7	TEST
// we have an embedded composite identifier	WITHOUT_CLASSIFICATION	0.9999995808078815	WITHOUT_CLASSIFICATION	4.1919211846297126E-7	TEST
// both many-to-one and one-to-one are represented as a // Property.  EntityPersister is relying on this value to // determine "lazy fetch groups" in terms of field-level // interception.  So we need to make sure that we return // true here for the case of many-to-one and one-to-one // with lazy="no-proxy" // // * impl note - lazy="no-proxy" currently forces both // lazy and unwrap to be set to true.  The other case we // are extremely interested in here is that of lazy="proxy" // where lazy is set to true, but unwrap is set to false. // thus we use both here under the assumption that this // return is really only ever used during persister // construction to determine the lazy property/field fetch // groupings.  If that assertion changes then this check // needs to change as well.  Partially, this is an issue with // the overloading of the term "lazy" here...	WITHOUT_CLASSIFICATION	0.9999999717345005	WITHOUT_CLASSIFICATION	2.8265499379851335E-8	TEST
// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ // stuff that is tuplizer-centric, but is passed a session ~~~~~~~~~~~~~~~~ // ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.999997447804814	WITHOUT_CLASSIFICATION	2.5521951858312926E-6	TEST
// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ // stuff that is tuplizer-centric, but is passed a session ~~~~~~~~~~~~~~~~ // ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.999997447804814	WITHOUT_CLASSIFICATION	2.5521951858312926E-6	TEST
/*rootTableName = persistentClass.getRootTable().getQualifiedName( 	WITHOUT_CLASSIFICATION	0.9999678395470939	WITHOUT_CLASSIFICATION	3.216045290610029E-5	TEST
// SUBCLASSES	WITHOUT_CLASSIFICATION	0.9999902765900089	WITHOUT_CLASSIFICATION	9.72340999112496E-6	TEST
// Custom sql	WITHOUT_CLASSIFICATION	0.9999947867635849	WITHOUT_CLASSIFICATION	5.213236415167729E-6	TEST
/*protected void initPropertyPaths(	WITHOUT_CLASSIFICATION	0.9999861319007507	WITHOUT_CLASSIFICATION	1.3868099249354312E-5	TEST
// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999398011200608	WITHOUT_CLASSIFICATION	6.019887993916417E-5	TEST
//Custom SQL (would be better if these were private)	WITHOUT_CLASSIFICATION	0.999892827003889	WITHOUT_CLASSIFICATION	1.0717299611100905E-4	TEST
// moved up from AbstractEntityPersister ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999972649514884	WITHOUT_CLASSIFICATION	2.7350485115213212E-6	TEST
// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999398011200608	WITHOUT_CLASSIFICATION	6.019887993916417E-5	TEST
// aliases for identifier ( alias.id ); skip if the entity defines a non-id property named 'id'	WITHOUT_CLASSIFICATION	0.9999998685670142	WITHOUT_CLASSIFICATION	1.314329858467185E-7	TEST
//decide which ResultSet to get the property value from:	WITHOUT_CLASSIFICATION	0.999972483417004	WITHOUT_CLASSIFICATION	2.7516582996074914E-5	TEST
//note: it is conceptually possible that a UserType could map null to //	WITHOUT_CLASSIFICATION	0.9999966727356919	WITHOUT_CLASSIFICATION	3.3272643081845664E-6	TEST
// the contract of EntityTuplizer.determineConcreteSubclassEntityName says that returning null // is an indication that the specified entity-name (this.getEntityName) should be used.	WITHOUT_CLASSIFICATION	0.9999997662778018	WITHOUT_CLASSIFICATION	2.337221982271662E-7	TEST
// Need to use the identifier type of the collection owner // since the incoming is value is actually the owner's id. // Using the collection's key type causes problems with // property-ref keys...	WITHOUT_CLASSIFICATION	0.9999975185926483	WITHOUT_CLASSIFICATION	2.481407351580096E-6	TEST
// cache these since they are stateless // this one could even be static...	WITHOUT_CLASSIFICATION	0.9999993291017437	WITHOUT_CLASSIFICATION	6.708982563060754E-7	TEST
//"as" is not in KEYWORDS	WITHOUT_CLASSIFICATION	0.9999474100587205	WITHOUT_CLASSIFICATION	5.258994127950038E-5	TEST
// --Commented out by Inspection (12/4/04 9:10 AM): public abstract void addCondition(String alias, String[] columns, String condition);	WITHOUT_CLASSIFICATION	0.9999999880560159	WITHOUT_CLASSIFICATION	1.1943984162961477E-8	TEST
//use the id column alias	WITHOUT_CLASSIFICATION	0.9999966207823472	WITHOUT_CLASSIFICATION	3.379217652733076E-6	TEST
//private List aliases = new ArrayList();	WITHOUT_CLASSIFICATION	0.9999932018934757	WITHOUT_CLASSIFICATION	6.7981065242898925E-6	TEST
//columns.add(columnName); //aliases.add(tableAlias);	WITHOUT_CLASSIFICATION	0.9999958496096163	WITHOUT_CLASSIFICATION	4.15039038374424E-6	TEST
//where fragment must be empty!	WITHOUT_CLASSIFICATION	0.9999949267663574	WITHOUT_CLASSIFICATION	5.073233642627757E-6	TEST
// revert to traditional hibernate behavior of setting initialPoolSize to minPoolSize // unless otherwise specified with a c3p0.*-style parameter.	WITHOUT_CLASSIFICATION	0.9999998502738959	WITHOUT_CLASSIFICATION	1.497261040104028E-7	TEST
//arbitrary on clause ignored!!	WITHOUT_CLASSIFICATION	0.9999989038705447	WITHOUT_CLASSIFICATION	1.09612945532251E-6	TEST
// might happen with a managed connection	WITHOUT_CLASSIFICATION	0.9999987935242424	WITHOUT_CLASSIFICATION	1.2064757576291761E-6	TEST
// might happen with a managed connection	WITHOUT_CLASSIFICATION	0.9999987935242424	WITHOUT_CLASSIFICATION	1.2064757576291761E-6	TEST
//if an exception occurs during flush, user must call rollback()	WITHOUT_CLASSIFICATION	0.9999998449224259	WITHOUT_CLASSIFICATION	1.5507757408469908E-7	TEST
// Essentially: // 1) If we have a local (Hibernate) transaction in progress //      and it already has the UserTransaction cached, use that //      UserTransaction to determine the status. // 2) If a transaction manager has been located, use //      that transaction manager to determine the status. // 3) Finally, as the last resort, try to lookup the //      UserTransaction via JNDI and use that to determine the //      status.	WITHOUT_CLASSIFICATION	0.9999999627386755	WITHOUT_CLASSIFICATION	3.7261324532227325E-8	TEST
/*package*/	WITHOUT_CLASSIFICATION	0.9999753172071789	WITHOUT_CLASSIFICATION	2.4682792821087808E-5	TEST
//swallow it (the transaction _was_ successful or successfully rolled back)	WITHOUT_CLASSIFICATION	0.9999921761833872	WITHOUT_CLASSIFICATION	7.823816612834222E-6	TEST
// ignore it	WITHOUT_CLASSIFICATION	0.9999976242309284	WITHOUT_CLASSIFICATION	2.3757690715110733E-6	TEST
// we need to dirty check many-to-ones with not-found="ignore" in order  // to update the cache (not the database), since in this case a null // entity reference can lose information	WITHOUT_CLASSIFICATION	0.9999999235855115	WITHOUT_CLASSIFICATION	7.641448850707165E-8	TEST
// create our own copy of the user-supplied tuplizer impl map	WITHOUT_CLASSIFICATION	0.9999996345486742	WITHOUT_CLASSIFICATION	3.6545132581851755E-7	TEST
// Regions can get instantiated in the course of normal work (e.g. // a named query region will be created the first time the query is // executed), so suspend any ongoing tx	WITHOUT_CLASSIFICATION	0.9999999914338387	WITHOUT_CLASSIFICATION	8.566161318856047E-9	TEST
// then handle any user-defined entity modes...	WITHOUT_CLASSIFICATION	0.9999991237382576	WITHOUT_CLASSIFICATION	8.762617423340517E-7	TEST
// Establish the region root node with a non-locking data version	WITHOUT_CLASSIFICATION	0.999999842006298	WITHOUT_CLASSIFICATION	1.5799370197011295E-7	TEST
// temporary ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999919604237504	WITHOUT_CLASSIFICATION	8.039576249586282E-6	TEST
// NOTE : this is being used from the process of shutting down a // SessionFactory. Specific things to consider: // (1) this clearing of the region should not propagate to // other nodes on the cluster (if any); this is the // cache-mode-local option bit... // (2) really just trying a best effort to cleanup after // ourselves; lock failures, etc are not critical here; // this is the fail-silently option bit...	WITHOUT_CLASSIFICATION	0.9999994423668733	WITHOUT_CLASSIFICATION	5.576331267484022E-7	TEST
// need to extract the component values and check for subtype replacements...	WITHOUT_CLASSIFICATION	0.9999998340857451	WITHOUT_CLASSIFICATION	1.65914254896379E-7	TEST
// We ignore minimalPutOverride. JBossCache putForExternalRead is // already about as minimal as we can get; it will promptly return // if it discovers that the node we want to write to already exists	WITHOUT_CLASSIFICATION	0.9999999769993906	WITHOUT_CLASSIFICATION	2.3000609399199054E-8	TEST
// for now, just "re-flatten" the metamodel since this is temporary stuff anyway (HHH-1907)	WITHOUT_CLASSIFICATION	0.9999983487664278	WITHOUT_CLASSIFICATION	1.651233572295708E-6	TEST
// Configure the cache to use our TM	WITHOUT_CLASSIFICATION	0.9999990290104444	WITHOUT_CLASSIFICATION	9.709895557104978E-7	TEST
//This solution would allow us to eliminate the owner arg to disassemble(), but //what if the collection was null, and then later had elements added? seems unsafe //session.getPersistenceContext().getCollectionEntry( (PersistentCollection) value ).getKey();	WITHOUT_CLASSIFICATION	0.9999995204844194	WITHOUT_CLASSIFICATION	4.795155805858496E-7	TEST
// Make sure JBC doesn't look one up	WITHOUT_CLASSIFICATION	0.9999978422767158	WITHOUT_CLASSIFICATION	2.157723284178552E-6	TEST
// some collections are not lazy:	WITHOUT_CLASSIFICATION	0.9999998294948839	WITHOUT_CLASSIFICATION	1.7050511615333427E-7	TEST
// Here we don't want to suspend the tx. If we do: // 1) We might be caching query results that reflect uncommitted // changes. No tx == no WL on cache node, so other threads // can prematurely see those query results // 2) No tx == immediate replication. More overhead, plus we // spread issue #1 above around the cluster	WITHOUT_CLASSIFICATION	0.9999996387775707	WITHOUT_CLASSIFICATION	3.6122242924508615E-7	TEST
// return the (fully resolved) identifier value, but do not resolve // to the actual referenced entity instance // NOTE: the owner of the association is not really the owner of the id!	WITHOUT_CLASSIFICATION	0.9999987623883634	WITHOUT_CLASSIFICATION	1.237611636547666E-6	TEST
// Add a zero (or quite low) timeout option so we don't block. // Ignore any TimeoutException. Basically we forego caching the // query result in order to avoid blocking. // Reads are done with suspended tx, so they should not hold the // lock for long.  Not caching the query result is OK, since // any subsequent read will just see the old result with its // out-of-date timestamp; that result will be discarded and the // db query performed again.	WITHOUT_CLASSIFICATION	0.9999998445591703	WITHOUT_CLASSIFICATION	1.5544082960980277E-7	TEST
// Impl note: takes advantage of the fact that an escpaed single quote // embedded within a quote-block can really be handled as two seperate // quote-blocks for the purposes of this method...	WITHOUT_CLASSIFICATION	0.9999992880074208	WITHOUT_CLASSIFICATION	7.119925790994908E-7	TEST
// We have the JBCWriteMutex, so no other *local* thread will  // be trying to write this key.  // It's possible here some remote thread has come in and // changed the values again, but since we are reading the // values to write to JBC right now, we know we are writing // the latest values; i.e. we don't assume that what we cached // in entry.update() above is what we should write to JBC *now*. // Our write could be redundant, i.e. we are writing what // some remote thread just came in an wrote.  There is a chance  // that yet another remote thread will update us, and we'll then // overwrite that later data in JBC.  But, all remote nodes will // ignore that change in their localCache; the only place it  // will live will be in JBC, where it can only effect the  // initial state transfer values on newly joined nodes  // (i.e. populateLocalCache()).	WITHOUT_CLASSIFICATION	0.9999997409017854	WITHOUT_CLASSIFICATION	2.590982145515387E-7	TEST
// local cache, so we use synchronization	WITHOUT_CLASSIFICATION	0.9999998522814585	WITHOUT_CLASSIFICATION	1.4771854150405684E-7	TEST
// local cache, so we use synchronization	WITHOUT_CLASSIFICATION	0.9999998522814585	WITHOUT_CLASSIFICATION	1.4771854150405684E-7	TEST
// Don't need to lock the cache here, since if someone // else inserted the same pk first, the insert would fail	WITHOUT_CLASSIFICATION	0.9999996893193962	WITHOUT_CLASSIFICATION	3.1068060377147193E-7	TEST
// we need to grab the version value from the entity, otherwise // we have issues with generated-version entities that may have // multiple actions queued during the same flush	WITHOUT_CLASSIFICATION	0.9999997415669117	WITHOUT_CLASSIFICATION	2.584330882703388E-7	TEST
// we need to obtain the lock before any actions are // executed, since this may be an inverse="true" // bidirectional association and it is one of the // earlier entity actions which actually updates // the database (this action is resposible for // second-level cache invalidation only)	WITHOUT_CLASSIFICATION	0.9999999567838506	WITHOUT_CLASSIFICATION	4.3216149405823106E-8	TEST
//postDelete: // After actually deleting a row, record the fact that the instance no longer  // exists on the database (needed for identity-column key generation), and // remove it from the session cache	WITHOUT_CLASSIFICATION	0.9999999663296267	WITHOUT_CLASSIFICATION	3.3670373354450075E-8	TEST
// intentionally empty	WITHOUT_CLASSIFICATION	0.9999979935046034	WITHOUT_CLASSIFICATION	2.006495396559204E-6	TEST
