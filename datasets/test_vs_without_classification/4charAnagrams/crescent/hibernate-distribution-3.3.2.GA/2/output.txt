//test out the optimizer:	WITHOUT_CLASSIFICATION	0.9998361597461072	WITHOUT_CLASSIFICATION	1.638402538927646E-4	TEST
// aload_0	WITHOUT_CLASSIFICATION	0.9999899966212413	WITHOUT_CLASSIFICATION	1.0003378758623468E-5	TEST
// aload_0	WITHOUT_CLASSIFICATION	0.9999899966212413	WITHOUT_CLASSIFICATION	1.0003378758623468E-5	TEST
// aload_0	WITHOUT_CLASSIFICATION	0.9999899966212413	WITHOUT_CLASSIFICATION	1.0003378758623468E-5	TEST
// aload_0	WITHOUT_CLASSIFICATION	0.9999899966212413	WITHOUT_CLASSIFICATION	1.0003378758623468E-5	TEST
// aload_0	WITHOUT_CLASSIFICATION	0.9999899966212413	WITHOUT_CLASSIFICATION	1.0003378758623468E-5	TEST
// aload_0	WITHOUT_CLASSIFICATION	0.9999899966212413	WITHOUT_CLASSIFICATION	1.0003378758623468E-5	TEST
// aload_0	WITHOUT_CLASSIFICATION	0.9999899966212413	WITHOUT_CLASSIFICATION	1.0003378758623468E-5	TEST
// return	WITHOUT_CLASSIFICATION	0.9999946420164448	WITHOUT_CLASSIFICATION	5.35798355515929E-6	TEST
// return	WITHOUT_CLASSIFICATION	0.9999946420164448	WITHOUT_CLASSIFICATION	5.35798355515929E-6	TEST
/* | this | bean | args | raw bean | */	WITHOUT_CLASSIFICATION	0.9999908030369116	WITHOUT_CLASSIFICATION	9.196963088518606E-6	TEST
// invokeinterface	WITHOUT_CLASSIFICATION	0.999995609798266	WITHOUT_CLASSIFICATION	4.390201734110299E-6	TEST
// astore 4 // store the raw bean	WITHOUT_CLASSIFICATION	0.999994248265256	WITHOUT_CLASSIFICATION	5.751734744005541E-6	TEST
/* current stack len = 0 */	WITHOUT_CLASSIFICATION	0.99999833664418	WITHOUT_CLASSIFICATION	1.663355819994063E-6	TEST
/* current stack len = 0 */	WITHOUT_CLASSIFICATION	0.99999833664418	WITHOUT_CLASSIFICATION	1.663355819994063E-6	TEST
/* local variables | target obj | each oldvalue | */	WITHOUT_CLASSIFICATION	0.9999984748959392	WITHOUT_CLASSIFICATION	1.5251040608269008E-6	TEST
// invokeinterface // invoke Enabled.getInterceptFieldCallback()	WITHOUT_CLASSIFICATION	0.9999983536130207	WITHOUT_CLASSIFICATION	1.6463869792188787E-6	TEST
// putfield // new value of the field	WITHOUT_CLASSIFICATION	0.9999630004787488	WITHOUT_CLASSIFICATION	3.699952125124822E-5	TEST
// reference type	WITHOUT_CLASSIFICATION	0.9999952276456859	WITHOUT_CLASSIFICATION	4.772354314047559E-6	TEST
// double	WITHOUT_CLASSIFICATION	0.9999924254625313	WITHOUT_CLASSIFICATION	7.574537468728514E-6	TEST
// double	WITHOUT_CLASSIFICATION	0.9999924254625313	WITHOUT_CLASSIFICATION	7.574537468728514E-6	TEST
// long	WITHOUT_CLASSIFICATION	0.9999892283983975	WITHOUT_CLASSIFICATION	1.077160160238685E-5	TEST
// just decrement the lock, don't recache // (we don't know which transaction won)	WITHOUT_CLASSIFICATION	0.9999998563502012	WITHOUT_CLASSIFICATION	1.4364979885360574E-7	TEST
// decode row selection...	WITHOUT_CLASSIFICATION	0.9999991389648635	WITHOUT_CLASSIFICATION	8.61035136491602E-7	TEST
//disassembled state gets put in a new array (we write to cache by value!)	WITHOUT_CLASSIFICATION	0.9999995888993075	WITHOUT_CLASSIFICATION	4.1110069252131203E-7	TEST
// again, CCS did not have such a concept; but a reasonable // proximity is to clear the cache after transaction *as long as* // the underlying cache is not JTA aware.	WITHOUT_CLASSIFICATION	0.9999999890802624	WITHOUT_CLASSIFICATION	1.0919737505475633E-8	TEST
// CHECK	WITHOUT_CLASSIFICATION	0.999973641975086	WITHOUT_CLASSIFICATION	2.6358024914142032E-5	TEST
// ROW ID	WITHOUT_CLASSIFICATION	0.9999733400070135	WITHOUT_CLASSIFICATION	2.6659992986425738E-5	TEST
// COMPOSITE-ID	WITHOUT_CLASSIFICATION	0.999970799178562	WITHOUT_CLASSIFICATION	2.9200821437959325E-5	TEST
// DISCRIMINATOR	WITHOUT_CLASSIFICATION	0.9999609260970128	WITHOUT_CLASSIFICATION	3.9073902987278473E-5	TEST
/*	WITHOUT_CLASSIFICATION	0.9998809807601161	WITHOUT_CLASSIFICATION	1.1901923988389276E-4	TEST
// DYNAMIC INSERT	WITHOUT_CLASSIFICATION	0.9999665137673893	WITHOUT_CLASSIFICATION	3.348623261070171E-5	TEST
// PERSISTER	WITHOUT_CLASSIFICATION	0.9999606893785571	WITHOUT_CLASSIFICATION	3.9310621442957676E-5	TEST
// get meta's from <subclass>	WITHOUT_CLASSIFICATION	0.9999970424382932	WITHOUT_CLASSIFICATION	2.957561706732716E-6	TEST
// PROPERTIES	WITHOUT_CLASSIFICATION	0.9999599904146367	WITHOUT_CLASSIFICATION	4.000958536334009E-5	TEST
// PROPERTIES	WITHOUT_CLASSIFICATION	0.9999599904146367	WITHOUT_CLASSIFICATION	4.000958536334009E-5	TEST
// generated properties can *never* be insertable...	WITHOUT_CLASSIFICATION	0.9999996204544436	WITHOUT_CLASSIFICATION	3.795455564256183E-7	TEST
// TABLE	WITHOUT_CLASSIFICATION	0.9999825838459744	WITHOUT_CLASSIFICATION	1.7416154025564686E-5	TEST
//by default, natural-ids are "immutable" (constant)	WITHOUT_CLASSIFICATION	0.9999993334733015	WITHOUT_CLASSIFICATION	6.665266985488224E-7	TEST
// ( (Column) ( (SimpleValue) ic.getIndex() ).getColumnIterator().next() // ).setNullable(false);	WITHOUT_CLASSIFICATION	0.9999998237579921	WITHOUT_CLASSIFICATION	1.7624200798285965E-7	TEST
// we found some extends attributes referencing entities which were // not already processed.  here we need to locate all entity-names // and class-names contained in this document itself, making sure // that these get removed from the extendz list such that only // extends names which require us to delay processing (i.e. // external to this document and not yet processed) are contained // in the returned result	WITHOUT_CLASSIFICATION	0.999999998910203	WITHOUT_CLASSIFICATION	1.0897969502400025E-9	TEST
/**	WITHOUT_CLASSIFICATION	0.9998127295896668	WITHOUT_CLASSIFICATION	1.8727041033325122E-4	TEST
//	WITHOUT_CLASSIFICATION	0.999864478982662	WITHOUT_CLASSIFICATION	1.3552101733804665E-4	TEST
//	WITHOUT_CLASSIFICATION	0.999864478982662	WITHOUT_CLASSIFICATION	1.3552101733804665E-4	TEST
/**	WITHOUT_CLASSIFICATION	0.9998127295896668	WITHOUT_CLASSIFICATION	1.8727041033325122E-4	TEST
//	WITHOUT_CLASSIFICATION	0.999864478982662	WITHOUT_CLASSIFICATION	1.3552101733804665E-4	TEST
// If close() is called, guarantee unbind()	WITHOUT_CLASSIFICATION	0.9999973873250052	WITHOUT_CLASSIFICATION	2.6126749947214515E-6	TEST
// if a ThreadLocalSessionContext-bound session happens to get // serialized, to be completely correct, we need to make sure // that unbinding of that session occurs.	WITHOUT_CLASSIFICATION	0.9999999901303899	WITHOUT_CLASSIFICATION	9.869610095809198E-9	TEST
// on the inverse, it makes sense that if a ThreadLocalSessionContext- // bound session then gets deserialized to go ahead and re-bind it to // the ThreadLocalSessionContext session map.	WITHOUT_CLASSIFICATION	0.9999999831776331	WITHOUT_CLASSIFICATION	1.6822366927708217E-8	TEST
//cannot be instantiated	WITHOUT_CLASSIFICATION	0.9999180767846997	WITHOUT_CLASSIFICATION	8.192321530028843E-5	TEST
// 60 second lock timeout	WITHOUT_CLASSIFICATION	0.9999975958584738	WITHOUT_CLASSIFICATION	2.404141526290542E-6	TEST
// OptimisticCache impl ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999912874872281	WITHOUT_CLASSIFICATION	8.71251277183565E-6	TEST
// Cache impl ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999874468058237	WITHOUT_CLASSIFICATION	1.2553194176371788E-5	TEST
//	WITHOUT_CLASSIFICATION	0.999864478982662	WITHOUT_CLASSIFICATION	1.3552101733804665E-4	TEST
// do the put outside the scope of the JTA txn	WITHOUT_CLASSIFICATION	0.9999943991593395	WITHOUT_CLASSIFICATION	5.600840660484891E-6	TEST
//ignore!	WITHOUT_CLASSIFICATION	0.9999521102858253	WITHOUT_CLASSIFICATION	4.788971417476882E-5	TEST
// tree cache in optimistic mode seems to have as very difficult // time with remove calls on non-existent nodes (NPEs)...	WITHOUT_CLASSIFICATION	0.9999999864385595	WITHOUT_CLASSIFICATION	1.3561440543421703E-8	TEST
//60 seconds	WITHOUT_CLASSIFICATION	0.9999570937285971	WITHOUT_CLASSIFICATION	4.290627140300753E-5	TEST
//ignore!	WITHOUT_CLASSIFICATION	0.9999521102858253	WITHOUT_CLASSIFICATION	4.788971417476882E-5	TEST
//60 seconds	WITHOUT_CLASSIFICATION	0.9999570937285971	WITHOUT_CLASSIFICATION	4.290627140300753E-5	TEST
//do the failfast put outside the scope of the JTA txn	WITHOUT_CLASSIFICATION	0.9999892641749105	WITHOUT_CLASSIFICATION	1.0735825089493993E-5	TEST
// NOTE : evict() operates locally only (i.e., does not propogate // to any other nodes in the potential cluster).  This is // exactly what is needed when we destroy() here; destroy() is used // as part of the process of shutting down a SessionFactory; thus // these removals should not be propogated	WITHOUT_CLASSIFICATION	0.9999997494773779	WITHOUT_CLASSIFICATION	2.505226221051181E-7	TEST
//    protected RegionRootListener listener;	WITHOUT_CLASSIFICATION	0.9999925396853856	WITHOUT_CLASSIFICATION	7.460314614341348E-6	TEST
// Establish the region root node with a non-locking data version	WITHOUT_CLASSIFICATION	0.9999997968200854	WITHOUT_CLASSIFICATION	2.031799146846879E-7	TEST
// If we've been blocking for the mutex, perhaps another // thread has already reestablished the root. // In case the node was reestablised via replication, confirm it's  // marked "resident" (a status which doesn't replicate)	WITHOUT_CLASSIFICATION	0.9999999300014939	WITHOUT_CLASSIFICATION	6.99985061113355E-8	TEST
// For pessimistic locking, we just want to toss out our ref // to any old invalid root node and get the latest (may be null)            	WITHOUT_CLASSIFICATION	0.9999996088662916	WITHOUT_CLASSIFICATION	3.9113370843536116E-7	TEST
// The rest only matters for optimistic locking, where we // need to establish the proper data version on the region root	WITHOUT_CLASSIFICATION	0.9999983672548479	WITHOUT_CLASSIFICATION	1.6327451521087996E-6	TEST
// Don't hold a transactional lock for this 	WITHOUT_CLASSIFICATION	0.9999933618461297	WITHOUT_CLASSIFICATION	6.638153870308331E-6	TEST
// Make sure the root node for the region exists and  // has a DataVersion that never complains	WITHOUT_CLASSIFICATION	0.9999998084998335	WITHOUT_CLASSIFICATION	1.9150016654288486E-7	TEST
// Never evict this node	WITHOUT_CLASSIFICATION	0.9999807213749674	WITHOUT_CLASSIFICATION	1.9278625032588597E-5	TEST
// Fix up the resident flag	WITHOUT_CLASSIFICATION	0.9999961028592211	WITHOUT_CLASSIFICATION	3.897140778921146E-6	TEST
// 60 seconds	WITHOUT_CLASSIFICATION	0.9999894247682823	WITHOUT_CLASSIFICATION	1.05752317177268E-5	TEST
// We ignore minimalPutOverride. JBossCache putForExternalRead is // already about as minimal as we can get; it will promptly return // if it discovers that the node we want to write to already exists	WITHOUT_CLASSIFICATION	0.9999999813211353	WITHOUT_CLASSIFICATION	1.86788646402883E-8	TEST
// no-op. We don't own the cache so we shouldn't stop it.	WITHOUT_CLASSIFICATION	0.9999988885306405	WITHOUT_CLASSIFICATION	1.1114693595110984E-6	TEST
// This should only be possible if the caches are constructor injected 	WITHOUT_CLASSIFICATION	0.9999985725920102	WITHOUT_CLASSIFICATION	1.4274079897079662E-6	TEST
// We only build caches if *none* were passed in.  Passing in // caches counts as a clear statement of exactly what is wanted	WITHOUT_CLASSIFICATION	0.9999999223644194	WITHOUT_CLASSIFICATION	7.763558063744826E-8	TEST
// Set up the cache factory	WITHOUT_CLASSIFICATION	0.9999943056210457	WITHOUT_CLASSIFICATION	5.694378954256847E-6	TEST
// See if the user configured a multiplexer stack	WITHOUT_CLASSIFICATION	0.9999990712353907	WITHOUT_CLASSIFICATION	9.287646093761136E-7	TEST
// Default to collections sharing entity cache if there is one	WITHOUT_CLASSIFICATION	0.9999999079731184	WITHOUT_CLASSIFICATION	9.202688165179664E-8	TEST
// Default to sharing the entity cache if there is one	WITHOUT_CLASSIFICATION	0.9999997562951358	WITHOUT_CLASSIFICATION	2.4370486417144657E-7	TEST
// For Timestamps, we default to a separate config	WITHOUT_CLASSIFICATION	0.9999996101427547	WITHOUT_CLASSIFICATION	3.898572451766298E-7	TEST
// We can't change the TM on a running cache; just check // if the cache has no TM and we're OK with that	WITHOUT_CLASSIFICATION	0.999999863911044	WITHOUT_CLASSIFICATION	1.3608895604873576E-7	TEST
// Configure the cache to use our TM	WITHOUT_CLASSIFICATION	0.9999989387601482	WITHOUT_CLASSIFICATION	1.0612398517299539E-6	TEST
// Make sure JBC doesn't look one up	WITHOUT_CLASSIFICATION	0.9999981207362136	WITHOUT_CLASSIFICATION	1.8792637863113787E-6	TEST
// This method should be implemented assuming it's valid to  // do start/stop/start -- leave state appropriate for another start	WITHOUT_CLASSIFICATION	0.9999995586095134	WITHOUT_CLASSIFICATION	4.413904866973973E-7	TEST
// Make sure we don't re-release the same cache	WITHOUT_CLASSIFICATION	0.9999994622550819	WITHOUT_CLASSIFICATION	5.377449181544931E-7	TEST
// We use a different delegate than the non-optimistic superclass default	WITHOUT_CLASSIFICATION	0.9999998924077969	WITHOUT_CLASSIFICATION	1.0759220306731499E-7	TEST
// Following methods we don't delegate since they have so little logic // it's clearer to just implement them here	WITHOUT_CLASSIFICATION	0.99999995862706	WITHOUT_CLASSIFICATION	4.137293994700409E-8	TEST
// If JBC is using INVALIDATION, we don't want to propagate changes. // We use the Timestamps cache to manage invalidation	WITHOUT_CLASSIFICATION	0.9999999355897512	WITHOUT_CLASSIFICATION	6.441024883847439E-8	TEST
// We don't want to waste effort setting an option if JBC is // already in LOCAL mode. If JBC is REPL_(A)SYNC then check // if they passed an config option to disable query replication	WITHOUT_CLASSIFICATION	0.9999999842989747	WITHOUT_CLASSIFICATION	1.5701025198502314E-8	TEST
// Don't hold the JBC node lock throughout the tx, as that // prevents updates // Add a zero (or low) timeout option so we don't block // waiting for tx's that did a put to commit	WITHOUT_CLASSIFICATION	0.99999997604567	WITHOUT_CLASSIFICATION	2.3954329917077807E-8	TEST
// Double check the distributed cache	WITHOUT_CLASSIFICATION	0.9999963258382446	WITHOUT_CLASSIFICATION	3.6741617554216947E-6	TEST
// Get an exclusive right to update JBC for this key from this node.	WITHOUT_CLASSIFICATION	0.9999998521664474	WITHOUT_CLASSIFICATION	1.4783355262755505E-7	TEST
// We ensure ASYNC semantics (JBCACHE-1175)	WITHOUT_CLASSIFICATION	0.9999991512441698	WITHOUT_CLASSIFICATION	8.487558301323521E-7	TEST
// Initial load from JBC	WITHOUT_CLASSIFICATION	0.9999941956322351	WITHOUT_CLASSIFICATION	5.804367764927744E-6	TEST
// See if we had a 2nd invalidation from the same initial // preinvalidation timestamp. If so, only increment // if the new current value is an increase	WITHOUT_CLASSIFICATION	0.999999955505791	WITHOUT_CLASSIFICATION	4.449420904141707E-8	TEST
// We ensure ASYNC semantics (JBCACHE-1175)	WITHOUT_CLASSIFICATION	0.9999991512441698	WITHOUT_CLASSIFICATION	8.487558301323521E-7	TEST
// If the workspace node has null as well, OK; if not we've // been modified in a non-comparable manner, which we have to // treat as us being newer	WITHOUT_CLASSIFICATION	0.9999999623674545	WITHOUT_CLASSIFICATION	3.763254548450572E-8	TEST
// The standard comparator types are not Serializable but are singletons	WITHOUT_CLASSIFICATION	0.9999998246910122	WITHOUT_CLASSIFICATION	1.7530898778514849E-7	TEST
// ignore!	WITHOUT_CLASSIFICATION	0.9999940542669511	WITHOUT_CLASSIFICATION	5.945733048935706E-6	TEST
// ignore it	WITHOUT_CLASSIFICATION	0.9999932979081121	WITHOUT_CLASSIFICATION	6.702091887869724E-6	TEST
// construct the cache	WITHOUT_CLASSIFICATION	0.9999966658170828	WITHOUT_CLASSIFICATION	3.3341829173271766E-6	TEST
// local cache, so we use synchronization	WITHOUT_CLASSIFICATION	0.999999594647436	WITHOUT_CLASSIFICATION	4.0535256391372286E-7	TEST
// local cache, so we use synchronization	WITHOUT_CLASSIFICATION	0.999999594647436	WITHOUT_CLASSIFICATION	4.0535256391372286E-7	TEST
//ie. 60 seconds	WITHOUT_CLASSIFICATION	0.9999686993200133	WITHOUT_CLASSIFICATION	3.1300679986698895E-5	TEST
//swaldman 2006-08-28: define c3p0-style configuration parameters for initialPoolSize, which //                     hibernate sensibly lets default to minPoolSize, but we'll let users //                     override it with the c3p0-style property if they want.	WITHOUT_CLASSIFICATION	0.9999999927616084	WITHOUT_CLASSIFICATION	7.238391537498933E-9	TEST
/*DataSource unpooled = DataSources.unpooledDataSource(	WITHOUT_CLASSIFICATION	0.9999892013364554	WITHOUT_CLASSIFICATION	1.079866354450983E-5	TEST
// TRUE if the pool is borrowed from the outside, FALSE if we used to create it	WITHOUT_CLASSIFICATION	0.9999990452858658	WITHOUT_CLASSIFICATION	9.547141341304356E-7	TEST
// get a connection from the pool (thru DriverManager, cfr. Proxool doc)	WITHOUT_CLASSIFICATION	0.999999733775131	WITHOUT_CLASSIFICATION	2.6622486909998757E-7	TEST
// set the Transaction Isolation if defined	WITHOUT_CLASSIFICATION	0.9999983376852181	WITHOUT_CLASSIFICATION	1.6623147820229559E-6	TEST
// toggle autoCommit to false if set	WITHOUT_CLASSIFICATION	0.9999969528304601	WITHOUT_CLASSIFICATION	3.0471695399066564E-6	TEST
// return the connection	WITHOUT_CLASSIFICATION	0.9999974989928663	WITHOUT_CLASSIFICATION	2.501007133826428E-6	TEST
// Get the configurator files (if available)	WITHOUT_CLASSIFICATION	0.9999987317062803	WITHOUT_CLASSIFICATION	1.2682937196873018E-6	TEST
// Default the Proxool alias setting	WITHOUT_CLASSIFICATION	0.9999982133196894	WITHOUT_CLASSIFICATION	1.7866803106548523E-6	TEST
// Validate that an alias name was provided to determine which pool to use	WITHOUT_CLASSIFICATION	0.9999998074691314	WITHOUT_CLASSIFICATION	1.9253086867247175E-7	TEST
// Validate that an alias name was provided to determine which pool to use	WITHOUT_CLASSIFICATION	0.9999998074691314	WITHOUT_CLASSIFICATION	1.9253086867247175E-7	TEST
// Append the stem to the proxool pool alias	WITHOUT_CLASSIFICATION	0.9999963356094406	WITHOUT_CLASSIFICATION	3.6643905595198887E-6	TEST
// Set the existing pool flag to true	WITHOUT_CLASSIFICATION	0.9999982289721076	WITHOUT_CLASSIFICATION	1.771027892480143E-6	TEST
// Configured using the JAXP Configurator	WITHOUT_CLASSIFICATION	0.9999966177430447	WITHOUT_CLASSIFICATION	3.382256955312159E-6	TEST
// Validate that an alias name was provided to determine which pool to use	WITHOUT_CLASSIFICATION	0.9999998074691314	WITHOUT_CLASSIFICATION	1.9253086867247175E-7	TEST
// Append the stem to the proxool pool alias	WITHOUT_CLASSIFICATION	0.9999963356094406	WITHOUT_CLASSIFICATION	3.6643905595198887E-6	TEST
// Append the stem to the proxool pool alias	WITHOUT_CLASSIFICATION	0.9999963356094406	WITHOUT_CLASSIFICATION	3.6643905595198887E-6	TEST
// Configured using the Properties File Configurator	WITHOUT_CLASSIFICATION	0.9999984468452798	WITHOUT_CLASSIFICATION	1.5531547201512336E-6	TEST
// Remember Isolation level	WITHOUT_CLASSIFICATION	0.9999987548008313	WITHOUT_CLASSIFICATION	1.2451991686489453E-6	TEST
// If the provider was leeching off an existing pool don't close it	WITHOUT_CLASSIFICATION	0.9999994990780401	WITHOUT_CLASSIFICATION	5.009219599633889E-7	TEST
// We have created the pool ourselves, so shut it down	WITHOUT_CLASSIFICATION	0.9999943412955603	WITHOUT_CLASSIFICATION	5.658704439707895E-6	TEST
// not really a many-to-one association *necessarily*	WITHOUT_CLASSIFICATION	0.9999999174371487	WITHOUT_CLASSIFICATION	8.25628514082752E-8	TEST
// not really a many-to-one association *necessarily*	WITHOUT_CLASSIFICATION	0.9999999174371487	WITHOUT_CLASSIFICATION	8.25628514082752E-8	TEST
//always overwrite nonversioned data	WITHOUT_CLASSIFICATION	0.9999922369300256	WITHOUT_CLASSIFICATION	7.763069974323268E-6	TEST
//public Currency getCurrency(int col) throws HibernateException;	WITHOUT_CLASSIFICATION	0.9999983173558149	WITHOUT_CLASSIFICATION	1.682644185065842E-6	TEST
// default is POJO	WITHOUT_CLASSIFICATION	0.9999907297028793	WITHOUT_CLASSIFICATION	9.270297120806416E-6	TEST
// use setParameter for null values	WITHOUT_CLASSIFICATION	0.9999961982532176	WITHOUT_CLASSIFICATION	3.8017467824010778E-6	TEST
// use setParameter for null values	WITHOUT_CLASSIFICATION	0.9999961982532176	WITHOUT_CLASSIFICATION	3.8017467824010778E-6	TEST
//private CacheEntry cacheEntry;	WITHOUT_CLASSIFICATION	0.9999921525124275	WITHOUT_CLASSIFICATION	7.847487572536998E-6	TEST
// Don't need to lock the cache here, since if someone // else inserted the same pk first, the insert would fail	WITHOUT_CLASSIFICATION	0.9999991172122376	WITHOUT_CLASSIFICATION	8.827877623597361E-7	TEST
//Make 100% certain that this is called before any subsequent ScheduledUpdate.afterTransactionCompletion()!!	WITHOUT_CLASSIFICATION	0.9999989477074905	WITHOUT_CLASSIFICATION	1.052292509418738E-6	TEST
// get the updated snapshot of the entity state by cloning current state; // it is safe to copy in place, since by this time no-one else (should have) // has a reference  to the array	WITHOUT_CLASSIFICATION	0.9999999761726093	WITHOUT_CLASSIFICATION	2.3827390752364324E-8	TEST
// this entity defines proeprty generation, so process those generated // values...	WITHOUT_CLASSIFICATION	0.9999998250043964	WITHOUT_CLASSIFICATION	1.749956035790302E-7	TEST
// have the entity entry perform post-update processing, passing it the // update state and the new version (if one).	WITHOUT_CLASSIFICATION	0.999999964205562	WITHOUT_CLASSIFICATION	3.579443796617257E-8	TEST
/*!persister.isCacheInvalidationRequired()*/	WITHOUT_CLASSIFICATION	0.9999954001364042	WITHOUT_CLASSIFICATION	4.5998635957540575E-6	TEST
// need to look it up from the persistence-context	WITHOUT_CLASSIFICATION	0.9999940675841592	WITHOUT_CLASSIFICATION	5.9324158407398105E-6	TEST
//sort first by role name	WITHOUT_CLASSIFICATION	0.9999708930983036	WITHOUT_CLASSIFICATION	2.910690169633619E-5	TEST
//Make 100% certain that this is called before any subsequent ScheduledUpdate.afterTransactionCompletion()!!	WITHOUT_CLASSIFICATION	0.9999989477074905	WITHOUT_CLASSIFICATION	1.052292509418738E-6	TEST
//then by fk	WITHOUT_CLASSIFICATION	0.9999163442301321	WITHOUT_CLASSIFICATION	8.3655769867908E-5	TEST
// nothing to do	WITHOUT_CLASSIFICATION	0.9999946780779999	WITHOUT_CLASSIFICATION	5.321922000167075E-6	TEST
// nothing to do	WITHOUT_CLASSIFICATION	0.9999946780779999	WITHOUT_CLASSIFICATION	5.321922000167075E-6	TEST
// an existing collection that was either non-empty or uninitialized // is replaced by null or a different collection // (if the collection is uninitialized, hibernate has no way of // knowing if the collection is actually empty without querying the db)	WITHOUT_CLASSIFICATION	0.999999990632513	WITHOUT_CLASSIFICATION	9.367486953153243E-9	TEST
// this method is called when a new non-null collection is persisted // or when an existing (non-null) collection is moved to a new owner	WITHOUT_CLASSIFICATION	0.9999998920074624	WITHOUT_CLASSIFICATION	1.0799253758802083E-7	TEST
//	WITHOUT_CLASSIFICATION	0.999864478982662	WITHOUT_CLASSIFICATION	1.3552101733804665E-4	TEST
// we need to grab the version value from the entity, otherwise // we have issues with generated-version entities that may have // multiple actions queued during the same flush	WITHOUT_CLASSIFICATION	0.9999999690920724	WITHOUT_CLASSIFICATION	3.0907927528165675E-8	TEST
//do nothing - we only need to notify the cache...	WITHOUT_CLASSIFICATION	0.9999950436488326	WITHOUT_CLASSIFICATION	4.956351167359486E-6	TEST
//sort first by entity name	WITHOUT_CLASSIFICATION	0.9999671876056891	WITHOUT_CLASSIFICATION	3.281239431073494E-5	TEST
//then by id	WITHOUT_CLASSIFICATION	0.9999389941278765	WITHOUT_CLASSIFICATION	6.1005872123649004E-5	TEST
// to be safe...	WITHOUT_CLASSIFICATION	0.9999902277823092	WITHOUT_CLASSIFICATION	9.77221769073355E-6	TEST
// no transformations took place, so handle it as we would a // non-instrumented class	WITHOUT_CLASSIFICATION	0.9999997619056649	WITHOUT_CLASSIFICATION	2.380943350801168E-7	TEST
// see if the entry represents a class file	WITHOUT_CLASSIFICATION	0.9999987438523149	WITHOUT_CLASSIFICATION	1.2561476851247828E-6	TEST
// see if the entry represents a class file	WITHOUT_CLASSIFICATION	0.9999987438523149	WITHOUT_CLASSIFICATION	1.2561476851247828E-6	TEST
// intentionally empty	WITHOUT_CLASSIFICATION	0.9999981422016773	WITHOUT_CLASSIFICATION	1.857798322720901E-6	TEST
//test out the optimizer:	WITHOUT_CLASSIFICATION	0.9998361597461072	WITHOUT_CLASSIFICATION	1.638402538927646E-4	TEST
// set the name of bulk accessor.	WITHOUT_CLASSIFICATION	0.9999989190032076	WITHOUT_CLASSIFICATION	1.0809967923433358E-6	TEST
// aload_0	WITHOUT_CLASSIFICATION	0.9999899966212413	WITHOUT_CLASSIFICATION	1.0003378758623468E-5	TEST
// invokespecial	WITHOUT_CLASSIFICATION	0.9999959194412962	WITHOUT_CLASSIFICATION	4.080558703838354E-6	TEST
// return	WITHOUT_CLASSIFICATION	0.9999946420164448	WITHOUT_CLASSIFICATION	5.35798355515929E-6	TEST
// aload_1 // load bean	WITHOUT_CLASSIFICATION	0.9999840054696247	WITHOUT_CLASSIFICATION	1.5994530375281287E-5	TEST
// checkcast // cast bean	WITHOUT_CLASSIFICATION	0.9999933172469933	WITHOUT_CLASSIFICATION	6.682753006784038E-6	TEST
// astore_3 // store bean	WITHOUT_CLASSIFICATION	0.9999951797407015	WITHOUT_CLASSIFICATION	4.820259298483457E-6	TEST
// aload_2 // args	WITHOUT_CLASSIFICATION	0.9999922070502832	WITHOUT_CLASSIFICATION	7.792949716761904E-6	TEST
// iconst_i // continue to aastore // growing stack is 1	WITHOUT_CLASSIFICATION	0.9999996269446116	WITHOUT_CLASSIFICATION	3.7305538840137125E-7	TEST
// new	WITHOUT_CLASSIFICATION	0.9999864699953693	WITHOUT_CLASSIFICATION	1.3530004630791106E-5	TEST
// dup	WITHOUT_CLASSIFICATION	0.9999807574207397	WITHOUT_CLASSIFICATION	1.924257926042294E-5	TEST
// aload_3 // load the raw bean	WITHOUT_CLASSIFICATION	0.9999922512792357	WITHOUT_CLASSIFICATION	7.748720764269455E-6	TEST
// invokeinterface	WITHOUT_CLASSIFICATION	0.999995609798266	WITHOUT_CLASSIFICATION	4.390201734110299E-6	TEST
// invokevirtual	WITHOUT_CLASSIFICATION	0.9999970448420852	WITHOUT_CLASSIFICATION	2.955157914873078E-6	TEST
// invokevirtual	WITHOUT_CLASSIFICATION	0.9999970448420852	WITHOUT_CLASSIFICATION	2.955157914873078E-6	TEST
// aastore // args	WITHOUT_CLASSIFICATION	0.9999952018986142	WITHOUT_CLASSIFICATION	4.798101385704347E-6	TEST
/* | this | bean | args | i | raw bean | exception | */	WITHOUT_CLASSIFICATION	0.9999978563158284	WITHOUT_CLASSIFICATION	2.143684171662647E-6	TEST
// required to exception table // iconst_0 // i	WITHOUT_CLASSIFICATION	0.999999565009701	WITHOUT_CLASSIFICATION	4.3499029899706104E-7	TEST
// istore_3 // store i	WITHOUT_CLASSIFICATION	0.9999875326701314	WITHOUT_CLASSIFICATION	1.2467329868607603E-5	TEST
// aload_1 // load the bean	WITHOUT_CLASSIFICATION	0.9999913186961213	WITHOUT_CLASSIFICATION	8.681303878637669E-6	TEST
// checkcast // cast the bean into a raw bean	WITHOUT_CLASSIFICATION	0.9999982426075944	WITHOUT_CLASSIFICATION	1.7573924055636792E-6	TEST
/* current stack len = 0 */	WITHOUT_CLASSIFICATION	0.99999833664418	WITHOUT_CLASSIFICATION	1.663355819994063E-6	TEST
// start region to handling exception (BulkAccessorException)	WITHOUT_CLASSIFICATION	0.999999882280266	WITHOUT_CLASSIFICATION	1.1771973390307978E-7	TEST
// iinc 3, 1	WITHOUT_CLASSIFICATION	0.9999790105395033	WITHOUT_CLASSIFICATION	2.0989460496660733E-5	TEST
// aload 4 // load the raw bean	WITHOUT_CLASSIFICATION	0.9999918835823918	WITHOUT_CLASSIFICATION	8.116417608118682E-6	TEST
// aload_2 // load the args	WITHOUT_CLASSIFICATION	0.99999418380588	WITHOUT_CLASSIFICATION	5.8161941198906524E-6	TEST
// iconst_i	WITHOUT_CLASSIFICATION	0.9999846357311604	WITHOUT_CLASSIFICATION	1.536426883956929E-5	TEST
// aaload	WITHOUT_CLASSIFICATION	0.9999875207689962	WITHOUT_CLASSIFICATION	1.247923100379165E-5	TEST
// checkcast	WITHOUT_CLASSIFICATION	0.9999932720012242	WITHOUT_CLASSIFICATION	6.727998775687995E-6	TEST
// checkcast (case of primitive type) // invokevirtual (case of primitive type)	WITHOUT_CLASSIFICATION	0.9999997318898587	WITHOUT_CLASSIFICATION	2.681101412921656E-7	TEST
// checkcast (case of reference type)	WITHOUT_CLASSIFICATION	0.9999989408372943	WITHOUT_CLASSIFICATION	1.0591627057144578E-6	TEST
/* current stack len = 2 */	WITHOUT_CLASSIFICATION	0.9999983490456231	WITHOUT_CLASSIFICATION	1.6509543769711112E-6	TEST
// end region to handling exception (BulkAccessorException)	WITHOUT_CLASSIFICATION	0.9999998570670393	WITHOUT_CLASSIFICATION	1.4293296072058444E-7	TEST
// register in exception table	WITHOUT_CLASSIFICATION	0.9999987017521206	WITHOUT_CLASSIFICATION	1.298247879376749E-6	TEST
// aload_0	WITHOUT_CLASSIFICATION	0.9999899966212413	WITHOUT_CLASSIFICATION	1.0003378758623468E-5	TEST
// aload_0	WITHOUT_CLASSIFICATION	0.9999899966212413	WITHOUT_CLASSIFICATION	1.0003378758623468E-5	TEST
// return	WITHOUT_CLASSIFICATION	0.9999946420164448	WITHOUT_CLASSIFICATION	5.35798355515929E-6	TEST
// return	WITHOUT_CLASSIFICATION	0.9999946420164448	WITHOUT_CLASSIFICATION	5.35798355515929E-6	TEST
// dup	WITHOUT_CLASSIFICATION	0.9999807574207397	WITHOUT_CLASSIFICATION	1.924257926042294E-5	TEST
// invokevirtual	WITHOUT_CLASSIFICATION	0.9999970448420852	WITHOUT_CLASSIFICATION	2.955157914873078E-6	TEST
// checkcast	WITHOUT_CLASSIFICATION	0.9999932720012242	WITHOUT_CLASSIFICATION	6.727998775687995E-6	TEST
/* local variables | target obj | each oldvalue | */	WITHOUT_CLASSIFICATION	0.9999984748959392	WITHOUT_CLASSIFICATION	1.5251040608269008E-6	TEST
// astore 5 // store exception	WITHOUT_CLASSIFICATION	0.9999990064710597	WITHOUT_CLASSIFICATION	9.935289403332978E-7	TEST
// new // BulkAccessorException	WITHOUT_CLASSIFICATION	0.9999986629111575	WITHOUT_CLASSIFICATION	1.3370888425791849E-6	TEST
// aload 5 // load exception	WITHOUT_CLASSIFICATION	0.9999980577576856	WITHOUT_CLASSIFICATION	1.942242314335106E-6	TEST
// iload_3 // i	WITHOUT_CLASSIFICATION	0.9999833528968629	WITHOUT_CLASSIFICATION	1.6647103137082118E-5	TEST
// invokespecial // BulkAccessorException.<init>	WITHOUT_CLASSIFICATION	0.9999995925598146	WITHOUT_CLASSIFICATION	4.0744018538712067E-7	TEST
// athrow	WITHOUT_CLASSIFICATION	0.9999930200633848	WITHOUT_CLASSIFICATION	6.979936615284053E-6	TEST
// WARNING: classfile only	WITHOUT_CLASSIFICATION	0.9999964692664737	WITHOUT_CLASSIFICATION	3.530733526273409E-6	TEST
//swallow	WITHOUT_CLASSIFICATION	0.9998975278080324	WITHOUT_CLASSIFICATION	1.0247219196757896E-4	TEST
/* local variable | this | */	WITHOUT_CLASSIFICATION	0.9999969156496399	WITHOUT_CLASSIFICATION	3.084350360207012E-6	TEST
// aload_0 // load this	WITHOUT_CLASSIFICATION	0.999990553566008	WITHOUT_CLASSIFICATION	9.446433992087763E-6	TEST
// aload_0 // load this	WITHOUT_CLASSIFICATION	0.999990553566008	WITHOUT_CLASSIFICATION	9.446433992087763E-6	TEST
// getfield // get field "$JAVASSIST_CALLBACK" defined already	WITHOUT_CLASSIFICATION	0.9999676788987648	WITHOUT_CLASSIFICATION	3.2321101235279414E-5	TEST
// areturn // return the value of the field	WITHOUT_CLASSIFICATION	0.9999902437636246	WITHOUT_CLASSIFICATION	9.75623637545503E-6	TEST
/* local variables | this | callback | */	WITHOUT_CLASSIFICATION	0.9999969905578368	WITHOUT_CLASSIFICATION	3.0094421632966048E-6	TEST
// aload_1 // load callback	WITHOUT_CLASSIFICATION	0.9999922014394207	WITHOUT_CLASSIFICATION	7.798560579373601E-6	TEST
// putfield // put field "$JAVASSIST_CALLBACK" defined already	WITHOUT_CLASSIFICATION	0.9999691094282505	WITHOUT_CLASSIFICATION	3.089057174950355E-5	TEST
// case of non-static field	WITHOUT_CLASSIFICATION	0.9999894930767274	WITHOUT_CLASSIFICATION	1.0506923272722268E-5	TEST
// getfield // get each field	WITHOUT_CLASSIFICATION	0.999914943746171	WITHOUT_CLASSIFICATION	8.50562538290643E-5	TEST
// invokeinterface // invoke Enabled.getInterceptFieldCallback()	WITHOUT_CLASSIFICATION	0.9999983536130207	WITHOUT_CLASSIFICATION	1.6463869792188787E-6	TEST
// ifnonnull	WITHOUT_CLASSIFICATION	0.9999869300893472	WITHOUT_CLASSIFICATION	1.3069910652662912E-5	TEST
// *return // each type	WITHOUT_CLASSIFICATION	0.9999990213630094	WITHOUT_CLASSIFICATION	9.786369905508602E-7	TEST
// *return // each type	WITHOUT_CLASSIFICATION	0.9999990213630094	WITHOUT_CLASSIFICATION	9.786369905508602E-7	TEST
// *store_1 // each type	WITHOUT_CLASSIFICATION	0.9999986107592747	WITHOUT_CLASSIFICATION	1.3892407252843504E-6	TEST
// ldc // name of the field	WITHOUT_CLASSIFICATION	0.9999800497302302	WITHOUT_CLASSIFICATION	1.9950269769821147E-5	TEST
// *load_1 // each type	WITHOUT_CLASSIFICATION	0.9999981939370606	WITHOUT_CLASSIFICATION	1.8060629393704707E-6	TEST
// invokeinterface // invoke Callback.read*() // each type	WITHOUT_CLASSIFICATION	0.9999997265312889	WITHOUT_CLASSIFICATION	2.734687112118574E-7	TEST
// int	WITHOUT_CLASSIFICATION	0.9999884994864175	WITHOUT_CLASSIFICATION	1.1500513582515364E-5	TEST
// return	WITHOUT_CLASSIFICATION	0.9999946420164448	WITHOUT_CLASSIFICATION	5.35798355515929E-6	TEST
// dup	WITHOUT_CLASSIFICATION	0.9999807574207397	WITHOUT_CLASSIFICATION	1.924257926042294E-5	TEST
// invokeinterface	WITHOUT_CLASSIFICATION	0.999995609798266	WITHOUT_CLASSIFICATION	4.390201734110299E-6	TEST
// checkcast	WITHOUT_CLASSIFICATION	0.9999932720012242	WITHOUT_CLASSIFICATION	6.727998775687995E-6	TEST
// checkcast	WITHOUT_CLASSIFICATION	0.9999932720012242	WITHOUT_CLASSIFICATION	6.727998775687995E-6	TEST
// invokeinterface // enabled.getInterceptFieldCallback()	WITHOUT_CLASSIFICATION	0.9999984926152952	WITHOUT_CLASSIFICATION	1.5073847048194535E-6	TEST
// invokeinterface // enabled.getInterceptFieldCallback()	WITHOUT_CLASSIFICATION	0.9999984926152952	WITHOUT_CLASSIFICATION	1.5073847048194535E-6	TEST
// ifnonnull (label1)	WITHOUT_CLASSIFICATION	0.9999958536409896	WITHOUT_CLASSIFICATION	4.146359010355023E-6	TEST
// *load_1	WITHOUT_CLASSIFICATION	0.9999941538717082	WITHOUT_CLASSIFICATION	5.846128291812484E-6	TEST
// *load_1	WITHOUT_CLASSIFICATION	0.9999941538717082	WITHOUT_CLASSIFICATION	5.846128291812484E-6	TEST
// putfield	WITHOUT_CLASSIFICATION	0.999909588945092	WITHOUT_CLASSIFICATION	9.041105490799209E-5	TEST
// return ;	WITHOUT_CLASSIFICATION	0.9999913903022691	WITHOUT_CLASSIFICATION	8.60969773083044E-6	TEST
// ldc // field name	WITHOUT_CLASSIFICATION	0.9999551559116495	WITHOUT_CLASSIFICATION	4.4844088350478876E-5	TEST
// getfield // old value of the field	WITHOUT_CLASSIFICATION	0.9999422846935692	WITHOUT_CLASSIFICATION	5.771530643096649E-5	TEST
// invokeinterface // callback.write*(..)	WITHOUT_CLASSIFICATION	0.9999993171223187	WITHOUT_CLASSIFICATION	6.828776812646811E-7	TEST
// reference type	WITHOUT_CLASSIFICATION	0.9999952276456859	WITHOUT_CLASSIFICATION	4.772354314047559E-6	TEST
// reference type	WITHOUT_CLASSIFICATION	0.9999952276456859	WITHOUT_CLASSIFICATION	4.772354314047559E-6	TEST
// not array	WITHOUT_CLASSIFICATION	0.9999919129093696	WITHOUT_CLASSIFICATION	8.08709063041188E-6	TEST
// array of reference type	WITHOUT_CLASSIFICATION	0.9999985371923312	WITHOUT_CLASSIFICATION	1.4628076688221061E-6	TEST
// boolean	WITHOUT_CLASSIFICATION	0.9999947499291557	WITHOUT_CLASSIFICATION	5.250070844255971E-6	TEST
// byte	WITHOUT_CLASSIFICATION	0.9999818517394379	WITHOUT_CLASSIFICATION	1.8148260562162866E-5	TEST
// char	WITHOUT_CLASSIFICATION	0.9999934028259888	WITHOUT_CLASSIFICATION	6.5971740112187445E-6	TEST
// short	WITHOUT_CLASSIFICATION	0.9999907024123217	WITHOUT_CLASSIFICATION	9.297587678284934E-6	TEST
// double	WITHOUT_CLASSIFICATION	0.9999924254625313	WITHOUT_CLASSIFICATION	7.574537468728514E-6	TEST
// float	WITHOUT_CLASSIFICATION	0.9999859202931792	WITHOUT_CLASSIFICATION	1.4079706820815036E-5	TEST
// float	WITHOUT_CLASSIFICATION	0.9999859202931792	WITHOUT_CLASSIFICATION	1.4079706820815036E-5	TEST
// long	WITHOUT_CLASSIFICATION	0.9999892283983975	WITHOUT_CLASSIFICATION	1.077160160238685E-5	TEST
// long	WITHOUT_CLASSIFICATION	0.9999892283983975	WITHOUT_CLASSIFICATION	1.077160160238685E-5	TEST
// bad type	WITHOUT_CLASSIFICATION	0.9999840955125399	WITHOUT_CLASSIFICATION	1.590448746014876E-5	TEST
// bad type	WITHOUT_CLASSIFICATION	0.9999840955125399	WITHOUT_CLASSIFICATION	1.590448746014876E-5	TEST
// boolean, byte, char, int, short	WITHOUT_CLASSIFICATION	0.9999986353735782	WITHOUT_CLASSIFICATION	1.3646264217793612E-6	TEST
// boolean, byte, char, int, short	WITHOUT_CLASSIFICATION	0.9999986353735782	WITHOUT_CLASSIFICATION	1.3646264217793612E-6	TEST
// reference type	WITHOUT_CLASSIFICATION	0.9999952276456859	WITHOUT_CLASSIFICATION	4.772354314047559E-6	TEST
// double	WITHOUT_CLASSIFICATION	0.9999924254625313	WITHOUT_CLASSIFICATION	7.574537468728514E-6	TEST
// float	WITHOUT_CLASSIFICATION	0.9999859202931792	WITHOUT_CLASSIFICATION	1.4079706820815036E-5	TEST
// float	WITHOUT_CLASSIFICATION	0.9999859202931792	WITHOUT_CLASSIFICATION	1.4079706820815036E-5	TEST
// long	WITHOUT_CLASSIFICATION	0.9999892283983975	WITHOUT_CLASSIFICATION	1.077160160238685E-5	TEST
// bad type	WITHOUT_CLASSIFICATION	0.9999840955125399	WITHOUT_CLASSIFICATION	1.590448746014876E-5	TEST
// bad type	WITHOUT_CLASSIFICATION	0.9999840955125399	WITHOUT_CLASSIFICATION	1.590448746014876E-5	TEST
// boolean, byte, char, int, short	WITHOUT_CLASSIFICATION	0.9999986353735782	WITHOUT_CLASSIFICATION	1.3646264217793612E-6	TEST
// skip finalize methods	WITHOUT_CLASSIFICATION	0.9999956952515073	WITHOUT_CLASSIFICATION	4.304748492663815E-6	TEST
//Mainly for OSCache	WITHOUT_CLASSIFICATION	0.9999706183978935	WITHOUT_CLASSIFICATION	2.938160210647237E-5	TEST
//decrement the lock	WITHOUT_CLASSIFICATION	0.9999871945323754	WITHOUT_CLASSIFICATION	1.2805467624507735E-5	TEST
// create new lock that times out immediately	WITHOUT_CLASSIFICATION	0.9999994160868864	WITHOUT_CLASSIFICATION	5.83913113680254E-7	TEST
//recache the updated state	WITHOUT_CLASSIFICATION	0.9999678460511366	WITHOUT_CLASSIFICATION	3.215394886345813E-5	TEST
// noop	WITHOUT_CLASSIFICATION	0.9999856465160503	WITHOUT_CLASSIFICATION	1.4353483949648521E-5	TEST
//null clientLock is remotely possible but will never happen in practice	WITHOUT_CLASSIFICATION	0.999999339642667	WITHOUT_CLASSIFICATION	6.603573331691195E-7	TEST
// we really could refresh the item if it // is not a lock, but it might be slower //return freshTimestamp < txTimestamp	WITHOUT_CLASSIFICATION	0.9999990715621365	WITHOUT_CLASSIFICATION	9.284378634827197E-7	TEST
//by requiring <, we rely on lock timeout in the case of an unsuccessful update!	WITHOUT_CLASSIFICATION	0.999999691236311	WITHOUT_CLASSIFICATION	3.0876368898936535E-7	TEST
// the user provided resulttransformer, not the one used with "select new". Here to avoid mangling // transformed/non-transformed results.	WITHOUT_CLASSIFICATION	0.9999998849384509	WITHOUT_CLASSIFICATION	1.1506154903386268E-7	TEST
// disassemble positional parameters	WITHOUT_CLASSIFICATION	0.9999984487292395	WITHOUT_CLASSIFICATION	1.5512707604141088E-6	TEST
// disassemble named parameters	WITHOUT_CLASSIFICATION	0.9999953122016261	WITHOUT_CLASSIFICATION	4.68779837394192E-6	TEST
//ie. 60 seconds	WITHOUT_CLASSIFICATION	0.9999686993200133	WITHOUT_CLASSIFICATION	3.1300679986698895E-5	TEST
// noop	WITHOUT_CLASSIFICATION	0.9999856465160503	WITHOUT_CLASSIFICATION	1.4353483949648521E-5	TEST
//noop	WITHOUT_CLASSIFICATION	0.9998504224310202	WITHOUT_CLASSIFICATION	1.4957756897994668E-4	TEST
//noop	WITHOUT_CLASSIFICATION	0.9998504224310202	WITHOUT_CLASSIFICATION	1.4957756897994668E-4	TEST
// this is called from SettingsFactory irregardless; trivial to simply disregard	WITHOUT_CLASSIFICATION	0.9999986237423397	WITHOUT_CLASSIFICATION	1.3762576602856657E-6	TEST
// Do nothing; subclasses may override.	WITHOUT_CLASSIFICATION	0.9999998264522479	WITHOUT_CLASSIFICATION	1.7354775211474622E-7	TEST
// Do nothing; subclasses may override.	WITHOUT_CLASSIFICATION	0.9999998264522479	WITHOUT_CLASSIFICATION	1.7354775211474622E-7	TEST
//throw new UnsupportedOperationException("Can't write to a readonly object");	WITHOUT_CLASSIFICATION	0.9999996972292713	WITHOUT_CLASSIFICATION	3.027707287495287E-7	TEST
//assembled state gets put in a new array (we read from cache by value!)	WITHOUT_CLASSIFICATION	0.999999434909824	WITHOUT_CLASSIFICATION	5.650901758538681E-7	TEST
//persister.setIdentifier(result, id); //before calling interceptor, for consistency with normal load	WITHOUT_CLASSIFICATION	0.9999992591453354	WITHOUT_CLASSIFICATION	7.408546647140656E-7	TEST
// no-op; CCS did not have such a concept	WITHOUT_CLASSIFICATION	0.9999991528182757	WITHOUT_CLASSIFICATION	8.471817243709438E-7	TEST
// no-op; CCS did not have such a concept	WITHOUT_CLASSIFICATION	0.9999991528182757	WITHOUT_CLASSIFICATION	8.471817243709438E-7	TEST
// again, CCS did not have such a concept; but a reasonable // proximity is to clear the cache after transaction *as long as* // the underlying cache is not JTA aware.	WITHOUT_CLASSIFICATION	0.9999999890802624	WITHOUT_CLASSIFICATION	1.0919737505475633E-8	TEST
// again, CCS did not have such a concept; however a reasonable // proximity is to clear the cache.  For non-transaction aware // caches, we will also do a clear at the end of the transaction	WITHOUT_CLASSIFICATION	0.9999999953663579	WITHOUT_CLASSIFICATION	4.633642087838233E-9	TEST
// again, CCS did not have such a concept; however a reasonable // proximity is to clear the cache.  For non-transaction aware // caches, we will also do a clear at the end of the transaction	WITHOUT_CLASSIFICATION	0.9999999953663579	WITHOUT_CLASSIFICATION	4.633642087838233E-9	TEST
// classes mentioned in extends not available - so put it in queue	WITHOUT_CLASSIFICATION	0.9999997961208327	WITHOUT_CLASSIFICATION	2.038791673240362E-7	TEST
// get meta's from <hibernate-mapping>	WITHOUT_CLASSIFICATION	0.9999964555306343	WITHOUT_CLASSIFICATION	3.5444693656438313E-6	TEST
// get meta's from <class>	WITHOUT_CLASSIFICATION	0.999995763597969	WITHOUT_CLASSIFICATION	4.236402031019311E-6	TEST
// DB-OBJECTNAME	WITHOUT_CLASSIFICATION	0.9999599457278829	WITHOUT_CLASSIFICATION	4.005427211703395E-5	TEST
// MUTABLE	WITHOUT_CLASSIFICATION	0.9999813982967712	WITHOUT_CLASSIFICATION	1.8601703228696368E-5	TEST
// WHERE	WITHOUT_CLASSIFICATION	0.9999619322244444	WITHOUT_CLASSIFICATION	3.806777555557677E-5	TEST
// CHECK	WITHOUT_CLASSIFICATION	0.999973641975086	WITHOUT_CLASSIFICATION	2.6358024914142032E-5	TEST
// POLYMORPHISM	WITHOUT_CLASSIFICATION	0.9999680485445812	WITHOUT_CLASSIFICATION	3.195145541880846E-5	TEST
// TODO:	WITHOUT_CLASSIFICATION	0.9999745590849244	WITHOUT_CLASSIFICATION	2.544091507558869E-5	TEST
// ID	WITHOUT_CLASSIFICATION	0.9999726193556523	WITHOUT_CLASSIFICATION	2.738064434769235E-5	TEST
// VERSION / TIMESTAMP	WITHOUT_CLASSIFICATION	0.9999636747744084	WITHOUT_CLASSIFICATION	3.632522559147625E-5	TEST
// DISCRIMINATOR	WITHOUT_CLASSIFICATION	0.9999609260970128	WITHOUT_CLASSIFICATION	3.9073902987278473E-5	TEST
// Primary key constraint	WITHOUT_CLASSIFICATION	0.9999989304304674	WITHOUT_CLASSIFICATION	1.0695695326877674E-6	TEST
// this is either a <version/> tag with no type attribute, // or a <timestamp/> tag	WITHOUT_CLASSIFICATION	0.9999991268604709	WITHOUT_CLASSIFICATION	8.731395291176358E-7	TEST
// for version properties marked as being generated, make sure they are "always" // generated; aka, "insert" is invalid; this is dis-allowed by the DTD, // but just to make sure...	WITHOUT_CLASSIFICATION	0.9999998595674713	WITHOUT_CLASSIFICATION	1.404325287344038E-7	TEST
// DISCRIMINATOR	WITHOUT_CLASSIFICATION	0.9999609260970128	WITHOUT_CLASSIFICATION	3.9073902987278473E-5	TEST
// ( (Column) discrim.getColumnIterator().next() ).setType(type);	WITHOUT_CLASSIFICATION	0.9999996909413872	WITHOUT_CLASSIFICATION	3.090586127895575E-7	TEST
// go ahead and set the lazy here, since pojo.proxy can override it.	WITHOUT_CLASSIFICATION	0.9999997589893398	WITHOUT_CLASSIFICATION	2.4101066014223094E-7	TEST
// DYNAMIC UPDATE	WITHOUT_CLASSIFICATION	0.9999640603075565	WITHOUT_CLASSIFICATION	3.59396924435821E-5	TEST
// IMPORT	WITHOUT_CLASSIFICATION	0.9999762951633491	WITHOUT_CLASSIFICATION	2.3704836650963714E-5	TEST
// BATCH SIZE	WITHOUT_CLASSIFICATION	0.9999675296558174	WITHOUT_CLASSIFICATION	3.247034418259899E-5	TEST
// SELECT BEFORE UPDATE	WITHOUT_CLASSIFICATION	0.9999693444111857	WITHOUT_CLASSIFICATION	3.065558881432124E-5	TEST
// OPTIMISTIC LOCK MODE	WITHOUT_CLASSIFICATION	0.999966708115484	WITHOUT_CLASSIFICATION	3.3291884515917985E-5	TEST
// PERSISTER	WITHOUT_CLASSIFICATION	0.9999606893785571	WITHOUT_CLASSIFICATION	3.9310621442957676E-5	TEST
// CUSTOM SQL	WITHOUT_CLASSIFICATION	0.9999572230970784	WITHOUT_CLASSIFICATION	4.277690292177036E-5	TEST
// get meta's from <subclass>	WITHOUT_CLASSIFICATION	0.9999970424382932	WITHOUT_CLASSIFICATION	2.957561706732716E-6	TEST
// properties	WITHOUT_CLASSIFICATION	0.9999818845671133	WITHOUT_CLASSIFICATION	1.8115432886596234E-5	TEST
// joined subclasses	WITHOUT_CLASSIFICATION	0.9999939673709899	WITHOUT_CLASSIFICATION	6.032629010041848E-6	TEST
// KEY	WITHOUT_CLASSIFICATION	0.9999679149776706	WITHOUT_CLASSIFICATION	3.2085022329388984E-5	TEST
// CHECK	WITHOUT_CLASSIFICATION	0.999973641975086	WITHOUT_CLASSIFICATION	2.6358024914142032E-5	TEST
// CUSTOM SQL	WITHOUT_CLASSIFICATION	0.9999572230970784	WITHOUT_CLASSIFICATION	4.277690292177036E-5	TEST
// properties	WITHOUT_CLASSIFICATION	0.9999818845671133	WITHOUT_CLASSIFICATION	1.8115432886596234E-5	TEST
// KEY	WITHOUT_CLASSIFICATION	0.9999679149776706	WITHOUT_CLASSIFICATION	3.2085022329388984E-5	TEST
// model.getKey().setType( new Type( model.getIdentifier() ) );	WITHOUT_CLASSIFICATION	0.9999982024733065	WITHOUT_CLASSIFICATION	1.7975266935732699E-6	TEST
// TABLENAME	WITHOUT_CLASSIFICATION	0.9999652716788561	WITHOUT_CLASSIFICATION	3.472832114401343E-5	TEST
// join.getKey().setType( new Type( lazz.getIdentifier() ) );	WITHOUT_CLASSIFICATION	0.9999989236836522	WITHOUT_CLASSIFICATION	1.0763163479057375E-6	TEST
// PROPERTIES	WITHOUT_CLASSIFICATION	0.9999599904146367	WITHOUT_CLASSIFICATION	4.000958536334009E-5	TEST
// COLUMN(S)	WITHOUT_CLASSIFICATION	0.9999527417985397	WITHOUT_CLASSIFICATION	4.725820146037607E-5	TEST
// column index	WITHOUT_CLASSIFICATION	0.9999962321488896	WITHOUT_CLASSIFICATION	3.7678511103476052E-6	TEST
//column unique-key	WITHOUT_CLASSIFICATION	0.9999858487225638	WITHOUT_CLASSIFICATION	1.415127743622161E-5	TEST
// automatically makes a column with the default name if none is specifed by XML	WITHOUT_CLASSIFICATION	0.9999996265821329	WITHOUT_CLASSIFICATION	3.7341786709514426E-7	TEST
// for an any	WITHOUT_CLASSIFICATION	0.999973962527824	WITHOUT_CLASSIFICATION	2.603747217596477E-5	TEST
// insertable simply because that is the user did not specify // anything; just override it	WITHOUT_CLASSIFICATION	0.9999998397125356	WITHOUT_CLASSIFICATION	1.6028746437257154E-7	TEST
// the user specifically supplied insert="true", // which constitutes an illegal combo	WITHOUT_CLASSIFICATION	0.9999992877490013	WITHOUT_CLASSIFICATION	7.122509987155772E-7	TEST
// properties generated on update can never be updateable...	WITHOUT_CLASSIFICATION	0.9999995121169694	WITHOUT_CLASSIFICATION	4.878830305792215E-7	TEST
// updateable only because the user did not specify  // anything; just override it	WITHOUT_CLASSIFICATION	0.9999998433356866	WITHOUT_CLASSIFICATION	1.5666431341168782E-7	TEST
// the user specifically supplied update="true", // which constitutes an illegal combo	WITHOUT_CLASSIFICATION	0.9999994611126644	WITHOUT_CLASSIFICATION	5.388873357008018E-7	TEST
// ROLENAME	WITHOUT_CLASSIFICATION	0.9999601661417058	WITHOUT_CLASSIFICATION	3.983385829422633E-5	TEST
// FETCH STRATEGY	WITHOUT_CLASSIFICATION	0.9999680388223839	WITHOUT_CLASSIFICATION	3.196117761595688E-5	TEST
// TABLE	WITHOUT_CLASSIFICATION	0.9999825838459744	WITHOUT_CLASSIFICATION	1.7416154025564686E-5	TEST
//tableName = mappings.getNamingStrategy().propertyToTableName( className, path );	WITHOUT_CLASSIFICATION	0.9999993121837172	WITHOUT_CLASSIFICATION	6.878162828285281E-7	TEST
// SORT	WITHOUT_CLASSIFICATION	0.9999701966984993	WITHOUT_CLASSIFICATION	2.9803301500730204E-5	TEST
// CUSTOM SQL	WITHOUT_CLASSIFICATION	0.9999572230970784	WITHOUT_CLASSIFICATION	4.277690292177036E-5	TEST
// unsorted, natural, comparator.class.name	WITHOUT_CLASSIFICATION	0.9999991590023682	WITHOUT_CLASSIFICATION	8.409976318358998E-7	TEST
// ORPHAN DELETE (used for programmer error detection)	WITHOUT_CLASSIFICATION	0.9999980320489898	WITHOUT_CLASSIFICATION	1.9679510100765083E-6	TEST
// set up second pass	WITHOUT_CLASSIFICATION	0.9999958723795503	WITHOUT_CLASSIFICATION	4.1276204496485105E-6	TEST
// an "embedded" component (composite ids and unique) // note that this does not handle nested components	WITHOUT_CLASSIFICATION	0.9999990324264426	WITHOUT_CLASSIFICATION	9.675735574385377E-7	TEST
// a nested composite element	WITHOUT_CLASSIFICATION	0.9999924209119564	WITHOUT_CLASSIFICATION	7.579088043525146E-6	TEST
// for an any // we will have to use reflection	WITHOUT_CLASSIFICATION	0.9999997527092644	WITHOUT_CLASSIFICATION	2.472907355432669E-7	TEST
//NOTE SPECIAL CASE: // one-to-one constrained=false cannot be proxied, // so default to join and non-lazy	WITHOUT_CLASSIFICATION	0.9999996721048604	WITHOUT_CLASSIFICATION	3.278951396420706E-7	TEST
// use old (HB 2.1) defaults if outer-join is specified	WITHOUT_CLASSIFICATION	0.9999975212515012	WITHOUT_CLASSIFICATION	2.478748498688927E-6	TEST
//lazy = !join;	WITHOUT_CLASSIFICATION	0.9999622586888965	WITHOUT_CLASSIFICATION	3.774131110342689E-5	TEST
// GENERATOR	WITHOUT_CLASSIFICATION	0.9999487270060101	WITHOUT_CLASSIFICATION	5.127299398993463E-5	TEST
// ID UNSAVED-VALUE	WITHOUT_CLASSIFICATION	0.9999678383273574	WITHOUT_CLASSIFICATION	3.216167264263775E-5	TEST
// VERSION UNSAVED-VALUE	WITHOUT_CLASSIFICATION	0.9999644338546978	WITHOUT_CLASSIFICATION	3.556614530216905E-5	TEST
// not necessarily a *unique* property reference	WITHOUT_CLASSIFICATION	0.9999997153908365	WITHOUT_CLASSIFICATION	2.8460916343341224E-7	TEST
// ( (Column) ( (SimpleValue) ic.getIndex() ).getColumnIterator().next() // ).setNullable(false);	WITHOUT_CLASSIFICATION	0.9999998237579921	WITHOUT_CLASSIFICATION	1.7624200798285965E-7	TEST
// contained elements:	WITHOUT_CLASSIFICATION	0.9999975499981155	WITHOUT_CLASSIFICATION	2.450001884537144E-6	TEST
// for non-inverse one-to-many, with a not-null fk, add a backref!	WITHOUT_CLASSIFICATION	0.999999712721287	WITHOUT_CLASSIFICATION	2.872787130103485E-7	TEST
// Bind the where	WITHOUT_CLASSIFICATION	0.999985261141768	WITHOUT_CLASSIFICATION	1.4738858231969028E-5	TEST
// Bind the order-by	WITHOUT_CLASSIFICATION	0.9999884846919501	WITHOUT_CLASSIFICATION	1.1515308049835437E-5	TEST
// Bind the filters	WITHOUT_CLASSIFICATION	0.9999678914545792	WITHOUT_CLASSIFICATION	3.2108545420890694E-5	TEST
// overriding inherited meta attribute. HBX-621 & HBX-793	WITHOUT_CLASSIFICATION	0.9999986697712503	WITHOUT_CLASSIFICATION	1.3302287497174754E-6	TEST
// first, iterate over all elements capable of defining an extends attribute // collecting all found extends references if they cannot be resolved // against the already processed mappings.	WITHOUT_CLASSIFICATION	0.9999999858026324	WITHOUT_CLASSIFICATION	1.4197367629412138E-8	TEST
// mappings might contain either the "raw" extends name (in the case of // an entity-name mapping) or a FQN (in the case of a POJO mapping).	WITHOUT_CLASSIFICATION	0.9999999090704647	WITHOUT_CLASSIFICATION	9.092953532682921E-8	TEST
//+ "_" + referencedColumnName not used for backward compatibility	WITHOUT_CLASSIFICATION	0.9999956970821653	WITHOUT_CLASSIFICATION	4.30291783466664E-6	TEST
//SessionFactory name:	WITHOUT_CLASSIFICATION	0.9999941720942634	WITHOUT_CLASSIFICATION	5.827905736609918E-6	TEST
//JDBC and connection settings:	WITHOUT_CLASSIFICATION	0.99999354822352	WITHOUT_CLASSIFICATION	6.451776479981691E-6	TEST
//JDBC and connection settings:	WITHOUT_CLASSIFICATION	0.99999354822352	WITHOUT_CLASSIFICATION	6.451776479981691E-6	TEST
//Interrogate JDBC metadata	WITHOUT_CLASSIFICATION	0.9999903891599965	WITHOUT_CLASSIFICATION	9.61084000347972E-6	TEST
// user supplied JDBC connections	WITHOUT_CLASSIFICATION	0.99999711372978	WITHOUT_CLASSIFICATION	2.8862702200144455E-6	TEST
//use dialect default properties	WITHOUT_CLASSIFICATION	0.9999921266578826	WITHOUT_CLASSIFICATION	7.8733421174821E-6	TEST
// Transaction settings:	WITHOUT_CLASSIFICATION	0.9999982736153876	WITHOUT_CLASSIFICATION	1.7263846124679893E-6	TEST
//SQL Generation settings:	WITHOUT_CLASSIFICATION	0.9999932525153681	WITHOUT_CLASSIFICATION	6.7474846319163076E-6	TEST
//Query parser settings:	WITHOUT_CLASSIFICATION	0.9999861681075809	WITHOUT_CLASSIFICATION	1.383189241924422E-5	TEST
// Second-level / query cache:	WITHOUT_CLASSIFICATION	0.9999987990053777	WITHOUT_CLASSIFICATION	1.2009946223680885E-6	TEST
// The cache provider is needed when we either have second-level cache enabled // or query cache enabled.  Note that useSecondLevelCache is enabled by default	WITHOUT_CLASSIFICATION	0.9999995796711434	WITHOUT_CLASSIFICATION	4.2032885659110373E-7	TEST
//SQL Exception converter:	WITHOUT_CLASSIFICATION	0.9999881686865407	WITHOUT_CLASSIFICATION	1.1831313459327138E-5	TEST
//Statistics and logging:	WITHOUT_CLASSIFICATION	0.9999820909017988	WITHOUT_CLASSIFICATION	1.7909098201188772E-5	TEST
//	WITHOUT_CLASSIFICATION	0.999864478982662	WITHOUT_CLASSIFICATION	1.3552101733804665E-4	TEST
//	WITHOUT_CLASSIFICATION	0.999864478982662	WITHOUT_CLASSIFICATION	1.3552101733804665E-4	TEST
//Schema export:	WITHOUT_CLASSIFICATION	0.9999869564544631	WITHOUT_CLASSIFICATION	1.304354553698133E-5	TEST
//	WITHOUT_CLASSIFICATION	0.999864478982662	WITHOUT_CLASSIFICATION	1.3552101733804665E-4	TEST
// legacy behavior, apply the bridge...	WITHOUT_CLASSIFICATION	0.9999977939111296	WITHOUT_CLASSIFICATION	2.2060888704163874E-6	TEST
// maybe a concrete SQLpropertyresult type, but Map is exactly what is required at the moment	WITHOUT_CLASSIFICATION	0.999999728766443	WITHOUT_CLASSIFICATION	2.71233556939802E-7	TEST
//if dotted and not load-collection nor return-join //regular property	WITHOUT_CLASSIFICATION	0.999997281288635	WITHOUT_CLASSIFICATION	2.7187113650925167E-6	TEST
//	WITHOUT_CLASSIFICATION	0.999864478982662	WITHOUT_CLASSIFICATION	1.3552101733804665E-4	TEST
// public getters ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999662684526157	WITHOUT_CLASSIFICATION	3.373154738431108E-5	TEST
//	WITHOUT_CLASSIFICATION	0.999864478982662	WITHOUT_CLASSIFICATION	1.3552101733804665E-4	TEST
// package protected setters ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999671933588214	WITHOUT_CLASSIFICATION	3.280664117855471E-5	TEST
//	WITHOUT_CLASSIFICATION	0.999864478982662	WITHOUT_CLASSIFICATION	1.3552101733804665E-4	TEST
//	WITHOUT_CLASSIFICATION	0.999864478982662	WITHOUT_CLASSIFICATION	1.3552101733804665E-4	TEST
// using local since the inheritedMetas at this point is not the correct map since it is always the empty map	WITHOUT_CLASSIFICATION	0.9999998587882523	WITHOUT_CLASSIFICATION	1.412117477778312E-7	TEST
//	WITHOUT_CLASSIFICATION	0.999864478982662	WITHOUT_CLASSIFICATION	1.3552101733804665E-4	TEST
//	WITHOUT_CLASSIFICATION	0.999864478982662	WITHOUT_CLASSIFICATION	1.3552101733804665E-4	TEST
//	WITHOUT_CLASSIFICATION	0.999864478982662	WITHOUT_CLASSIFICATION	1.3552101733804665E-4	TEST
//	WITHOUT_CLASSIFICATION	0.999864478982662	WITHOUT_CLASSIFICATION	1.3552101733804665E-4	TEST
// if doc is null, then for whatever reason, the cached file cannot be used...	WITHOUT_CLASSIFICATION	0.9999984961161601	WITHOUT_CLASSIFICATION	1.5038838399025895E-6	TEST
// drop them in reverse order in case db needs it done that way...	WITHOUT_CLASSIFICATION	0.9999997148027517	WITHOUT_CLASSIFICATION	2.851972483294636E-7	TEST
//	WITHOUT_CLASSIFICATION	0.999864478982662	WITHOUT_CLASSIFICATION	1.3552101733804665E-4	TEST
// This method may be called many times!!	WITHOUT_CLASSIFICATION	0.9999960692403383	WITHOUT_CLASSIFICATION	3.930759661643377E-6	TEST
//	WITHOUT_CLASSIFICATION	0.999864478982662	WITHOUT_CLASSIFICATION	1.3552101733804665E-4	TEST
//	WITHOUT_CLASSIFICATION	0.999864478982662	WITHOUT_CLASSIFICATION	1.3552101733804665E-4	TEST
// found	WITHOUT_CLASSIFICATION	0.9999745068521338	WITHOUT_CLASSIFICATION	2.5493147866130176E-5	TEST
// found	WITHOUT_CLASSIFICATION	0.9999745068521338	WITHOUT_CLASSIFICATION	2.5493147866130176E-5	TEST
//	WITHOUT_CLASSIFICATION	0.999864478982662	WITHOUT_CLASSIFICATION	1.3552101733804665E-4	TEST
//	WITHOUT_CLASSIFICATION	0.999864478982662	WITHOUT_CLASSIFICATION	1.3552101733804665E-4	TEST
//<String, String>	WITHOUT_CLASSIFICATION	0.9999503533416285	WITHOUT_CLASSIFICATION	4.9646658371451004E-5	TEST
//<String, String>	WITHOUT_CLASSIFICATION	0.9999503533416285	WITHOUT_CLASSIFICATION	4.9646658371451004E-5	TEST
//+ "_" + referencedColumnName not used for backward compatibility	WITHOUT_CLASSIFICATION	0.9999956970821653	WITHOUT_CLASSIFICATION	4.30291783466664E-6	TEST
//Set USE_REFLECTION_OPTIMIZER to false to fix HHH-227	WITHOUT_CLASSIFICATION	0.9999821929018118	WITHOUT_CLASSIFICATION	1.7807098188271567E-5	TEST
//orphan delete not supported for EntityMode.DOM4J	WITHOUT_CLASSIFICATION	0.9999849757876008	WITHOUT_CLASSIFICATION	1.502421239931727E-5	TEST
//element = XMLHelper.generateDom4jElement( persister.getNodeName() );	WITHOUT_CLASSIFICATION	0.999995932973795	WITHOUT_CLASSIFICATION	4.067026205040114E-6	TEST
// intentionally empty	WITHOUT_CLASSIFICATION	0.9999981422016773	WITHOUT_CLASSIFICATION	1.857798322720901E-6	TEST
//orphan delete not supported for EntityMode.DOM4J	WITHOUT_CLASSIFICATION	0.9999849757876008	WITHOUT_CLASSIFICATION	1.502421239931727E-5	TEST
//element = XMLHelper.generateDom4jElement( persister.getNodeName() );	WITHOUT_CLASSIFICATION	0.999995932973795	WITHOUT_CLASSIFICATION	4.067026205040114E-6	TEST
//needed for SOAP libraries, etc	WITHOUT_CLASSIFICATION	0.9999230765739775	WITHOUT_CLASSIFICATION	7.692342602256031E-5	TEST
//maintain correct duplication if loaded in a cartesian product	WITHOUT_CLASSIFICATION	0.9999966743214542	WITHOUT_CLASSIFICATION	3.325678545730691E-6	TEST
// the element has been removed from the set	WITHOUT_CLASSIFICATION	0.9999901647911211	WITHOUT_CLASSIFICATION	9.835208878821378E-6	TEST
// the element has changed	WITHOUT_CLASSIFICATION	0.9999936916701928	WITHOUT_CLASSIFICATION	6.308329807109937E-6	TEST
//Careful: these methods do not initialize the collection.	WITHOUT_CLASSIFICATION	0.9999989909489494	WITHOUT_CLASSIFICATION	1.0090510506786291E-6	TEST
//needed so that we remove this collection from the second-level cache	WITHOUT_CLASSIFICATION	0.9999977749076943	WITHOUT_CLASSIFICATION	2.225092305771192E-6	TEST
// override on some subclasses	WITHOUT_CLASSIFICATION	0.9999991518378247	WITHOUT_CLASSIFICATION	8.481621752085496E-7	TEST
//override on some subclasses	WITHOUT_CLASSIFICATION	0.9999965126884718	WITHOUT_CLASSIFICATION	3.4873115282327066E-6	TEST
//do this bit after setting initialized to true or it will recurse	WITHOUT_CLASSIFICATION	0.9999953839082496	WITHOUT_CLASSIFICATION	4.616091750455757E-6	TEST
// short-circuit(s) // no new elements, the old list contains only Orphans // no old elements, so no Orphans neither	WITHOUT_CLASSIFICATION	0.9999998548073813	WITHOUT_CLASSIFICATION	1.4519261868747837E-7	TEST
// create the collection holding the Orphans	WITHOUT_CLASSIFICATION	0.9999995157699236	WITHOUT_CLASSIFICATION	4.842300763662446E-7	TEST
// collect EntityIdentifier(s) of the *current* elements - add them into a HashSet for fast access	WITHOUT_CLASSIFICATION	0.999999716464451	WITHOUT_CLASSIFICATION	2.8353554903117665E-7	TEST
// iterate over the *old* list	WITHOUT_CLASSIFICATION	0.999994927287502	WITHOUT_CLASSIFICATION	5.07271249799351E-6	TEST
/*(array==null) ? tempList.size() :*/	WITHOUT_CLASSIFICATION	0.9999938263704506	WITHOUT_CLASSIFICATION	6.173629549330756E-6	TEST
// intentionally empty	WITHOUT_CLASSIFICATION	0.9999981422016773	WITHOUT_CLASSIFICATION	1.857798322720901E-6	TEST
/*(array==null) ? tempList.get(i) :*/	WITHOUT_CLASSIFICATION	0.9999943958758934	WITHOUT_CLASSIFICATION	5.604124106508989E-6	TEST
//write(); -- doesn't	WITHOUT_CLASSIFICATION	0.9999629761764949	WITHOUT_CLASSIFICATION	3.702382350508311E-5	TEST
//write(); -- doesn't	WITHOUT_CLASSIFICATION	0.9999629761764949	WITHOUT_CLASSIFICATION	3.702382350508311E-5	TEST
// amazingly, these two will work because AbstractCollection // uses iterator() to fill the array	WITHOUT_CLASSIFICATION	0.9999998617502737	WITHOUT_CLASSIFICATION	1.3824972628425052E-7	TEST
//needed for SOAP libraries, etc	WITHOUT_CLASSIFICATION	0.9999230765739775	WITHOUT_CLASSIFICATION	7.692342602256031E-5	TEST
// finally, what it's all about...	WITHOUT_CLASSIFICATION	0.9999976477732303	WITHOUT_CLASSIFICATION	2.352226769648645E-6	TEST
// note that if we load this collection from a cartesian product // the multiplicity would be broken ... so use an idbag instead	WITHOUT_CLASSIFICATION	0.9999998286515207	WITHOUT_CLASSIFICATION	1.7134847926491024E-7	TEST
// Anyway, here we implement <set> semantics for a // <one-to-many> <bag>!	WITHOUT_CLASSIFICATION	0.9999995647412506	WITHOUT_CLASSIFICATION	4.352587493419781E-7	TEST
//a shortcut if its location didn't change!	WITHOUT_CLASSIFICATION	0.9999983637040253	WITHOUT_CLASSIFICATION	1.6362959748157257E-6	TEST
//search for it //note that this code is incorrect for other than one-to-many	WITHOUT_CLASSIFICATION	0.9999926226509016	WITHOUT_CLASSIFICATION	7.3773490984470925E-6	TEST
//needed for SOAP libraries, etc	WITHOUT_CLASSIFICATION	0.9999230765739775	WITHOUT_CLASSIFICATION	7.692342602256031E-5	TEST
//a shortcut if its location didn't change!	WITHOUT_CLASSIFICATION	0.9999983637040253	WITHOUT_CLASSIFICATION	1.6362959748157257E-6	TEST
//search for it //note that this code is incorrect for other than one-to-many	WITHOUT_CLASSIFICATION	0.9999926226509016	WITHOUT_CLASSIFICATION	7.3773490984470925E-6	TEST
/*public boolean equals(Object other) {	WITHOUT_CLASSIFICATION	0.999994450502175	WITHOUT_CLASSIFICATION	5.549497825008065E-6	TEST
// List OPERATIONS:	WITHOUT_CLASSIFICATION	0.999972945703939	WITHOUT_CLASSIFICATION	2.705429606098851E-5	TEST
//pad with nulls from the current last element up to the new index	WITHOUT_CLASSIFICATION	0.9999988536477452	WITHOUT_CLASSIFICATION	1.1463522547409075E-6	TEST
//needed for SOAP libraries, etc	WITHOUT_CLASSIFICATION	0.9999230765739775	WITHOUT_CLASSIFICATION	7.692342602256031E-5	TEST
//needed for SOAP libraries, etc	WITHOUT_CLASSIFICATION	0.9999230765739775	WITHOUT_CLASSIFICATION	7.692342602256031E-5	TEST
// from Map	WITHOUT_CLASSIFICATION	0.9999785546442722	WITHOUT_CLASSIFICATION	2.144535572775822E-5	TEST
// from SortedMap	WITHOUT_CLASSIFICATION	0.999984255630437	WITHOUT_CLASSIFICATION	1.5744369562978148E-5	TEST
//inject the data	WITHOUT_CLASSIFICATION	0.9999815722691089	WITHOUT_CLASSIFICATION	1.842773089102596E-5	TEST
// cannot be instantiated	WITHOUT_CLASSIFICATION	0.9999837195231458	WITHOUT_CLASSIFICATION	1.6280476854179454E-5	TEST
//default pool size 20	WITHOUT_CLASSIFICATION	0.9999789163068251	WITHOUT_CLASSIFICATION	2.1083693174841238E-5	TEST
// trying via forName() first to be as close to DriverManager's semantics	WITHOUT_CLASSIFICATION	0.9999988321228322	WITHOUT_CLASSIFICATION	1.1678771677708552E-6	TEST
// if debug level is enabled, then log the password, otherwise mask it	WITHOUT_CLASSIFICATION	0.999998514869039	WITHOUT_CLASSIFICATION	1.4851309610548254E-6	TEST
// register a cleanup synch	WITHOUT_CLASSIFICATION	0.9999982190243533	WITHOUT_CLASSIFICATION	1.7809756466683091E-6	TEST
// wrap the session in the transaction-protection proxy	WITHOUT_CLASSIFICATION	0.9999989952343025	WITHOUT_CLASSIFICATION	1.0047656975493524E-6	TEST
// then bind it	WITHOUT_CLASSIFICATION	0.9999491039439609	WITHOUT_CLASSIFICATION	5.089605603914738E-5	TEST
// try to make sure we don't wrap and already wrapped session	WITHOUT_CLASSIFICATION	0.999999468456928	WITHOUT_CLASSIFICATION	5.315430719740891E-7	TEST
// allow these to go through the the real session no matter what	WITHOUT_CLASSIFICATION	0.9999993568117699	WITHOUT_CLASSIFICATION	6.431882301331503E-7	TEST
// limit the methods available if no transaction is active	WITHOUT_CLASSIFICATION	0.9999996129637662	WITHOUT_CLASSIFICATION	3.870362338663329E-7	TEST
// allow these (deprecated) methods to pass through	WITHOUT_CLASSIFICATION	0.9999991720992938	WITHOUT_CLASSIFICATION	8.279007062532129E-7	TEST
// serialization ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999976441021498	WITHOUT_CLASSIFICATION	2.3558978501983694E-6	TEST
// We could register the session against the transaction even though it is // not started, but we'd have no guarentee of ever getting the map // entries cleaned up (aside from spawning threads).	WITHOUT_CLASSIFICATION	0.9999999047342875	WITHOUT_CLASSIFICATION	9.526571250620989E-8	TEST
//cannot be instantiated	WITHOUT_CLASSIFICATION	0.9999180767846997	WITHOUT_CLASSIFICATION	8.192321530028843E-5	TEST
//private String propertyName;	WITHOUT_CLASSIFICATION	0.9999945578156869	WITHOUT_CLASSIFICATION	5.442184313137582E-6	TEST
/*public PropertyProjection project() {	WITHOUT_CLASSIFICATION	0.9999925863236123	WITHOUT_CLASSIFICATION	7.413676387661613E-6	TEST
//String[] fk = StringHelper.qualify( "collection_", cp.getKeyColumnNames() );	WITHOUT_CLASSIFICATION	0.9999993185488031	WITHOUT_CLASSIFICATION	6.814511968511748E-7	TEST
//" collection_ where " +	WITHOUT_CLASSIFICATION	0.9999922145882207	WITHOUT_CLASSIFICATION	7.785411779232148E-6	TEST
//unsupported	WITHOUT_CLASSIFICATION	0.9998111862682959	WITHOUT_CLASSIFICATION	1.8881373170420756E-4	TEST
//unsupported	WITHOUT_CLASSIFICATION	0.9998111862682959	WITHOUT_CLASSIFICATION	1.8881373170420756E-4	TEST
//cannot be instantiated	WITHOUT_CLASSIFICATION	0.9999180767846997	WITHOUT_CLASSIFICATION	8.192321530028843E-5	TEST
//the following two lines were added to ensure that this.params is not null, which //can happen with two-deep nested subqueries	WITHOUT_CLASSIFICATION	0.9999988510038056	WITHOUT_CLASSIFICATION	1.1489961943376912E-6	TEST
//with two-deep subqueries, the same alias would get generated for //both using the old method (criteriaQuery.generateSQLAlias()), so //that is now used as a fallback if the main criteria alias isn't set	WITHOUT_CLASSIFICATION	0.9999997545404983	WITHOUT_CLASSIFICATION	2.4545950173275403E-7	TEST
//implicit polymorphism not supported (would need a union)	WITHOUT_CLASSIFICATION	0.999988547867755	WITHOUT_CLASSIFICATION	1.1452132245056687E-5	TEST
//pull off the last ", "	WITHOUT_CLASSIFICATION	0.9999690977370513	WITHOUT_CLASSIFICATION	3.0902262948734E-5	TEST
//$NON-NLS-1	WITHOUT_CLASSIFICATION	0.999489457690701	WITHOUT_CLASSIFICATION	5.105423092990445E-4	TEST
// we have the form: trim(trimSource) //      so we trim leading and trailing spaces	WITHOUT_CLASSIFICATION	0.9999996520700913	WITHOUT_CLASSIFICATION	3.4792990869492574E-7	TEST
// we have the form: trim(from trimSource). //      This is functionally equivalent to trim(trimSource)	WITHOUT_CLASSIFICATION	0.9999998119607679	WITHOUT_CLASSIFICATION	1.8803923210634843E-7	TEST
// NOT_SUPPORTED_SHOULD_USE_JDBC3_PreparedStatement.getGeneratedKeys_method	WITHOUT_CLASSIFICATION	0.9999963006621433	WITHOUT_CLASSIFICATION	3.699337856618706E-6	TEST
// potentialTrimCharacterArgIndex = 1 assumes that a // trim-specification has been specified.  we handle the // exception to that explicitly	WITHOUT_CLASSIFICATION	0.9999999482717356	WITHOUT_CLASSIFICATION	5.172826437987905E-8	TEST
// Overridden informational metadata ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999986387310712	WITHOUT_CLASSIFICATION	1.361268928754663E-6	TEST
// Oracle did add support for ANSI CASE statements in 9i	WITHOUT_CLASSIFICATION	0.9999985897226971	WITHOUT_CLASSIFICATION	1.4102773030401384E-6	TEST
// the standard SQL function name is current_timestamp...	WITHOUT_CLASSIFICATION	0.9999984734417425	WITHOUT_CLASSIFICATION	1.5265582574157837E-6	TEST
// Informix doesn't have a bit type	WITHOUT_CLASSIFICATION	0.9999974652851669	WITHOUT_CLASSIFICATION	2.5347148331361813E-6	TEST
// or BYTE // or TEXT? // or MONEY	WITHOUT_CLASSIFICATION	0.9999567968562232	WITHOUT_CLASSIFICATION	4.320314377674993E-5	TEST
// strip table-owner because Informix always returns constraint names as "<table-owner>.<constraint-name>"	WITHOUT_CLASSIFICATION	0.9999998396867996	WITHOUT_CLASSIFICATION	1.6031320045825578E-7	TEST
// build the map of standard ANSI SQL aggregation functions ~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999994805367465	WITHOUT_CLASSIFICATION	5.194632536124842E-7	TEST
//pre H3.2 behavior: super.getReturnType(ct, m);	WITHOUT_CLASSIFICATION	0.999997726320029	WITHOUT_CLASSIFICATION	2.273679971031578E-6	TEST
// finally use the sqltype if == on Hibernate types did not find a match.	WITHOUT_CLASSIFICATION	0.999999162873904	WITHOUT_CLASSIFICATION	8.371260960990066E-7	TEST
//because numeric can be anything	WITHOUT_CLASSIFICATION	0.9999972211745776	WITHOUT_CLASSIFICATION	2.77882542244798E-6	TEST
// constructors and factory methods ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999984772518878	WITHOUT_CLASSIFICATION	1.5227481121982488E-6	TEST
// standard sql92 functions (can be overridden by subclasses)	WITHOUT_CLASSIFICATION	0.9999993664160894	WITHOUT_CLASSIFICATION	6.335839105329579E-7	TEST
//map second/minute/hour/day/month/year to ANSI extract(), override on subclasses	WITHOUT_CLASSIFICATION	0.9999996623714948	WITHOUT_CLASSIFICATION	3.376285050751143E-7	TEST
// register hibernate types for default use in scalar sqlquery type auto detection	WITHOUT_CLASSIFICATION	0.9999996083724881	WITHOUT_CLASSIFICATION	3.916275118966026E-7	TEST
// database type mapping support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999993492666409	WITHOUT_CLASSIFICATION	6.507333590200436E-7	TEST
// hibernate type mapping support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999987531389336	WITHOUT_CLASSIFICATION	1.2468610663889305E-6	TEST
// keyword support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999849311264462	WITHOUT_CLASSIFICATION	1.5068873553907565E-5	TEST
// native identifier generatiion ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999968053211454	WITHOUT_CLASSIFICATION	3.1946788544724337E-6	TEST
// IDENTITY support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999792585835076	WITHOUT_CLASSIFICATION	2.0741416492354016E-5	TEST
// SEQUENCE support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999807707839028	WITHOUT_CLASSIFICATION	1.9229216097183518E-5	TEST
// GUID support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999809153824757	WITHOUT_CLASSIFICATION	1.9084617524366358E-5	TEST
// limit/offset support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999925167822372	WITHOUT_CLASSIFICATION	7.483217762798524E-6	TEST
// by default we report no support	WITHOUT_CLASSIFICATION	0.9999988618280702	WITHOUT_CLASSIFICATION	1.1381719297635438E-6	TEST
// by default we report no support for NOWAIT lock semantics	WITHOUT_CLASSIFICATION	0.9999974462688715	WITHOUT_CLASSIFICATION	2.5537311285575874E-6	TEST
// table support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999930893214093	WITHOUT_CLASSIFICATION	6.9106785906936135E-6	TEST
// temporary table support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999956639139431	WITHOUT_CLASSIFICATION	4.33608605689307E-6	TEST
// callable statement support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999992619768776	WITHOUT_CLASSIFICATION	7.380231223480489E-7	TEST
// current timestamp support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999975752512451	WITHOUT_CLASSIFICATION	2.424748754947212E-6	TEST
// SQLException support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999977452186283	WITHOUT_CLASSIFICATION	2.2547813717292787E-6	TEST
// miscellaneous support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999979544953143	WITHOUT_CLASSIFICATION	2.045504685801484E-6	TEST
// identifier quoting support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999926876837592	WITHOUT_CLASSIFICATION	7.312316240823517E-6	TEST
// DDL support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999790186743793	WITHOUT_CLASSIFICATION	2.09813256207123E-5	TEST
// grrr... for differentiation of mysql storage engines	WITHOUT_CLASSIFICATION	0.9999992679920213	WITHOUT_CLASSIFICATION	7.320079785643009E-7	TEST
// Informational metadata ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999974846408104	WITHOUT_CLASSIFICATION	2.5153591895548326E-6	TEST
// return false here, as most databases do not properly support this construct...	WITHOUT_CLASSIFICATION	0.9999999137583876	WITHOUT_CLASSIFICATION	8.624161237263779E-8	TEST
// Mckoi has no known variation of a "SELECT ... FOR UPDATE" syntax...	WITHOUT_CLASSIFICATION	0.9999998774915497	WITHOUT_CLASSIFICATION	1.2250845030166215E-7	TEST
// Oracle8 and previous define only a "DATE" type which //      is used to represent all aspects of date/time	WITHOUT_CLASSIFICATION	0.9999999725542271	WITHOUT_CLASSIFICATION	2.7445772837960897E-8	TEST
//starts with 1, implicitly	WITHOUT_CLASSIFICATION	0.9999875174582963	WITHOUT_CLASSIFICATION	1.248254170375568E-5	TEST
//" cascade";	WITHOUT_CLASSIFICATION	0.9999567987876126	WITHOUT_CLASSIFICATION	4.3201212387494014E-5	TEST
//trim off the length/precision/scale	WITHOUT_CLASSIFICATION	0.999996044754279	WITHOUT_CLASSIFICATION	3.95524572112965E-6	TEST
/*public boolean dropTemporaryTableAfterUse() {	WITHOUT_CLASSIFICATION	0.9999965998901948	WITHOUT_CLASSIFICATION	3.400109805223062E-6	TEST
// CHECK VIOLATION	WITHOUT_CLASSIFICATION	0.9999645248950535	WITHOUT_CLASSIFICATION	3.5475104946609076E-5	TEST
// UNIQUE VIOLATION	WITHOUT_CLASSIFICATION	0.999961222692314	WITHOUT_CLASSIFICATION	3.877730768603348E-5	TEST
// FOREIGN KEY VIOLATION	WITHOUT_CLASSIFICATION	0.9999606207236366	WITHOUT_CLASSIFICATION	3.9379276363398356E-5	TEST
// Overridden informational metadata ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999986387310712	WITHOUT_CLASSIFICATION	1.361268928754663E-6	TEST
// NOT NULL VIOLATION	WITHOUT_CLASSIFICATION	0.9995132134447782	WITHOUT_CLASSIFICATION	4.8678655522190633E-4	TEST
// ALL OTHER	WITHOUT_CLASSIFICATION	0.9999476630212474	WITHOUT_CLASSIFICATION	5.2336978752477863E-5	TEST
// Register the type of the out param - PostgreSQL uses Types.OTHER	WITHOUT_CLASSIFICATION	0.9999974894351753	WITHOUT_CLASSIFICATION	2.5105648247725877E-6	TEST
// seems to not really... //	WITHOUT_CLASSIFICATION	0.9999995991975846	WITHOUT_CLASSIFICATION	4.008024153467787E-7	TEST
// seems to have spotty LOB suppport	WITHOUT_CLASSIFICATION	0.9999980054796767	WITHOUT_CLASSIFICATION	1.9945203233895655E-6	TEST
// HHH-2300	WITHOUT_CLASSIFICATION	0.9999436005826909	WITHOUT_CLASSIFICATION	5.639941730910491E-5	TEST
// ignore (probably H2 not in the classpath)	WITHOUT_CLASSIFICATION	0.9999992633348005	WITHOUT_CLASSIFICATION	7.366651996086685E-7	TEST
// Numeric Functions ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999920612451119	WITHOUT_CLASSIFICATION	7.938754888111511E-6	TEST
// String Functions ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999967584263525	WITHOUT_CLASSIFICATION	3.241573647494585E-6	TEST
// Time and Date Functions ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999985062876651	WITHOUT_CLASSIFICATION	1.4937123349186532E-6	TEST
// System Functions ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999936718939301	WITHOUT_CLASSIFICATION	6.328106069958304E-6	TEST
// not null is implicit	WITHOUT_CLASSIFICATION	0.99999240604457	WITHOUT_CLASSIFICATION	7.5939554299502495E-6	TEST
// 23000: Check constraint violation: {0} // 23001: Unique index or primary key violation: {0}	WITHOUT_CLASSIFICATION	0.9999999133299956	WITHOUT_CLASSIFICATION	8.667000436423443E-8	TEST
// Display the dialect version.	WITHOUT_CLASSIFICATION	0.9999989251158236	WITHOUT_CLASSIFICATION	1.0748841764580018E-6	TEST
// The RDMS concat() function only supports 2 parameters	WITHOUT_CLASSIFICATION	0.9999996770910289	WITHOUT_CLASSIFICATION	3.22908971193553E-7	TEST
// Dialect method overrides ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999974916285271	WITHOUT_CLASSIFICATION	2.5083714728905627E-6	TEST
// Original Dialect.java returns " for update";	WITHOUT_CLASSIFICATION	0.9999990346368723	WITHOUT_CLASSIFICATION	9.653631276398145E-7	TEST
// Verify the state of this new method in Hibernate 3.0 Dialect.java	WITHOUT_CLASSIFICATION	0.9999995819883102	WITHOUT_CLASSIFICATION	4.1801168984883406E-7	TEST
// Origial Dialect.java returns true;	WITHOUT_CLASSIFICATION	0.9999992980320093	WITHOUT_CLASSIFICATION	7.019679907497092E-7	TEST
// The keyword used to specify a nullable column.	WITHOUT_CLASSIFICATION	0.9999998712394519	WITHOUT_CLASSIFICATION	1.2876054808241202E-7	TEST
// *** Sequence methods - start. The RDMS dialect needs these	WITHOUT_CLASSIFICATION	0.9999998022873146	WITHOUT_CLASSIFICATION	1.9771268543969844E-7	TEST
// methods to make it possible to use the Native Id generator	WITHOUT_CLASSIFICATION	0.9999995676655381	WITHOUT_CLASSIFICATION	4.3233446182776214E-7	TEST
// The where clause was added to eliminate this statement from Brute Force Searches.	WITHOUT_CLASSIFICATION	0.9999998133981823	WITHOUT_CLASSIFICATION	1.866018175486934E-7	TEST
// *** Sequence methods - end	WITHOUT_CLASSIFICATION	0.9999987373536221	WITHOUT_CLASSIFICATION	1.2626463778909073E-6	TEST
// Overridden informational metadata ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999986387310712	WITHOUT_CLASSIFICATION	1.361268928754663E-6	TEST
//starts with 1, implicitly	WITHOUT_CLASSIFICATION	0.9999875174582963	WITHOUT_CLASSIFICATION	1.248254170375568E-5	TEST
// We must return a valid RDMS/RSA command from this method to // prevent RDMS/RSA from issuing *ERROR 400	WITHOUT_CLASSIFICATION	0.9999999416258784	WITHOUT_CLASSIFICATION	5.837412174892485E-8	TEST
// Used with DROP TABLE to delete all records in the table.	WITHOUT_CLASSIFICATION	0.9999998152513682	WITHOUT_CLASSIFICATION	1.8474863183243462E-7	TEST
// RDMS supports the UNION ALL clause.	WITHOUT_CLASSIFICATION	0.9999989090189645	WITHOUT_CLASSIFICATION	1.0909810355017096E-6	TEST
// RDMS has no known variation of a "SELECT ... FOR UPDATE" syntax...	WITHOUT_CLASSIFICATION	0.999999843140529	WITHOUT_CLASSIFICATION	1.568594710637229E-7	TEST
// Multi-param dialect functions...	WITHOUT_CLASSIFICATION	0.9999993482070771	WITHOUT_CLASSIFICATION	6.517929228568353E-7	TEST
// function templates	WITHOUT_CLASSIFICATION	0.9999947935716116	WITHOUT_CLASSIFICATION	5.206428388330826E-6	TEST
//not null is implicit	WITHOUT_CLASSIFICATION	0.9999638352041383	WITHOUT_CLASSIFICATION	3.616479586155532E-5	TEST
// this assumes schema support, which is present in 1.8.0 and later...	WITHOUT_CLASSIFICATION	0.9999996844806612	WITHOUT_CLASSIFICATION	3.155193387113428E-7	TEST
// HSQLDB only supports READ_UNCOMMITTED transaction isolation	WITHOUT_CLASSIFICATION	0.9999996219684036	WITHOUT_CLASSIFICATION	3.7803159637080664E-7	TEST
// Multi-param string dialect functions...	WITHOUT_CLASSIFICATION	0.9999996802675957	WITHOUT_CLASSIFICATION	3.197324042717637E-7	TEST
// Multi-param numeric dialect functions...	WITHOUT_CLASSIFICATION	0.9999995904263189	WITHOUT_CLASSIFICATION	4.095736811206525E-7	TEST
// Multi-param date dialect functions...	WITHOUT_CLASSIFICATION	0.9999995608772627	WITHOUT_CLASSIFICATION	4.391227372539518E-7	TEST
// simple nullability constraint	WITHOUT_CLASSIFICATION	0.9999996668872458	WITHOUT_CLASSIFICATION	3.331127541046734E-7	TEST
// Overridden informational metadata ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999986387310712	WITHOUT_CLASSIFICATION	1.361268928754663E-6	TEST
// Overridden informational metadata ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999986387310712	WITHOUT_CLASSIFICATION	1.361268928754663E-6	TEST
// not final-static to avoid possible classcast exceptions if using different oracle drivers.	WITHOUT_CLASSIFICATION	0.9999999156133136	WITHOUT_CLASSIFICATION	8.438668644866814E-8	TEST
//	WITHOUT_CLASSIFICATION	0.999864478982662	WITHOUT_CLASSIFICATION	1.3552101733804665E-4	TEST
// TimesTen has no BLOB/CLOB support, but these types may be suitable  // for some applications. The length is limited to 4 million bytes.	WITHOUT_CLASSIFICATION	0.9999998705677456	WITHOUT_CLASSIFICATION	1.2943225430636336E-7	TEST
// new methods in dialect3	WITHOUT_CLASSIFICATION	0.9999991304817051	WITHOUT_CLASSIFICATION	8.695182949095982E-7	TEST
/*public boolean supportsForUpdateNowait() {	WITHOUT_CLASSIFICATION	0.9999942251527955	WITHOUT_CLASSIFICATION	5.77484720464695E-6	TEST
// TimesTen has no known variation of a "SELECT ... FOR UPDATE" syntax...	WITHOUT_CLASSIFICATION	0.999999920499771	WITHOUT_CLASSIFICATION	7.950022891267567E-8	TEST
// iterate entries ordered by capacity to find first fit	WITHOUT_CLASSIFICATION	0.9999867677858547	WITHOUT_CLASSIFICATION	1.3232214145222018E-5	TEST
// add new ordered map	WITHOUT_CLASSIFICATION	0.9999943139192929	WITHOUT_CLASSIFICATION	5.68608070699727E-6	TEST
//	WITHOUT_CLASSIFICATION	0.999864478982662	WITHOUT_CLASSIFICATION	1.3552101733804665E-4	TEST
// Overridden informational metadata ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999986387310712	WITHOUT_CLASSIFICATION	1.361268928754663E-6	TEST
//	WITHOUT_CLASSIFICATION	0.999864478982662	WITHOUT_CLASSIFICATION	1.3552101733804665E-4	TEST
// sql server just returns automatically	WITHOUT_CLASSIFICATION	0.9999993802953617	WITHOUT_CLASSIFICATION	6.197046381969721E-7	TEST
//	WITHOUT_CLASSIFICATION	0.999864478982662	WITHOUT_CLASSIFICATION	1.3552101733804665E-4	TEST
//registerColumnType data types	WITHOUT_CLASSIFICATION	0.9999905446614621	WITHOUT_CLASSIFICATION	9.455338538008572E-6	TEST
// hibernate seems to ignore this type...	WITHOUT_CLASSIFICATION	0.9999994150524982	WITHOUT_CLASSIFICATION	5.849475017049714E-7	TEST
// IBID for current_time and current_date	WITHOUT_CLASSIFICATION	0.9999973954521039	WITHOUT_CLASSIFICATION	2.604547896260851E-6	TEST
// Tell hibernate to use getBytes instead of getBinaryStream	WITHOUT_CLASSIFICATION	0.9999993373120695	WITHOUT_CLASSIFICATION	6.626879304896194E-7	TEST
// No batch statements	WITHOUT_CLASSIFICATION	0.9999917247228756	WITHOUT_CLASSIFICATION	8.275277124448197E-6	TEST
/*	WITHOUT_CLASSIFICATION	0.9998809807601161	WITHOUT_CLASSIFICATION	1.1901923988389276E-4	TEST
//no pointbase BIT	WITHOUT_CLASSIFICATION	0.9999849214681159	WITHOUT_CLASSIFICATION	1.5078531884045144E-5	TEST
//no pointbase TINYINT	WITHOUT_CLASSIFICATION	0.9999786783794589	WITHOUT_CLASSIFICATION	2.1321620541086565E-5	TEST
// Pointbase has no known variation of a "SELECT ... FOR UPDATE" syntax...	WITHOUT_CLASSIFICATION	0.9999999152075777	WITHOUT_CLASSIFICATION	8.479242223568881E-8	TEST
//starts with 1, implicitly	WITHOUT_CLASSIFICATION	0.9999875174582963	WITHOUT_CLASSIFICATION	1.248254170375568E-5	TEST
// The current_timestamp is more accurate, but only known to be supported // in SQL Server 7.0 and later (i.e., Sybase not known to support it at all)	WITHOUT_CLASSIFICATION	0.9999999000888886	WITHOUT_CLASSIFICATION	9.99111114875827E-8	TEST
// SQL Server (at least up through 2005) does not support defining // cascade delete constraints which can circel back to the mutating // table	WITHOUT_CLASSIFICATION	0.9999999830199137	WITHOUT_CLASSIFICATION	1.6980086328991363E-8	TEST
// here assume SQLServer2005 using snapshot isolation, which does not have this problem	WITHOUT_CLASSIFICATION	0.9999999339385717	WITHOUT_CLASSIFICATION	6.606142828091181E-8	TEST
//	WITHOUT_CLASSIFICATION	0.999864478982662	WITHOUT_CLASSIFICATION	1.3552101733804665E-4	TEST
//	WITHOUT_CLASSIFICATION	0.999864478982662	WITHOUT_CLASSIFICATION	1.3552101733804665E-4	TEST
//	WITHOUT_CLASSIFICATION	0.999864478982662	WITHOUT_CLASSIFICATION	1.3552101733804665E-4	TEST
//starts with 1, implicitly	WITHOUT_CLASSIFICATION	0.9999875174582963	WITHOUT_CLASSIFICATION	1.248254170375568E-5	TEST
/* package-private */	WITHOUT_CLASSIFICATION	0.9999940067473917	WITHOUT_CLASSIFICATION	5.993252608362014E-6	TEST
// sql server just returns automatically	WITHOUT_CLASSIFICATION	0.9999993802953617	WITHOUT_CLASSIFICATION	6.197046381969721E-7	TEST
//Sybase BIT type does not support null values	WITHOUT_CLASSIFICATION	0.9999953819277586	WITHOUT_CLASSIFICATION	4.618072241357354E-6	TEST
//	WITHOUT_CLASSIFICATION	0.999864478982662	WITHOUT_CLASSIFICATION	1.3552101733804665E-4	TEST
// Overridden informational metadata ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999986387310712	WITHOUT_CLASSIFICATION	1.361268928754663E-6	TEST
//	WITHOUT_CLASSIFICATION	0.999864478982662	WITHOUT_CLASSIFICATION	1.3552101733804665E-4	TEST
//not null ... (start with 1) is implicit	WITHOUT_CLASSIFICATION	0.9999942830060713	WITHOUT_CLASSIFICATION	5.716993928708687E-6	TEST
// Overridden informational metadata ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999986387310712	WITHOUT_CLASSIFICATION	1.361268928754663E-6	TEST
// Oracle driver reports to support getGeneratedKeys(), but they only // support the version taking an array of the names of the columns to // be returned (via its RETURNING clause).  No other driver seems to // support this overloaded version.	WITHOUT_CLASSIFICATION	0.9999999949469872	WITHOUT_CLASSIFICATION	5.053012815331389E-9	TEST
// Multi-param string dialect functions...	WITHOUT_CLASSIFICATION	0.9999996802675957	WITHOUT_CLASSIFICATION	3.197324042717637E-7	TEST
// Multi-param numeric dialect functions...	WITHOUT_CLASSIFICATION	0.9999995904263189	WITHOUT_CLASSIFICATION	4.095736811206525E-7	TEST
// Multi-param date dialect functions...	WITHOUT_CLASSIFICATION	0.9999995608772627	WITHOUT_CLASSIFICATION	4.391227372539518E-7	TEST
// add another (inner) nested select // add the main query // close off the inner nested select	WITHOUT_CLASSIFICATION	0.9999982566831385	WITHOUT_CLASSIFICATION	1.7433168615499024E-6	TEST
// add the main query	WITHOUT_CLASSIFICATION	0.9999966626142917	WITHOUT_CLASSIFICATION	3.337385708295143E-6	TEST
//add the restriction to the outer select	WITHOUT_CLASSIFICATION	0.9999938923280302	WITHOUT_CLASSIFICATION	6.10767196982866E-6	TEST
// This assumes you will want to ignore any update counts 	WITHOUT_CLASSIFICATION	0.9999998686422986	WITHOUT_CLASSIFICATION	1.3135770144112486E-7	TEST
// You may still have other ResultSets or update counts left to process here  // but you can't do it now or the ResultSet you just got will be closed 	WITHOUT_CLASSIFICATION	0.9999998882840212	WITHOUT_CLASSIFICATION	1.1171597878970777E-7	TEST
// Overridden informational metadata ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999986387310712	WITHOUT_CLASSIFICATION	1.361268928754663E-6	TEST
//starts with 1, implicitly	WITHOUT_CLASSIFICATION	0.9999875174582963	WITHOUT_CLASSIFICATION	1.248254170375568E-5	TEST
// simple nullability constraint	WITHOUT_CLASSIFICATION	0.9999996668872458	WITHOUT_CLASSIFICATION	3.331127541046734E-7	TEST
// not final-static to avoid possible classcast exceptions if using different oracle drivers.	WITHOUT_CLASSIFICATION	0.9999999156133136	WITHOUT_CLASSIFICATION	8.438668644866814E-8	TEST
//	WITHOUT_CLASSIFICATION	0.999864478982662	WITHOUT_CLASSIFICATION	1.3552101733804665E-4	TEST
// features which change between 8i, 9i, and 10g ~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999977409318435	WITHOUT_CLASSIFICATION	2.2590681564948254E-6	TEST
// features which remain constant across 8i, 9i, and 10g ~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999996041717986	WITHOUT_CLASSIFICATION	3.9582820146742195E-7	TEST
// binary %Stream // character %Stream	WITHOUT_CLASSIFICATION	0.9999970313177986	WITHOUT_CLASSIFICATION	2.9686822013201642E-6	TEST
//getDefaultProperties().setProperty(Environment.STATEMENT_BATCH_SIZE, NO_BATCH);	WITHOUT_CLASSIFICATION	0.9999981708204942	WITHOUT_CLASSIFICATION	1.8291795058111495E-6	TEST
// hibernate impelemnts cast in Dialect.java	WITHOUT_CLASSIFICATION	0.9999992394913291	WITHOUT_CLASSIFICATION	7.60508670987252E-7	TEST
// aggregate functions shouldn't be registered, right? //registerFunction( "list", new StandardSQLFunction("list",Hibernate.STRING) ); // stopped on $list	WITHOUT_CLASSIFICATION	0.9999998701919594	WITHOUT_CLASSIFICATION	1.2980804065416014E-7	TEST
// DDL support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999790186743793	WITHOUT_CLASSIFICATION	2.09813256207123E-5	TEST
// below is for Cache' that don't have str in 2007.1 there is str and we register str directly	WITHOUT_CLASSIFICATION	0.9999969223706929	WITHOUT_CLASSIFICATION	3.0776293070031138E-6	TEST
// note that %string is deprecated	WITHOUT_CLASSIFICATION	0.9999950224921516	WITHOUT_CLASSIFICATION	4.9775078484825545E-6	TEST
// %upper is deprecated	WITHOUT_CLASSIFICATION	0.9999854712365415	WITHOUT_CLASSIFICATION	1.4528763458645035E-5	TEST
// The syntax used to add a foreign key constraint to a table.	WITHOUT_CLASSIFICATION	0.9999998082332703	WITHOUT_CLASSIFICATION	1.917667297313038E-7	TEST
// identifier-commalist	WITHOUT_CLASSIFICATION	0.999996908094834	WITHOUT_CLASSIFICATION	3.091905165963289E-6	TEST
// IDENTITY support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999792585835076	WITHOUT_CLASSIFICATION	2.0741416492354016E-5	TEST
// SEQUENCE support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999807707839028	WITHOUT_CLASSIFICATION	1.9229216097183518E-5	TEST
// temporary table support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999956639139431	WITHOUT_CLASSIFICATION	4.33608605689307E-6	TEST
// identifier-commalist	WITHOUT_CLASSIFICATION	0.999996908094834	WITHOUT_CLASSIFICATION	3.091905165963289E-6	TEST
// The syntax used to add a column to a table	WITHOUT_CLASSIFICATION	0.999999642438739	WITHOUT_CLASSIFICATION	3.575612610614861E-7	TEST
// Completely optional cascading drop clause.	WITHOUT_CLASSIFICATION	0.9999998009671982	WITHOUT_CLASSIFICATION	1.99032801773376E-7	TEST
// lock acquisition support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999982031771597	WITHOUT_CLASSIFICATION	1.7968228402576464E-6	TEST
// LIMIT support (ala TOP) ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999941030111866	WITHOUT_CLASSIFICATION	5.896988813427015E-6	TEST
// InterSystems Cache' does not current support "SELECT ... FOR UPDATE" syntax... // Set your transaction mode to READ_COMMITTED before using	WITHOUT_CLASSIFICATION	0.9999999659676645	WITHOUT_CLASSIFICATION	3.403233553297057E-8	TEST
// Overridden informational metadata ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999986387310712	WITHOUT_CLASSIFICATION	1.361268928754663E-6	TEST
// Overridden informational metadata ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999986387310712	WITHOUT_CLASSIFICATION	1.361268928754663E-6	TEST
/*<String>*/	WITHOUT_CLASSIFICATION	0.9999369606837736	WITHOUT_CLASSIFICATION	6.303931622637408E-5	TEST
// callable statement support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999992619768776	WITHOUT_CLASSIFICATION	7.380231223480489E-7	TEST
// miscellaneous support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999979544953143	WITHOUT_CLASSIFICATION	2.045504685801484E-6	TEST
// The keyword used to specify a nullable column.	WITHOUT_CLASSIFICATION	0.9999998712394519	WITHOUT_CLASSIFICATION	1.2876054808241202E-7	TEST
// Does the LIMIT clause come at the start of the SELECT statement, rather than at the end?	WITHOUT_CLASSIFICATION	0.9999997155726201	WITHOUT_CLASSIFICATION	2.8442737980501E-7	TEST
// Does the LIMIT clause take a "maximum" row number instead of a total number of returned rows?	WITHOUT_CLASSIFICATION	0.9999990918415447	WITHOUT_CLASSIFICATION	9.081584552291044E-7	TEST
// The name of the SQL function that transforms a string to lowercase	WITHOUT_CLASSIFICATION	0.9999998895485598	WITHOUT_CLASSIFICATION	1.104514401332246E-7	TEST
// Create an OuterJoinGenerator for this dialect.	WITHOUT_CLASSIFICATION	0.9999991188077256	WITHOUT_CLASSIFICATION	8.811922743384933E-7	TEST
// The keyword used to insert a row without specifying // any column values	WITHOUT_CLASSIFICATION	0.9999999415902803	WITHOUT_CLASSIFICATION	5.840971974371679E-8	TEST
//registerFunction( "trim", new StandardSQLFunction( "trim", Hibernate.STRING ) );	WITHOUT_CLASSIFICATION	0.9999984307581706	WITHOUT_CLASSIFICATION	1.569241829419985E-6	TEST
//skip the FROM keyword in params	WITHOUT_CLASSIFICATION	0.9999792486910787	WITHOUT_CLASSIFICATION	2.0751308921298988E-5	TEST
/*package*/	WITHOUT_CLASSIFICATION	0.9999419796562319	WITHOUT_CLASSIFICATION	5.8020343768033676E-5	TEST
// potentialTrimCharacterArgIndex = 1 assumes that a // trim-specification has been specified.  we handle the // exception to that explicitly	WITHOUT_CLASSIFICATION	0.9999999482717356	WITHOUT_CLASSIFICATION	5.172826437987905E-8	TEST
// SQLFunction implementation	WITHOUT_CLASSIFICATION	0.9999993038363364	WITHOUT_CLASSIFICATION	6.961636634721508E-7	TEST
// conceivable that the dialect ctor could throw HibernateExceptions, so don't re-wrap	WITHOUT_CLASSIFICATION	0.9999998401736053	WITHOUT_CLASSIFICATION	1.5982639470229653E-7	TEST
// register the standard dialect resolver	WITHOUT_CLASSIFICATION	0.999994305748802	WITHOUT_CLASSIFICATION	5.694251197921562E-6	TEST
// register resolvers set via Environment property	WITHOUT_CLASSIFICATION	0.9999982248898603	WITHOUT_CLASSIFICATION	1.7751101396597277E-6	TEST
// kept for backward compatibility until after the 3.1beta5 release of HA	WITHOUT_CLASSIFICATION	0.9999971157568305	WITHOUT_CLASSIFICATION	2.884243169585348E-6	TEST
//cache the hashcode	WITHOUT_CLASSIFICATION	0.999971908487441	WITHOUT_CLASSIFICATION	2.8091512559048047E-5	TEST
// the CascadingAction contract ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999975673283167	WITHOUT_CLASSIFICATION	2.432671683305211E-6	TEST
// the CascadingAction implementations ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999988112417055	WITHOUT_CLASSIFICATION	1.1887582944271186E-6	TEST
// delete does cascade to uninitialized collections	WITHOUT_CLASSIFICATION	0.9999987561994249	WITHOUT_CLASSIFICATION	1.2438005751146865E-6	TEST
// orphans should be deleted during delete	WITHOUT_CLASSIFICATION	0.9999943985793885	WITHOUT_CLASSIFICATION	5.6014206114023455E-6	TEST
/*(LockMode) anything*/	WITHOUT_CLASSIFICATION	0.9999963874812258	WITHOUT_CLASSIFICATION	3.612518774290005E-6	TEST
// lock doesn't cascade to uninitialized collections	WITHOUT_CLASSIFICATION	0.9999989988307434	WITHOUT_CLASSIFICATION	1.0011692566194546E-6	TEST
// refresh doesn't cascade to uninitialized collections	WITHOUT_CLASSIFICATION	0.9999993393178165	WITHOUT_CLASSIFICATION	6.606821834306625E-7	TEST
// evicts don't cascade to uninitialized collections	WITHOUT_CLASSIFICATION	0.999999206250335	WITHOUT_CLASSIFICATION	7.937496649170419E-7	TEST
// saves / updates don't cascade to uninitialized collections	WITHOUT_CLASSIFICATION	0.9999993178299009	WITHOUT_CLASSIFICATION	6.82170099018599E-7	TEST
// orphans should be deleted during save/update	WITHOUT_CLASSIFICATION	0.9999967986715838	WITHOUT_CLASSIFICATION	3.2013284162354293E-6	TEST
// for deprecated saveOrUpdateCopy()	WITHOUT_CLASSIFICATION	0.9999883905300349	WITHOUT_CLASSIFICATION	1.1609469965096589E-5	TEST
// persists don't cascade to uninitialized collections	WITHOUT_CLASSIFICATION	0.9999992291296123	WITHOUT_CLASSIFICATION	7.708703878618936E-7	TEST
//a proxy cannot be transient and it breaks ForeignKeys.isTransient	WITHOUT_CLASSIFICATION	0.9999937532426129	WITHOUT_CLASSIFICATION	6.246757387204931E-6	TEST
// replicate does cascade to uninitialized collections	WITHOUT_CLASSIFICATION	0.9999994333393513	WITHOUT_CLASSIFICATION	5.666606487190077E-7	TEST
// static helper methods ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999968856380305	WITHOUT_CLASSIFICATION	3.1143619694597625E-6	TEST
// handles arrays and newly instantiated collections	WITHOUT_CLASSIFICATION	0.999999052815612	WITHOUT_CLASSIFICATION	9.471843880918373E-7	TEST
// Actually the semantics of the next three are really "Bag" // Note that, unlike objects, collection insertions, updates, // deletions are not really remembered between flushes. We // just re-use the same Lists for convenience.	WITHOUT_CLASSIFICATION	0.9999999034381188	WITHOUT_CLASSIFICATION	9.656188115124107E-8	TEST
// Add these directly to the executions queue	WITHOUT_CLASSIFICATION	0.9999993105091551	WITHOUT_CLASSIFICATION	6.89490844904145E-7	TEST
// continue loop	WITHOUT_CLASSIFICATION	0.999996663673444	WITHOUT_CLASSIFICATION	3.3363265559833396E-6	TEST
//sort the updates by fk	WITHOUT_CLASSIFICATION	0.9999462229046838	WITHOUT_CLASSIFICATION	5.377709531615141E-5	TEST
//sort the updates by pk	WITHOUT_CLASSIFICATION	0.9999569753822587	WITHOUT_CLASSIFICATION	4.302461774124495E-5	TEST
// the mapping of entity names to their latest batch numbers.	WITHOUT_CLASSIFICATION	0.9999989799157494	WITHOUT_CLASSIFICATION	1.0200842505332647E-6	TEST
// the map of batch numbers to EntityInsertAction lists	WITHOUT_CLASSIFICATION	0.9999996237328698	WITHOUT_CLASSIFICATION	3.762671302025285E-7	TEST
//optimize the hash size to eliminate a rehash.	WITHOUT_CLASSIFICATION	0.9999965579019949	WITHOUT_CLASSIFICATION	3.4420980051882225E-6	TEST
// the list of entity names that indicate the batch number	WITHOUT_CLASSIFICATION	0.9999986852778593	WITHOUT_CLASSIFICATION	1.3147221406718076E-6	TEST
// remove the current element from insertions. It will be added back later.	WITHOUT_CLASSIFICATION	0.9999995351653989	WITHOUT_CLASSIFICATION	4.648346011658655E-7	TEST
// the entity associated with the current action.	WITHOUT_CLASSIFICATION	0.9999982048124554	WITHOUT_CLASSIFICATION	1.7951875446508172E-6	TEST
// There is already an existing batch for this type of entity. // Check to see if the latest batch is acceptable.	WITHOUT_CLASSIFICATION	0.9999998095927414	WITHOUT_CLASSIFICATION	1.9040725869148125E-7	TEST
// now rebuild the insertions list. There is a batch for each entry in the name list.	WITHOUT_CLASSIFICATION	0.9999994211632216	WITHOUT_CLASSIFICATION	5.788367784143483E-7	TEST
// the current batch number is the latest batch for this entity type.	WITHOUT_CLASSIFICATION	0.9999883733818556	WITHOUT_CLASSIFICATION	1.162661814432617E-5	TEST
// loop through all the associations of the current entity and make sure that they are processed // before the current batch number	WITHOUT_CLASSIFICATION	0.9999999225558043	WITHOUT_CLASSIFICATION	7.744419569568832E-8	TEST
// find the batch number associated with the current association, if any.	WITHOUT_CLASSIFICATION	0.9999987352267731	WITHOUT_CLASSIFICATION	1.2647732269184453E-6	TEST
// create a new batch for this type. The batch number is the number of current batches.	WITHOUT_CLASSIFICATION	0.9999986295778938	WITHOUT_CLASSIFICATION	1.3704221062398274E-6	TEST
// loop through all the associated entities and make sure they have been // processed before the latest // batch associated with this entity type.	WITHOUT_CLASSIFICATION	0.9999992340365941	WITHOUT_CLASSIFICATION	7.659634059127312E-7	TEST
// since this entity will now be processed in the latest possible batch, // we can be assured that it will come after all other associations, // there's not need to continue checking.	WITHOUT_CLASSIFICATION	0.9999999087156232	WITHOUT_CLASSIFICATION	9.128437686723294E-8	TEST
//cascade to current collection elements	WITHOUT_CLASSIFICATION	0.999998944556479	WITHOUT_CLASSIFICATION	1.0554435209456752E-6	TEST
//not really necessary, but good for consistency...	WITHOUT_CLASSIFICATION	0.9999941375400186	WITHOUT_CLASSIFICATION	5.862459981341413E-6	TEST
// we can't cascade to non-embedded elements	WITHOUT_CLASSIFICATION	0.9999986702616648	WITHOUT_CLASSIFICATION	1.3297383351797313E-6	TEST
//a newly instantiated collection can't have orphans	WITHOUT_CLASSIFICATION	0.9999971827650254	WITHOUT_CLASSIFICATION	2.817234974567518E-6	TEST
// handle orphaned entities!!	WITHOUT_CLASSIFICATION	0.9999957891688462	WITHOUT_CLASSIFICATION	4.2108311536611535E-6	TEST
// Loaded entity instances, by EntityUniqueKey	WITHOUT_CLASSIFICATION	0.9999976082867669	WITHOUT_CLASSIFICATION	2.3917132331162196E-6	TEST
// Identity map of EntityEntry instances, by the entity instance	WITHOUT_CLASSIFICATION	0.9999991515872965	WITHOUT_CLASSIFICATION	8.484127036139805E-7	TEST
// Entity proxies, by EntityKey	WITHOUT_CLASSIFICATION	0.9999906123696799	WITHOUT_CLASSIFICATION	9.387630320065662E-6	TEST
// Snapshots of current database state for entities // that have *not* been loaded	WITHOUT_CLASSIFICATION	0.999999329170135	WITHOUT_CLASSIFICATION	6.70829864972955E-7	TEST
// Identity map of array holder ArrayHolder instances, by the array instance	WITHOUT_CLASSIFICATION	0.9999994152437567	WITHOUT_CLASSIFICATION	5.84756243277419E-7	TEST
// Collection wrappers, by the CollectionKey //key=CollectionKey, value=PersistentCollection	WITHOUT_CLASSIFICATION	0.9999996968413822	WITHOUT_CLASSIFICATION	3.031586177138551E-7	TEST
// Set of EntityKeys of deleted objects	WITHOUT_CLASSIFICATION	0.9999930328113624	WITHOUT_CLASSIFICATION	6.967188637572259E-6	TEST
// properties that we have tried to load, and not found in the database	WITHOUT_CLASSIFICATION	0.9999982486362086	WITHOUT_CLASSIFICATION	1.7513637913742561E-6	TEST
// A list of collection wrappers that were instantiating during result set // processing, that we will need to initialize at the end of the query	WITHOUT_CLASSIFICATION	0.9999999878154332	WITHOUT_CLASSIFICATION	1.2184566898627714E-8	TEST
// A container for collections we load up when the owning entity is not // yet loaded ... for now, this is purely transient!	WITHOUT_CLASSIFICATION	0.9999997932533417	WITHOUT_CLASSIFICATION	2.0674665838659377E-7	TEST
// Downgrade locks	WITHOUT_CLASSIFICATION	0.9999970244985261	WITHOUT_CLASSIFICATION	2.9755014739210957E-6	TEST
// any earlier proxy takes precedence	WITHOUT_CLASSIFICATION	0.99999839841683	WITHOUT_CLASSIFICATION	1.6015831699389687E-6	TEST
//unwrap the object	WITHOUT_CLASSIFICATION	0.9999869547134608	WITHOUT_CLASSIFICATION	1.3045286539137017E-5	TEST
//initialize + unwrap the object	WITHOUT_CLASSIFICATION	0.9999920945799525	WITHOUT_CLASSIFICATION	7.9054200473532E-6	TEST
//return the proxied object	WITHOUT_CLASSIFICATION	0.999955238888052	WITHOUT_CLASSIFICATION	4.4761111947922104E-5	TEST
//overwrite old proxy	WITHOUT_CLASSIFICATION	0.9999427539289424	WITHOUT_CLASSIFICATION	5.7246071057519176E-5	TEST
// early exit...	WITHOUT_CLASSIFICATION	0.9999973021575306	WITHOUT_CLASSIFICATION	2.697842469458176E-6	TEST
// or should it actually throw an exception?	WITHOUT_CLASSIFICATION	0.9999990184924146	WITHOUT_CLASSIFICATION	9.815075854796169E-7	TEST
//treat it just like a new collection	WITHOUT_CLASSIFICATION	0.999998403867264	WITHOUT_CLASSIFICATION	1.596132736040386E-6	TEST
//do this work only at the very highest level of the load //don't let this method be called recursively	WITHOUT_CLASSIFICATION	0.9999963383250648	WITHOUT_CLASSIFICATION	3.6616749352837864E-6	TEST
//note that each iteration of the loop may add new elements	WITHOUT_CLASSIFICATION	0.9999984966363895	WITHOUT_CLASSIFICATION	1.503363610398298E-6	TEST
//it might be an unwrapped collection reference! //try to find a wrapper (slowish)	WITHOUT_CLASSIFICATION	0.9999989645295717	WITHOUT_CLASSIFICATION	1.0354704282887819E-6	TEST
/*public boolean isNonExistant(EntityKey key) {	WITHOUT_CLASSIFICATION	0.9999939330677805	WITHOUT_CLASSIFICATION	6.066932219492457E-6	TEST
/*public boolean isNonExistant(EntityUniqueKey key) {	WITHOUT_CLASSIFICATION	0.9999947477833173	WITHOUT_CLASSIFICATION	5.252216682773118E-6	TEST
// iterate all the entities currently associated with the persistence context.	WITHOUT_CLASSIFICATION	0.9999992622306426	WITHOUT_CLASSIFICATION	7.37769357384346E-7	TEST
// does this entity entry pertain to the entity persister in which we are interested (owner)?	WITHOUT_CLASSIFICATION	0.9999968330539294	WITHOUT_CLASSIFICATION	3.1669460705537827E-6	TEST
//check if the managed object is the parent	WITHOUT_CLASSIFICATION	0.999983894346451	WITHOUT_CLASSIFICATION	1.6105653549019484E-5	TEST
// otherwise, the proxy was pruned during the serialization process	WITHOUT_CLASSIFICATION	0.9999992598083037	WITHOUT_CLASSIFICATION	7.401916962331157E-7	TEST
// adds remove as a sort-of alias for delete...	WITHOUT_CLASSIFICATION	0.9999985580789048	WITHOUT_CLASSIFICATION	1.4419210951759218E-6	TEST
//bad cast	WITHOUT_CLASSIFICATION	0.9999609166884763	WITHOUT_CLASSIFICATION	3.9083311523635635E-5	TEST
//return lhsPersister.getSubclassPropertyColumnNames(property);	WITHOUT_CLASSIFICATION	0.9999977031570295	WITHOUT_CLASSIFICATION	2.296842970423013E-6	TEST
//property-refs for associations defined on a //component are not supported, so no need to slice	WITHOUT_CLASSIFICATION	0.9999988174110113	WITHOUT_CLASSIFICATION	1.1825889886876226E-6	TEST
//if there is no property-ref, assume the join //is to the subclass table (ie. the table of the //subclass that the association belongs to)	WITHOUT_CLASSIFICATION	0.9999998284003685	WITHOUT_CLASSIFICATION	1.7159963156832042E-7	TEST
//handle a property-ref	WITHOUT_CLASSIFICATION	0.9999909825424999	WITHOUT_CLASSIFICATION	9.017457500133955E-6	TEST
/*NativeSQLQueryReturn*/	WITHOUT_CLASSIFICATION	0.999980384327619	WITHOUT_CLASSIFICATION	1.961567238101642E-5	TEST
//final boolean forceCacheRefresh,	WITHOUT_CLASSIFICATION	0.9999762956403224	WITHOUT_CLASSIFICATION	2.370435967766976E-5	TEST
// why is all others non final ?	WITHOUT_CLASSIFICATION	0.9999954572456977	WITHOUT_CLASSIFICATION	4.542754302350142E-6	TEST
//this.forceCacheRefresh = forceCacheRefresh;	WITHOUT_CLASSIFICATION	0.9999716333696034	WITHOUT_CLASSIFICATION	2.836663039670038E-5	TEST
// HELLA IMPORTANT OPTIMIZATION!!!	WITHOUT_CLASSIFICATION	0.9999424146594279	WITHOUT_CLASSIFICATION	5.758534057202823E-5	TEST
/*return that.type.equals(type) && 	WITHOUT_CLASSIFICATION	0.9999918248548392	WITHOUT_CLASSIFICATION	8.175145160885113E-6	TEST
//Must occur after resolving identifiers!	WITHOUT_CLASSIFICATION	0.9999871775449397	WITHOUT_CLASSIFICATION	1.282245506039082E-5	TEST
//take a snapshot	WITHOUT_CLASSIFICATION	0.9999819715026395	WITHOUT_CLASSIFICATION	1.8028497360570677E-5	TEST
// do a check	WITHOUT_CLASSIFICATION	0.9999942707028325	WITHOUT_CLASSIFICATION	5.72929716741845E-6	TEST
// the owning entity may have been deleted and its identifier unset due to // identifier-rollback; in which case, try to look up its identifier from // the persistence context	WITHOUT_CLASSIFICATION	0.9999998293872789	WITHOUT_CLASSIFICATION	1.7061272094617782E-7	TEST
// do the work	WITHOUT_CLASSIFICATION	0.9999818914207756	WITHOUT_CLASSIFICATION	1.810857922437432E-5	TEST
// We've been here before	WITHOUT_CLASSIFICATION	0.9999664826724135	WITHOUT_CLASSIFICATION	3.3517327586603525E-5	TEST
// it is or was referenced _somewhere_	WITHOUT_CLASSIFICATION	0.9999942438312454	WITHOUT_CLASSIFICATION	5.756168754711215E-6	TEST
// do the work	WITHOUT_CLASSIFICATION	0.9999818914207756	WITHOUT_CLASSIFICATION	1.810857922437432E-5	TEST
// if either its role changed,	WITHOUT_CLASSIFICATION	0.9999986648011135	WITHOUT_CLASSIFICATION	1.3351988865620726E-6	TEST
// or its key changed	WITHOUT_CLASSIFICATION	0.9999972809872956	WITHOUT_CLASSIFICATION	2.71901270438302E-6	TEST
// we will need to create new entries	WITHOUT_CLASSIFICATION	0.9999976247254313	WITHOUT_CLASSIFICATION	2.3752745686385383E-6	TEST
// we will need to remove ye olde entries	WITHOUT_CLASSIFICATION	0.9999963026618712	WITHOUT_CLASSIFICATION	3.6973381287851106E-6	TEST
// force initialize!	WITHOUT_CLASSIFICATION	0.9999944893152698	WITHOUT_CLASSIFICATION	5.510684730230043E-6	TEST
// else if it's elements changed	WITHOUT_CLASSIFICATION	0.9999980041328024	WITHOUT_CLASSIFICATION	1.9958671977188194E-6	TEST
//ATTRIBUTES MAINTAINED BETWEEN FLUSH CYCLES	WITHOUT_CLASSIFICATION	0.9998645410655771	WITHOUT_CLASSIFICATION	1.3545893442297216E-4	TEST
// session-start/post-flush persistent state	WITHOUT_CLASSIFICATION	0.9999984033121028	WITHOUT_CLASSIFICATION	1.5966878972111737E-6	TEST
// allow the CollectionSnapshot to be serialized	WITHOUT_CLASSIFICATION	0.9999981762235076	WITHOUT_CLASSIFICATION	1.8237764923300096E-6	TEST
// ATTRIBUTES USED ONLY DURING FLUSH CYCLE	WITHOUT_CLASSIFICATION	0.9999712163893116	WITHOUT_CLASSIFICATION	2.878361068829424E-5	TEST
// "current" means the reference that was found during flush() 	WITHOUT_CLASSIFICATION	0.9999995641863751	WITHOUT_CLASSIFICATION	4.358136248464714E-7	TEST
// "loaded" means the reference that is consistent  // with the current database state	WITHOUT_CLASSIFICATION	0.999999698129245	WITHOUT_CLASSIFICATION	3.018707548675454E-7	TEST
// during flush, we navigate the object graph to // collections and decide what to do with them	WITHOUT_CLASSIFICATION	0.9999999581367965	WITHOUT_CLASSIFICATION	4.1863203422549636E-8	TEST
// if we instantiate a collection during the flush() process, // we must ignore it for the rest of the flush()	WITHOUT_CLASSIFICATION	0.9999997969250717	WITHOUT_CLASSIFICATION	2.0307492824507285E-7	TEST
// new collections that get found + wrapped // during flush shouldn't be ignored	WITHOUT_CLASSIFICATION	0.999999470980551	WITHOUT_CLASSIFICATION	5.290194491270181E-7	TEST
//a newly wrapped collection is NOT dirty (or we get unnecessary version updates)	WITHOUT_CLASSIFICATION	0.999971780324033	WITHOUT_CLASSIFICATION	2.821967596704295E-5	TEST
//collection.clearDirty()	WITHOUT_CLASSIFICATION	0.9999915917028022	WITHOUT_CLASSIFICATION	8.408297197823925E-6	TEST
//collection.clearDirty()	WITHOUT_CLASSIFICATION	0.9999915917028022	WITHOUT_CLASSIFICATION	8.408297197823925E-6	TEST
// detached collections that get found + reattached // during flush shouldn't be ignored	WITHOUT_CLASSIFICATION	0.9999992299324312	WITHOUT_CLASSIFICATION	7.700675688790799E-7	TEST
//optimization	WITHOUT_CLASSIFICATION	0.9999459404161716	WITHOUT_CLASSIFICATION	5.405958382842355E-5	TEST
//optimization //optimization	WITHOUT_CLASSIFICATION	0.9999775040194883	WITHOUT_CLASSIFICATION	2.2495980511677294E-5	TEST
//re-snapshot	WITHOUT_CLASSIFICATION	0.9999565702774541	WITHOUT_CLASSIFICATION	4.342972254587986E-5	TEST
// for convenience to save some lookups	WITHOUT_CLASSIFICATION	0.9999984716491722	WITHOUT_CLASSIFICATION	1.528350827754759E-6	TEST
//NOTE: this is not updated when properties are fetched lazily!	WITHOUT_CLASSIFICATION	0.9999841362696462	WITHOUT_CLASSIFICATION	1.5863730353732574E-5	TEST
//memory optimization	WITHOUT_CLASSIFICATION	0.9999893230455155	WITHOUT_CLASSIFICATION	1.0676954484504096E-5	TEST
// use the id value of a newly instantiated instance as the unsaved-value	WITHOUT_CLASSIFICATION	0.9999992724099085	WITHOUT_CLASSIFICATION	7.27590091549925E-7	TEST
// copied from Session:	WITHOUT_CLASSIFICATION	0.9999879534349264	WITHOUT_CLASSIFICATION	1.204656507363951E-5	TEST
// this should not happen since the DTD prevents it	WITHOUT_CLASSIFICATION	0.9999982384334078	WITHOUT_CLASSIFICATION	1.7615665921954998E-6	TEST
// JoinProcessor needs to know if the where clause fragment came from a dynamic filter or not so it // can put the where clause fragment in the right place in the SQL AST.   'hasFilterCondition' keeps track // of that fact.	WITHOUT_CLASSIFICATION	0.9999999809346098	WITHOUT_CLASSIFICATION	1.90653901402984E-8	TEST
// the current join represents the join between a many-to-many association table // and its "target" table.  Here we need to apply any additional filters // defined specifically on the many-to-many	WITHOUT_CLASSIFICATION	0.9999999259469069	WITHOUT_CLASSIFICATION	7.4053093054356E-8	TEST
//check basic level one nullablilty	WITHOUT_CLASSIFICATION	0.9999980176180003	WITHOUT_CLASSIFICATION	1.982381999658532E-6	TEST
//values is not null and is checkable, we'll look deeper	WITHOUT_CLASSIFICATION	0.9999969479917108	WITHOUT_CLASSIFICATION	3.0520082892257686E-6	TEST
//for non null args, check for components and elements containing components	WITHOUT_CLASSIFICATION	0.9999993499156083	WITHOUT_CLASSIFICATION	6.500843916772692E-7	TEST
//cache the hashcode	WITHOUT_CLASSIFICATION	0.999971908487441	WITHOUT_CLASSIFICATION	2.8091512559048047E-5	TEST
//persistent collections may have components	WITHOUT_CLASSIFICATION	0.9999979165705319	WITHOUT_CLASSIFICATION	2.083429468031814E-6	TEST
//check for all components values in the collection	WITHOUT_CLASSIFICATION	0.9999982750661527	WITHOUT_CLASSIFICATION	1.7249338472874453E-6	TEST
/* will check current level if some of them are not null	WITHOUT_CLASSIFICATION	0.9999995168355149	WITHOUT_CLASSIFICATION	4.831644850508251E-7	TEST
//do the test	WITHOUT_CLASSIFICATION	0.9992456941172408	WITHOUT_CLASSIFICATION	7.543058827591128E-4	TEST
// if its an uninitialized proxy it can't be transient	WITHOUT_CLASSIFICATION	0.9999986779910606	WITHOUT_CLASSIFICATION	1.3220089394718007E-6	TEST
//unwrap it	WITHOUT_CLASSIFICATION	0.9999657884959584	WITHOUT_CLASSIFICATION	3.421150404164056E-5	TEST
// See if the entity is already bound to this session, if not look at the // entity identifier and assume that the entity is persistent if the // id is not "unsaved" (that is, we rely on foreign keys to keep // database integrity)	WITHOUT_CLASSIFICATION	0.9999999544108223	WITHOUT_CLASSIFICATION	4.558917768686062E-8	TEST
// an unfetched association can only point to // an entity that already exists in the db	WITHOUT_CLASSIFICATION	0.9999998781431888	WITHOUT_CLASSIFICATION	1.2185681120199516E-7	TEST
// let the interceptor inspect the instance to decide	WITHOUT_CLASSIFICATION	0.999998835966934	WITHOUT_CLASSIFICATION	1.1640330660310997E-6	TEST
// let the persister inspect the instance to decide	WITHOUT_CLASSIFICATION	0.9999965792035606	WITHOUT_CLASSIFICATION	3.4207964394446968E-6	TEST
// we use the assumed value, if there is one, to avoid hitting // the database	WITHOUT_CLASSIFICATION	0.9999997318428485	WITHOUT_CLASSIFICATION	2.68157151581807E-7	TEST
// hit the database, after checking the session cache for a snapshot	WITHOUT_CLASSIFICATION	0.9999988126639722	WITHOUT_CLASSIFICATION	1.1873360278563416E-6	TEST
// context-entity-identifier returns null explicitly if the entity // is not associated with the persistence context; so make some // deeper checks...	WITHOUT_CLASSIFICATION	0.9999999197499344	WITHOUT_CLASSIFICATION	8.02500655419892E-8	TEST
//int count = 0;	WITHOUT_CLASSIFICATION	0.9999722238107318	WITHOUT_CLASSIFICATION	2.7776189268229276E-5	TEST
//the first key found after the given key	WITHOUT_CLASSIFICATION	0.9999307807852678	WITHOUT_CLASSIFICATION	6.92192147323077E-5	TEST
//checkForEnd = false;	WITHOUT_CLASSIFICATION	0.9999839279527942	WITHOUT_CLASSIFICATION	1.6072047205711045E-5	TEST
//count++;	WITHOUT_CLASSIFICATION	0.9999473966500514	WITHOUT_CLASSIFICATION	5.260334994853693E-5	TEST
//end of array, start filling again from start	WITHOUT_CLASSIFICATION	0.9999899725112236	WITHOUT_CLASSIFICATION	1.0027488776421232E-5	TEST
//we ran out of keys to try	WITHOUT_CLASSIFICATION	0.9999931957644003	WITHOUT_CLASSIFICATION	6.804235599676716E-6	TEST
//first element of array is reserved for the actual instance we are loading!	WITHOUT_CLASSIFICATION	0.9999949098156815	WITHOUT_CLASSIFICATION	5.090184318447914E-6	TEST
//the first id found after the given id	WITHOUT_CLASSIFICATION	0.9998819440427138	WITHOUT_CLASSIFICATION	1.1805595728623239E-4	TEST
//we ran out of ids to try	WITHOUT_CLASSIFICATION	0.9999935403751455	WITHOUT_CLASSIFICATION	6.459624854509686E-6	TEST
// look for existing collection as part of the persistence context	WITHOUT_CLASSIFICATION	0.9999992248570408	WITHOUT_CLASSIFICATION	7.751429591100736E-7	TEST
// ignore this row of results! Note the early exit	WITHOUT_CLASSIFICATION	0.9999979856252119	WITHOUT_CLASSIFICATION	2.014374788020522E-6	TEST
// initialize this collection	WITHOUT_CLASSIFICATION	0.9999989323055559	WITHOUT_CLASSIFICATION	1.0676944441789557E-6	TEST
// create one	WITHOUT_CLASSIFICATION	0.9999976698725771	WITHOUT_CLASSIFICATION	2.33012742284837E-6	TEST
// warning: can cause a recursive calls! (proxy initialization)	WITHOUT_CLASSIFICATION	0.9999999271589863	WITHOUT_CLASSIFICATION	7.284101367899028E-8	TEST
// there were no queued additions // and the role has a cache	WITHOUT_CLASSIFICATION	0.9999994772943265	WITHOUT_CLASSIFICATION	5.227056734235635E-7	TEST
// and this is not a forced initialization during flush	WITHOUT_CLASSIFICATION	0.9999984235997598	WITHOUT_CLASSIFICATION	1.5764002401811214E-6	TEST
// some filters affecting the collection are enabled on the session, so do not do the put into the cache.	WITHOUT_CLASSIFICATION	0.9999998918178655	WITHOUT_CLASSIFICATION	1.0818213439033437E-7	TEST
// cleanup code ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999954990888015	WITHOUT_CLASSIFICATION	4.50091119854024E-6	TEST
// loading collection xrefs ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999992842833276	WITHOUT_CLASSIFICATION	7.157166723274371E-7	TEST
// Collection load contexts ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999985813891981	WITHOUT_CLASSIFICATION	1.4186108019235678E-6	TEST
// simple cache of param metadata based on query string.  Ideally, the // original "user-supplied query" string should be used to retreive this // metadata (i.e., not the para-list-expanded query string) to avoid // unnecessary cache entries. // Used solely for caching param metadata for native-sql queries, see // getSQLParameterMetadata() for a discussion as to why...	WITHOUT_CLASSIFICATION	0.9999999978571971	WITHOUT_CLASSIFICATION	2.1428028979693367E-9	TEST
// the cache of the actual plans...	WITHOUT_CLASSIFICATION	0.9999965061927241	WITHOUT_CLASSIFICATION	3.493807275866233E-6	TEST
/*package*/	WITHOUT_CLASSIFICATION	0.9999419796562319	WITHOUT_CLASSIFICATION	5.8020343768033676E-5	TEST
/*package*/	WITHOUT_CLASSIFICATION	0.9999419796562319	WITHOUT_CLASSIFICATION	5.8020343768033676E-5	TEST
// assumes that types are all of span 1	WITHOUT_CLASSIFICATION	0.999999549199156	WITHOUT_CLASSIFICATION	4.508008439035221E-7	TEST
// for native-sql queries, the param metadata is determined outside // any relation to a query plan, because query plan creation and/or // retreival for a native-sql query depends on all of the return // types having been set, which might not be the case up-front when // param metadata would be most useful	WITHOUT_CLASSIFICATION	0.999999958356212	WITHOUT_CLASSIFICATION	4.1643788057248175E-8	TEST
// don't care...	WITHOUT_CLASSIFICATION	0.9999980494713914	WITHOUT_CLASSIFICATION	1.9505286086799004E-6	TEST
// Recognition code ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999957763117786	WITHOUT_CLASSIFICATION	4.223688221342829E-6	TEST
// don't care...	WITHOUT_CLASSIFICATION	0.9999980494713914	WITHOUT_CLASSIFICATION	1.9505286086799004E-6	TEST
// NOTE : firstRow is zero-based	WITHOUT_CLASSIFICATION	0.9997425596419495	WITHOUT_CLASSIFICATION	2.5744035805054164E-4	TEST
// break the outer loop !!!	WITHOUT_CLASSIFICATION	0.999989636491029	WITHOUT_CLASSIFICATION	1.0363508971082595E-5	TEST
// named parameter	WITHOUT_CLASSIFICATION	0.9999877671687563	WITHOUT_CLASSIFICATION	1.2232831243778475E-5	TEST
// could be either an ordinal or JPA-positional parameter	WITHOUT_CLASSIFICATION	0.9999987601699327	WITHOUT_CLASSIFICATION	1.2398300673221873E-6	TEST
// a peek ahead showed this as an JPA-positional parameter	WITHOUT_CLASSIFICATION	0.9999989374541706	WITHOUT_CLASSIFICATION	1.0625458293486264E-6	TEST
// make sure this "name" is an integral	WITHOUT_CLASSIFICATION	0.9999991065344346	WITHOUT_CLASSIFICATION	8.93465565428944E-7	TEST
// pre-determine and cache the hashcode	WITHOUT_CLASSIFICATION	0.9999974883038316	WITHOUT_CLASSIFICATION	2.5116961684790663E-6	TEST
// perform the actual work	WITHOUT_CLASSIFICATION	0.9999956444258147	WITHOUT_CLASSIFICATION	4.355574185383167E-6	TEST
// if everything went ok, commit the transaction and close the obtained // connection handle...	WITHOUT_CLASSIFICATION	0.9999999619203842	WITHOUT_CLASSIFICATION	3.807961585004729E-8	TEST
// at some point the processing went bad, so we need to: //      1) make sure the connection handle gets released //      2) try to cleanup the JTA context as much as possible	WITHOUT_CLASSIFICATION	0.9999999923643689	WITHOUT_CLASSIFICATION	7.63563109304244E-9	TEST
// finally handle the exception	WITHOUT_CLASSIFICATION	0.9999973148530171	WITHOUT_CLASSIFICATION	2.6851469828260302E-6	TEST
// a "detached" collection that belonged to a different entity	WITHOUT_CLASSIFICATION	0.9999995854213333	WITHOUT_CLASSIFICATION	4.1457866681222225E-7	TEST
//saveOrUpdateCopy() is deprecated!	WITHOUT_CLASSIFICATION	0.9999757730411519	WITHOUT_CLASSIFICATION	2.4226958848055264E-5	TEST
// collectionPersister should not be null, but we don't want to throw // an exception if it is null	WITHOUT_CLASSIFICATION	0.9999997255910927	WITHOUT_CLASSIFICATION	2.744089071910675E-7	TEST
// otherwise a null or brand new collection // this will also (inefficiently) handle arrays, which // have no snapshot, so we can't do any better //processArrayOrNewCollection(collection, type);	WITHOUT_CLASSIFICATION	0.9999997550276566	WITHOUT_CLASSIFICATION	2.449723435018798E-7	TEST
// a "detached" collection that originally belonged to the same entity	WITHOUT_CLASSIFICATION	0.9999997963825047	WITHOUT_CLASSIFICATION	2.0361749536792675E-7	TEST
//do nothing	WITHOUT_CLASSIFICATION	0.9999603168642681	WITHOUT_CLASSIFICATION	3.968313573186587E-5	TEST
//do nothing	WITHOUT_CLASSIFICATION	0.9999603168642681	WITHOUT_CLASSIFICATION	3.968313573186587E-5	TEST
//Force a substitution!	WITHOUT_CLASSIFICATION	0.9999923193673187	WITHOUT_CLASSIFICATION	7.68063268130528E-6	TEST
// The user requested a "greater" (i.e. more restrictive) form of // pessimistic lock	WITHOUT_CLASSIFICATION	0.9999979391720473	WITHOUT_CLASSIFICATION	2.0608279526599005E-6	TEST
// the database now holds a lock + the object is flushed from the cache, // so release the soft lock	WITHOUT_CLASSIFICATION	0.999999519102178	WITHOUT_CLASSIFICATION	4.808978219662648E-7	TEST
// now update the object .. has to be outside the main if block above (because of collections)	WITHOUT_CLASSIFICATION	0.9999999625456846	WITHOUT_CLASSIFICATION	3.7454315435232074E-8	TEST
// Search for collections by reachability, updating their role. // We don't want to touch collections reachable from a deleted object	WITHOUT_CLASSIFICATION	0.999999937966911	WITHOUT_CLASSIFICATION	6.203308899394765E-8	TEST
// this is a situation where the entity id is assigned by a post-insert generator // and was saved outside the transaction forcing it to be delayed	WITHOUT_CLASSIFICATION	0.999999564935883	WITHOUT_CLASSIFICATION	4.350641170055339E-7	TEST
// NOTE: we need to do the wrap here even if its not "dirty", // because collections need wrapping but changes to _them_ // don't dirty the container. Also, for versioned data, we // need to wrap before calling searchForDirtyCollections	WITHOUT_CLASSIFICATION	0.9999999340624414	WITHOUT_CLASSIFICATION	6.593755866858512E-8	TEST
//grab its state saved at deletion	WITHOUT_CLASSIFICATION	0.9999898664541355	WITHOUT_CLASSIFICATION	1.0133545864528056E-5	TEST
// grab its current state	WITHOUT_CLASSIFICATION	0.999998455915789	WITHOUT_CLASSIFICATION	1.5440842111407464E-6	TEST
// schedule the update // note that we intentionally do _not_ pass in currentPersistentState!	WITHOUT_CLASSIFICATION	0.9999998735703718	WITHOUT_CLASSIFICATION	1.2642962818903634E-7	TEST
// substitutes into values by side-effect	WITHOUT_CLASSIFICATION	0.9999987112497557	WITHOUT_CLASSIFICATION	1.2887502443820523E-6	TEST
// give the Interceptor a chance to process property values, if the properties // were modified by the Interceptor, we need to set them back to the object	WITHOUT_CLASSIFICATION	0.9999998504273953	WITHOUT_CLASSIFICATION	1.4957260469793842E-7	TEST
// compare to cached state (ignoring collections unless versioned)	WITHOUT_CLASSIFICATION	0.9999999138379976	WITHOUT_CLASSIFICATION	8.616200245661583E-8	TEST
// if it was dirtied by a collection only	WITHOUT_CLASSIFICATION	0.9999981540740647	WITHOUT_CLASSIFICATION	1.8459259352901182E-6	TEST
// increment the version number (if necessary)	WITHOUT_CLASSIFICATION	0.9999994893623984	WITHOUT_CLASSIFICATION	5.106376016454177E-7	TEST
// check nullability but do not perform command execute // we'll use scheduled updates for that.	WITHOUT_CLASSIFICATION	0.9999998141550451	WITHOUT_CLASSIFICATION	1.858449549669073E-7	TEST
//give the Interceptor a chance to modify property values	WITHOUT_CLASSIFICATION	0.9999986494679318	WITHOUT_CLASSIFICATION	1.3505320681522562E-6	TEST
//now we might need to recalculate the dirtyProperties array	WITHOUT_CLASSIFICATION	0.9999981489321851	WITHOUT_CLASSIFICATION	1.8510678149214764E-6	TEST
//use the current version	WITHOUT_CLASSIFICATION	0.9999918782134268	WITHOUT_CLASSIFICATION	8.121786573154074E-6	TEST
// Interceptor returned null, so do the dirtycheck ourself, if possible	WITHOUT_CLASSIFICATION	0.9999993573158029	WITHOUT_CLASSIFICATION	6.426841969767202E-7	TEST
// object loaded by update()	WITHOUT_CLASSIFICATION	0.9999925658129806	WITHOUT_CLASSIFICATION	7.434187019492054E-6	TEST
// dirty check against the usual snapshot of the entity	WITHOUT_CLASSIFICATION	0.9999996458527428	WITHOUT_CLASSIFICATION	3.5414725716279627E-7	TEST
// dirty check against the database snapshot, if possible/necessary	WITHOUT_CLASSIFICATION	0.9999997176823194	WITHOUT_CLASSIFICATION	2.823176805040261E-7	TEST
// the Interceptor handled the dirty checking	WITHOUT_CLASSIFICATION	0.9999970554188462	WITHOUT_CLASSIFICATION	2.944581153661783E-6	TEST
//even process null collections	WITHOUT_CLASSIFICATION	0.9999960822108475	WITHOUT_CLASSIFICATION	3.917789152506557E-6	TEST
// get the id from the object	WITHOUT_CLASSIFICATION	0.9999896677341761	WITHOUT_CLASSIFICATION	1.0332265823838482E-5	TEST
//always do an INSERT, and let it fail by constraint violation	WITHOUT_CLASSIFICATION	0.9999970720129638	WITHOUT_CLASSIFICATION	2.927987036146453E-6	TEST
//what is the version on the database?	WITHOUT_CLASSIFICATION	0.9999883309080339	WITHOUT_CLASSIFICATION	1.1669091966130718E-5	TEST
/// HHH-2378	WITHOUT_CLASSIFICATION	0.9999264242245358	WITHOUT_CLASSIFICATION	7.357577546412993E-5	TEST
//will result in a SQL UPDATE:	WITHOUT_CLASSIFICATION	0.9999955725199076	WITHOUT_CLASSIFICATION	4.427480092486378E-6	TEST
//else do nothing (don't even reassociate object!)	WITHOUT_CLASSIFICATION	0.9999993072106783	WITHOUT_CLASSIFICATION	6.927893215404039E-7	TEST
// no existing row - do an insert	WITHOUT_CLASSIFICATION	0.9999990780487006	WITHOUT_CLASSIFICATION	9.219512994046933E-7	TEST
//refresh() does not pass an entityName	WITHOUT_CLASSIFICATION	0.9999935336512678	WITHOUT_CLASSIFICATION	6.466348732346682E-6	TEST
//do not return a proxy! //(this option indicates we are initializing a proxy)	WITHOUT_CLASSIFICATION	0.9999992682127214	WITHOUT_CLASSIFICATION	7.317872785102779E-7	TEST
//return a proxy if appropriate	WITHOUT_CLASSIFICATION	0.999988179412352	WITHOUT_CLASSIFICATION	1.1820587648015903E-5	TEST
// return existing object or initialized proxy (unless deleted)	WITHOUT_CLASSIFICATION	0.9999993264959333	WITHOUT_CLASSIFICATION	6.735040668165485E-7	TEST
// return new uninitialized proxy	WITHOUT_CLASSIFICATION	0.9999973955685425	WITHOUT_CLASSIFICATION	2.6044314574621074E-6	TEST
// this object was already loaded	WITHOUT_CLASSIFICATION	0.9999948712944877	WITHOUT_CLASSIFICATION	5.128705512366125E-6	TEST
// Entity was found in second-level cache...	WITHOUT_CLASSIFICATION	0.999999513655436	WITHOUT_CLASSIFICATION	4.863445639864138E-7	TEST
// make it circular-reference safe	WITHOUT_CLASSIFICATION	0.999999009978986	WITHOUT_CLASSIFICATION	9.900210138864593E-7	TEST
// intializes result by side-effect	WITHOUT_CLASSIFICATION	0.9999989305918163	WITHOUT_CLASSIFICATION	1.0694081836931682E-6	TEST
// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ // Pre-flushing section // ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999993245982259	WITHOUT_CLASSIFICATION	6.754017741863377E-7	TEST
//some statistics	WITHOUT_CLASSIFICATION	0.9999782827400778	WITHOUT_CLASSIFICATION	2.171725992221972E-5	TEST
//safe from concurrent modification because of how entryList() is implemented on IdentityMap	WITHOUT_CLASSIFICATION	0.9999984019306932	WITHOUT_CLASSIFICATION	1.5980693067429381E-6	TEST
// Initialize dirty flags for arrays + collections with composite elements // and reset reached, doupdate, etc.	WITHOUT_CLASSIFICATION	0.9999999599720177	WITHOUT_CLASSIFICATION	4.0027982243164816E-8	TEST
// Among other things, updateReachables() will recursively load all // collections that are moving roles. This might cause entities to // be loaded.	WITHOUT_CLASSIFICATION	0.9999999927725001	WITHOUT_CLASSIFICATION	7.227499888091063E-9	TEST
// So this needs to be safe from concurrent modification problems. // It is safe because of how IdentityMap implements entrySet()	WITHOUT_CLASSIFICATION	0.9999999648020114	WITHOUT_CLASSIFICATION	3.5197988692107046E-8	TEST
// Update the status of the object and if necessary, schedule an update	WITHOUT_CLASSIFICATION	0.999999411565729	WITHOUT_CLASSIFICATION	5.884342710851741E-7	TEST
// Schedule updates to collections:	WITHOUT_CLASSIFICATION	0.9999990453660684	WITHOUT_CLASSIFICATION	9.54633931642034E-7	TEST
// we need to lock the collection caches before // executing entity inserts/updates in order to // account for bidi associations	WITHOUT_CLASSIFICATION	0.9999996546369936	WITHOUT_CLASSIFICATION	3.4536300643143E-7	TEST
// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ // Post-flushing section // ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999987551044704	WITHOUT_CLASSIFICATION	1.2448955294834861E-6	TEST
//the database has changed now, so the subselect results need to be invalidated	WITHOUT_CLASSIFICATION	0.9999964812040048	WITHOUT_CLASSIFICATION	3.518795995296812E-6	TEST
//if the collection is dereferenced, remove from the session cache //iter.remove(); //does not work, since the entrySet is not backed by the set	WITHOUT_CLASSIFICATION	0.9999994621672412	WITHOUT_CLASSIFICATION	5.378327588523187E-7	TEST
//otherwise recreate the mapping between the collection and its key	WITHOUT_CLASSIFICATION	0.9999983006486457	WITHOUT_CLASSIFICATION	1.699351354334338E-6	TEST
//get a snapshot	WITHOUT_CLASSIFICATION	0.9999792663954644	WITHOUT_CLASSIFICATION	2.073360453559655E-5	TEST
/* package-private */	WITHOUT_CLASSIFICATION	0.9999940067473917	WITHOUT_CLASSIFICATION	5.993252608362014E-6	TEST
/* package-private */	WITHOUT_CLASSIFICATION	0.9999940067473917	WITHOUT_CLASSIFICATION	5.993252608362014E-6	TEST
// key is an entity involved with the operation performed by the listener; // value is a flag indicating if the listener explicitly operates on the entity	WITHOUT_CLASSIFICATION	0.9999996500701634	WITHOUT_CLASSIFICATION	3.4992983643916154E-7	TEST
// EARLY EXIT!!!	WITHOUT_CLASSIFICATION	0.9999657413023958	WITHOUT_CLASSIFICATION	3.425869760424328E-5	TEST
//ie. the entity came in from update()	WITHOUT_CLASSIFICATION	0.9999962403292603	WITHOUT_CLASSIFICATION	3.759670739675031E-6	TEST
// before any callbacks, etc, so subdeletions see that this deletion happened first	WITHOUT_CLASSIFICATION	0.9999995308657444	WITHOUT_CLASSIFICATION	4.6913425559580943E-7	TEST
// Ensures that containing deletions happen before sub-deletions	WITHOUT_CLASSIFICATION	0.9999996746279602	WITHOUT_CLASSIFICATION	3.2537203980361906E-7	TEST
//	WITHOUT_CLASSIFICATION	0.999864478982662	WITHOUT_CLASSIFICATION	1.3552101733804665E-4	TEST
// cascade-delete to collections BEFORE the collection owner is deleted	WITHOUT_CLASSIFICATION	0.9999981433023686	WITHOUT_CLASSIFICATION	1.8566976315008683E-6	TEST
// cascade-delete to many-to-one AFTER the parent was deleted	WITHOUT_CLASSIFICATION	0.9999986948992964	WITHOUT_CLASSIFICATION	1.305100703690106E-6	TEST
// if it is an initialized proxy, let cascade // handle it later on	WITHOUT_CLASSIFICATION	0.9999986979110855	WITHOUT_CLASSIFICATION	1.3020889145126703E-6	TEST
//assign the requested id to the proxy, *before* //reassociating the proxy	WITHOUT_CLASSIFICATION	0.999985968863641	WITHOUT_CLASSIFICATION	1.4031136358962677E-5	TEST
// an uninitialized proxy, noop, don't even need to // return an id, since it is never a save()	WITHOUT_CLASSIFICATION	0.9999997143506738	WITHOUT_CLASSIFICATION	2.8564932614065825E-7	TEST
//initialize properties of the event:	WITHOUT_CLASSIFICATION	0.9999866707492658	WITHOUT_CLASSIFICATION	1.3329250734176549E-5	TEST
//return the id in the event object	WITHOUT_CLASSIFICATION	0.9999823279914404	WITHOUT_CLASSIFICATION	1.767200855959772E-5	TEST
//TRANSIENT or DELETED	WITHOUT_CLASSIFICATION	0.999865617776521	WITHOUT_CLASSIFICATION	1.3438222347886603E-4	TEST
// use the id assigned to the instance	WITHOUT_CLASSIFICATION	0.9999982480125799	WITHOUT_CLASSIFICATION	1.7519874201608228E-6	TEST
// assume this is a newly instantiated transient object // which should be saved rather than updated	WITHOUT_CLASSIFICATION	0.9999991466548743	WITHOUT_CLASSIFICATION	8.533451256279146E-7	TEST
// this is a transient object with existing persistent state not loaded by the session	WITHOUT_CLASSIFICATION	0.9999992035153932	WITHOUT_CLASSIFICATION	7.964846068341396E-7	TEST
// a collection loaded in the current session // can not possibly be the collection belonging // to the entity passed to update()	WITHOUT_CLASSIFICATION	0.9999999527400013	WITHOUT_CLASSIFICATION	4.725999872380831E-8	TEST
//cachedState,	WITHOUT_CLASSIFICATION	0.999901688051301	WITHOUT_CLASSIFICATION	9.831194869903016E-5	TEST
//assume true, since we don't really know, and it doesn't matter	WITHOUT_CLASSIFICATION	0.9999966882975813	WITHOUT_CLASSIFICATION	3.3117024186741244E-6	TEST
//a "detached" collection!	WITHOUT_CLASSIFICATION	0.9999905201081359	WITHOUT_CLASSIFICATION	9.479891864121773E-6	TEST
// if the collection belonged to a different entity, // clean up the existing state of the collection	WITHOUT_CLASSIFICATION	0.9999999332571863	WITHOUT_CLASSIFICATION	6.674281380711921E-8	TEST
//log.debug( "calling onLoad()" );	WITHOUT_CLASSIFICATION	0.9999939305638089	WITHOUT_CLASSIFICATION	6.069436191106761E-6	TEST
//EARLY EXIT!	WITHOUT_CLASSIFICATION	0.9998547174787219	WITHOUT_CLASSIFICATION	1.4528252127802852E-4	TEST
// note: performExecutions() clears all collectionXxxxtion  // collections (the collection actions) in the session	WITHOUT_CLASSIFICATION	0.9999999059076653	WITHOUT_CLASSIFICATION	9.409233475750125E-8	TEST
// if no array holder we found an unwrappered array (this can't occur, // because we now always call wrap() before getting to here) // return (ah==null) ? true : searchForDirtyCollections(ah, type);	WITHOUT_CLASSIFICATION	0.9999999864212589	WITHOUT_CLASSIFICATION	1.3578741092187275E-8	TEST
// if not wrappered yet, its dirty (this can't occur, because // we now always call wrap() before getting to here) // return ( ! (obj instanceof PersistentCollection) ) ? //true : searchForDirtyCollections( (PersistentCollection) obj, type );	WITHOUT_CLASSIFICATION	0.9999999924706724	WITHOUT_CLASSIFICATION	7.529327653036875E-9	TEST
//we need to check even if it was not initialized, because of delayed adds!	WITHOUT_CLASSIFICATION	0.9999984693494438	WITHOUT_CLASSIFICATION	1.53065055629102E-6	TEST
//NOTE: EARLY EXIT!	WITHOUT_CLASSIFICATION	0.9997072213474348	WITHOUT_CLASSIFICATION	2.9277865256512433E-4	TEST
// find any entities that are still transient after retry	WITHOUT_CLASSIFICATION	0.9999961032369813	WITHOUT_CLASSIFICATION	3.896763018715663E-6	TEST
//EARLY EXIT!	WITHOUT_CLASSIFICATION	0.9998547174787219	WITHOUT_CLASSIFICATION	1.4528252127802852E-4	TEST
// Check the persistence context for an entry relating to this // entity to be merged...	WITHOUT_CLASSIFICATION	0.9999996767603796	WITHOUT_CLASSIFICATION	3.232396204333994E-7	TEST
// we have specialized case of a detached entity from the // perspective of the merge operation.  Specifically, we // have an incoming entity instance which has a corresponding // entry in the current persistence context, but registered // under a different entity instance	WITHOUT_CLASSIFICATION	0.9999999962643615	WITHOUT_CLASSIFICATION	3.735638451729898E-9	TEST
//DELETED	WITHOUT_CLASSIFICATION	0.9997861895548266	WITHOUT_CLASSIFICATION	2.138104451734819E-4	TEST
//before cascade!	WITHOUT_CLASSIFICATION	0.9999648356413728	WITHOUT_CLASSIFICATION	3.516435862722777E-5	TEST
// cascade first, so that all unsaved objects get their // copy created before we actually copy //cascadeOnMerge(event, persister, entity, copyCache, Cascades.CASCADE_BEFORE_MERGE);	WITHOUT_CLASSIFICATION	0.999999874318866	WITHOUT_CLASSIFICATION	1.256811339248067E-7	TEST
//this bit is only *really* absolutely necessary for handling //requestedId, but is also good if we merge multiple object //graphs, since it helps ensure uniqueness	WITHOUT_CLASSIFICATION	0.9999995298251396	WITHOUT_CLASSIFICATION	4.701748602984615E-7	TEST
// continue...; we'll find out if it ends up not getting saved later	WITHOUT_CLASSIFICATION	0.9999993437373417	WITHOUT_CLASSIFICATION	6.562626583262422E-7	TEST
// cascade first, so that all unsaved objects get their // copy created before we actually copy	WITHOUT_CLASSIFICATION	0.9999991802980411	WITHOUT_CLASSIFICATION	8.197019588333739E-7	TEST
// check that entity id = requestedId	WITHOUT_CLASSIFICATION	0.9999951144821811	WITHOUT_CLASSIFICATION	4.885517818905898E-6	TEST
//before cascade!	WITHOUT_CLASSIFICATION	0.9999648356413728	WITHOUT_CLASSIFICATION	3.516435862722777E-5	TEST
// we got here because we assumed that an instance // with an assigned id was detached, when it was // really persistent	WITHOUT_CLASSIFICATION	0.9999998856961096	WITHOUT_CLASSIFICATION	1.1430389039491103E-7	TEST
// cascade first, so that all unsaved objects get their  // copy created before we actually copy	WITHOUT_CLASSIFICATION	0.9999992077975568	WITHOUT_CLASSIFICATION	7.922024431480757E-7	TEST
//copyValues works by reflection, so explicitly mark the entity instance dirty	WITHOUT_CLASSIFICATION	0.9999996395229319	WITHOUT_CLASSIFICATION	3.6047706810898774E-7	TEST
//EARLY EXIT	WITHOUT_CLASSIFICATION	0.9998543541081742	WITHOUT_CLASSIFICATION	1.4564589182564563E-4	TEST
//source.getBatcher().executeBatch(); //found another way to ensure that all batched joined inserts have been executed	WITHOUT_CLASSIFICATION	0.9999989575779524	WITHOUT_CLASSIFICATION	1.0424220475250279E-6	TEST
// substitutes into values by side-effect	WITHOUT_CLASSIFICATION	0.9999987112497557	WITHOUT_CLASSIFICATION	1.2887502443820523E-6	TEST
//now done in EntityIdentityInsertAction //persister.setIdentifier( entity, id, source.getEntityMode() );	WITHOUT_CLASSIFICATION	0.9999986656777311	WITHOUT_CLASSIFICATION	1.334322268867755E-6	TEST
//source.getPersistenceContext().removeNonExist( new EntityKey( id, persister, source.getEntityMode() ) );	WITHOUT_CLASSIFICATION	0.9999987838286145	WITHOUT_CLASSIFICATION	1.2161713855157693E-6	TEST
//keep the existing version number in the case of replicate!	WITHOUT_CLASSIFICATION	0.999999020362026	WITHOUT_CLASSIFICATION	9.796379739973818E-7	TEST
// cascade-save to many-to-one BEFORE the parent is saved	WITHOUT_CLASSIFICATION	0.9999985807042652	WITHOUT_CLASSIFICATION	1.4192957348464893E-6	TEST
//pass this as an argument only to avoid double looking	WITHOUT_CLASSIFICATION	0.9999993070989458	WITHOUT_CLASSIFICATION	6.929010542425749E-7	TEST
// the object is persistent	WITHOUT_CLASSIFICATION	0.9999771696722962	WITHOUT_CLASSIFICATION	2.28303277038667E-5	TEST
//the entity is associated with the session, so check its status	WITHOUT_CLASSIFICATION	0.9999946822455082	WITHOUT_CLASSIFICATION	5.317754491822951E-6	TEST
// do nothing for persistent instances	WITHOUT_CLASSIFICATION	0.9999959544205681	WITHOUT_CLASSIFICATION	4.0455794318614786E-6	TEST
//ie. e.status==DELETED	WITHOUT_CLASSIFICATION	0.9999719098210084	WITHOUT_CLASSIFICATION	2.8090178991550514E-5	TEST
// the object is transient or detached	WITHOUT_CLASSIFICATION	0.9999861204529904	WITHOUT_CLASSIFICATION	1.3879547009672247E-5	TEST
//NOTE EARLY EXIT!	WITHOUT_CLASSIFICATION	0.9997046391458236	WITHOUT_CLASSIFICATION	2.953608541763359E-4	TEST
// Private constructor - stops checkstyle from complaining.	WITHOUT_CLASSIFICATION	0.9999998414847733	WITHOUT_CLASSIFICATION	1.5851522668785893E-7	TEST
// First, try to find a matching constructor accepting a ViolatedConstraintNameExtracter param...	WITHOUT_CLASSIFICATION	0.999999804503881	WITHOUT_CLASSIFICATION	1.954961190014755E-7	TEST
// eat it and try next	WITHOUT_CLASSIFICATION	0.9999969657270601	WITHOUT_CLASSIFICATION	3.0342729398552683E-6	TEST
// Otherwise, try to use the no-arg constructor	WITHOUT_CLASSIFICATION	0.999999458991145	WITHOUT_CLASSIFICATION	5.410088550411779E-7	TEST
// oracle sql-state code for deadlock	WITHOUT_CLASSIFICATION	0.999994776629982	WITHOUT_CLASSIFICATION	5.223370017939137E-6	TEST
// CollectionPropertyMapping processes everything except 'index'.	WITHOUT_CLASSIFICATION	0.9999998615176559	WITHOUT_CLASSIFICATION	1.3848234416842222E-7	TEST
// remove initial ", "	WITHOUT_CLASSIFICATION	0.9999980221203786	WITHOUT_CLASSIFICATION	1.9778796215185466E-6	TEST
// remove initial " and "	WITHOUT_CLASSIFICATION	0.9999981722111461	WITHOUT_CLASSIFICATION	1.8277888539210812E-6	TEST
//beforeClassTokens.add("new"); DEFINITELY DON'T HAVE THIS!!	WITHOUT_CLASSIFICATION	0.9999924803431768	WITHOUT_CLASSIFICATION	7.5196568232463646E-6	TEST
//notAfterClassTokens.add(",");	WITHOUT_CLASSIFICATION	0.9999714855741404	WITHOUT_CLASSIFICATION	2.851442585960211E-5	TEST
// just especially for the trivial collection filter	WITHOUT_CLASSIFICATION	0.9999969794131417	WITHOUT_CLASSIFICATION	3.0205868582799193E-6	TEST
//update last non-whitespace token, if necessary	WITHOUT_CLASSIFICATION	0.9999978378328395	WITHOUT_CLASSIFICATION	2.1621671605695446E-6	TEST
// select-range is terminated by declaration of "from"	WITHOUT_CLASSIFICATION	0.9999981757186492	WITHOUT_CLASSIFICATION	1.8242813508032633E-6	TEST
//scan for next non-whitespace token	WITHOUT_CLASSIFICATION	0.9999854646566924	WITHOUT_CLASSIFICATION	1.4535343307693187E-5	TEST
// Note this!!	WITHOUT_CLASSIFICATION	0.9999539538468624	WITHOUT_CLASSIFICATION	4.604615313757855E-5	TEST
// Error message constants.	WITHOUT_CLASSIFICATION	0.9999988558042032	WITHOUT_CLASSIFICATION	1.1441957967963092E-6	TEST
// handle trace logging ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.999998076964461	WITHOUT_CLASSIFICATION	1.9230355390948235E-6	TEST
// semantic action handling ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999993798018771	WITHOUT_CLASSIFICATION	6.201981227570755E-7	TEST
// Handle collection-fiter compilation. // IMPORTANT NOTE: This is modifying the INPUT (HQL) tree, not the output tree!	WITHOUT_CLASSIFICATION	0.9999996915984638	WITHOUT_CLASSIFICATION	3.0840153612668124E-7	TEST
// Show the modified AST.	WITHOUT_CLASSIFICATION	0.9999572248353046	WITHOUT_CLASSIFICATION	4.2775164695370795E-5	TEST
// Create a parameter specification for the collection filter...	WITHOUT_CLASSIFICATION	0.9999991961178128	WITHOUT_CLASSIFICATION	8.038821872828638E-7	TEST
// Use the delegate.	WITHOUT_CLASSIFICATION	0.9999958012234129	WITHOUT_CLASSIFICATION	4.1987765870922785E-6	TEST
// Use the delegate.	WITHOUT_CLASSIFICATION	0.9999958012234129	WITHOUT_CLASSIFICATION	4.1987765870922785E-6	TEST
// Get the names of the columns used to link between the collection // owner and the collection elements.	WITHOUT_CLASSIFICATION	0.9999998164101994	WITHOUT_CLASSIFICATION	1.83589800571155E-7	TEST
// The path AST should be a DotNode, and it should have been evaluated already.	WITHOUT_CLASSIFICATION	0.9999971597754101	WITHOUT_CLASSIFICATION	2.8402245898265814E-6	TEST
// Tell the dot node about the join type.	WITHOUT_CLASSIFICATION	0.999998314505568	WITHOUT_CLASSIFICATION	1.6854944320335568E-6	TEST
// Re-arrange the tree so that the collection function is the root and the lhs is the path.	WITHOUT_CLASSIFICATION	0.9999996441438634	WITHOUT_CLASSIFICATION	3.5585613654489505E-7	TEST
// Don't forget to resolve the argument! // Resolve the collection function now.	WITHOUT_CLASSIFICATION	0.9999998223847596	WITHOUT_CLASSIFICATION	1.7761524039079338E-7	TEST
// Resolve everything up to this dot, but don't resolve the placeholders yet.	WITHOUT_CLASSIFICATION	0.9999993549763553	WITHOUT_CLASSIFICATION	6.450236447575582E-7	TEST
// Should mean that no such property was found	WITHOUT_CLASSIFICATION	0.9999989723245001	WITHOUT_CLASSIFICATION	1.0276754999987836E-6	TEST
// Was there an explicit select expression?	WITHOUT_CLASSIFICATION	0.9999990475847959	WITHOUT_CLASSIFICATION	9.524152041625347E-7	TEST
// Attach any mapping-defined "ORDER BY" fragments	WITHOUT_CLASSIFICATION	0.9999986086608968	WITHOUT_CLASSIFICATION	1.391339103115016E-6	TEST
// Use the explicitly declared select expression; determine the // return types indicated by each select token	WITHOUT_CLASSIFICATION	0.9999998177819094	WITHOUT_CLASSIFICATION	1.8221809065151856E-7	TEST
// After that, process the JOINs. // Invoke a delegate to do the work, as this is farily complex.	WITHOUT_CLASSIFICATION	0.9999996629529692	WITHOUT_CLASSIFICATION	3.370470308430884E-7	TEST
// Make #@%$^#^&# sure no alias is applied to the table name	WITHOUT_CLASSIFICATION	0.9999988259880367	WITHOUT_CLASSIFICATION	1.1740119633887553E-6	TEST
// We need to generate ids as part of this bulk insert. // // Note that this is only supported for sequence-style generators and // post-insert-style generators; basically, only in-db generators	WITHOUT_CLASSIFICATION	0.9999996185488725	WITHOUT_CLASSIFICATION	3.8145112747544116E-7	TEST
// Use the delegate.	WITHOUT_CLASSIFICATION	0.9999958012234129	WITHOUT_CLASSIFICATION	4.1987765870922785E-6	TEST
// We need to seed the version value as part of this bulk insert	WITHOUT_CLASSIFICATION	0.9999988731113442	WITHOUT_CLASSIFICATION	1.1268886558713608E-6	TEST
// we need to wrtap the param in a cast()	WITHOUT_CLASSIFICATION	0.9999957380891341	WITHOUT_CLASSIFICATION	4.261910865855648E-6	TEST
// This is called when it's time to fully resolve a path expression.	WITHOUT_CLASSIFICATION	0.9999998818870132	WITHOUT_CLASSIFICATION	1.1811298688126545E-7	TEST
// Generate implicit joins, only if necessary.	WITHOUT_CLASSIFICATION	0.9999993438748642	WITHOUT_CLASSIFICATION	6.561251358048064E-7	TEST
// Notify the FROM element that it is being referenced by the select.	WITHOUT_CLASSIFICATION	0.9999974120167592	WITHOUT_CLASSIFICATION	2.58798324079091E-6	TEST
// Turn off includeSubclasses on all FromElements.	WITHOUT_CLASSIFICATION	0.9999998332039367	WITHOUT_CLASSIFICATION	1.667960632435474E-7	TEST
// create the node initially with the param name so that it shows // appropriately in the "original text" attribute	WITHOUT_CLASSIFICATION	0.9999999157451301	WITHOUT_CLASSIFICATION	8.425486982541673E-8	TEST
// Use the delegate, resolve identifiers as FROM element aliases.	WITHOUT_CLASSIFICATION	0.9999995112310063	WITHOUT_CLASSIFICATION	4.887689936871346E-7	TEST
// select clauses for insert statements should alwasy be treated as shallow	WITHOUT_CLASSIFICATION	0.9999984773946196	WITHOUT_CLASSIFICATION	1.5226053804135692E-6	TEST
// no need to even collect this information if the persister is considered multi-table	WITHOUT_CLASSIFICATION	0.9999992512086008	WITHOUT_CLASSIFICATION	7.487913992461512E-7	TEST
// Make sure that the persister is versioned	WITHOUT_CLASSIFICATION	0.9999828577616507	WITHOUT_CLASSIFICATION	1.7142238349282778E-5	TEST
// handle trace logging ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.999998076964461	WITHOUT_CLASSIFICATION	1.9230355390948235E-6	TEST
// Use the delegate.	WITHOUT_CLASSIFICATION	0.9999958012234129	WITHOUT_CLASSIFICATION	4.1987765870922785E-6	TEST
// --Commented out by Inspection (12/11/04 10:56 AM): int getWarningCount();	WITHOUT_CLASSIFICATION	0.9999998197628733	WITHOUT_CLASSIFICATION	1.8023712678509132E-7	TEST
// Alias references and identifiers use the same node class.	WITHOUT_CLASSIFICATION	0.9999996972879844	WITHOUT_CLASSIFICATION	3.0271201553951154E-7	TEST
// switch	WITHOUT_CLASSIFICATION	0.9999905881910074	WITHOUT_CLASSIFICATION	9.4118089926935E-6	TEST
// make a new one	WITHOUT_CLASSIFICATION	0.9999961287228953	WITHOUT_CLASSIFICATION	3.871277104610107E-6	TEST
// just do the regular thing if you can't find the ctor // Your AST must have default ctor to use this.	WITHOUT_CLASSIFICATION	0.9999996839528161	WITHOUT_CLASSIFICATION	3.160471839371029E-7	TEST
// Initialize SQL nodes here.	WITHOUT_CLASSIFICATION	0.9999990646790073	WITHOUT_CLASSIFICATION	9.353209925992226E-7	TEST
// semantic action processing ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999993161391516	WITHOUT_CLASSIFICATION	6.838608483288499E-7	TEST
// if template is null we just write the function out as it appears in the hql statement	WITHOUT_CLASSIFICATION	0.9999997772217875	WITHOUT_CLASSIFICATION	2.227782124656858E-7	TEST
// this function has a template -> redirect output and catch the arguments	WITHOUT_CLASSIFICATION	0.999999482668836	WITHOUT_CLASSIFICATION	5.173311639468362E-7	TEST
// --- Inner classes (moved here from sql-gen.g) ---	WITHOUT_CLASSIFICATION	0.9999990793824174	WITHOUT_CLASSIFICATION	9.206175825282964E-7	TEST
// check two "adjecent" nodes at the top of the from-clause tree	WITHOUT_CLASSIFICATION	0.9999997903606559	WITHOUT_CLASSIFICATION	2.0963934414876338E-7	TEST
///////////////////////////////////////////////////////////////////////	WITHOUT_CLASSIFICATION	0.999667799056761	WITHOUT_CLASSIFICATION	3.3220094323901397E-4	TEST
// these are just two unrelated table references	WITHOUT_CLASSIFICATION	0.9999960900685695	WITHOUT_CLASSIFICATION	3.9099314304968334E-6	TEST
// again, both should be FromElements	WITHOUT_CLASSIFICATION	0.9999978952934587	WITHOUT_CLASSIFICATION	2.1047065412518253E-6	TEST
// NOTE : firstRow is zero-based	WITHOUT_CLASSIFICATION	0.9997425596419495	WITHOUT_CLASSIFICATION	2.5744035805054164E-4	TEST
// right represents a joins originating from left; or // both right and left reprersent joins originating from the same FromElement	WITHOUT_CLASSIFICATION	0.9999997370330374	WITHOUT_CLASSIFICATION	2.629669626780181E-7	TEST
// check a set of parent/child nodes in the from-clause tree // to determine if a comma is required between them	WITHOUT_CLASSIFICATION	0.9999990240069927	WITHOUT_CLASSIFICATION	9.759930073337718E-7	TEST
// right represents a joins originating from left...	WITHOUT_CLASSIFICATION	0.9999996747675821	WITHOUT_CLASSIFICATION	3.252324179158344E-7	TEST
// all clear	WITHOUT_CLASSIFICATION	0.999994679546158	WITHOUT_CLASSIFICATION	5.320453841991655E-6	TEST
// Ignore the token class name parameter, and use a specific token class.	WITHOUT_CLASSIFICATION	0.9999998421627195	WITHOUT_CLASSIFICATION	1.5783728046408808E-7	TEST
//overriden to avoid System.exit	WITHOUT_CLASSIFICATION	0.9999915027037799	WITHOUT_CLASSIFICATION	8.497296220048545E-6	TEST
//overriden to avoid System.exit	WITHOUT_CLASSIFICATION	0.9999915027037799	WITHOUT_CLASSIFICATION	8.497296220048545E-6	TEST
// remember that ordinal parameters numbers are 1-based!!!	WITHOUT_CLASSIFICATION	0.9999989533376763	WITHOUT_CLASSIFICATION	1.0466623237423688E-6	TEST
// don't care about other param types here, just those explicitly user-defined...	WITHOUT_CLASSIFICATION	0.9999998601323176	WITHOUT_CLASSIFICATION	1.3986768252302824E-7	TEST
// If the query is already compiled, skip the compilation.	WITHOUT_CLASSIFICATION	0.9999995904660475	WITHOUT_CLASSIFICATION	4.095339525094145E-7	TEST
// Remember the parameters for the compilation.	WITHOUT_CLASSIFICATION	0.999993895149494	WITHOUT_CLASSIFICATION	6.104850505957691E-6	TEST
// PHASE 1 : Parse the HQL into an AST.	WITHOUT_CLASSIFICATION	0.9999990083856857	WITHOUT_CLASSIFICATION	9.91614314333109E-7	TEST
// PHASE 2 : Analyze the HQL AST, and produce an SQL AST.	WITHOUT_CLASSIFICATION	0.9999991067327977	WITHOUT_CLASSIFICATION	8.932672023583445E-7	TEST
// PHASE 3 : Generate the SQL.	WITHOUT_CLASSIFICATION	0.9999971251115354	WITHOUT_CLASSIFICATION	2.874888464579086E-6	TEST
// we do not actually propogate ANTLRExceptions as a cause, so // log it here for diagnostic purposes	WITHOUT_CLASSIFICATION	0.9999998476216008	WITHOUT_CLASSIFICATION	1.5237839923769566E-7	TEST
// we do not actually propogate ANTLRExceptions as a cause, so // log it here for diagnostic purposes	WITHOUT_CLASSIFICATION	0.9999998476216008	WITHOUT_CLASSIFICATION	1.5237839923769566E-7	TEST
//only needed during compilation phase...	WITHOUT_CLASSIFICATION	0.999998877942737	WITHOUT_CLASSIFICATION	1.1220572630012575E-6	TEST
// Transform the tree.	WITHOUT_CLASSIFICATION	0.9999942381173438	WITHOUT_CLASSIFICATION	5.761882656217312E-6	TEST
// Parse the query string into an HQL AST.	WITHOUT_CLASSIFICATION	0.9999996024132616	WITHOUT_CLASSIFICATION	3.9758673844203063E-7	TEST
// Delegate to the QueryLoader...	WITHOUT_CLASSIFICATION	0.9999986493668646	WITHOUT_CLASSIFICATION	1.3506331353515319E-6	TEST
// Delegate to the QueryLoader...	WITHOUT_CLASSIFICATION	0.9999986493668646	WITHOUT_CLASSIFICATION	1.3506331353515319E-6	TEST
// Delegate to the QueryLoader...	WITHOUT_CLASSIFICATION	0.9999986493668646	WITHOUT_CLASSIFICATION	1.3506331353515319E-6	TEST
// NOTE : ( max - 1 ) because first is zero-based while max is not...	WITHOUT_CLASSIFICATION	0.9999935818384385	WITHOUT_CLASSIFICATION	6.418161561520488E-6	TEST
// -- Package local methods for the QueryLoader delegate --	WITHOUT_CLASSIFICATION	0.9999985807793654	WITHOUT_CLASSIFICATION	1.419220634633989E-6	TEST
// If there are no collection fetches, then no further checks are needed	WITHOUT_CLASSIFICATION	0.9999994294217803	WITHOUT_CLASSIFICATION	5.705782195671189E-7	TEST
// A shallow query is ok (although technically there should be no fetching here...)	WITHOUT_CLASSIFICATION	0.9999986259592204	WITHOUT_CLASSIFICATION	1.374040779591048E-6	TEST
// should be the first, but just to be safe...	WITHOUT_CLASSIFICATION	0.9999915184594725	WITHOUT_CLASSIFICATION	8.481540527580171E-6	TEST
// Use the delegate.	WITHOUT_CLASSIFICATION	0.9999958012234129	WITHOUT_CLASSIFICATION	4.1987765870922785E-6	TEST
// Use the delegate.	WITHOUT_CLASSIFICATION	0.9999958012234129	WITHOUT_CLASSIFICATION	4.1987765870922785E-6	TEST
// Impl Note: allows multiple collection fetches as long as the // entire fecthed graph still "points back" to a single // root entity for return	WITHOUT_CLASSIFICATION	0.9999997655418293	WITHOUT_CLASSIFICATION	2.3445817071169516E-7	TEST
// Otherwise, we have a non-scalar select with defined collection fetch(es). // Make sure that there is only a single root entity in the return (no tuples)	WITHOUT_CLASSIFICATION	0.9999999841175539	WITHOUT_CLASSIFICATION	1.5882446213743615E-8	TEST
// This is not strictly true.  We actually just need to make sure that // it is ordered by root-entity PK and that that order-by comes before // any non-root-entity ordering...	WITHOUT_CLASSIFICATION	0.9999999381365211	WITHOUT_CLASSIFICATION	6.186347889136446E-8	TEST
//	WITHOUT_CLASSIFICATION	0.999864478982662	WITHOUT_CLASSIFICATION	1.3552101733804665E-4	TEST
// we are already processing a dot-structure	WITHOUT_CLASSIFICATION	0.9999995126704088	WITHOUT_CLASSIFICATION	4.873295911631181E-7	TEST
// igndore it...	WITHOUT_CLASSIFICATION	0.9999945275865643	WITHOUT_CLASSIFICATION	5.472413435705129E-6	TEST
// we are now at a new tree level	WITHOUT_CLASSIFICATION	0.9999974057112269	WITHOUT_CLASSIFICATION	2.5942887731265053E-6	TEST
// [jsd] The fix for HHH-558...	WITHOUT_CLASSIFICATION	0.9999723384628174	WITHOUT_CLASSIFICATION	2.766153718252129E-5	TEST
// If the token can tell us if it could be an identifier...	WITHOUT_CLASSIFICATION	0.9999978555212715	WITHOUT_CLASSIFICATION	2.1444787285482754E-6	TEST
// ... and the expected token type was an identifier, then:	WITHOUT_CLASSIFICATION	0.9999988425027384	WITHOUT_CLASSIFICATION	1.1574972617052312E-6	TEST
// Use the token as an identifier.	WITHOUT_CLASSIFICATION	0.999997172566409	WITHOUT_CLASSIFICATION	2.8274335911426647E-6	TEST
// Add the token to the AST.	WITHOUT_CLASSIFICATION	0.9999925240141713	WITHOUT_CLASSIFICATION	7.475985828710052E-6	TEST
// (NOT (EQ a b) ) => (NE a b)	WITHOUT_CLASSIFICATION	0.9998820173495279	WITHOUT_CLASSIFICATION	1.179826504720792E-4	TEST
// (NOT (NE a b) ) => (EQ a b)	WITHOUT_CLASSIFICATION	0.9998820173495279	WITHOUT_CLASSIFICATION	1.179826504720792E-4	TEST
// (NOT (LT a b) ) => (GE a b)	WITHOUT_CLASSIFICATION	0.9998954284217112	WITHOUT_CLASSIFICATION	1.045715782887923E-4	TEST
// (NOT (GE a b) ) => (LT a b)	WITHOUT_CLASSIFICATION	0.9998954284217112	WITHOUT_CLASSIFICATION	1.045715782887923E-4	TEST
// (NOT (LE a b) ) => (GT a b)	WITHOUT_CLASSIFICATION	0.9998970581034051	WITHOUT_CLASSIFICATION	1.0294189659488798E-4	TEST
// (NOT (LIKE a b) ) => (NOT_LIKE a b)	WITHOUT_CLASSIFICATION	0.9998878166677815	WITHOUT_CLASSIFICATION	1.1218333221852772E-4	TEST
// (NOT (NOT_LIKE a b) ) => (LIKE a b)	WITHOUT_CLASSIFICATION	0.9998878166677815	WITHOUT_CLASSIFICATION	1.1218333221852772E-4	TEST
// (NOT (IS_NOT_NULL a b) ) => (IS_NULL a b)	WITHOUT_CLASSIFICATION	0.9998895918532908	WITHOUT_CLASSIFICATION	1.1040814670919669E-4	TEST
// (NOT (BETWEEN a b) ) => (NOT_BETWEEN a b)	WITHOUT_CLASSIFICATION	0.9998335982976136	WITHOUT_CLASSIFICATION	1.664017023863024E-4	TEST
// Initialize the error handling delegate.	WITHOUT_CLASSIFICATION	0.9999988624586159	WITHOUT_CLASSIFICATION	1.1375413840903364E-6	TEST
//overriden to avoid System.exit	WITHOUT_CLASSIFICATION	0.9999915027037799	WITHOUT_CLASSIFICATION	8.497296220048545E-6	TEST
// if // if // Otherwise, handle the error normally.	WITHOUT_CLASSIFICATION	0.999999138610963	WITHOUT_CLASSIFICATION	8.613890371112536E-7	TEST
// (NOT (NOT_BETWEEN a b) ) => (BETWEEN a b)	WITHOUT_CLASSIFICATION	0.9998335982976136	WITHOUT_CLASSIFICATION	1.664017023863024E-4	TEST
/* This can never happen because this rule will always eliminate the child NOT.	WITHOUT_CLASSIFICATION	0.9999960816170796	WITHOUT_CLASSIFICATION	3.918382920414751E-6	TEST
// Just add a 'not' parent.	WITHOUT_CLASSIFICATION	0.9999972817584971	WITHOUT_CLASSIFICATION	2.7182415028164894E-6	TEST
// (EQ NULL b) => (IS_NULL b)	WITHOUT_CLASSIFICATION	0.9999394866801651	WITHOUT_CLASSIFICATION	6.051331983500714E-5	TEST
// (EQ a NULL) => (IS_NULL a)	WITHOUT_CLASSIFICATION	0.9999745014204322	WITHOUT_CLASSIFICATION	2.549857956788804E-5	TEST
// NOTE: Because we're using ASTUtil.createParent(), the tree must be created from the bottom up. // IS EMPTY x => (EXISTS (QUERY (SELECT_FROM (FROM x) ) ) )	WITHOUT_CLASSIFICATION	0.999999406845512	WITHOUT_CLASSIFICATION	5.931544880150241E-7	TEST
// Add NOT if it's negated.	WITHOUT_CLASSIFICATION	0.9999348172217253	WITHOUT_CLASSIFICATION	6.518277827473294E-5	TEST
// Create nodes that track line and column number.	WITHOUT_CLASSIFICATION	0.9999998195304793	WITHOUT_CLASSIFICATION	1.8046952071746955E-7	TEST
// Case 1: Multi token keywords GROUP BY and ORDER BY // The next token ( LT(2) ) should be 'by'... otherwise, this is just an ident.	WITHOUT_CLASSIFICATION	0.9999999022803687	WITHOUT_CLASSIFICATION	9.771963134268983E-8	TEST
// Case 2: The current token is after FROM and before '.'.	WITHOUT_CLASSIFICATION	0.9999958904702423	WITHOUT_CLASSIFICATION	4.109529757722437E-6	TEST
// This handles HHH-354, where there is a strange property name in a where clause. // If the lookahead contains a DOT then something that isn't an IDENT...	WITHOUT_CLASSIFICATION	0.9999999762677677	WITHOUT_CLASSIFICATION	2.3732232170788294E-8	TEST
// See if the second lookahed token can be an identifier.	WITHOUT_CLASSIFICATION	0.9999979753748435	WITHOUT_CLASSIFICATION	2.024625156417172E-6	TEST
// Set it!	WITHOUT_CLASSIFICATION	0.9999853835940533	WITHOUT_CLASSIFICATION	1.4616405946647296E-5	TEST
// ignore	WITHOUT_CLASSIFICATION	0.9999944894313505	WITHOUT_CLASSIFICATION	5.5105686496089476E-6	TEST
// strip the " where "	WITHOUT_CLASSIFICATION	0.9999854155839675	WITHOUT_CLASSIFICATION	1.4584416032481724E-5	TEST
// Don't really know all the codes required to adequately decipher returned jdbc exceptions here. // simply allow the failure to be eaten and the subsequent insert-selects/deletes should fail	WITHOUT_CLASSIFICATION	0.9999999758143264	WITHOUT_CLASSIFICATION	2.418567350425083E-8	TEST
// at the very least cleanup the data :)	WITHOUT_CLASSIFICATION	0.9999989554580043	WITHOUT_CLASSIFICATION	1.0445419957556602E-6	TEST
// First, save off the pertinent ids, as the return value	WITHOUT_CLASSIFICATION	0.9999991461549131	WITHOUT_CLASSIFICATION	8.538450869473862E-7	TEST
// jdbc params are 1-based	WITHOUT_CLASSIFICATION	0.9999941349720469	WITHOUT_CLASSIFICATION	5.865027953092744E-6	TEST
// jdbc params are 1-based	WITHOUT_CLASSIFICATION	0.9999941349720469	WITHOUT_CLASSIFICATION	5.865027953092744E-6	TEST
// Start performing the updates	WITHOUT_CLASSIFICATION	0.9999952152246125	WITHOUT_CLASSIFICATION	4.784775387500569E-6	TEST
// First, save off the pertinent ids, saving the number of pertinent ids for return	WITHOUT_CLASSIFICATION	0.9999979898627018	WITHOUT_CLASSIFICATION	2.010137298074257E-6	TEST
// Start performing the deletes	WITHOUT_CLASSIFICATION	0.999994495333233	WITHOUT_CLASSIFICATION	5.504666766950129E-6	TEST
// otherwise, everything ok.	WITHOUT_CLASSIFICATION	0.9999978168510718	WITHOUT_CLASSIFICATION	2.1831489282017327E-6	TEST
// visit width-first, then depth	WITHOUT_CLASSIFICATION	0.9999906038318168	WITHOUT_CLASSIFICATION	9.396168183112091E-6	TEST
// if the types report logical equivalence, return true...	WITHOUT_CLASSIFICATION	0.9999997179603145	WITHOUT_CLASSIFICATION	2.820396855709948E-7	TEST
// otherwise, perform a "deep equivalence" check...	WITHOUT_CLASSIFICATION	0.9999996945974551	WITHOUT_CLASSIFICATION	3.054025448778423E-7	TEST
// If there is no WHERE node, make one.	WITHOUT_CLASSIFICATION	0.9999983664404521	WITHOUT_CLASSIFICATION	1.6335595478033276E-6	TEST
// inject the WHERE after the parent	WITHOUT_CLASSIFICATION	0.9999834257950938	WITHOUT_CLASSIFICATION	1.657420490622067E-5	TEST
// Never include subclasses for implied from elements.	WITHOUT_CLASSIFICATION	0.9999912325212451	WITHOUT_CLASSIFICATION	8.767478754952313E-6	TEST
// Moved here from SelectClause [jsd]	WITHOUT_CLASSIFICATION	0.9999977749752541	WITHOUT_CLASSIFICATION	2.2250247458855617E-6	TEST
///////////////////////////////////////////////////////////////////////////	WITHOUT_CLASSIFICATION	0.999667799056761	WITHOUT_CLASSIFICATION	3.3220094323901397E-4	TEST
// Use the table fromElement and the property name to get the array of column names.	WITHOUT_CLASSIFICATION	0.9999999069011203	WITHOUT_CLASSIFICATION	9.309887962141163E-8	TEST
// Set the attributes of the property reference expression.	WITHOUT_CLASSIFICATION	0.999999397892587	WITHOUT_CLASSIFICATION	6.021074130834308E-7	TEST
// If the uresolved property path isn't set yet, just use the property name.	WITHOUT_CLASSIFICATION	0.9999985492208577	WITHOUT_CLASSIFICATION	1.4507791423174642E-6	TEST
// The 'from element' that the property is in.	WITHOUT_CLASSIFICATION	0.9999972815829824	WITHOUT_CLASSIFICATION	2.7184170175583716E-6	TEST
// Prepare the left hand side and get the data type.	WITHOUT_CLASSIFICATION	0.9999994266337674	WITHOUT_CLASSIFICATION	5.733662325312336E-7	TEST
// Prepare the left hand side and get the data type.	WITHOUT_CLASSIFICATION	0.9999994266337674	WITHOUT_CLASSIFICATION	5.733662325312336E-7	TEST
// If this dot has already been resolved, stop now.	WITHOUT_CLASSIFICATION	0.9999979656689462	WITHOUT_CLASSIFICATION	2.0343310538218664E-6	TEST
// If there is no data type for this node, and we're at the end of the path (top most dot node), then // this might be a Java constant.	WITHOUT_CLASSIFICATION	0.9999995749298344	WITHOUT_CLASSIFICATION	4.2507016554755296E-7	TEST
// The property is a collection...	WITHOUT_CLASSIFICATION	0.9999991213582543	WITHOUT_CLASSIFICATION	8.78641745747392E-7	TEST
// The property is a component...	WITHOUT_CLASSIFICATION	0.9999988322270363	WITHOUT_CLASSIFICATION	1.1677729636371493E-6	TEST
// The property is another class..	WITHOUT_CLASSIFICATION	0.9999978269038458	WITHOUT_CLASSIFICATION	2.173096154215266E-6	TEST
// Otherwise, this is a primitive type.	WITHOUT_CLASSIFICATION	0.9999974044856821	WITHOUT_CLASSIFICATION	2.595514317850765E-6	TEST
//foo.bars.size (also handles deprecated stuff like foo.bars.maxelement for backwardness)	WITHOUT_CLASSIFICATION	0.9999951966052919	WITHOUT_CLASSIFICATION	4.803394708094834E-6	TEST
// This 'dot' expression now refers to the resulting from element.	WITHOUT_CLASSIFICATION	0.999999739822456	WITHOUT_CLASSIFICATION	2.601775439230092E-7	TEST
// Always add the collection's query spaces.	WITHOUT_CLASSIFICATION	0.9999995590590005	WITHOUT_CLASSIFICATION	4.409409995400037E-7	TEST
// in non-select queries, the only time we should need to join is if we are in a subquery from clause	WITHOUT_CLASSIFICATION	0.9999996993558821	WITHOUT_CLASSIFICATION	3.0064411794360315E-7	TEST
// this is the regression style determination which matches the logic of the classic translator	WITHOUT_CLASSIFICATION	0.9999996322673931	WITHOUT_CLASSIFICATION	3.6773260686033825E-7	TEST
// This 'dot' expression now refers to the resulting from element.	WITHOUT_CLASSIFICATION	0.999999739822456	WITHOUT_CLASSIFICATION	2.601775439230092E-7	TEST
// even though we might find a pre-existing element by join path, we may not be able to reuse it...	WITHOUT_CLASSIFICATION	0.9999998850625057	WITHOUT_CLASSIFICATION	1.1493749432346842E-7	TEST
// NOTE : addDuplicateAlias() already performs nullness checks on the alias.	WITHOUT_CLASSIFICATION	0.9999992747543294	WITHOUT_CLASSIFICATION	7.252456705296818E-7	TEST
// if the from-clauses are the same, we can be a little more aggressive in terms of what we reuse	WITHOUT_CLASSIFICATION	0.9999998207343258	WITHOUT_CLASSIFICATION	1.792656741941396E-7	TEST
// again, null != null here	WITHOUT_CLASSIFICATION	0.9999983180108505	WITHOUT_CLASSIFICATION	1.6819891495170118E-6	TEST
// If this is an implied join in a from element, then use the impled join type which is part of the // tree parser's state (set by the gramamar actions).	WITHOUT_CLASSIFICATION	0.9999999367321591	WITHOUT_CLASSIFICATION	6.326784084594153E-8	TEST
// otherwise (subquery case) dont reuse the fromElement if we are processing the from-clause of the subquery	WITHOUT_CLASSIFICATION	0.9999999194055754	WITHOUT_CLASSIFICATION	8.059442461404001E-8	TEST
// we know only the lhs-hand type, so use that	WITHOUT_CLASSIFICATION	0.9999991056251684	WITHOUT_CLASSIFICATION	8.943748315992156E-7	TEST
// the referenced node text is the special 'id'	WITHOUT_CLASSIFICATION	0.9999931472214886	WITHOUT_CLASSIFICATION	6.852778511479799E-6	TEST
// only the identifier property field name can be a reference to the associated entity's PK...	WITHOUT_CLASSIFICATION	0.9999985592752553	WITHOUT_CLASSIFICATION	1.4407247446227685E-6	TEST
// special shortcut for id properties, skip the join! // this must only occur at the _end_ of a path expression	WITHOUT_CLASSIFICATION	0.999999356615325	WITHOUT_CLASSIFICATION	6.433846750295807E-7	TEST
// Append the new property name onto the unresolved path.	WITHOUT_CLASSIFICATION	0.9999995061191269	WITHOUT_CLASSIFICATION	4.938808730820639E-7	TEST
// If the lhs is a collection, use CollectionPropertyMapping	WITHOUT_CLASSIFICATION	0.999999729778426	WITHOUT_CLASSIFICATION	2.702215740081261E-7	TEST
// Tell the destination fromElement to 'includeSubclasses'.	WITHOUT_CLASSIFICATION	0.9999996780651599	WITHOUT_CLASSIFICATION	3.219348400856048E-7	TEST
// Use theta style (for regression) // Move the node up, after the origin node.	WITHOUT_CLASSIFICATION	0.9999995187801715	WITHOUT_CLASSIFICATION	4.812198284861745E-7	TEST
// Don't resolve the node again.	WITHOUT_CLASSIFICATION	0.9999986199045684	WITHOUT_CLASSIFICATION	1.3800954316647235E-6	TEST
// for expected parameter type injection, we expect that the lhs represents // some form of property ref and that the children of the in-list represent // one-or-more params.	WITHOUT_CLASSIFICATION	0.9999998452386253	WITHOUT_CLASSIFICATION	1.5476137473796443E-7	TEST
// we need to strip off the embedded parens so that sql-gen does not double these up	WITHOUT_CLASSIFICATION	0.99999942208115	WITHOUT_CLASSIFICATION	5.779188499904697E-7	TEST
// we have something like : "? [op] rhs"	WITHOUT_CLASSIFICATION	0.9999993131551096	WITHOUT_CLASSIFICATION	6.868448903345924E-7	TEST
// we have something like : "lhs [op] ?"	WITHOUT_CLASSIFICATION	0.9999990444753978	WITHOUT_CLASSIFICATION	9.55524602165626E-7	TEST
// we know only the rhs-hand type, so use that	WITHOUT_CLASSIFICATION	0.9999992961163578	WITHOUT_CLASSIFICATION	7.038836420697663E-7	TEST
// handle the (assumed) valid cases: // #1 - the only valid datetime addition synatx is one or the other is a datetime (but not both)	WITHOUT_CLASSIFICATION	0.9999998692480286	WITHOUT_CLASSIFICATION	1.3075197144267054E-7	TEST
// one or the other needs to be a datetime for us to get into this method in the first place...	WITHOUT_CLASSIFICATION	0.9999984125446959	WITHOUT_CLASSIFICATION	1.5874553041209272E-6	TEST
// #3 - note that this is also true of "datetime - :param"...	WITHOUT_CLASSIFICATION	0.9999996724598829	WITHOUT_CLASSIFICATION	3.275401170805415E-7	TEST
// #2	WITHOUT_CLASSIFICATION	0.9999637613294199	WITHOUT_CLASSIFICATION	3.623867058014416E-5	TEST
// Generate the inner join -- The elements need to be joined to the collection they are in.	WITHOUT_CLASSIFICATION	0.9999997835786327	WITHOUT_CLASSIFICATION	2.1642136732161704E-7	TEST
// nothing to do	WITHOUT_CLASSIFICATION	0.9999946780779999	WITHOUT_CLASSIFICATION	5.321922000167075E-6	TEST
// The 'from element' that represents the elements of the collection.	WITHOUT_CLASSIFICATION	0.9999997540233359	WITHOUT_CLASSIFICATION	2.459766641088402E-7	TEST
// Add the condition to the join sequence that qualifies the indexed element.	WITHOUT_CLASSIFICATION	0.999999697758943	WITHOUT_CLASSIFICATION	3.022410569068093E-7	TEST
// Sometimes use the element table alias, sometimes use the... umm... collection table alias (many to many)	WITHOUT_CLASSIFICATION	0.9999999624739168	WITHOUT_CLASSIFICATION	3.752608328316483E-8	TEST
// Now, set the text for this node.  It should be the element columns.	WITHOUT_CLASSIFICATION	0.9999853126442881	WITHOUT_CLASSIFICATION	1.4687355711776473E-5	TEST
// Get the function return value type, based on the type of the first argument.	WITHOUT_CLASSIFICATION	0.9999997703826777	WITHOUT_CLASSIFICATION	2.2961732229984415E-7	TEST
// This will call initialize(tok)!	WITHOUT_CLASSIFICATION	0.9999982388964692	WITHOUT_CLASSIFICATION	1.7611035307467543E-6	TEST
// mutation depends on the types of nodes invloved...	WITHOUT_CLASSIFICATION	0.9999995862912717	WITHOUT_CLASSIFICATION	4.1370872835842687E-7	TEST
// "pass along" our initial embedded parameter node(s) to the first generated // sql fragment so that it can be handled later for parameter binding...	WITHOUT_CLASSIFICATION	0.9999998174493128	WITHOUT_CLASSIFICATION	1.825506873107632E-7	TEST
// logic operators by definition resolve to booleans	WITHOUT_CLASSIFICATION	0.9999996912089353	WITHOUT_CLASSIFICATION	3.087910646495223E-7	TEST
// Generated select expressions are already resolved, nothing to do.	WITHOUT_CLASSIFICATION	0.9999999468223597	WITHOUT_CLASSIFICATION	5.3177640354779974E-8	TEST
// The path may be a reference to an alias defined in the parent query.	WITHOUT_CLASSIFICATION	0.9999995293964308	WITHOUT_CLASSIFICATION	4.706035692202104E-7	TEST
// The HQL class alias refers to the class name.	WITHOUT_CLASSIFICATION	0.9999995693594002	WITHOUT_CLASSIFICATION	4.306405997914193E-7	TEST
// Associate the table alias with the element.	WITHOUT_CLASSIFICATION	0.9999993785481559	WITHOUT_CLASSIFICATION	6.214518440578582E-7	TEST
// try the parent FromClause...	WITHOUT_CLASSIFICATION	0.9999983509414797	WITHOUT_CLASSIFICATION	1.6490585202019162E-6	TEST
// Add the new node to the map so that we don't create it twice.	WITHOUT_CLASSIFICATION	0.9999997645438372	WITHOUT_CLASSIFICATION	2.3545616273617406E-7	TEST
// Make sure that all from elements registered with this FROM clause are actually in the AST.	WITHOUT_CLASSIFICATION	0.9999998857734976	WITHOUT_CLASSIFICATION	1.1422650232503963E-7	TEST
// Invoke setScalarColumnText on each constructor argument.	WITHOUT_CLASSIFICATION	0.9999999202547069	WITHOUT_CLASSIFICATION	7.974529317839269E-8	TEST
// Collect the select expressions, skip the first child because it is the class name.	WITHOUT_CLASSIFICATION	0.999999284514271	WITHOUT_CLASSIFICATION	7.154857290453537E-7	TEST
// return an empty Type array	WITHOUT_CLASSIFICATION	0.9999987090296731	WITHOUT_CLASSIFICATION	1.290970326856098E-6	TEST
// Constructors are always considered scalar results.	WITHOUT_CLASSIFICATION	0.9999994039757015	WITHOUT_CLASSIFICATION	5.960242984648531E-7	TEST
// this is the exception returned by ReflectHelper.getConstructor() if it cannot // locate an appropriate constructor	WITHOUT_CLASSIFICATION	0.9999997486206259	WITHOUT_CLASSIFICATION	2.5137937412668307E-7	TEST
// if there is no order by, make one	WITHOUT_CLASSIFICATION	0.999997638165406	WITHOUT_CLASSIFICATION	2.3618345939770203E-6	TEST
// Find the WHERE; if there is no WHERE, find the FROM...	WITHOUT_CLASSIFICATION	0.9999870252617844	WITHOUT_CLASSIFICATION	1.2974738215557127E-5	TEST
// Now, inject the newly built ORDER BY into the tree	WITHOUT_CLASSIFICATION	0.9999967920202386	WITHOUT_CLASSIFICATION	3.2079797614353116E-6	TEST
// ParameterContainer impl ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999959262222994	WITHOUT_CLASSIFICATION	4.073777700641961E-6	TEST
// logic operators by definition resolve to boolean.	WITHOUT_CLASSIFICATION	0.9999997876089659	WITHOUT_CLASSIFICATION	2.1239103403379527E-7	TEST
// Render the identifier select fragment using the table alias.	WITHOUT_CLASSIFICATION	0.9999993807293314	WITHOUT_CLASSIFICATION	6.1927066863916E-7	TEST
// Class names in the FROM clause result in a JoinSequence (the old FromParser does this).	WITHOUT_CLASSIFICATION	0.9999998905953164	WITHOUT_CLASSIFICATION	1.094046836658558E-7	TEST
// For many-to-many joins, use the tablename from the queryable collection for the default text.	WITHOUT_CLASSIFICATION	0.9999998954060993	WITHOUT_CLASSIFICATION	1.045939006278942E-7	TEST
// Otherwise, use the property mapping.	WITHOUT_CLASSIFICATION	0.9999985514311962	WITHOUT_CLASSIFICATION	1.4485688037799297E-6	TEST
// should be safe to only ever expect EntityPersister references here	WITHOUT_CLASSIFICATION	0.9999992626184389	WITHOUT_CLASSIFICATION	7.373815612433056E-7	TEST
// If the property is a special collection property name, return a CollectionPropertyMapping.	WITHOUT_CLASSIFICATION	0.9999998951340386	WITHOUT_CLASSIFICATION	1.0486596138392868E-7	TEST
// Collection of components.	WITHOUT_CLASSIFICATION	0.9999992569326781	WITHOUT_CLASSIFICATION	7.430673219062018E-7	TEST
// make sure the lhs is "assignable"...	WITHOUT_CLASSIFICATION	0.9999989136691608	WITHOUT_CLASSIFICATION	1.086330839169381E-6	TEST
// false indicates to not generate parens around the assignment	WITHOUT_CLASSIFICATION	0.9999994408562433	WITHOUT_CLASSIFICATION	5.591437567541757E-7	TEST
// Register the FromElement with the FROM clause, now that we have the names and aliases.	WITHOUT_CLASSIFICATION	0.9999997737633536	WITHOUT_CLASSIFICATION	2.2623664645490686E-7	TEST
// currently allowed...	WITHOUT_CLASSIFICATION	0.9999989040752467	WITHOUT_CLASSIFICATION	1.0959247532614942E-6	TEST
// HHH-276 : implied joins in a subselect where clause - The destination needs to be added // to the destination's from clause. // Not sure if this is will fix everything, but it works.	WITHOUT_CLASSIFICATION	0.9999998998887588	WITHOUT_CLASSIFICATION	1.0011124112224333E-7	TEST
//return classAlias == null ? className : classAlias;	WITHOUT_CLASSIFICATION	0.9999970397230481	WITHOUT_CLASSIFICATION	2.9602769518440685E-6	TEST
// This is an explicit FROM element.	WITHOUT_CLASSIFICATION	0.9999987707158114	WITHOUT_CLASSIFICATION	1.2292841885968769E-6	TEST
// ParameterContainer impl ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999959262222994	WITHOUT_CLASSIFICATION	4.073777700641961E-6	TEST
// Fetch can't be used with scroll() or iterate().	WITHOUT_CLASSIFICATION	0.999998529853152	WITHOUT_CLASSIFICATION	1.4701468480724525E-6	TEST
// If it's not implied or it is implied and it's a many to many join where the target wasn't found.	WITHOUT_CLASSIFICATION	0.9999984528271529	WITHOUT_CLASSIFICATION	1.547172846993452E-6	TEST
// Since this is an explicit FROM element, it can't be implied in the FROM clause.	WITHOUT_CLASSIFICATION	0.9999991833091273	WITHOUT_CLASSIFICATION	8.166908728083437E-7	TEST
// Do nothing, eplicit from elements are *always* in the projection list.	WITHOUT_CLASSIFICATION	0.9999998615477061	WITHOUT_CLASSIFICATION	1.3845229394645747E-7	TEST
// propertyName refers to something like collection.size...	WITHOUT_CLASSIFICATION	0.9999999508510692	WITHOUT_CLASSIFICATION	4.914893083576619E-8	TEST
// property name is a sub-path of a component...	WITHOUT_CLASSIFICATION	0.9999997939610418	WITHOUT_CLASSIFICATION	2.0603895811630905E-7	TEST
// Always add the collection's query spaces.	WITHOUT_CLASSIFICATION	0.9999995590590005	WITHOUT_CLASSIFICATION	4.409409995400037E-7	TEST
// nothing to do; even if the operand is a parameter, no way we could // infer an appropriate expected type here	WITHOUT_CLASSIFICATION	0.9999999324532292	WITHOUT_CLASSIFICATION	6.754677084299152E-8	TEST
// logic operators by definition resolve to booleans	WITHOUT_CLASSIFICATION	0.9999996912089353	WITHOUT_CLASSIFICATION	3.087910646495223E-7	TEST
// DotNode uses null here...	WITHOUT_CLASSIFICATION	0.9999985707414845	WITHOUT_CLASSIFICATION	1.4292585155694768E-6	TEST
// We represent a from-clause alias	WITHOUT_CLASSIFICATION	0.9999984023501974	WITHOUT_CLASSIFICATION	1.5976498025559223E-6	TEST
// we are the LHS of the DOT representing a naked comp-prop-ref	WITHOUT_CLASSIFICATION	0.9999991487870283	WITHOUT_CLASSIFICATION	8.512129715891772E-7	TEST
// we are the RHS of the DOT representing a naked comp-prop-ref	WITHOUT_CLASSIFICATION	0.9999991494494633	WITHOUT_CLASSIFICATION	8.505505367482138E-7	TEST
// we represent a naked (simple) prop-ref	WITHOUT_CLASSIFICATION	0.9999977833546767	WITHOUT_CLASSIFICATION	2.2166453232500584E-6	TEST
// EARLY EXIT!!!  return so the resolve call explicitly coming from DotNode can // resolve this...	WITHOUT_CLASSIFICATION	0.9999999626910996	WITHOUT_CLASSIFICATION	3.730890031623135E-8	TEST
// assume this ident's text does *not* refer to a property on the given persister	WITHOUT_CLASSIFICATION	0.9999997021650634	WITHOUT_CLASSIFICATION	2.9783493654435867E-7	TEST
// just ignore it for now, it'll get resolved later...	WITHOUT_CLASSIFICATION	0.9999931083750427	WITHOUT_CLASSIFICATION	6.891624957268076E-6	TEST
// This is not actually a constant, but a reference to FROM element.	WITHOUT_CLASSIFICATION	0.9999999009500354	WITHOUT_CLASSIFICATION	9.90499644819878E-8	TEST
// check to see if our "propPath" actually // represents a property on the persister	WITHOUT_CLASSIFICATION	0.9999997920550803	WITHOUT_CLASSIFICATION	2.079449198508077E-7	TEST
// these pieces are needed for usage in select clause	WITHOUT_CLASSIFICATION	0.9999948098110919	WITHOUT_CLASSIFICATION	5.190188908178043E-6	TEST
// used to set the type of the parent dot node	WITHOUT_CLASSIFICATION	0.999997802346956	WITHOUT_CLASSIFICATION	2.1976530440122753E-6	TEST
// assume we do *not* refer to a property on the given persister	WITHOUT_CLASSIFICATION	0.9999995921906505	WITHOUT_CLASSIFICATION	4.078093495172835E-7	TEST
// assume we do *not* refer to a property on the given persister	WITHOUT_CLASSIFICATION	0.9999995921906505	WITHOUT_CLASSIFICATION	4.078093495172835E-7	TEST
// naked property-refs cannot be used with an aliased from element	WITHOUT_CLASSIFICATION	0.9999996013175639	WITHOUT_CLASSIFICATION	3.986824359630219E-7	TEST
// this piece is needed for usage in select clause	WITHOUT_CLASSIFICATION	0.9999929061976242	WITHOUT_CLASSIFICATION	7.09380237584747E-6	TEST
// do *not* over-write the column text, as that has already been // "rendered" during resolve	WITHOUT_CLASSIFICATION	0.9999999338918512	WITHOUT_CLASSIFICATION	6.610814880009217E-8	TEST
// for some reason the antlr.CommonAST initialization routines force // this method to get called twice.  The first time with an empty string	WITHOUT_CLASSIFICATION	0.999999937530712	WITHOUT_CLASSIFICATION	6.246928800605703E-8	TEST
// Look up class name using the first identifier in the path.	WITHOUT_CLASSIFICATION	0.999999277915218	WITHOUT_CLASSIFICATION	7.220847818440897E-7	TEST
// Add to the query spaces.	WITHOUT_CLASSIFICATION	0.9999978846716467	WITHOUT_CLASSIFICATION	2.115328353240727E-6	TEST
// If the from element isn't in the same clause, create a new from element.	WITHOUT_CLASSIFICATION	0.9999998176308554	WITHOUT_CLASSIFICATION	1.8236914457670329E-7	TEST
// This is the root level node. // Generate an explicit from clause at the root.	WITHOUT_CLASSIFICATION	0.9999997027824562	WITHOUT_CLASSIFICATION	2.972175438011507E-7	TEST
// Correlated subqueries create 'special' implied from nodes // because correlated subselects can't use an ANSI-style join	WITHOUT_CLASSIFICATION	0.9999997849575444	WITHOUT_CLASSIFICATION	2.150424557239678E-7	TEST
// super-duper-classic-parser-regression-testing-mojo-magic...	WITHOUT_CLASSIFICATION	0.9999995032276497	WITHOUT_CLASSIFICATION	4.967723501232627E-7	TEST
// A collection of entities...	WITHOUT_CLASSIFICATION	0.9999989921659145	WITHOUT_CLASSIFICATION	1.0078340855533465E-6	TEST
// A collection of components...	WITHOUT_CLASSIFICATION	0.9999993369899772	WITHOUT_CLASSIFICATION	6.630100228530922E-7	TEST
// A collection of scalar elements...	WITHOUT_CLASSIFICATION	0.9999997753129357	WITHOUT_CLASSIFICATION	2.2468706438361762E-7	TEST
// according to both the ANSI-SQL and EJB3 specs, trim can either take // exactly one parameter or a variable number of parameters between 1 and 4. // from the SQL spec: // // <trim function> ::= //      TRIM <left paren> <trim operands> <right paren> // // <trim operands> ::= //      [ [ <trim specification> ] [ <trim character> ] FROM ] <trim source> // // <trim specification> ::= //      LEADING //      | TRAILING //      | BOTH // // If only <trim specification> is omitted, BOTH is assumed; // if <trim character> is omitted, space is assumed	WITHOUT_CLASSIFICATION	0.9999999923673383	WITHOUT_CLASSIFICATION	7.632661768391502E-9	TEST
// Don't include sub-classes for implied collection joins or subquery joins.	WITHOUT_CLASSIFICATION	0.9999994575891962	WITHOUT_CLASSIFICATION	5.424108037750125E-7	TEST
// Treat explict from elements in sub-queries properly.	WITHOUT_CLASSIFICATION	0.9999995590610053	WITHOUT_CLASSIFICATION	4.409389946095256E-7	TEST
//	WITHOUT_CLASSIFICATION	0.999864478982662	WITHOUT_CLASSIFICATION	1.3552101733804665E-4	TEST
// the "root from-element" in correlated subqueries do need this piece	WITHOUT_CLASSIFICATION	0.9999921085638712	WITHOUT_CLASSIFICATION	7.891436128812433E-6	TEST
// Create the FROM element for the target (the elements of the collection).	WITHOUT_CLASSIFICATION	0.9999993777003192	WITHOUT_CLASSIFICATION	6.22299680717311E-7	TEST
// If the join is implied, then don't include sub-classes on the element.	WITHOUT_CLASSIFICATION	0.9999992909321199	WITHOUT_CLASSIFICATION	7.090678800111001E-7	TEST
// Overridden informational metadata ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999986387310712	WITHOUT_CLASSIFICATION	1.361268928754663E-6	TEST
// The associated entity is implied, but it must be included in the FROM. // The collection alias is the role.	WITHOUT_CLASSIFICATION	0.9999997537277756	WITHOUT_CLASSIFICATION	2.462722243708159E-7	TEST
// Tag this node as a JOIN. // Don't include subclasses in the join. // This is a clollection join.	WITHOUT_CLASSIFICATION	0.9999998712273508	WITHOUT_CLASSIFICATION	1.287726492178825E-7	TEST
// Get the class name of the associated entity.	WITHOUT_CLASSIFICATION	0.9999985098007632	WITHOUT_CLASSIFICATION	1.4901992368581449E-6	TEST
//  origin, path, implied, columns, classAlias,	WITHOUT_CLASSIFICATION	0.9999989842107825	WITHOUT_CLASSIFICATION	1.0157892174659357E-6	TEST
/*implied*/	WITHOUT_CLASSIFICATION	0.9998234661289727	WITHOUT_CLASSIFICATION	1.7653387102739893E-4	TEST
// For implied many-to-many, just add the end join.	WITHOUT_CLASSIFICATION	0.9999975465825091	WITHOUT_CLASSIFICATION	2.4534174908922673E-6	TEST
// Overridden informational metadata ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999986387310712	WITHOUT_CLASSIFICATION	1.361268928754663E-6	TEST
// Overridden informational metadata ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999986387310712	WITHOUT_CLASSIFICATION	1.361268928754663E-6	TEST
// the standard SQL function name is current_timestamp...	WITHOUT_CLASSIFICATION	0.9999984734417425	WITHOUT_CLASSIFICATION	1.5265582574157837E-6	TEST
// This causes the factory to instantiate the desired class.	WITHOUT_CLASSIFICATION	0.999999452772817	WITHOUT_CLASSIFICATION	5.472271830324693E-7	TEST
//private Type[] sqlResultTypes;	WITHOUT_CLASSIFICATION	0.999988263276684	WITHOUT_CLASSIFICATION	1.1736723316045623E-5	TEST
// Frontbase has no known variation of a "SELECT ... FOR UPDATE" syntax...	WITHOUT_CLASSIFICATION	0.9999999104779788	WITHOUT_CLASSIFICATION	8.952202129962031E-8	TEST
/*	WITHOUT_CLASSIFICATION	0.9998809807601161	WITHOUT_CLASSIFICATION	1.1901923988389276E-4	TEST
/*public Type[] getSqlResultTypes() {	WITHOUT_CLASSIFICATION	0.9999752615403589	WITHOUT_CLASSIFICATION	2.4738459641211813E-5	TEST
// First, collect all of the select expressions. // NOTE: This must be done *before* invoking setScalarColumnText() because setScalarColumnText() // changes the AST!!!	WITHOUT_CLASSIFICATION	0.9999999730878321	WITHOUT_CLASSIFICATION	2.6912167963287098E-8	TEST
// First allow the actual type to control the return value. (the actual underlying sqltype could actually be different)	WITHOUT_CLASSIFICATION	0.9999999100063524	WITHOUT_CLASSIFICATION	8.999364762444159E-8	TEST
//sqlResultTypeList.addAll( constructorArgumentTypeList );	WITHOUT_CLASSIFICATION	0.9999985962570132	WITHOUT_CLASSIFICATION	1.4037429868492842E-6	TEST
// If the data type is not an association type, it could not have been in the FROM clause.	WITHOUT_CLASSIFICATION	0.9999997017922531	WITHOUT_CLASSIFICATION	2.982077469015828E-7	TEST
//sqlResultTypeList.add( type );	WITHOUT_CLASSIFICATION	0.9999805881960875	WITHOUT_CLASSIFICATION	1.941180391252013E-5	TEST
// Always add the type to the return type list.	WITHOUT_CLASSIFICATION	0.9999991136554316	WITHOUT_CLASSIFICATION	8.863445685581378E-7	TEST
// add the fetched entities	WITHOUT_CLASSIFICATION	0.9999850947698352	WITHOUT_CLASSIFICATION	1.4905230164874885E-5	TEST
// Get ready to start adding nodes.	WITHOUT_CLASSIFICATION	0.9999992570766444	WITHOUT_CLASSIFICATION	7.429233556221296E-7	TEST
// function support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999923247667294	WITHOUT_CLASSIFICATION	7.675233270690276E-6	TEST
// If there are any scalars (non-entities) selected, render the select column aliases.	WITHOUT_CLASSIFICATION	0.9999998818617255	WITHOUT_CLASSIFICATION	1.1813827455145696E-7	TEST
/*sqlResultTypeList,*/	WITHOUT_CLASSIFICATION	0.9999343565126593	WITHOUT_CLASSIFICATION	6.564348734066078E-5	TEST
/*ArrayList sqlResultTypeList,*/	WITHOUT_CLASSIFICATION	0.9999849509952469	WITHOUT_CLASSIFICATION	1.5049004753023939E-5	TEST
//sqlResultTypes = ( Type[] ) sqlResultTypeList.toArray( new Type[sqlResultTypeList.size()] );	WITHOUT_CLASSIFICATION	0.9999971202279747	WITHOUT_CLASSIFICATION	2.8797720253105854E-6	TEST
// lock acquisition support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999982031771597	WITHOUT_CLASSIFICATION	1.7968228402576464E-6	TEST
//TODO:	WITHOUT_CLASSIFICATION	0.9997522026385258	WITHOUT_CLASSIFICATION	2.477973614741706E-4	TEST
// Add the type to the list of returned sqlResultTypes.	WITHOUT_CLASSIFICATION	0.9999975058419028	WITHOUT_CLASSIFICATION	2.494158097234224E-6	TEST
// Generate an 2d array of column names, the first dimension is parallel with the // return types array.  The second dimension is the list of column names for each // type.	WITHOUT_CLASSIFICATION	0.9999999351583285	WITHOUT_CLASSIFICATION	6.484167140355816E-8	TEST
// Generate the select expression.	WITHOUT_CLASSIFICATION	0.9999993952616787	WITHOUT_CLASSIFICATION	6.047383213428669E-7	TEST
// union subclass support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999976513961719	WITHOUT_CLASSIFICATION	2.3486038280120073E-6	TEST
// Skip 'DISTINCT' and 'ALL', so we return the first expression node.	WITHOUT_CLASSIFICATION	0.9999994731749102	WITHOUT_CLASSIFICATION	5.268250897935852E-7	TEST
// Create SQL_TOKEN nodes for the columns.	WITHOUT_CLASSIFICATION	0.9999980679341356	WITHOUT_CLASSIFICATION	1.9320658642936963E-6	TEST
// Generate the property select tokens.	WITHOUT_CLASSIFICATION	0.9999989576013345	WITHOUT_CLASSIFICATION	1.0423986654492352E-6	TEST
// Get the function name node.	WITHOUT_CLASSIFICATION	0.9999983874020832	WITHOUT_CLASSIFICATION	1.6125979166675677E-6	TEST
// Method expressions in a SELECT should always be considered scalar.	WITHOUT_CLASSIFICATION	0.9999997198983336	WITHOUT_CLASSIFICATION	2.801016664422409E-7	TEST
// If this is 'elements' then create a new FROM element.	WITHOUT_CLASSIFICATION	0.9999995535623518	WITHOUT_CLASSIFICATION	4.46437648255528E-7	TEST
// Not elements(x)	WITHOUT_CLASSIFICATION	0.999983561659807	WITHOUT_CLASSIFICATION	1.643834019301228E-5	TEST
// Dialect function	WITHOUT_CLASSIFICATION	0.9999961738427317	WITHOUT_CLASSIFICATION	3.826157268345739E-6	TEST
// Collection 'property function'	WITHOUT_CLASSIFICATION	0.9999981190103958	WITHOUT_CLASSIFICATION	1.8809896041733365E-6	TEST
// If the constant is an IDENT, figure out what it means...	WITHOUT_CLASSIFICATION	0.9999994459040686	WITHOUT_CLASSIFICATION	5.540959313036891E-7	TEST
// IDENT is a class alias in the FROM.	WITHOUT_CLASSIFICATION	0.9999965798162054	WITHOUT_CLASSIFICATION	3.420183794658854E-6	TEST
// Resolve to an identity column.	WITHOUT_CLASSIFICATION	0.9999996796053995	WITHOUT_CLASSIFICATION	3.2039460053558797E-7	TEST
// Otherwise, it's a literal.	WITHOUT_CLASSIFICATION	0.9999960149986054	WITHOUT_CLASSIFICATION	3.985001394579589E-6	TEST
// the name of an entity class	WITHOUT_CLASSIFICATION	0.9999985708128375	WITHOUT_CLASSIFICATION	1.4291871625601575E-6	TEST
//the class discriminator value	WITHOUT_CLASSIFICATION	0.9999965310846781	WITHOUT_CLASSIFICATION	3.468915321787126E-6	TEST
// Chop off the rest of the tree.	WITHOUT_CLASSIFICATION	0.999968319113334	WITHOUT_CLASSIFICATION	3.168088666597784E-5	TEST
// Add a space before the display text.	WITHOUT_CLASSIFICATION	0.999996111661746	WITHOUT_CLASSIFICATION	3.888338254094011E-6	TEST
// Find or create the WHERE clause	WITHOUT_CLASSIFICATION	0.9999977283875714	WITHOUT_CLASSIFICATION	2.271612428657285E-6	TEST
// child == parent.getFirstChild()	WITHOUT_CLASSIFICATION	0.9999982658541191	WITHOUT_CLASSIFICATION	1.7341458809457748E-6	TEST
// Find or create the WHERE clause	WITHOUT_CLASSIFICATION	0.9999977283875714	WITHOUT_CLASSIFICATION	2.271612428657285E-6	TEST
// Filter conditions need to be inserted before the HQL where condition and the // theta join node.  This is because org.hibernate.loader.Loader binds the filter parameters first, // then it binds all the HQL query parameters, see org.hibernate.loader.Loader.processFilterParameters().	WITHOUT_CLASSIFICATION	0.9999998976086727	WITHOUT_CLASSIFICATION	1.0239132722113062E-7	TEST
// Put the FILTERS node before the HQL condition and theta joins	WITHOUT_CLASSIFICATION	0.9999993125559309	WITHOUT_CLASSIFICATION	6.874440691532009E-7	TEST
// add the current fragment to the FILTERS node	WITHOUT_CLASSIFICATION	0.9999992155497323	WITHOUT_CLASSIFICATION	7.844502677655761E-7	TEST
// Create a new THETA_JOINS node as a parent of all filters	WITHOUT_CLASSIFICATION	0.9999993328295911	WITHOUT_CLASSIFICATION	6.671704088323636E-7	TEST
// Put the THETA_JOINS node before the HQL condition, after the filters.	WITHOUT_CLASSIFICATION	0.9999982332402116	WITHOUT_CLASSIFICATION	1.7667597884551733E-6	TEST
// add the current fragment to the THETA_JOINS node	WITHOUT_CLASSIFICATION	0.9999990664416799	WITHOUT_CLASSIFICATION	9.335583201000088E-7	TEST
// First, try to get the persister using the given name directly.	WITHOUT_CLASSIFICATION	0.9999996445441817	WITHOUT_CLASSIFICATION	3.55455818394938E-7	TEST
// unable to locate it using this name	WITHOUT_CLASSIFICATION	0.9999996132329452	WITHOUT_CLASSIFICATION	3.867670548800859E-7	TEST
// If that didn't work, try using the 'import' name.	WITHOUT_CLASSIFICATION	0.9999996120766756	WITHOUT_CLASSIFICATION	3.879233242337056E-7	TEST
// Implicit joins use theta style (WHERE pk = fk), explicit joins use JOIN (after from)	WITHOUT_CLASSIFICATION	0.9999991507693682	WITHOUT_CLASSIFICATION	8.492306319236655E-7	TEST
// locate the registered function by the given name	WITHOUT_CLASSIFICATION	0.9999986792076937	WITHOUT_CLASSIFICATION	1.320792306350666E-6	TEST
// determine the type of the first argument...	WITHOUT_CLASSIFICATION	0.999998856758027	WITHOUT_CLASSIFICATION	1.1432419729331236E-6	TEST
// Use the DOT node to emit the first column name. // Create the column names, folled by the column aliases.	WITHOUT_CLASSIFICATION	0.9999993251516215	WITHOUT_CLASSIFICATION	6.748483785067374E-7	TEST
// Note: this simply constructs a "raw" SQL_TOKEN representing the // where fragment and injects this into the tree.  This "works"; // however it is probably not the best long-term solution. // // At some point we probably want to apply an additional grammar to // properly tokenize this where fragment into constituent parts // focused on the operators embedded within the fragment.	WITHOUT_CLASSIFICATION	0.9999999945712111	WITHOUT_CLASSIFICATION	5.428788810037832E-9	TEST
// Append the text of the current node.	WITHOUT_CLASSIFICATION	0.9999975248134341	WITHOUT_CLASSIFICATION	2.475186565905697E-6	TEST
// If the node has a first child, recurse into the first child.	WITHOUT_CLASSIFICATION	0.9999994640287018	WITHOUT_CLASSIFICATION	5.359712982516381E-7	TEST
// If there is a second child (RHS), recurse into that child.	WITHOUT_CLASSIFICATION	0.9999996477602657	WITHOUT_CLASSIFICATION	3.522397342754842E-7	TEST
// Iterate through the alias,JoinSequence pairs and generate SQL token nodes.	WITHOUT_CLASSIFICATION	0.999999816438706	WITHOUT_CLASSIFICATION	1.835612940614851E-7	TEST
// If the from element represents a JOIN_FRAGMENT and it is // a theta-style join, convert its type from JOIN_FRAGMENT // to FROM_FRAGMENT	WITHOUT_CLASSIFICATION	0.9999997022431659	WITHOUT_CLASSIFICATION	2.9775683409061616E-7	TEST
// this is used during SqlGenerator processing	WITHOUT_CLASSIFICATION	0.999997897861897	WITHOUT_CLASSIFICATION	2.102138102979608E-6	TEST
// If there is a FROM fragment and the FROM element is an explicit, then add the from part.	WITHOUT_CLASSIFICATION	0.9999996380802914	WITHOUT_CLASSIFICATION	3.6191970863974837E-7	TEST
/*&& StringHelper.isNotEmpty( frag )*/	WITHOUT_CLASSIFICATION	0.9999939036212356	WITHOUT_CLASSIFICATION	6.096378764381755E-6	TEST
// The FROM fragment will probably begin with ', '.  Remove this if it is present.	WITHOUT_CLASSIFICATION	0.999999593028014	WITHOUT_CLASSIFICATION	4.0697198598875913E-7	TEST
// This uses a PathExpressionParser but notice that compound paths are not valid, // only bare names and simple paths:	WITHOUT_CLASSIFICATION	0.9999999714091219	WITHOUT_CLASSIFICATION	2.8590878043264678E-8	TEST
// SELECT p FROM p IN CLASS eg.Person ORDER BY p.Name, p.Address, p	WITHOUT_CLASSIFICATION	0.999998951749281	WITHOUT_CLASSIFICATION	1.0482507189530624E-6	TEST
// The reason for this is SQL doesn't let you sort by an expression you are // not returning in the result set.	WITHOUT_CLASSIFICATION	0.9999998848064536	WITHOUT_CLASSIFICATION	1.1519354629332012E-7	TEST
//named query parameter	WITHOUT_CLASSIFICATION	0.9999608662288033	WITHOUT_CLASSIFICATION	3.913377119677364E-5	TEST
//default mode	WITHOUT_CLASSIFICATION	0.9999734367586457	WITHOUT_CLASSIFICATION	2.6563241354322165E-5	TEST
//QueryJoinFragment join = q.createJoinFragment(useThetaStyleJoin);	WITHOUT_CLASSIFICATION	0.9999990506218023	WITHOUT_CLASSIFICATION	9.493781975837838E-7	TEST
//reset the dotcount (but not the path) //after reset!	WITHOUT_CLASSIFICATION	0.9999761595128304	WITHOUT_CLASSIFICATION	2.3840487169673653E-5	TEST
//after reset!	WITHOUT_CLASSIFICATION	0.9998993009593562	WITHOUT_CLASSIFICATION	1.006990406438232E-4	TEST
// we don't need to worry about any condition in the ON clause // here (toFromFragmentString), since anything in the ON condition // is already applied to the whole query	WITHOUT_CLASSIFICATION	0.9999999775457316	WITHOUT_CLASSIFICATION	2.245426848695988E-8	TEST
// bit_length feels a bit broken to me. We have to cast to char in order to // pass when a numeric value is supplied. But of course the answers given will // be wildly different for these two datatypes. 1234.5678 will be 9 bytes as // a char string but will be 8 or 16 bytes as a true numeric. // Jay Nance 2006-09-22	WITHOUT_CLASSIFICATION	0.9999999604611558	WITHOUT_CLASSIFICATION	3.953884420496527E-8	TEST
// dotcount>=2	WITHOUT_CLASSIFICATION	0.9999879797455647	WITHOUT_CLASSIFICATION	1.2020254435264309E-5	TEST
// Do the corresponding RHS	WITHOUT_CLASSIFICATION	0.9999974419283137	WITHOUT_CLASSIFICATION	2.5580716862071755E-6	TEST
//if its "id"	WITHOUT_CLASSIFICATION	0.9998745601070347	WITHOUT_CLASSIFICATION	1.254398929653599E-4	TEST
//or its the id property name	WITHOUT_CLASSIFICATION	0.9999868055035057	WITHOUT_CLASSIFICATION	1.3194496494295287E-5	TEST
//join = q.createJoinFragment(useThetaStyleJoin);	WITHOUT_CLASSIFICATION	0.9999990176564639	WITHOUT_CLASSIFICATION	9.82343536045378E-7	TEST
//important!!	WITHOUT_CLASSIFICATION	0.9999510309231568	WITHOUT_CLASSIFICATION	4.896907684303323E-5	TEST
//String[] keyCols = collPersister.getKeyColumnNames();	WITHOUT_CLASSIFICATION	0.9999972927696098	WITHOUT_CLASSIFICATION	2.7072303901947456E-6	TEST
// an association	WITHOUT_CLASSIFICATION	0.9999968288708191	WITHOUT_CLASSIFICATION	3.171129180803291E-6	TEST
//allow index() function:	WITHOUT_CLASSIFICATION	0.9999880609430724	WITHOUT_CLASSIFICATION	1.1939056927705422E-5	TEST
// here assume SQLServer2005 using snapshot isolation, which does not have this problem	WITHOUT_CLASSIFICATION	0.9999999339385717	WITHOUT_CLASSIFICATION	6.606142828091181E-8	TEST
// The reason for this is SQL doesn't let you sort by an expression you are // not returning in the result set.	WITHOUT_CLASSIFICATION	0.9999998848064536	WITHOUT_CLASSIFICATION	1.1519354629332012E-7	TEST
//many-to-many	WITHOUT_CLASSIFICATION	0.9999234589268643	WITHOUT_CLASSIFICATION	7.654107313566224E-5	TEST
// collections of values	WITHOUT_CLASSIFICATION	0.9999990011677181	WITHOUT_CLASSIFICATION	9.988322818981372E-7	TEST
//opening paren in new Foo ( ... )	WITHOUT_CLASSIFICATION	0.9999937760648501	WITHOUT_CLASSIFICATION	6.22393514995329E-6	TEST
//if we are inside a new Result(), but not inside a nested function	WITHOUT_CLASSIFICATION	0.9999873581032274	WITHOUT_CLASSIFICATION	1.2641896772564842E-5	TEST
//special case	WITHOUT_CLASSIFICATION	0.9999796425443244	WITHOUT_CLASSIFICATION	2.035745567564721E-5	TEST
// the name of an SQL function	WITHOUT_CLASSIFICATION	0.9999976846324653	WITHOUT_CLASSIFICATION	2.3153675347338398E-6	TEST
//null child could occur for no from clause in a filter	WITHOUT_CLASSIFICATION	0.9999944394580906	WITHOUT_CLASSIFICATION	5.560541909348907E-6	TEST
//this is basically a copy/paste of OrderByParser ... might be worth refactoring	WITHOUT_CLASSIFICATION	0.9999989199488125	WITHOUT_CLASSIFICATION	1.0800511874869594E-6	TEST
// SELECT p FROM p IN CLASS eg.Person GROUP BY p.Name, p.Address, p	WITHOUT_CLASSIFICATION	0.9999989042533926	WITHOUT_CLASSIFICATION	1.0957466075037037E-6	TEST
// return aliases not supported in classic translator!	WITHOUT_CLASSIFICATION	0.9999987504020639	WITHOUT_CLASSIFICATION	1.2495979360740004E-6	TEST
//register collection role	WITHOUT_CLASSIFICATION	0.9999857461600284	WITHOUT_CLASSIFICATION	1.4253839971589868E-5	TEST
// The keyword used to specify an identity column, if identity column key generation is supported.	WITHOUT_CLASSIFICATION	0.999999917777977	WITHOUT_CLASSIFICATION	8.222202299826387E-8	TEST
//.getElementPropertyMapping();	WITHOUT_CLASSIFICATION	0.9999931420853225	WITHOUT_CLASSIFICATION	6.85791467747897E-6	TEST
//crossJoins.add(name);	WITHOUT_CLASSIFICATION	0.9999832060193025	WITHOUT_CLASSIFICATION	1.6793980697562966E-5	TEST
//ie no select clause in HQL	WITHOUT_CLASSIFICATION	0.9999965642741365	WITHOUT_CLASSIFICATION	3.435725863433695E-6	TEST
// initialize the Set of queried identifier spaces (ie. tables)	WITHOUT_CLASSIFICATION	0.9999985372847232	WITHOUT_CLASSIFICATION	1.462715276744537E-6	TEST
//ie. no select clause	WITHOUT_CLASSIFICATION	0.9999951747668565	WITHOUT_CLASSIFICATION	4.8252331434945584E-6	TEST
//there _was_ a select clause	WITHOUT_CLASSIFICATION	0.9999947561270018	WITHOUT_CLASSIFICATION	5.243872998247857E-6	TEST
// return the concrete type, or the underlying type if a concrete type // was not specified	WITHOUT_CLASSIFICATION	0.9999994712655434	WITHOUT_CLASSIFICATION	5.287344564495284E-7	TEST
//many-to-many	WITHOUT_CLASSIFICATION	0.9999234589268643	WITHOUT_CLASSIFICATION	7.654107313566224E-5	TEST
//q.addCollection(collectionName, collectionRole);	WITHOUT_CLASSIFICATION	0.9999958140565071	WITHOUT_CLASSIFICATION	4.1859434929524714E-6	TEST
// classic parser does not support bulk manipulation statements	WITHOUT_CLASSIFICATION	0.9999997056039723	WITHOUT_CLASSIFICATION	2.9439602768197786E-7	TEST
// can't cache this stuff either (per-invocation)	WITHOUT_CLASSIFICATION	0.9999989952345829	WITHOUT_CLASSIFICATION	1.0047654170896063E-6	TEST
// unfortunately this stuff can't be cached because // it is per-invocation, not constant for the // QueryTranslator instance	WITHOUT_CLASSIFICATION	0.999997420936289	WITHOUT_CLASSIFICATION	2.579063711015934E-6	TEST
// This is the legacy behaviour for HQL queries...	WITHOUT_CLASSIFICATION	0.999996008244486	WITHOUT_CLASSIFICATION	3.99175551407518E-6	TEST
// not known!	WITHOUT_CLASSIFICATION	0.9999679042803155	WITHOUT_CLASSIFICATION	3.2095719684496436E-5	TEST
// not known!	WITHOUT_CLASSIFICATION	0.9999679042803155	WITHOUT_CLASSIFICATION	3.2095719684496436E-5	TEST
// we have the form: trim(trimSource) //      so we trim leading and trailing spaces // EARLY EXIT!!!!	WITHOUT_CLASSIFICATION	0.9999998619506847	WITHOUT_CLASSIFICATION	1.380493152180842E-7	TEST
// not known!	WITHOUT_CLASSIFICATION	0.9999679042803155	WITHOUT_CLASSIFICATION	3.2095719684496436E-5	TEST
// not known!	WITHOUT_CLASSIFICATION	0.9999679042803155	WITHOUT_CLASSIFICATION	3.2095719684496436E-5	TEST
//Need this, since join condition can appear inside parens!	WITHOUT_CLASSIFICATION	0.9999862220480177	WITHOUT_CLASSIFICATION	1.3777951982327667E-5	TEST
//tokens that close a sub expression //tokens that open a sub expression //tokens that would indicate a sub expression is a boolean expression	WITHOUT_CLASSIFICATION	0.9999985555203476	WITHOUT_CLASSIFICATION	1.4444796525185453E-6	TEST
//expressionTerminators.add(","); // deliberately excluded	WITHOUT_CLASSIFICATION	0.9999993870654286	WITHOUT_CLASSIFICATION	6.129345714040259E-7	TEST
//expressionOpeners.add(","); // deliberately excluded	WITHOUT_CLASSIFICATION	0.9999993375429815	WITHOUT_CLASSIFICATION	6.6245701853223E-7	TEST
// we have the form: trim(from trimSource). //      This is functionally equivalent to trim(trimSource) // EARLY EXIT!!!!	WITHOUT_CLASSIFICATION	0.999999917328179	WITHOUT_CLASSIFICATION	8.267182091625365E-8	TEST
// otherwise, a trim-specification and/or a trim-character // have been specified;  we need to decide which options // are present and "do the right thing" // should leading trim-characters be trimmed? // should trailing trim-characters be trimmed? // the trim-character (what is to be trimmed off?) // the trim-source (from where should it be trimmed?)	WITHOUT_CLASSIFICATION	0.9999999378639124	WITHOUT_CLASSIFICATION	6.213608760720694E-8	TEST
//Inside a BETWEEN ... AND ... expression	WITHOUT_CLASSIFICATION	0.9999936524607661	WITHOUT_CLASSIFICATION	6.347539234009762E-6	TEST
//were an odd or even number of NOTs encountered //the join string built up by compound paths inside this expression //a flag indicating if the subexpression is known to be boolean	WITHOUT_CLASSIFICATION	0.9999994253051816	WITHOUT_CLASSIFICATION	5.746948183787384E-7	TEST
//ie. a many-to-many	WITHOUT_CLASSIFICATION	0.9999854563182079	WITHOUT_CLASSIFICATION	1.4543681792042617E-5	TEST
//Cope with [,]	WITHOUT_CLASSIFICATION	0.9999546691649412	WITHOUT_CLASSIFICATION	4.5330835058702973E-5	TEST
//Cope with a continued path expression (ie. ].baz)	WITHOUT_CLASSIFICATION	0.9999983374146216	WITHOUT_CLASSIFICATION	1.6625853783202743E-6	TEST
//NOTE: early return	WITHOUT_CLASSIFICATION	0.9999749130222817	WITHOUT_CLASSIFICATION	2.50869777183245E-5	TEST
//Cope with a subselect	WITHOUT_CLASSIFICATION	0.9999947854619134	WITHOUT_CLASSIFICATION	5.214538086538747E-6	TEST
//Cope with special cases of AND, NOT, ()	WITHOUT_CLASSIFICATION	0.9999754642355416	WITHOUT_CLASSIFICATION	2.453576445836932E-5	TEST
//Close extra brackets we opened	WITHOUT_CLASSIFICATION	0.9999895627653019	WITHOUT_CLASSIFICATION	1.0437234698075985E-5	TEST
//take note when this is a boolean expression	WITHOUT_CLASSIFICATION	0.9999972742138197	WITHOUT_CLASSIFICATION	2.7257861803224105E-6	TEST
// assumes that types are all of span 1	WITHOUT_CLASSIFICATION	0.999999549199156	WITHOUT_CLASSIFICATION	4.508008439035221E-7	TEST
//process a token, mapping OO path expressions to SQL expressions	WITHOUT_CLASSIFICATION	0.9999993153462554	WITHOUT_CLASSIFICATION	6.84653744633579E-7	TEST
//Open any extra brackets we might need.	WITHOUT_CLASSIFICATION	0.9999968108963626	WITHOUT_CLASSIFICATION	3.1891036373518787E-6	TEST
//Cope with special cases of AND, NOT, )	WITHOUT_CLASSIFICATION	0.9999722316932685	WITHOUT_CLASSIFICATION	2.776830673135305E-5	TEST
// the next one up must also be	WITHOUT_CLASSIFICATION	0.9999941955705209	WITHOUT_CLASSIFICATION	5.8044294790896734E-6	TEST
// Add any joins	WITHOUT_CLASSIFICATION	0.9999904538478097	WITHOUT_CLASSIFICATION	9.546152190369497E-6	TEST
// assumes that types are all of span 1	WITHOUT_CLASSIFICATION	0.999999549199156	WITHOUT_CLASSIFICATION	4.508008439035221E-7	TEST
//named query parameter	WITHOUT_CLASSIFICATION	0.9999608662288033	WITHOUT_CLASSIFICATION	3.913377119677364E-5	TEST
//path expression	WITHOUT_CLASSIFICATION	0.9999926710978834	WITHOUT_CLASSIFICATION	7.328902116661394E-6	TEST
// saves / updates don't cascade to uninitialized collections	WITHOUT_CLASSIFICATION	0.9999993178299009	WITHOUT_CLASSIFICATION	6.82170099018599E-7	TEST
// persists don't cascade to uninitialized collections	WITHOUT_CLASSIFICATION	0.9999992291296123	WITHOUT_CLASSIFICATION	7.708703878618936E-7	TEST
//anything else	WITHOUT_CLASSIFICATION	0.9999904783229981	WITHOUT_CLASSIFICATION	9.52167700197282E-6	TEST
// the path expression continues after a ]	WITHOUT_CLASSIFICATION	0.9999962956496791	WITHOUT_CLASSIFICATION	3.704350321039518E-6	TEST
// careful with this!	WITHOUT_CLASSIFICATION	0.999997633612086	WITHOUT_CLASSIFICATION	2.3663879139792315E-6	TEST
// the path expression ends at the ]	WITHOUT_CLASSIFICATION	0.9999946008912148	WITHOUT_CLASSIFICATION	5.399108785125359E-6	TEST
// "finish off" the join	WITHOUT_CLASSIFICATION	0.9999762622730349	WITHOUT_CLASSIFICATION	2.3737726965087523E-5	TEST
//NOTICE: no " or . since they are part of (compound) identifiers	WITHOUT_CLASSIFICATION	0.9999969450976276	WITHOUT_CLASSIFICATION	3.05490237227081E-6	TEST
//cannot instantiate	WITHOUT_CLASSIFICATION	0.9999801667364812	WITHOUT_CLASSIFICATION	1.9833263518841152E-5	TEST
// start by looking for HQL keywords...	WITHOUT_CLASSIFICATION	0.9999976582500398	WITHOUT_CLASSIFICATION	2.3417499602464747E-6	TEST
// inner joins can be abbreviated to 'join'	WITHOUT_CLASSIFICATION	0.9999960409279456	WITHOUT_CLASSIFICATION	3.959072054448862E-6	TEST
// 'outer' is optional and is ignored	WITHOUT_CLASSIFICATION	0.9999927497800469	WITHOUT_CLASSIFICATION	7.250219953160911E-6	TEST
// now anything that is not a HQL keyword	WITHOUT_CLASSIFICATION	0.9999978595820584	WITHOUT_CLASSIFICATION	2.1404179416423183E-6	TEST
// process the "old" HQL style where aliases appear _first_ // ie. using the IN or IN CLASS constructions	WITHOUT_CLASSIFICATION	0.9999999316030512	WITHOUT_CLASSIFICATION	6.839694884198297E-8	TEST
// treat it as a classname	WITHOUT_CLASSIFICATION	0.9999983307337732	WITHOUT_CLASSIFICATION	1.6692662267424334E-6	TEST
// treat it as a path expression	WITHOUT_CLASSIFICATION	0.9999975890736494	WITHOUT_CLASSIFICATION	2.4109263504671465E-6	TEST
// starts with the name of a mapped class (new style)	WITHOUT_CLASSIFICATION	0.9999994764772212	WITHOUT_CLASSIFICATION	5.235227788960759E-7	TEST
// starts with a path expression (new style)	WITHOUT_CLASSIFICATION	0.9999996220978699	WITHOUT_CLASSIFICATION	3.779021301327406E-7	TEST
//allow ODMG OQL style: from Person p, p.cars c	WITHOUT_CLASSIFICATION	0.9999947433385739	WITHOUT_CLASSIFICATION	5.256661426149301E-6	TEST
//handle quoted strings	WITHOUT_CLASSIFICATION	0.9999785016688223	WITHOUT_CLASSIFICATION	2.1498331177631908E-5	TEST
// Object insertions, updates, and deletions have list semantics because // they must happen in the right order so as to respect referential // integrity	WITHOUT_CLASSIFICATION	0.999999969311781	WITHOUT_CLASSIFICATION	3.068821891690958E-8	TEST
// "finish off" the join	WITHOUT_CLASSIFICATION	0.9999762622730349	WITHOUT_CLASSIFICATION	2.3737726965087523E-5	TEST
//ignore whitespace	WITHOUT_CLASSIFICATION	0.9999899595893185	WITHOUT_CLASSIFICATION	1.0040410681582009E-5	TEST
//do replacements	WITHOUT_CLASSIFICATION	0.9999927359013521	WITHOUT_CLASSIFICATION	7.264098647833702E-6	TEST
//handle HQL2 collection syntax	WITHOUT_CLASSIFICATION	0.9999974331267654	WITHOUT_CLASSIFICATION	2.5668732345618463E-6	TEST
// uuid.hex is deprecated	WITHOUT_CLASSIFICATION	0.9999920543134292	WITHOUT_CLASSIFICATION	7.945686570824669E-6	TEST
// AbstractSelectingDelegate impl ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999985578426578	WITHOUT_CLASSIFICATION	1.4421573422476468E-6	TEST
//hilo params	WITHOUT_CLASSIFICATION	0.9999623269195188	WITHOUT_CLASSIFICATION	3.7673080481309805E-5	TEST
//sql = query;	WITHOUT_CLASSIFICATION	0.9999585924430999	WITHOUT_CLASSIFICATION	4.140755690002296E-5	TEST
// performance opt	WITHOUT_CLASSIFICATION	0.9999960282586277	WITHOUT_CLASSIFICATION	3.971741372285496E-6	TEST
//sql = update;	WITHOUT_CLASSIFICATION	0.9999799366862682	WITHOUT_CLASSIFICATION	2.0063313731842393E-5	TEST
//hilo config	WITHOUT_CLASSIFICATION	0.9999485233716758	WITHOUT_CLASSIFICATION	5.147662832417741E-5	TEST
// so we "clock over" on the first invocation	WITHOUT_CLASSIFICATION	0.9999978113656931	WITHOUT_CLASSIFICATION	2.188634306938966E-6	TEST
// don't allow comments on these insert statements as comments totally // blow up the Oracle getGeneratedKeys "support" :(	WITHOUT_CLASSIFICATION	0.9999998898150082	WITHOUT_CLASSIFICATION	1.1018499179205744E-7	TEST
//abort the save (the object is already saved by a circular cascade)	WITHOUT_CLASSIFICATION	0.9999917872383522	WITHOUT_CLASSIFICATION	8.212761647801052E-6	TEST
//throw new IdentifierGenerationException("save associated object first, or disable cascade for inverse association");	WITHOUT_CLASSIFICATION	0.9999974049347012	WITHOUT_CLASSIFICATION	2.595065298883065E-6	TEST
// intentionally empty	WITHOUT_CLASSIFICATION	0.9999981422016773	WITHOUT_CLASSIFICATION	1.857798322720901E-6	TEST
//do nothing to avoid a lazy property initialization	WITHOUT_CLASSIFICATION	0.9999985303870398	WITHOUT_CLASSIFICATION	1.469612960206867E-6	TEST
//keep the behavior consistent even for boundary usages	WITHOUT_CLASSIFICATION	0.9999803379524	WITHOUT_CLASSIFICATION	1.9662047599914935E-5	TEST
// so we "clock over" on the first invocation	WITHOUT_CLASSIFICATION	0.9999978113656931	WITHOUT_CLASSIFICATION	2.188634306938966E-6	TEST
// do nothing until we hit the rsult set containing the generated id	WITHOUT_CLASSIFICATION	0.9999995668162195	WITHOUT_CLASSIFICATION	4.3318378051863305E-7	TEST
/* COLUMN and TABLE should be renamed but it would break the public API */	WITHOUT_CLASSIFICATION	0.9999971191695802	WITHOUT_CLASSIFICATION	2.880830419714845E-6	TEST
// Loaded entity instances, by EntityKey	WITHOUT_CLASSIFICATION	0.9999962613756191	WITHOUT_CLASSIFICATION	3.738624380775646E-6	TEST
// if the given name is un-qualified we may neen to qualify it	WITHOUT_CLASSIFICATION	0.9999976578693502	WITHOUT_CLASSIFICATION	2.342130649679635E-6	TEST
// the default...	WITHOUT_CLASSIFICATION	0.9999915158163138	WITHOUT_CLASSIFICATION	8.484183686082323E-6	TEST
// unfortunately not really safe to normalize this // to 1 as an initial value like we do the others // because we would not be able to control this if // we are using a sequence...	WITHOUT_CLASSIFICATION	0.99999999740275	WITHOUT_CLASSIFICATION	2.5972499621550674E-9	TEST
// intentionally empty	WITHOUT_CLASSIFICATION	0.9999981422016773	WITHOUT_CLASSIFICATION	1.857798322720901E-6	TEST
// Identity map of CollectionEntry instances, by the collection wrapper	WITHOUT_CLASSIFICATION	0.9999998520872863	WITHOUT_CLASSIFICATION	1.479127137737534E-7	TEST
// general purpose parameters ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999975824694858	WITHOUT_CLASSIFICATION	2.41753051411181E-6	TEST
// table-specific parameters ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999938019529849	WITHOUT_CLASSIFICATION	6.198047015073916E-6	TEST
// Configurable implementation ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999991108685483	WITHOUT_CLASSIFICATION	8.891314516188625E-7	TEST
// IdentifierGenerator implementation ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999980911405466	WITHOUT_CLASSIFICATION	1.9088594534372514E-6	TEST
// PersistentIdentifierGenerator implementation ~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999977937669372	WITHOUT_CLASSIFICATION	2.206233062796751E-6	TEST
// prepare and execute the insert	WITHOUT_CLASSIFICATION	0.999998531766355	WITHOUT_CLASSIFICATION	1.4682336450513636E-6	TEST
// prepare and execute the insert	WITHOUT_CLASSIFICATION	0.999998531766355	WITHOUT_CLASSIFICATION	1.4682336450513636E-6	TEST
//fetch the generated id in a separate query	WITHOUT_CLASSIFICATION	0.9999896242523999	WITHOUT_CLASSIFICATION	1.0375747600042739E-5	TEST
// we just hit the last position	WITHOUT_CLASSIFICATION	0.9999963092665111	WITHOUT_CLASSIFICATION	3.6907334889667246E-6	TEST
// scroll ahead	WITHOUT_CLASSIFICATION	0.9999957878276758	WITHOUT_CLASSIFICATION	4.2121723242184575E-6	TEST
// scroll backward	WITHOUT_CLASSIFICATION	0.9999931216619331	WITHOUT_CLASSIFICATION	6.8783380669530125E-6	TEST
// we have not yet hit the last result...	WITHOUT_CLASSIFICATION	0.9999987928168537	WITHOUT_CLASSIFICATION	1.2071831463337317E-6	TEST
// Constructors ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999892141123261	WITHOUT_CLASSIFICATION	1.078588767386089E-5	TEST
// State ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999774388900067	WITHOUT_CLASSIFICATION	2.2561109993227037E-5	TEST
// Criteria impl ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999868247122793	WITHOUT_CLASSIFICATION	1.317528772059598E-5	TEST
// do this when all the properties are updateable since there is // a certain likelihood that the information will already be // snapshot-cached.	WITHOUT_CLASSIFICATION	0.9999999549393135	WITHOUT_CLASSIFICATION	4.506068658520466E-8	TEST
// Inner classes ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999932345978532	WITHOUT_CLASSIFICATION	6.765402146804451E-6	TEST
// Constructors ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999892141123261	WITHOUT_CLASSIFICATION	1.078588767386089E-5	TEST
// State ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999774388900067	WITHOUT_CLASSIFICATION	2.2561109993227037E-5	TEST
// Criteria impl ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999868247122793	WITHOUT_CLASSIFICATION	1.317528772059598E-5	TEST
// Caches	WITHOUT_CLASSIFICATION	0.9999912809327759	WITHOUT_CLASSIFICATION	8.719067224166218E-6	TEST
//Generators:	WITHOUT_CLASSIFICATION	0.9999606317164224	WITHOUT_CLASSIFICATION	3.9368283577527745E-5	TEST
// cache region is defined by the root-class in the hierarchy...	WITHOUT_CLASSIFICATION	0.9999985661440107	WITHOUT_CLASSIFICATION	1.4338559892401788E-6	TEST
//check if the detached object being merged is the parent	WITHOUT_CLASSIFICATION	0.9999791757805249	WITHOUT_CLASSIFICATION	2.082421947517311E-5	TEST
// after *all* persisters and named queries are registered	WITHOUT_CLASSIFICATION	0.9999973956727506	WITHOUT_CLASSIFICATION	2.604327249343196E-6	TEST
// if we get here, it is possible that we have a proxy 'in the way' of the merge map resolution... // 	WITHOUT_CLASSIFICATION	0.999999924005982	WITHOUT_CLASSIFICATION	7.599401792314199E-8	TEST
//JNDI + Serialization:	WITHOUT_CLASSIFICATION	0.9999872230784133	WITHOUT_CLASSIFICATION	1.2776921586751983E-5	TEST
//checking for named queries	WITHOUT_CLASSIFICATION	0.9999740264188806	WITHOUT_CLASSIFICATION	2.5973581119442653E-5	TEST
//stats	WITHOUT_CLASSIFICATION	0.999889165079292	WITHOUT_CLASSIFICATION	1.1083492070795023E-4	TEST
// EntityNotFoundDelegate	WITHOUT_CLASSIFICATION	0.9999972010184157	WITHOUT_CLASSIFICATION	2.798981584292233E-6	TEST
// Check named HQL queries	WITHOUT_CLASSIFICATION	0.9999964707697861	WITHOUT_CLASSIFICATION	3.529230213821667E-6	TEST
// this will throw an error if there's something wrong.	WITHOUT_CLASSIFICATION	0.999999153403659	WITHOUT_CLASSIFICATION	8.46596341016504E-7	TEST
//prevents this session from adding things to cache	WITHOUT_CLASSIFICATION	0.9999992181493509	WITHOUT_CLASSIFICATION	7.818506490199837E-7	TEST
// from javax.naming.Referenceable	WITHOUT_CLASSIFICATION	0.9999990334854278	WITHOUT_CLASSIFICATION	9.665145722130081E-7	TEST
// look for the instance by uuid	WITHOUT_CLASSIFICATION	0.9999924006610891	WITHOUT_CLASSIFICATION	7.599338910980051E-6	TEST
//for a dynamic-class	WITHOUT_CLASSIFICATION	0.999978385831358	WITHOUT_CLASSIFICATION	2.1614168642037004E-5	TEST
//test this entity to see if we must query it	WITHOUT_CLASSIFICATION	0.9999741073527976	WITHOUT_CLASSIFICATION	2.5892647202448737E-5	TEST
//NOTE EARLY EXIT	WITHOUT_CLASSIFICATION	0.9997039005209393	WITHOUT_CLASSIFICATION	2.960994790606905E-4	TEST
// for backward-compatability	WITHOUT_CLASSIFICATION	0.9999937997852707	WITHOUT_CLASSIFICATION	6.200214729241967E-6	TEST
// ignore this error for now	WITHOUT_CLASSIFICATION	0.9999886102464481	WITHOUT_CLASSIFICATION	1.1389753551832296E-5	TEST
//to stop the class from being unloaded	WITHOUT_CLASSIFICATION	0.999988606164434	WITHOUT_CLASSIFICATION	1.1393835566121128E-5	TEST
// in case we were deserialized in a different JVM, look for an instance with the same name // (alternatively we could do an actual JNDI lookup here....)	WITHOUT_CLASSIFICATION	0.9999999137938306	WITHOUT_CLASSIFICATION	8.62061694384379E-8	TEST
//must add to JNDI _after_ adding to HashMaps, because some JNDI servers use serialization	WITHOUT_CLASSIFICATION	0.9999992835125423	WITHOUT_CLASSIFICATION	7.16487457765079E-7	TEST
// Make sure this is a defined parameter and check the incoming value type	WITHOUT_CLASSIFICATION	0.9999997078261182	WITHOUT_CLASSIFICATION	2.9217388179270033E-7	TEST
// for each of the defined parameters, make sure its value // has been set	WITHOUT_CLASSIFICATION	0.9999991373582906	WITHOUT_CLASSIFICATION	8.626417093644757E-7	TEST
//we never need to apply locks to the SQL	WITHOUT_CLASSIFICATION	0.999982721356495	WITHOUT_CLASSIFICATION	1.7278643504934655E-5	TEST
// inserts ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999855285031305	WITHOUT_CLASSIFICATION	1.4471496869559911E-5	TEST
// deletes ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999542519178171	WITHOUT_CLASSIFICATION	4.5748082182824676E-5	TEST
// during deserialization, we need to reconnect all proxies and // collections to this session, as well as the EntityEntry and // CollectionEntry instances; these associations are transient // because serialization is used for different things.	WITHOUT_CLASSIFICATION	0.9999999900644889	WITHOUT_CLASSIFICATION	9.935511134728326E-9	TEST
// updates ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999777507949605	WITHOUT_CLASSIFICATION	2.22492050395076E-5	TEST
// loading ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999865800242043	WITHOUT_CLASSIFICATION	1.3419975795790991E-5	TEST
//final boolean forceCacheRefresh,	WITHOUT_CLASSIFICATION	0.9999762956403224	WITHOUT_CLASSIFICATION	2.370435967766976E-5	TEST
//final boolean forceCacheRefresh,	WITHOUT_CLASSIFICATION	0.9999762956403224	WITHOUT_CLASSIFICATION	2.370435967766976E-5	TEST
// first, try to load it from the temp PC associated to this SS	WITHOUT_CLASSIFICATION	0.9999934324139144	WITHOUT_CLASSIFICATION	6.567586085579424E-6	TEST
// if the metadata allowed proxy creation and caller did not request forceful eager loading, // generate a proxy	WITHOUT_CLASSIFICATION	0.9999995192182429	WITHOUT_CLASSIFICATION	4.807817570796004E-7	TEST
// otherwise immediately materialize it	WITHOUT_CLASSIFICATION	0.9999957653787	WITHOUT_CLASSIFICATION	4.234621299899661E-6	TEST
/////////////////////////////////////////////////////////////////////////////////////////////////////	WITHOUT_CLASSIFICATION	0.999667799056761	WITHOUT_CLASSIFICATION	3.3220094323901397E-4	TEST
// no auto-flushing to support in stateless session	WITHOUT_CLASSIFICATION	0.9999996898728412	WITHOUT_CLASSIFICATION	3.101271587826444E-7	TEST
//after setting values to object, entityMode	WITHOUT_CLASSIFICATION	0.9999978124475972	WITHOUT_CLASSIFICATION	2.187552402736655E-6	TEST
//for EJB3	WITHOUT_CLASSIFICATION	0.9998732069258439	WITHOUT_CLASSIFICATION	1.2679307415597424E-4	TEST
// just ignore	WITHOUT_CLASSIFICATION	0.9999933922869686	WITHOUT_CLASSIFICATION	6.607713031336333E-6	TEST
// do a check	WITHOUT_CLASSIFICATION	0.9999942707028325	WITHOUT_CLASSIFICATION	5.72929716741845E-6	TEST
// saveOrUpdate() operations ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999979291820222	WITHOUT_CLASSIFICATION	2.0708179776709103E-6	TEST
// update() operations ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999978381539399	WITHOUT_CLASSIFICATION	2.161846060101241E-6	TEST
// lock() operations ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999981969282747	WITHOUT_CLASSIFICATION	1.8030717252908582E-6	TEST
// persist() operations ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999953689979059	WITHOUT_CLASSIFICATION	4.631002094155691E-6	TEST
// persistOnFlush() operations ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999979748867278	WITHOUT_CLASSIFICATION	2.0251132721748307E-6	TEST
// merge() operations ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999980195179932	WITHOUT_CLASSIFICATION	1.9804820068447787E-6	TEST
// saveOrUpdateCopy() operations ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999983956159267	WITHOUT_CLASSIFICATION	1.6043840733313931E-6	TEST
// delete() operations ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999978430224009	WITHOUT_CLASSIFICATION	2.156977599000731E-6	TEST
// load()/get() operations ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999980516716539	WITHOUT_CLASSIFICATION	1.948328346091679E-6	TEST
// refresh() operations ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999969781449081	WITHOUT_CLASSIFICATION	3.0218550918959754E-6	TEST
// replicate() operations ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999983429165659	WITHOUT_CLASSIFICATION	1.6570834342450623E-6	TEST
// do not auto-flush while outside a transaction	WITHOUT_CLASSIFICATION	0.9999997013705484	WITHOUT_CLASSIFICATION	2.9862945159714863E-7	TEST
// this is an internal error of some sort...	WITHOUT_CLASSIFICATION	0.9999982376937968	WITHOUT_CLASSIFICATION	1.7623062031866712E-6	TEST
//stops flush being called multiple times if this method is recursively called	WITHOUT_CLASSIFICATION	0.9999918000462035	WITHOUT_CLASSIFICATION	8.199953796559176E-6	TEST
//only collections belonging to deleted entities are allowed to be dereferenced in the case of orphan delete	WITHOUT_CLASSIFICATION	0.9999993142679	WITHOUT_CLASSIFICATION	6.857320999559958E-7	TEST
// if it was previously unreferenced, we need to flush in order to // get its state into the database in order to execute query	WITHOUT_CLASSIFICATION	0.9999998825916715	WITHOUT_CLASSIFICATION	1.1740832843780116E-7	TEST
// not for internal use:	WITHOUT_CLASSIFICATION	0.9999841559168064	WITHOUT_CLASSIFICATION	1.5844083193591392E-5	TEST
// otherwise, we only need to flush if there are in-memory changes // to the queried tables	WITHOUT_CLASSIFICATION	0.9999997330663984	WITHOUT_CLASSIFICATION	2.6693360151623446E-7	TEST
// might need to run a different filter entirely after the flush // because the collection role may have changed	WITHOUT_CLASSIFICATION	0.9999993749008002	WITHOUT_CLASSIFICATION	6.250991998433059E-7	TEST
//stops flush being called multiple times if this method is recursively called	WITHOUT_CLASSIFICATION	0.9999918000462035	WITHOUT_CLASSIFICATION	8.199953796559176E-6	TEST
//stops flush being called multiple times if this method is recursively called	WITHOUT_CLASSIFICATION	0.9999918000462035	WITHOUT_CLASSIFICATION	8.199953796559176E-6	TEST
//if it is initialized, see if the underlying //instance is contained, since we need to  //account for the fact that it might have been //evicted	WITHOUT_CLASSIFICATION	0.999996077255277	WITHOUT_CLASSIFICATION	3.922744723001375E-6	TEST
// basically just an adapted copy of find(CriteriaImpl)	WITHOUT_CLASSIFICATION	0.9999972364388553	WITHOUT_CLASSIFICATION	2.7635611446772344E-6	TEST
// it is possible for this method to be called during flush processing, // so make certain that we do not accidently initialize an uninitialized proxy	WITHOUT_CLASSIFICATION	0.9999999502623789	WITHOUT_CLASSIFICATION	4.973762114279835E-8	TEST
// nothing to do in a stateful session	WITHOUT_CLASSIFICATION	0.9999995094640282	WITHOUT_CLASSIFICATION	4.905359718588156E-7	TEST
// ignore	WITHOUT_CLASSIFICATION	0.9999944894313505	WITHOUT_CLASSIFICATION	5.5105686496089476E-6	TEST
// ignore this error for now	WITHOUT_CLASSIFICATION	0.9999886102464481	WITHOUT_CLASSIFICATION	1.1389753551832296E-5	TEST
// we need to writeObject() on this since interceptor is user defined	WITHOUT_CLASSIFICATION	0.9999975861930591	WITHOUT_CLASSIFICATION	2.413806940996319E-6	TEST
// the old-time stand-by...	WITHOUT_CLASSIFICATION	0.9999963146900637	WITHOUT_CLASSIFICATION	3.6853099363805233E-6	TEST
// parameter bind values...	WITHOUT_CLASSIFICATION	0.9999966271761299	WITHOUT_CLASSIFICATION	3.372823870216298E-6	TEST
// Parameter handling code ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999980362102331	WITHOUT_CLASSIFICATION	1.9637897669491335E-6	TEST
// prepend value and type list with null for any positions before the wanted position.	WITHOUT_CLASSIFICATION	0.9999986274959192	WITHOUT_CLASSIFICATION	1.3725040808566105E-6	TEST
// Execution methods ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999978122411461	WITHOUT_CLASSIFICATION	2.1877588538356914E-6	TEST
// we have a CGLIB enhanced entity	WITHOUT_CLASSIFICATION	0.999997776478726	WITHOUT_CLASSIFICATION	2.223521274057035E-6	TEST
// we have a CGLIB enhanced entity	WITHOUT_CLASSIFICATION	0.999997776478726	WITHOUT_CLASSIFICATION	2.223521274057035E-6	TEST
// we have a Javassist enhanced entity	WITHOUT_CLASSIFICATION	0.999996863315996	WITHOUT_CLASSIFICATION	3.1366840039741574E-6	TEST
// we have a Javassist enhanced entity	WITHOUT_CLASSIFICATION	0.999996863315996	WITHOUT_CLASSIFICATION	3.1366840039741574E-6	TEST
// FieldInterceptor impl ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999818612964068	WITHOUT_CLASSIFICATION	1.813870359320193E-5	TEST
// subclass accesses ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999928691639494	WITHOUT_CLASSIFICATION	7.130836050597641E-6	TEST
//let's assume that there is only one lazy fetch group, for now!	WITHOUT_CLASSIFICATION	0.9999965322515572	WITHOUT_CLASSIFICATION	3.4677484427320546E-6	TEST
// FieldHandler impl ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999766148179454	WITHOUT_CLASSIFICATION	2.3385182054589432E-5	TEST
// should *not* need to grow beyond the size of the total number of columns in the rs	WITHOUT_CLASSIFICATION	0.9999996356909172	WITHOUT_CLASSIFICATION	3.643090828029434E-7	TEST
// should probably no-op commit/rollback here, at least in JTA scenarios	WITHOUT_CLASSIFICATION	0.9999998507461653	WITHOUT_CLASSIFICATION	1.4925383469996069E-7	TEST
// Base Expectation impls ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999990365005392	WITHOUT_CLASSIFICATION	9.63499460780316E-7	TEST
// Various Expectation instances ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999992565149842	WITHOUT_CLASSIFICATION	7.434850157129604E-7	TEST
// explicitly perform no checking...	WITHOUT_CLASSIFICATION	0.9999992668702468	WITHOUT_CLASSIFICATION	7.331297533158008E-7	TEST
// used from testsuite	WITHOUT_CLASSIFICATION	0.9998951248660318	WITHOUT_CLASSIFICATION	1.0487513396816308E-4	TEST
// assume we are in an auto-commit state	WITHOUT_CLASSIFICATION	0.9999993862867614	WITHOUT_CLASSIFICATION	6.137132385833136E-7	TEST
/*package*/	WITHOUT_CLASSIFICATION	0.9999419796562319	WITHOUT_CLASSIFICATION	5.8020343768033676E-5	TEST
// register synch; stats.connect()	WITHOUT_CLASSIFICATION	0.9999979930558789	WITHOUT_CLASSIFICATION	2.0069441211699416E-6	TEST
//noncritical, swallow and let the other propagate!	WITHOUT_CLASSIFICATION	0.9999943812359369	WITHOUT_CLASSIFICATION	5.618764063084494E-6	TEST
// calls executeBatch()	WITHOUT_CLASSIFICATION	0.9999978603184161	WITHOUT_CLASSIFICATION	2.1396815839619264E-6	TEST
//no big deal	WITHOUT_CLASSIFICATION	0.9999778745733825	WITHOUT_CLASSIFICATION	2.2125426617450906E-5	TEST
// no big deal	WITHOUT_CLASSIFICATION	0.9999958140671668	WITHOUT_CLASSIFICATION	4.185932833234104E-6	TEST
// no big deal	WITHOUT_CLASSIFICATION	0.9999958140671668	WITHOUT_CLASSIFICATION	4.185932833234104E-6	TEST
// sybase driver (jConnect) throwing NPE here in certain // cases, but we'll just handle the general "unexpected" case	WITHOUT_CLASSIFICATION	0.9999999531003779	WITHOUT_CLASSIFICATION	4.689962210070333E-8	TEST
// see explanation above...	WITHOUT_CLASSIFICATION	0.9999993335862555	WITHOUT_CLASSIFICATION	6.664137446093052E-7	TEST
// If we are in the process of releasing, no sense // checking for aggressive-release possibility.	WITHOUT_CLASSIFICATION	0.9999999201802386	WITHOUT_CLASSIFICATION	7.981976128024546E-8	TEST
// EARLY EXIT!!!!	WITHOUT_CLASSIFICATION	0.9999657413023958	WITHOUT_CLASSIFICATION	3.425869760424328E-5	TEST
// ResultSet impl ("overridden") ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999968861503402	WITHOUT_CLASSIFICATION	3.1138496597643083E-6	TEST
// ResultSet impl (delegated) ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999932515699712	WITHOUT_CLASSIFICATION	6.748430028795515E-6	TEST
// refer to comment in StatefulPersistenceContext.addCollection()	WITHOUT_CLASSIFICATION	0.9999998565741047	WITHOUT_CLASSIFICATION	1.434258953010366E-7	TEST
// ConnectionManager.Callback implementation ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999997111435751	WITHOUT_CLASSIFICATION	2.888564247872806E-7	TEST
// Note : success = false, because we don't know the outcome of the transaction	WITHOUT_CLASSIFICATION	0.9999989780097573	WITHOUT_CLASSIFICATION	1.0219902425630515E-6	TEST
// we already have a callback registered; either a local // (org.hibernate.Transaction) transaction has accepted // callback responsibilities, or we have previously // registered a transaction synch.	WITHOUT_CLASSIFICATION	0.9999999370898215	WITHOUT_CLASSIFICATION	6.291017852160532E-8	TEST
// the configured transaction-factory says it only supports // local callback mode, so no sense attempting to register a // JTA Synchronization	WITHOUT_CLASSIFICATION	0.9999999338175771	WITHOUT_CLASSIFICATION	6.618242284160349E-8	TEST
// transactions marked for rollback-only cause some TM impls to throw exceptions	WITHOUT_CLASSIFICATION	0.9999995737122995	WITHOUT_CLASSIFICATION	4.2628770048773243E-7	TEST
// serialization ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999976441021498	WITHOUT_CLASSIFICATION	2.3558978501983694E-6	TEST
//postInitialize() will be called after initialization	WITHOUT_CLASSIFICATION	0.9999855665787123	WITHOUT_CLASSIFICATION	1.4433421287663462E-5	TEST
// cannot handle single quotes	WITHOUT_CLASSIFICATION	0.9999972830171667	WITHOUT_CLASSIFICATION	2.7169828332542813E-6	TEST
// todo : for 4.0 //	WITHOUT_CLASSIFICATION	0.9999720829555271	WITHOUT_CLASSIFICATION	2.7917044472960986E-5	TEST
// note that for sequential scrolling, we make the assumption that // the first persister element is the "root entity"	WITHOUT_CLASSIFICATION	0.999998982043333	WITHOUT_CLASSIFICATION	1.0179566668950718E-6	TEST
// don't even bother trying to read further	WITHOUT_CLASSIFICATION	0.9999978349032286	WITHOUT_CLASSIFICATION	2.16509677147734E-6	TEST
// don't even bother trying to read any further	WITHOUT_CLASSIFICATION	0.9999985324496105	WITHOUT_CLASSIFICATION	1.4675503895574532E-6	TEST
// position cursor to the last row	WITHOUT_CLASSIFICATION	0.9999980695268599	WITHOUT_CLASSIFICATION	1.93047314014745E-6	TEST
// sequentially read the result set in reverse until we recognize // a change in the key value.  At that point, we are pointed at // the last physical sequential row for the logical row in which // we are interested in processing	WITHOUT_CLASSIFICATION	0.9999998400109956	WITHOUT_CLASSIFICATION	1.5998900445556124E-7	TEST
// Read backwards until we read past the first physical sequential // row with the key we are interested in loading	WITHOUT_CLASSIFICATION	0.9999989617737277	WITHOUT_CLASSIFICATION	1.0382262723403076E-6	TEST
// Finally, read ahead one row to position result set cursor // at the first physical row we are interested in loading	WITHOUT_CLASSIFICATION	0.999999425136855	WITHOUT_CLASSIFICATION	5.748631450169183E-7	TEST
// now get an existing proxy for each row element (if there is one)	WITHOUT_CLASSIFICATION	0.9999995394126511	WITHOUT_CLASSIFICATION	4.6058734889566194E-7	TEST
// force the proxy to resolve itself	WITHOUT_CLASSIFICATION	0.9999890352027786	WITHOUT_CLASSIFICATION	1.0964797221370593E-5	TEST
// this is equivalent to the old behavior...	WITHOUT_CLASSIFICATION	0.999994476983666	WITHOUT_CLASSIFICATION	5.523016334035558E-6	TEST
//if null, owner will be retrieved from session	WITHOUT_CLASSIFICATION	0.9999883199612158	WITHOUT_CLASSIFICATION	1.1680038784125495E-5	TEST
//final String queryString, 	WITHOUT_CLASSIFICATION	0.9999899121653355	WITHOUT_CLASSIFICATION	1.0087834664615125E-5	TEST
// if it was a reference to self, don't need to nullify // unless we are using native id generation, in which // case we definitely need to nullify	WITHOUT_CLASSIFICATION	0.9999999814768638	WITHOUT_CLASSIFICATION	1.852313628057006E-8	TEST
//end of array, start filling again from start	WITHOUT_CLASSIFICATION	0.9999899725112236	WITHOUT_CLASSIFICATION	1.0027488776421232E-5	TEST
// in an effort to avoid concurrent-modification-exceptions (from // potential recursive calls back through here as a result of the // eventual call to PersistentCollection#endRead), we scan the // internal loadingCollections map for matches and store those matches // in a temp collection.  the temp collection is then used to "drive" // the #endRead processing.	WITHOUT_CLASSIFICATION	0.9999999964813113	WITHOUT_CLASSIFICATION	3.5186887759037974E-9	TEST
//we can reuse it for each row	WITHOUT_CLASSIFICATION	0.9999788273257993	WITHOUT_CLASSIFICATION	2.117267420064563E-5	TEST
//can't reuse in this case	WITHOUT_CLASSIFICATION	0.9999943178409714	WITHOUT_CLASSIFICATION	5.682159028588462E-6	TEST
// First we need to suspend any current JTA transaction and obtain // a JDBC connection	WITHOUT_CLASSIFICATION	0.9999998763492804	WITHOUT_CLASSIFICATION	1.236507195459871E-7	TEST
//getResultList(results);	WITHOUT_CLASSIFICATION	0.9999405479532971	WITHOUT_CLASSIFICATION	5.945204670295788E-5	TEST
//if we only returned one entity, query by key is more efficient	WITHOUT_CLASSIFICATION	0.999991897221852	WITHOUT_CLASSIFICATION	8.102778147970474E-6	TEST
// a collection loaded in the current session // can not possibly be the collection belonging // to the entity passed to update()	WITHOUT_CLASSIFICATION	0.9999999527400013	WITHOUT_CLASSIFICATION	4.725999872380831E-8	TEST
// handle empty collection	WITHOUT_CLASSIFICATION	0.9999993059751683	WITHOUT_CLASSIFICATION	6.940248318573911E-7	TEST
// else no collection element, but also no owner	WITHOUT_CLASSIFICATION	0.9999997860932177	WITHOUT_CLASSIFICATION	2.1390678232759885E-7	TEST
//handle empty collections	WITHOUT_CLASSIFICATION	0.9999973439530423	WITHOUT_CLASSIFICATION	2.6560469576583755E-6	TEST
// else this is not a collection initializer (and empty collections will // be detected by looking for the owner's identifier in the result set)	WITHOUT_CLASSIFICATION	0.9999997621319177	WITHOUT_CLASSIFICATION	2.3786808232058953E-7	TEST
// validate() instances of Validatable	WITHOUT_CLASSIFICATION	0.9999985284821613	WITHOUT_CLASSIFICATION	1.4715178386105497E-6	TEST
// if we know there is exactly 1 row, we can skip. // it would be great if we could _always_ skip this; // it is a problem for <key-many-to-one>	WITHOUT_CLASSIFICATION	0.9999998297482107	WITHOUT_CLASSIFICATION	1.702517893340325E-7	TEST
// remove all collections for the entity from the session-level cache	WITHOUT_CLASSIFICATION	0.9999996736563513	WITHOUT_CLASSIFICATION	3.2634364870570396E-7	TEST
//null version means the object is in the process of being loaded somewhere else in the ResultSet	WITHOUT_CLASSIFICATION	0.9999987234718247	WITHOUT_CLASSIFICATION	1.2765281753209003E-6	TEST
//problematic for <key-many-to-one>!	WITHOUT_CLASSIFICATION	0.9999878552352899	WITHOUT_CLASSIFICATION	1.2144764710183329E-5	TEST
//use the id passed in	WITHOUT_CLASSIFICATION	0.9999466860832503	WITHOUT_CLASSIFICATION	5.331391674969578E-5	TEST
//do nothing	WITHOUT_CLASSIFICATION	0.9999603168642681	WITHOUT_CLASSIFICATION	3.968313573186587E-5	TEST
// prefer re-generation of identity!	WITHOUT_CLASSIFICATION	0.999998741990409	WITHOUT_CLASSIFICATION	1.258009591129487E-6	TEST
//no point doing this if NONE was requested	WITHOUT_CLASSIFICATION	0.9998486155539663	WITHOUT_CLASSIFICATION	1.5138444603367106E-4	TEST
//If the object is already loaded, return the loaded one	WITHOUT_CLASSIFICATION	0.9999936496388823	WITHOUT_CLASSIFICATION	6.350361117753692E-6	TEST
//its already loaded so don't need to hydrate it	WITHOUT_CLASSIFICATION	0.9999933240225589	WITHOUT_CLASSIFICATION	6.675977441131919E-6	TEST
// cascade the refresh prior to refreshing this entity	WITHOUT_CLASSIFICATION	0.9999991481743011	WITHOUT_CLASSIFICATION	8.518256988482744E-7	TEST
//the load() which takes an entity does not pass an entityName	WITHOUT_CLASSIFICATION	0.9999971121120285	WITHOUT_CLASSIFICATION	2.8878879715975098E-6	TEST
//we only check the version when _upgrading_ lock modes	WITHOUT_CLASSIFICATION	0.9999991705212379	WITHOUT_CLASSIFICATION	8.294787620111876E-7	TEST
// look for a proxy	WITHOUT_CLASSIFICATION	0.9999760031206476	WITHOUT_CLASSIFICATION	2.399687935242283E-5	TEST
//we need to upgrade the lock mode to the mode requested	WITHOUT_CLASSIFICATION	0.9999407404669292	WITHOUT_CLASSIFICATION	5.925953307079247E-5	TEST
//its the given optional object	WITHOUT_CLASSIFICATION	0.9999950753222344	WITHOUT_CLASSIFICATION	4.924677765499665E-6	TEST
// instantiate a new instance	WITHOUT_CLASSIFICATION	0.9999979165539251	WITHOUT_CLASSIFICATION	2.083446074974854E-6	TEST
//need to hydrate it.	WITHOUT_CLASSIFICATION	0.999970808359162	WITHOUT_CLASSIFICATION	2.9191640837995583E-5	TEST
// return a newly loaded object	WITHOUT_CLASSIFICATION	0.9999983558681086	WITHOUT_CLASSIFICATION	1.6441318914083167E-6	TEST
//will be ignored, using the existing Entry instead	WITHOUT_CLASSIFICATION	0.9999942052377768	WITHOUT_CLASSIFICATION	5.794762223107555E-6	TEST
// key is an entity involved with the operation performed by the listener; // value can be either a copy of the entity or the entity itself	WITHOUT_CLASSIFICATION	0.9999995036667494	WITHOUT_CLASSIFICATION	4.963332506052647E-7	TEST
//materialize associations (and initialize the object) later	WITHOUT_CLASSIFICATION	0.9999968731102126	WITHOUT_CLASSIFICATION	3.126889787442588E-6	TEST
// Get the persister for the _subclass_	WITHOUT_CLASSIFICATION	0.9999421851318729	WITHOUT_CLASSIFICATION	5.781486812702874E-5	TEST
// ok in normal Hibernate usage to delete a detached entity; JPA however // forbids it, thus this is a hook for HEM to affect this behavior	WITHOUT_CLASSIFICATION	0.9999999163853671	WITHOUT_CLASSIFICATION	8.361463285566842E-8	TEST
// the entry will be removed after the flush, and will no longer // override the stale snapshot // This is now handled by removeEntity() in EntityDeleteAction //persistenceContext.removeDatabaseSnapshot(key);	WITHOUT_CLASSIFICATION	0.9999999464927988	WITHOUT_CLASSIFICATION	5.35072013060344E-8	TEST
//addInitializedCollection(collection, persister, id);	WITHOUT_CLASSIFICATION	0.9999929203100888	WITHOUT_CLASSIFICATION	7.079689911164887E-6	TEST
//EARLY EXIT!	WITHOUT_CLASSIFICATION	0.9998547174787219	WITHOUT_CLASSIFICATION	1.4528252127802852E-4	TEST
//EARLY EXIT!	WITHOUT_CLASSIFICATION	0.9998547174787219	WITHOUT_CLASSIFICATION	1.4528252127802852E-4	TEST
/*|| oj.getJoinable().consumesCollectionAlias() */	WITHOUT_CLASSIFICATION	0.9999991251834981	WITHOUT_CLASSIFICATION	8.748165019470079E-7	TEST
// here we do not bother with the discriminator.	WITHOUT_CLASSIFICATION	0.9999984361481092	WITHOUT_CLASSIFICATION	1.5638518906848314E-6	TEST
// Code to handle subclasses of topClass	WITHOUT_CLASSIFICATION	0.9999990469773095	WITHOUT_CLASSIFICATION	9.530226904572232E-7	TEST
//woops we got an instance of another class hierarchy branch	WITHOUT_CLASSIFICATION	0.9999964918982904	WITHOUT_CLASSIFICATION	3.5081017096039265E-6	TEST
// we can go straight to the first required row	WITHOUT_CLASSIFICATION	0.9999966662752188	WITHOUT_CLASSIFICATION	3.3337247811912414E-6	TEST
// we need to step through the rows one row at a time (slow)	WITHOUT_CLASSIFICATION	0.9999972017224812	WITHOUT_CLASSIFICATION	2.798277518767082E-6	TEST
// synchronized to avoid multi-thread access issues; defined as method synch to avoid // potential deadlock issues due to nature of code.	WITHOUT_CLASSIFICATION	0.9999999598603617	WITHOUT_CLASSIFICATION	4.01396382463669E-8	TEST
// Allows various loaders (ok mainly the QueryLoader :) to check // whether scrolling of their result set should be allowed. // // By default it is allowed.	WITHOUT_CLASSIFICATION	0.9999999399628995	WITHOUT_CLASSIFICATION	6.003710050009537E-8	TEST
//before adding to collection!	WITHOUT_CLASSIFICATION	0.9999975684519619	WITHOUT_CLASSIFICATION	2.431548038097412E-6	TEST
// if the current depth is 0, the root thing being loaded is the // many-to-many collection itself.  Here, it is alright to use // an inner join...	WITHOUT_CLASSIFICATION	0.999999969021435	WITHOUT_CLASSIFICATION	3.097856500049004E-8	TEST
//operations which cascade as far as the collection also cascade to collection elements	WITHOUT_CLASSIFICATION	0.999999361055188	WITHOUT_CLASSIFICATION	6.389448118495273E-7	TEST
// simple, because we can't have a one-to-one or a collection  // (or even a property-ref) in a composite-element:	WITHOUT_CLASSIFICATION	0.9999999722417913	WITHOUT_CLASSIFICATION	2.7758208779850813E-8	TEST
//a composite key	WITHOUT_CLASSIFICATION	0.9999871131630096	WITHOUT_CLASSIFICATION	1.2886836990489232E-5	TEST
// if no batch, use "foo = ? and bar = ?"	WITHOUT_CLASSIFICATION	0.9999985176232596	WITHOUT_CLASSIFICATION	1.4823767404264255E-6	TEST
//it must be a collection fetch	WITHOUT_CLASSIFICATION	0.9999923168828333	WITHOUT_CLASSIFICATION	7.68311716669752E-6	TEST
// needed later for many-to-many/filter application	WITHOUT_CLASSIFICATION	0.999991644166344	WITHOUT_CLASSIFICATION	8.355833655986652E-6	TEST
/*&& etype.isReferenceToPrimaryKey()*/	WITHOUT_CLASSIFICATION	0.999996646381879	WITHOUT_CLASSIFICATION	3.353618120929165E-6	TEST
// it might still need to apply a collection ordering based on a // many-to-many defined order-by...	WITHOUT_CLASSIFICATION	0.999999928720064	WITHOUT_CLASSIFICATION	7.127993600936175E-8	TEST
// if a composite key, use "( (foo = ? and bar = ?) or (foo = ? and bar = ?) )" for batching //TODO: unnecessary for databases with ANSI-style joins	WITHOUT_CLASSIFICATION	0.9999999595518355	WITHOUT_CLASSIFICATION	4.04481645382755E-8	TEST
// belong to other persister // belong to other persister	WITHOUT_CLASSIFICATION	0.9999844491337926	WITHOUT_CLASSIFICATION	1.555086620734775E-5	TEST
// we found it	WITHOUT_CLASSIFICATION	0.9999787072049977	WITHOUT_CLASSIFICATION	2.129279500226352E-5	TEST
//we can use an inner join for the many-to-many	WITHOUT_CLASSIFICATION	0.9999881400659518	WITHOUT_CLASSIFICATION	1.1859934048186735E-5	TEST
//disable a join back to this same association	WITHOUT_CLASSIFICATION	0.9999986366912575	WITHOUT_CLASSIFICATION	1.3633087424513268E-6	TEST
//NOTE: unlike all other Loaders, this one is NOT //      multithreaded, or cacheable!!	WITHOUT_CLASSIFICATION	0.9999947055744574	WITHOUT_CLASSIFICATION	5.2944255426912E-6	TEST
//the user visible aliases, which are unknown to the superclass, //these are not the actual "physical" SQL aliases	WITHOUT_CLASSIFICATION	0.9999996732411613	WITHOUT_CLASSIFICATION	3.267588386441471E-7	TEST
//root entity comes *last*	WITHOUT_CLASSIFICATION	0.9999973707053309	WITHOUT_CLASSIFICATION	2.62929466914643E-6	TEST
//deliberately ignore return value!	WITHOUT_CLASSIFICATION	0.9999946247169387	WITHOUT_CLASSIFICATION	5.375283061327033E-6	TEST
//alias may be null //EARLY EXIT	WITHOUT_CLASSIFICATION	0.999992953657928	WITHOUT_CLASSIFICATION	7.046342072092063E-6	TEST
// if it is a compound path	WITHOUT_CLASSIFICATION	0.9999951742311509	WITHOUT_CLASSIFICATION	4.825768849142255E-6	TEST
// otherwise assume the parent is the the criteria that created us	WITHOUT_CLASSIFICATION	0.9999966893400222	WITHOUT_CLASSIFICATION	3.3106599779402158E-6	TEST
// if its the root criteria, we are done	WITHOUT_CLASSIFICATION	0.9999971575577875	WITHOUT_CLASSIFICATION	2.8424422126324277E-6	TEST
// otherwise, recurse	WITHOUT_CLASSIFICATION	0.9999948372244063	WITHOUT_CLASSIFICATION	5.162775593657473E-6	TEST
//the criteria instance	WITHOUT_CLASSIFICATION	0.999983080633392	WITHOUT_CLASSIFICATION	1.6919366607882003E-5	TEST
// the entity name	WITHOUT_CLASSIFICATION	0.9999937467094807	WITHOUT_CLASSIFICATION	6.2532905193249675E-6	TEST
//not found in inner query , try the outer query	WITHOUT_CLASSIFICATION	0.9997469221028868	WITHOUT_CLASSIFICATION	2.5307789711318494E-4	TEST
//not found in inner query , try the outer query	WITHOUT_CLASSIFICATION	0.9997469221028868	WITHOUT_CLASSIFICATION	2.5307789711318494E-4	TEST
//it refers to an alias of a projection	WITHOUT_CLASSIFICATION	0.9999978750092615	WITHOUT_CLASSIFICATION	2.124990738466476E-6	TEST
//should never happen, i think	WITHOUT_CLASSIFICATION	0.9999921241634862	WITHOUT_CLASSIFICATION	7.875836513801335E-6	TEST
// Detect discriminator values...	WITHOUT_CLASSIFICATION	0.9999992254414038	WITHOUT_CLASSIFICATION	7.745585961505951E-7	TEST
// Convert the string value into the proper type.	WITHOUT_CLASSIFICATION	0.9999991486456856	WITHOUT_CLASSIFICATION	8.513543144788512E-7	TEST
// and the qualifier is not the alias of this criteria //      -> check to see if we belong to some criteria other //          than the one that created us	WITHOUT_CLASSIFICATION	0.9999998361191191	WITHOUT_CLASSIFICATION	1.6388088074490817E-7	TEST
//it does not refer to an alias of a projection, //look for a property	WITHOUT_CLASSIFICATION	0.9999966739887991	WITHOUT_CLASSIFICATION	3.3260112008426677E-6	TEST
// Otherwise, this is an ordinary value.	WITHOUT_CLASSIFICATION	0.9999991855468227	WITHOUT_CLASSIFICATION	8.144531774075173E-7	TEST
// Currently *not* cachable if autodiscover types is in effect (e.g. "select * ...")	WITHOUT_CLASSIFICATION	0.9999999164458462	WITHOUT_CLASSIFICATION	8.355415388981041E-8	TEST
//	WITHOUT_CLASSIFICATION	0.999864478982662	WITHOUT_CLASSIFICATION	1.3552101733804665E-4	TEST
// this is only needed (afaict) for ResultTransformer processing...	WITHOUT_CLASSIFICATION	0.9999979635748486	WITHOUT_CLASSIFICATION	2.036425151471464E-6	TEST
// determine if the collection elements are entities...	WITHOUT_CLASSIFICATION	0.9999997610548932	WITHOUT_CLASSIFICATION	2.389451067111312E-7	TEST
// build an array with indices equal to the total number // of actual returns in the result Hibernate will return // for this query (scalars + non-scalars)	WITHOUT_CLASSIFICATION	0.9999998510379191	WITHOUT_CLASSIFICATION	1.4896208092169975E-7	TEST
// replace {....} with corresponding column aliases	WITHOUT_CLASSIFICATION	0.9999998068558849	WITHOUT_CLASSIFICATION	1.93144115145181E-7	TEST
// No additional open braces found in the string, append the // rest of the string in its entirty and quit this loop	WITHOUT_CLASSIFICATION	0.9999996660121673	WITHOUT_CLASSIFICATION	3.339878327027803E-7	TEST
// apend everything up until the next encountered open brace	WITHOUT_CLASSIFICATION	0.9999996143049246	WITHOUT_CLASSIFICATION	3.856950754103909E-7	TEST
// it is a simple table alias {foo}	WITHOUT_CLASSIFICATION	0.9999940090588539	WITHOUT_CLASSIFICATION	5.990941146078287E-6	TEST
// passing through anything we do not know : to support jdbc escape sequences HB-898	WITHOUT_CLASSIFICATION	0.999999900415449	WITHOUT_CLASSIFICATION	9.958455101673124E-8	TEST
// passing through anything we do not know : to support jdbc escape sequences HB-898	WITHOUT_CLASSIFICATION	0.999999900415449	WITHOUT_CLASSIFICATION	9.958455101673124E-8	TEST
// The current alias is referencing the collection to be eagerly fetched	WITHOUT_CLASSIFICATION	0.9999995553339662	WITHOUT_CLASSIFICATION	4.4466603369393596E-7	TEST
// it is a property reference {foo.bar}	WITHOUT_CLASSIFICATION	0.9999978277192049	WITHOUT_CLASSIFICATION	2.1722807952256833E-6	TEST
// Possibly handle :something parameters for the query ?	WITHOUT_CLASSIFICATION	0.9999982057640361	WITHOUT_CLASSIFICATION	1.7942359638166658E-6	TEST
// Let return-propertys override whatever the persister has for aliases.	WITHOUT_CLASSIFICATION	0.9999946292298344	WITHOUT_CLASSIFICATION	5.370770165499945E-6	TEST
//	WITHOUT_CLASSIFICATION	0.999864478982662	WITHOUT_CLASSIFICATION	1.3552101733804665E-4	TEST
/*package*/	WITHOUT_CLASSIFICATION	0.9999419796562319	WITHOUT_CLASSIFICATION	5.8020343768033676E-5	TEST
//NOTE: EARLY EXIT!	WITHOUT_CLASSIFICATION	0.9997072213474348	WITHOUT_CLASSIFICATION	2.9277865256512433E-4	TEST
//	WITHOUT_CLASSIFICATION	0.999864478982662	WITHOUT_CLASSIFICATION	1.3552101733804665E-4	TEST
// Now, process the returns	WITHOUT_CLASSIFICATION	0.9999826835300645	WITHOUT_CLASSIFICATION	1.731646993554734E-5	TEST
//	WITHOUT_CLASSIFICATION	0.999864478982662	WITHOUT_CLASSIFICATION	1.3552101733804665E-4	TEST
// already been processed...	WITHOUT_CLASSIFICATION	0.9999978094909842	WITHOUT_CLASSIFICATION	2.1905090157144823E-6	TEST
// already been processed...	WITHOUT_CLASSIFICATION	0.9999978094909842	WITHOUT_CLASSIFICATION	2.1905090157144823E-6	TEST
// Make sure the owner alias is known...	WITHOUT_CLASSIFICATION	0.9999980359545543	WITHOUT_CLASSIFICATION	1.964045445697254E-6	TEST
// first, break down the returns into maps keyed by alias // so that role returns can be more easily resolved to their owners	WITHOUT_CLASSIFICATION	0.999999580188734	WITHOUT_CLASSIFICATION	4.1981126592898326E-7	TEST
//	WITHOUT_CLASSIFICATION	0.999864478982662	WITHOUT_CLASSIFICATION	1.3552101733804665E-4	TEST
// If this return's alias has not been processed yet, do so b4 further processing of this return	WITHOUT_CLASSIFICATION	0.9999992453123799	WITHOUT_CLASSIFICATION	7.54687619929426E-7	TEST
//	WITHOUT_CLASSIFICATION	0.999864478982662	WITHOUT_CLASSIFICATION	1.3552101733804665E-4	TEST
// for merging of versioned entities, we consider the version having // been changed only when: // 1) the two version values are different; //      *AND* // 2) The target actually represents database state! // // This second condition is a special case which allows // an entity to be merged during the same transaction // (though during a seperate operation) in which it was // originally persisted/saved	WITHOUT_CLASSIFICATION	0.9999999966125971	WITHOUT_CLASSIFICATION	3.387402944475386E-9	TEST
// this is the second pass through on a merge op, so here we limit the // replacement to associations types (value types were already replaced // during the first pass)	WITHOUT_CLASSIFICATION	0.9999999711890919	WITHOUT_CLASSIFICATION	2.881090820719807E-8	TEST
//EARLY EXIT	WITHOUT_CLASSIFICATION	0.9998543541081742	WITHOUT_CLASSIFICATION	1.4564589182564563E-4	TEST
// cascade-save to collections AFTER the collection owner was saved	WITHOUT_CLASSIFICATION	0.9999995112391797	WITHOUT_CLASSIFICATION	4.887608202769164E-7	TEST
// Initialize the error handling delegate.	WITHOUT_CLASSIFICATION	0.9999988624586159	WITHOUT_CLASSIFICATION	1.1375413840903364E-6	TEST
// Use the delegate.	WITHOUT_CLASSIFICATION	0.9999958012234129	WITHOUT_CLASSIFICATION	4.1987765870922785E-6	TEST
// currently only the Hibernate-supplied DbTimestampType is supported here	WITHOUT_CLASSIFICATION	0.9999973350892097	WITHOUT_CLASSIFICATION	2.664910790284618E-6	TEST
// This is called when it's time to fully resolve a path expression.	WITHOUT_CLASSIFICATION	0.9999998818870132	WITHOUT_CLASSIFICATION	1.1811298688126545E-7	TEST
// make a new one	WITHOUT_CLASSIFICATION	0.9999961287228953	WITHOUT_CLASSIFICATION	3.871277104610107E-6	TEST
// not so sure this is even valid subtree.  but if it was, it'd // represent two unrelated table references...	WITHOUT_CLASSIFICATION	0.9999999098162734	WITHOUT_CLASSIFICATION	9.018372663268894E-8	TEST
// (NOT (GT a b) ) => (LE a b)	WITHOUT_CLASSIFICATION	0.9998970581034051	WITHOUT_CLASSIFICATION	1.0294189659488798E-4	TEST
//private Type[] sqlResultTypes;	WITHOUT_CLASSIFICATION	0.999988263276684	WITHOUT_CLASSIFICATION	1.1736723316045623E-5	TEST
//include the discriminator and class-level where, but not filters	WITHOUT_CLASSIFICATION	0.9999919248374035	WITHOUT_CLASSIFICATION	8.07516259649551E-6	TEST
//sqlResultTypes = selectClause.getSqlResultTypes();	WITHOUT_CLASSIFICATION	0.9999957552810104	WITHOUT_CLASSIFICATION	4.244718989648662E-6	TEST
//by default	WITHOUT_CLASSIFICATION	0.9999728905193904	WITHOUT_CLASSIFICATION	2.710948060949772E-5	TEST
// This is now handled earlier in this method.	WITHOUT_CLASSIFICATION	0.999997570767507	WITHOUT_CLASSIFICATION	2.4292324930748836E-6	TEST
// -- Loader implementation --	WITHOUT_CLASSIFICATION	0.9999991897929538	WITHOUT_CLASSIFICATION	8.102070461121657E-7	TEST
// -- Loader overrides --	WITHOUT_CLASSIFICATION	0.9999938860741167	WITHOUT_CLASSIFICATION	6.113925883395598E-6	TEST
// (NOT (IS_NULL a b) ) => (IS_NOT_NULL a b)	WITHOUT_CLASSIFICATION	0.9998895918532908	WITHOUT_CLASSIFICATION	1.1040814670919669E-4	TEST
//NONE, because its the requested lock mode, not the actual! 	WITHOUT_CLASSIFICATION	0.9999706492691744	WITHOUT_CLASSIFICATION	2.9350730825441822E-5	TEST
// meant to handle dynamic instantiation queries...	WITHOUT_CLASSIFICATION	0.9999998448828656	WITHOUT_CLASSIFICATION	1.5511713429731193E-7	TEST
// --- Query translator methods ---	WITHOUT_CLASSIFICATION	0.9999990800162616	WITHOUT_CLASSIFICATION	9.199837383562268E-7	TEST
// -- Implementation private methods --	WITHOUT_CLASSIFICATION	0.9999995631761379	WITHOUT_CLASSIFICATION	4.3682386207461375E-7	TEST
//deduplicate unique constraints sharing the same columns //this is needed by Hibernate Annotations since it creates automagically // unique constraints for the user	WITHOUT_CLASSIFICATION	0.9999996645922651	WITHOUT_CLASSIFICATION	3.354077348972628E-7	TEST
// Try to find out the name of the primary key to create it as identity if the IdentityGenerator is used	WITHOUT_CLASSIFICATION	0.9999994582735849	WITHOUT_CLASSIFICATION	5.417264151071373E-7	TEST
// to support dialects that have their own identity data type	WITHOUT_CLASSIFICATION	0.9999998311213997	WITHOUT_CLASSIFICATION	1.6887860028874249E-7	TEST
// Prepare the left hand side and get the data type.	WITHOUT_CLASSIFICATION	0.9999994266337674	WITHOUT_CLASSIFICATION	5.733662325312336E-7	TEST
//used also for generation of FK names!	WITHOUT_CLASSIFICATION	0.9999923170611252	WITHOUT_CLASSIFICATION	7.682938874702386E-6	TEST
//usually useless	WITHOUT_CLASSIFICATION	0.9999681067718528	WITHOUT_CLASSIFICATION	3.189322814720021E-5	TEST
// added this caching as I noticed that getType() is being called multiple times...	WITHOUT_CLASSIFICATION	0.9999997431967362	WITHOUT_CLASSIFICATION	2.5680326376614104E-7	TEST
//do not add unique constraint on DB not supporting unique and nullable columns	WITHOUT_CLASSIFICATION	0.9999997315598373	WITHOUT_CLASSIFICATION	2.684401627116119E-7	TEST
//for backward compatibility, disable this:	WITHOUT_CLASSIFICATION	0.9999941497073865	WITHOUT_CLASSIFICATION	5.850292613471743E-6	TEST
//may be final //may be final //may be final	WITHOUT_CLASSIFICATION	0.9999189567109439	WITHOUT_CLASSIFICATION	8.10432890560581E-5	TEST
//may be final	WITHOUT_CLASSIFICATION	0.999931644427616	WITHOUT_CLASSIFICATION	6.835557238402237E-5	TEST
// may be final	WITHOUT_CLASSIFICATION	0.9999845936796594	WITHOUT_CLASSIFICATION	1.5406320340623183E-5	TEST
// Custom SQL	WITHOUT_CLASSIFICATION	0.9999854078696021	WITHOUT_CLASSIFICATION	1.4592130397858645E-5	TEST
//Primary key constraint	WITHOUT_CLASSIFICATION	0.9999954043206025	WITHOUT_CLASSIFICATION	4.595679397577776E-6	TEST
// the root of the incoming property path matched one // of the embedded composite identifier properties	WITHOUT_CLASSIFICATION	0.9999983523140774	WITHOUT_CLASSIFICATION	1.6476859225465648E-6	TEST
// ignore it...	WITHOUT_CLASSIFICATION	0.9999964234474358	WITHOUT_CLASSIFICATION	3.5765525642118676E-6	TEST
//flat recursive algorithm	WITHOUT_CLASSIFICATION	0.9999960475074089	WITHOUT_CLASSIFICATION	3.952492591108462E-6	TEST
//an identifier mapper => getKey will be included in the getNonDuplicatedPropertyIterator() //and checked later, so it needs to be excluded	WITHOUT_CLASSIFICATION	0.999999345966321	WITHOUT_CLASSIFICATION	6.54033679011119E-7	TEST
//if the hibernate-mapping did not specify a schema/catalog, use the defaults //specified by properties - but note that if the schema/catalog were specified //in hibernate-mapping, or as params, they will already be initialized and //will override the values set here (they are in identifierGeneratorProperties)	WITHOUT_CLASSIFICATION	0.9999999833522246	WITHOUT_CLASSIFICATION	1.6647775384884508E-8	TEST
//pass the entity-name, if not a collection-id	WITHOUT_CLASSIFICATION	0.9999979443002994	WITHOUT_CLASSIFICATION	2.0556997005294517E-6	TEST
// Custom SQL	WITHOUT_CLASSIFICATION	0.9999854078696021	WITHOUT_CLASSIFICATION	1.4592130397858645E-5	TEST
//Primary key constraint	WITHOUT_CLASSIFICATION	0.9999954043206025	WITHOUT_CLASSIFICATION	4.595679397577776E-6	TEST
//pass the column name (a generated id almost always has a single column)	WITHOUT_CLASSIFICATION	0.9999981467557023	WITHOUT_CLASSIFICATION	1.8532442977663956E-6	TEST
//needed to satisfy KeyValue	WITHOUT_CLASSIFICATION	0.9999820696323458	WITHOUT_CLASSIFICATION	1.7930367654239924E-5	TEST
// empty means no scoping	WITHOUT_CLASSIFICATION	0.9999990420491479	WITHOUT_CLASSIFICATION	9.579508520131233E-7	TEST
// index should be last column listed	WITHOUT_CLASSIFICATION	0.9999787581405565	WITHOUT_CLASSIFICATION	2.1241859443498406E-5	TEST
//if it is a formula index, use the element columns in the PK	WITHOUT_CLASSIFICATION	0.9999970194652161	WITHOUT_CLASSIFICATION	2.9805347839293444E-6	TEST
// don't create a unique key, 'cos some // databases don't like a UK on nullable // columns	WITHOUT_CLASSIFICATION	0.9999999697375545	WITHOUT_CLASSIFICATION	3.0262445558624015E-8	TEST
/*ArrayList list = new ArrayList();	WITHOUT_CLASSIFICATION	0.9999852711547064	WITHOUT_CLASSIFICATION	1.4728845293635833E-5	TEST
// }	WITHOUT_CLASSIFICATION	0.9999636544871817	WITHOUT_CLASSIFICATION	3.634551281830687E-5	TEST
// no foreign key element of for a one-to-many	WITHOUT_CLASSIFICATION	0.9999990563349089	WITHOUT_CLASSIFICATION	9.436650909501018E-7	TEST
//TODO: we could just return all false...	WITHOUT_CLASSIFICATION	0.9999949585551098	WITHOUT_CLASSIFICATION	5.041444890241059E-6	TEST
// the case of a foreign key to something other than the pk is handled in createPropertyRefConstraints	WITHOUT_CLASSIFICATION	0.9999991188260071	WITHOUT_CLASSIFICATION	8.811739928377127E-7	TEST
//TODO: we could just return all false...	WITHOUT_CLASSIFICATION	0.9999949585551098	WITHOUT_CLASSIFICATION	5.041444890241059E-6	TEST
// if the property mapping consists of all formulas,  // make it non-updateable	WITHOUT_CLASSIFICATION	0.999999887867556	WITHOUT_CLASSIFICATION	1.1213244406490439E-7	TEST
//columnUpdateability.length==0 ||	WITHOUT_CLASSIFICATION	0.9999968957690244	WITHOUT_CLASSIFICATION	3.1042309756254602E-6	TEST
// if the property mapping consists of all formulas,  // make it insertable	WITHOUT_CLASSIFICATION	0.999999826517036	WITHOUT_CLASSIFICATION	1.734829640677841E-7	TEST
// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ // stuff that is Tuplizer-centric ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ // ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999968618301187	WITHOUT_CLASSIFICATION	3.1381698812437072E-6	TEST
// expected type is intrinsic here...	WITHOUT_CLASSIFICATION	0.999997274144594	WITHOUT_CLASSIFICATION	2.7258554059816256E-6	TEST
//}	WITHOUT_CLASSIFICATION	0.99973760570091	WITHOUT_CLASSIFICATION	2.623942990900664E-4	TEST
//}	WITHOUT_CLASSIFICATION	0.99973760570091	WITHOUT_CLASSIFICATION	2.623942990900664E-4	TEST
//return memberPersister.getPropertyType(propertyName);	WITHOUT_CLASSIFICATION	0.9999921597202514	WITHOUT_CLASSIFICATION	7.84027974868516E-6	TEST
//return memberPersister.toColumns(alias, propertyName);	WITHOUT_CLASSIFICATION	0.9999957191281295	WITHOUT_CLASSIFICATION	4.280871870500067E-6	TEST
//return memberPersister.getType();	WITHOUT_CLASSIFICATION	0.9999818612982244	WITHOUT_CLASSIFICATION	1.8138701775530934E-5	TEST
/*&& !indexIsFormula*/	WITHOUT_CLASSIFICATION	0.9999926147612197	WITHOUT_CLASSIFICATION	7.385238780295267E-6	TEST
//	WITHOUT_CLASSIFICATION	0.999864478982662	WITHOUT_CLASSIFICATION	1.3552101733804665E-4	TEST
//instanceof AssociationType;	WITHOUT_CLASSIFICATION	0.9999921278660177	WITHOUT_CLASSIFICATION	7.872133982297477E-6	TEST
// we need to determine the best way to know that two joinables // represent a single many-to-many...	WITHOUT_CLASSIFICATION	0.9999996719901757	WITHOUT_CLASSIFICATION	3.2800982435392E-7	TEST
//strip leading ','	WITHOUT_CLASSIFICATION	0.9999908149163882	WITHOUT_CLASSIFICATION	9.185083611758187E-6	TEST
//public boolean isSubselectLoadable();	WITHOUT_CLASSIFICATION	0.9999948691132656	WITHOUT_CLASSIFICATION	5.130886734470146E-6	TEST
// KEY	WITHOUT_CLASSIFICATION	0.9999679149776706	WITHOUT_CLASSIFICATION	3.2085022329388984E-5	TEST
//columns	WITHOUT_CLASSIFICATION	0.9999560762012006	WITHOUT_CLASSIFICATION	4.392379879937532E-5	TEST
//SQL statements	WITHOUT_CLASSIFICATION	0.9999810603521845	WITHOUT_CLASSIFICATION	1.893964781552609E-5	TEST
//extra information about the element type	WITHOUT_CLASSIFICATION	0.9999976725125478	WITHOUT_CLASSIFICATION	2.327487452270061E-6	TEST
//types	WITHOUT_CLASSIFICATION	0.9998812128646373	WITHOUT_CLASSIFICATION	1.1878713536265584E-4	TEST
// custom sql	WITHOUT_CLASSIFICATION	0.9999911329456134	WITHOUT_CLASSIFICATION	8.86705438667312E-6	TEST
//private final String unquotedIdentifierColumnName;	WITHOUT_CLASSIFICATION	0.9999941105098014	WITHOUT_CLASSIFICATION	5.889490198571997E-6	TEST
// dynamic filters specifically for many-to-many inside the collection	WITHOUT_CLASSIFICATION	0.9999992499854478	WITHOUT_CLASSIFICATION	7.500145521033689E-7	TEST
// dynamic filters for the collection	WITHOUT_CLASSIFICATION	0.9999957882795284	WITHOUT_CLASSIFICATION	4.2117204716388315E-6	TEST
// NativeSQL: collect key column and auto-aliases	WITHOUT_CLASSIFICATION	0.9999991233875073	WITHOUT_CLASSIFICATION	8.766124926110588E-7	TEST
//unquotedKeyColumnNames = StringHelper.unQuote(keyColumnAliases);	WITHOUT_CLASSIFICATION	0.9999969281569896	WITHOUT_CLASSIFICATION	3.0718430103403725E-6	TEST
//ELEMENT	WITHOUT_CLASSIFICATION	0.9997380382019155	WITHOUT_CLASSIFICATION	2.619617980843624E-4	TEST
// NativeSQL: collect element column and auto-aliases	WITHOUT_CLASSIFICATION	0.9999991744566492	WITHOUT_CLASSIFICATION	8.255433507992918E-7	TEST
// INDEX AND ROW SELECT	WITHOUT_CLASSIFICATION	0.9999590374972718	WITHOUT_CLASSIFICATION	4.0962502728199177E-5	TEST
// NativeSQL: collect index column and auto-aliases	WITHOUT_CLASSIFICATION	0.99999907731941	WITHOUT_CLASSIFICATION	9.22680590004625E-7	TEST
//unquotedIdentifierColumnName = identifierColumnAlias;	WITHOUT_CLASSIFICATION	0.9999862041348022	WITHOUT_CLASSIFICATION	1.3795865197813615E-5	TEST
//unquotedIdentifierColumnName = null;	WITHOUT_CLASSIFICATION	0.9999871340864334	WITHOUT_CLASSIFICATION	1.2865913566557615E-5	TEST
//GENERATE THE SQL:	WITHOUT_CLASSIFICATION	0.9998655661416767	WITHOUT_CLASSIFICATION	1.3443385832338423E-4	TEST
// for non-arrays, we don't need to know the element class //elementType.returnedClass();	WITHOUT_CLASSIFICATION	0.9999995243453439	WITHOUT_CLASSIFICATION	4.756546561386915E-7	TEST
//not all classpersisters implement PropertyMapping!	WITHOUT_CLASSIFICATION	0.999996716122704	WITHOUT_CLASSIFICATION	3.283877296007412E-6	TEST
// Handle any filters applied to this collection	WITHOUT_CLASSIFICATION	0.9999981124523609	WITHOUT_CLASSIFICATION	1.8875476391044869E-6	TEST
// Handle any filters applied to this collection for many-to-many	WITHOUT_CLASSIFICATION	0.9999982673202407	WITHOUT_CLASSIFICATION	1.732679759293579E-6	TEST
//if there is a user-specified loader, return that //TODO: filters!?	WITHOUT_CLASSIFICATION	0.9999912053707246	WITHOUT_CLASSIFICATION	8.794629275363514E-6	TEST
// Take care of any entities that might have // been evicted!	WITHOUT_CLASSIFICATION	0.999999386124443	WITHOUT_CLASSIFICATION	6.138755570383694E-7	TEST
//strip leading ','	WITHOUT_CLASSIFICATION	0.9999908149163882	WITHOUT_CLASSIFICATION	9.185083611758187E-6	TEST
// Run a subquery loader	WITHOUT_CLASSIFICATION	0.999998014494709	WITHOUT_CLASSIFICATION	1.9855052909508646E-6	TEST
//needed by arrays	WITHOUT_CLASSIFICATION	0.999895748464511	WITHOUT_CLASSIFICATION	1.0425153548897398E-4	TEST
//TODO: something with formulas...	WITHOUT_CLASSIFICATION	0.9999969023452026	WITHOUT_CLASSIFICATION	3.097654797487026E-6	TEST
//an assertion	WITHOUT_CLASSIFICATION	0.9999897062756641	WITHOUT_CLASSIFICATION	1.029372433597839E-5	TEST
// Remove all the old entries	WITHOUT_CLASSIFICATION	0.9999973784831871	WITHOUT_CLASSIFICATION	2.621516812929951E-6	TEST
//create all the new entries	WITHOUT_CLASSIFICATION	0.9999935491924791	WITHOUT_CLASSIFICATION	6.450807520859646E-6	TEST
/*&& !indexIsFormula*/	WITHOUT_CLASSIFICATION	0.9999926147612197	WITHOUT_CLASSIFICATION	7.385238780295267E-6	TEST
/*&& !indexIsFormula*/	WITHOUT_CLASSIFICATION	0.9999926147612197	WITHOUT_CLASSIFICATION	7.385238780295267E-6	TEST
//delete all the deleted entries	WITHOUT_CLASSIFICATION	0.9999599526942179	WITHOUT_CLASSIFICATION	4.004730578214973E-5	TEST
//insert all the new entries	WITHOUT_CLASSIFICATION	0.9999896664439037	WITHOUT_CLASSIFICATION	1.0333556096287404E-5	TEST
//==elementType ??	WITHOUT_CLASSIFICATION	0.9999735780900538	WITHOUT_CLASSIFICATION	2.642190994624739E-5	TEST
//update all the modified entries	WITHOUT_CLASSIFICATION	0.9999797591033266	WITHOUT_CLASSIFICATION	2.0240896673458983E-5	TEST
//identifier collections not supported for 1-to-many	WITHOUT_CLASSIFICATION	0.9999921760253013	WITHOUT_CLASSIFICATION	7.823974698599873E-6	TEST
// update removed rows fks to null	WITHOUT_CLASSIFICATION	0.9999973612124079	WITHOUT_CLASSIFICATION	2.638787592124352E-6	TEST
// will still be issued when it used to be null	WITHOUT_CLASSIFICATION	0.9999958541957386	WITHOUT_CLASSIFICATION	4.145804261337585E-6	TEST
// now update all changed or added rows fks	WITHOUT_CLASSIFICATION	0.999998660211769	WITHOUT_CLASSIFICATION	1.33978823104531E-6	TEST
//	WITHOUT_CLASSIFICATION	0.999864478982662	WITHOUT_CLASSIFICATION	1.3552101733804665E-4	TEST
//use suffix for the entity columns	WITHOUT_CLASSIFICATION	0.9999831254947399	WITHOUT_CLASSIFICATION	1.6874505260104322E-5	TEST
// the class hierarchy structure	WITHOUT_CLASSIFICATION	0.9999952083580443	WITHOUT_CLASSIFICATION	4.791641955600798E-6	TEST
//private final String rootTableName;	WITHOUT_CLASSIFICATION	0.9999924110645332	WITHOUT_CLASSIFICATION	7.588935466756332E-6	TEST
//INITIALIZATION:	WITHOUT_CLASSIFICATION	0.9995539234616035	WITHOUT_CLASSIFICATION	4.460765383964775E-4	TEST
//Custom SQL	WITHOUT_CLASSIFICATION	0.9999368546663913	WITHOUT_CLASSIFICATION	6.314533360881593E-5	TEST
// the class hierarchy structure	WITHOUT_CLASSIFICATION	0.9999952083580443	WITHOUT_CLASSIFICATION	4.791641955600798E-6	TEST
// Execute the SQL:	WITHOUT_CLASSIFICATION	0.9999907650482693	WITHOUT_CLASSIFICATION	9.234951730682386E-6	TEST
// This could also just be true all the time...	WITHOUT_CLASSIFICATION	0.9999980884194393	WITHOUT_CLASSIFICATION	1.9115805607302346E-6	TEST
//chop the last union (all)	WITHOUT_CLASSIFICATION	0.999991452428508	WITHOUT_CLASSIFICATION	8.54757149197039E-6	TEST
//TODO: check this....	WITHOUT_CLASSIFICATION	0.9999826762353711	WITHOUT_CLASSIFICATION	1.7323764628923183E-5	TEST
//INITIALIZATION:	WITHOUT_CLASSIFICATION	0.9995539234616035	WITHOUT_CLASSIFICATION	4.460765383964775E-4	TEST
// properties of this class, including inherited properties	WITHOUT_CLASSIFICATION	0.9999983407339147	WITHOUT_CLASSIFICATION	1.6592660852602505E-6	TEST
// the closure of all properties in the entire hierarchy including // subclasses and superclasses of this class	WITHOUT_CLASSIFICATION	0.999999843580311	WITHOUT_CLASSIFICATION	1.564196890618033E-7	TEST
// the closure of all columns used by the entire hierarchy including // subclasses and superclasses of this class	WITHOUT_CLASSIFICATION	0.9999997466676829	WITHOUT_CLASSIFICATION	2.53332317065405E-7	TEST
// subclass discrimination works by assigning particular // values to certain combinations of null primary key // values in the outer join using an SQL CASE	WITHOUT_CLASSIFICATION	0.9999999950307034	WITHOUT_CLASSIFICATION	4.96929665491111E-9	TEST
//MULTITABLES	WITHOUT_CLASSIFICATION	0.9997647620294198	WITHOUT_CLASSIFICATION	2.3523797058033204E-4	TEST
// Custom sql	WITHOUT_CLASSIFICATION	0.999986958629372	WITHOUT_CLASSIFICATION	1.3041370627927623E-5	TEST
// subclass closure properties	WITHOUT_CLASSIFICATION	0.9999972434870424	WITHOUT_CLASSIFICATION	2.7565129575011454E-6	TEST
// SUBCLASSES	WITHOUT_CLASSIFICATION	0.9999659191856964	WITHOUT_CLASSIFICATION	3.4080814303453855E-5	TEST
//( (Column) model.getTable().getPrimaryKey().getColumnIterator().next() ).getName();	WITHOUT_CLASSIFICATION	0.9999984303847198	WITHOUT_CLASSIFICATION	1.5696152801682908E-6	TEST
//( (Column) sc.getTable().getPrimaryKey().getColumnIterator().next() ).getName();	WITHOUT_CLASSIFICATION	0.9999989210067174	WITHOUT_CLASSIFICATION	1.0789932825582482E-6	TEST
// don't need subclass tables, because they can't appear in conditions	WITHOUT_CLASSIFICATION	0.9999994374728758	WITHOUT_CLASSIFICATION	5.625271241795673E-7	TEST
// special case where we need to force incloude all subclass joins	WITHOUT_CLASSIFICATION	0.9999991074408077	WITHOUT_CLASSIFICATION	8.925591922983897E-7	TEST
// the class hierarchy structure	WITHOUT_CLASSIFICATION	0.9999952083580443	WITHOUT_CLASSIFICATION	4.791641955600798E-6	TEST
// properties of this class, including inherited properties	WITHOUT_CLASSIFICATION	0.9999983407339147	WITHOUT_CLASSIFICATION	1.6592660852602505E-6	TEST
// the closure of all columns used by the entire hierarchy including // subclasses and superclasses of this class	WITHOUT_CLASSIFICATION	0.9999997466676829	WITHOUT_CLASSIFICATION	2.53332317065405E-7	TEST
//get em on the second pass!	WITHOUT_CLASSIFICATION	0.9999895917210646	WITHOUT_CLASSIFICATION	1.0408278935410593E-5	TEST
// now look up the object we are really interested in! // (this lets us correctly handle proxies and multi-row // or multi-column queries)	WITHOUT_CLASSIFICATION	0.9999996998655919	WITHOUT_CLASSIFICATION	3.0013440809247295E-7	TEST
// discriminator column	WITHOUT_CLASSIFICATION	0.9999983192349025	WITHOUT_CLASSIFICATION	1.680765097507444E-6	TEST
//INITIALIZATION:	WITHOUT_CLASSIFICATION	0.9995539234616035	WITHOUT_CLASSIFICATION	4.460765383964775E-4	TEST
//private final Map propertyTableNumbersByName = new HashMap();	WITHOUT_CLASSIFICATION	0.999998208235906	WITHOUT_CLASSIFICATION	1.7917640940110103E-6	TEST
// CLASS + TABLE	WITHOUT_CLASSIFICATION	0.9999700706762521	WITHOUT_CLASSIFICATION	2.9929323747974478E-5	TEST
// DISCRIMINATOR	WITHOUT_CLASSIFICATION	0.9999609260970128	WITHOUT_CLASSIFICATION	3.9073902987278473E-5	TEST
// PROPERTIES	WITHOUT_CLASSIFICATION	0.9999599904146367	WITHOUT_CLASSIFICATION	4.000958536334009E-5	TEST
// SUBCLASSES	WITHOUT_CLASSIFICATION	0.9999659191856964	WITHOUT_CLASSIFICATION	3.4080814303453855E-5	TEST
// Execute the SQL:	WITHOUT_CLASSIFICATION	0.9999907650482693	WITHOUT_CLASSIFICATION	9.234951730682386E-6	TEST
// JOINS	WITHOUT_CLASSIFICATION	0.9999678351624361	WITHOUT_CLASSIFICATION	3.2164837563930096E-5	TEST
//propertyTableNumbersByName.put( prop.getName(), join );	WITHOUT_CLASSIFICATION	0.9999973120076018	WITHOUT_CLASSIFICATION	2.687992398131304E-6	TEST
//Access cached SQL	WITHOUT_CLASSIFICATION	0.9999409122127516	WITHOUT_CLASSIFICATION	5.908778724850455E-5	TEST
//figure out which tables need to be fetched	WITHOUT_CLASSIFICATION	0.9999793440314916	WITHOUT_CLASSIFICATION	2.0655968508440155E-5	TEST
//figure out which columns are needed	WITHOUT_CLASSIFICATION	0.99999515963181	WITHOUT_CLASSIFICATION	4.840368189969896E-6	TEST
//figure out which formulas are needed	WITHOUT_CLASSIFICATION	0.9999896403374252	WITHOUT_CLASSIFICATION	1.0359662574873261E-5	TEST
//render the SQL	WITHOUT_CLASSIFICATION	0.9999305291741527	WITHOUT_CLASSIFICATION	6.94708258473299E-5	TEST
// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ // stuff that is Tuplizer-centric ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ // ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999968618301187	WITHOUT_CLASSIFICATION	3.1381698812437072E-6	TEST
// moved up from AbstractEntityPersister ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999943611846196	WITHOUT_CLASSIFICATION	5.638815380355268E-6	TEST
// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9998798941819308	WITHOUT_CLASSIFICATION	1.201058180691695E-4	TEST
// The optional SQL string defined in the where attribute	WITHOUT_CLASSIFICATION	0.9999992871094029	WITHOUT_CLASSIFICATION	7.128905971538285E-7	TEST
//information about lazy properties of this class	WITHOUT_CLASSIFICATION	0.9999981463095733	WITHOUT_CLASSIFICATION	1.8536904266224406E-6	TEST
//information about all properties in class hierarchy	WITHOUT_CLASSIFICATION	0.9999987228179448	WITHOUT_CLASSIFICATION	1.2771820552094999E-6	TEST
//information about all columns/formulas in class hierarchy	WITHOUT_CLASSIFICATION	0.9999989598044416	WITHOUT_CLASSIFICATION	1.0401955583401907E-6	TEST
// dynamic filters attached to the class-level	WITHOUT_CLASSIFICATION	0.9999972893045393	WITHOUT_CLASSIFICATION	2.710695460580472E-6	TEST
// SQL strings	WITHOUT_CLASSIFICATION	0.9999902646782165	WITHOUT_CLASSIFICATION	9.73532178355947E-6	TEST
// for objects that came in via update()	WITHOUT_CLASSIFICATION	0.9999987056263	WITHOUT_CLASSIFICATION	1.2943736999223569E-6	TEST
// PROPERTIES	WITHOUT_CLASSIFICATION	0.9999599904146367	WITHOUT_CLASSIFICATION	4.000958536334009E-5	TEST
// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9998798941819308	WITHOUT_CLASSIFICATION	1.201058180691695E-4	TEST
// IDENTIFIER	WITHOUT_CLASSIFICATION	0.9999510489026376	WITHOUT_CLASSIFICATION	4.8951097362272405E-5	TEST
// VERSION	WITHOUT_CLASSIFICATION	0.9999761402295892	WITHOUT_CLASSIFICATION	2.385977041077965E-5	TEST
//WHERE STRING	WITHOUT_CLASSIFICATION	0.9997864200936789	WITHOUT_CLASSIFICATION	2.1357990632105532E-4	TEST
// SUBCLASS PROPERTY CLOSURE	WITHOUT_CLASSIFICATION	0.9999701912316319	WITHOUT_CLASSIFICATION	2.9808768368156674E-5	TEST
//before add :-)	WITHOUT_CLASSIFICATION	0.9999419087151256	WITHOUT_CLASSIFICATION	5.8091284874405095E-5	TEST
// Handle any filters applied to the class level	WITHOUT_CLASSIFICATION	0.9999958565215622	WITHOUT_CLASSIFICATION	4.143478437851396E-6	TEST
// only one-to-one is lazy fetched	WITHOUT_CLASSIFICATION	0.9999896851588034	WITHOUT_CLASSIFICATION	1.031484119666334E-5	TEST
//note early exit here:	WITHOUT_CLASSIFICATION	0.9999884239321452	WITHOUT_CLASSIFICATION	1.1576067854768358E-5	TEST
// object have been loaded with setReadOnly(true); HHH-2236	WITHOUT_CLASSIFICATION	0.9999992273442221	WITHOUT_CLASSIFICATION	7.726557778549306E-7	TEST
// NOTE: this assumes something about how propertySelectFragment is implemented by the subclass!	WITHOUT_CLASSIFICATION	0.9999961072581489	WITHOUT_CLASSIFICATION	3.8927418511564244E-6	TEST
//strip leading ", "	WITHOUT_CLASSIFICATION	0.999991557654029	WITHOUT_CLASSIFICATION	8.442345970983358E-6	TEST
//if there is no resulting row, return null	WITHOUT_CLASSIFICATION	0.9999907658673463	WITHOUT_CLASSIFICATION	9.23413265373977E-6	TEST
//otherwise return the "hydrated" state (ie. associations are not resolved)	WITHOUT_CLASSIFICATION	0.9999976596425332	WITHOUT_CLASSIFICATION	2.340357466791979E-6	TEST
//null owner ok??	WITHOUT_CLASSIFICATION	0.9999648257477214	WITHOUT_CLASSIFICATION	3.517425227852299E-5	TEST
// null sql means that the only lazy properties // are shared PK one-to-one associations which are // handled differently in the Type#nullSafeGet code...	WITHOUT_CLASSIFICATION	0.9999999920551528	WITHOUT_CLASSIFICATION	7.944847297930032E-9	TEST
// Create a new FROM node for the referenced class.	WITHOUT_CLASSIFICATION	0.9999979175270742	WITHOUT_CLASSIFICATION	2.082472925737169E-6	TEST
// the difficulty here is exactly what do we update in order to // force the version to be incremented in the db...	WITHOUT_CLASSIFICATION	0.9999994029728783	WITHOUT_CLASSIFICATION	5.970271217866572E-7	TEST
// performance op to avoid the array search	WITHOUT_CLASSIFICATION	0.9999988181641433	WITHOUT_CLASSIFICATION	1.1818358567173964E-6	TEST
// properly handle property-ref-based associations	WITHOUT_CLASSIFICATION	0.9999988055039651	WITHOUT_CLASSIFICATION	1.194496034820568E-6	TEST
//Enable for HHH-440, which we don't like:	WITHOUT_CLASSIFICATION	0.9999896516688911	WITHOUT_CLASSIFICATION	1.0348331108786817E-5	TEST
// ALIASES	WITHOUT_CLASSIFICATION	0.9999812082780623	WITHOUT_CLASSIFICATION	1.879172193769577E-5	TEST
// aliases named identifier ( alias.idname )	WITHOUT_CLASSIFICATION	0.9999944188399309	WITHOUT_CLASSIFICATION	5.581160069063563E-6	TEST
// aliases for composite-id's	WITHOUT_CLASSIFICATION	0.9999944351972552	WITHOUT_CLASSIFICATION	5.564802744765421E-6	TEST
// Fetch embedded identifiers propertynames from the "virtual" identifier component	WITHOUT_CLASSIFICATION	0.999998025182452	WITHOUT_CLASSIFICATION	1.974817548010328E-6	TEST
// embedded composite ids ( alias.idname1, alias.idname2 )	WITHOUT_CLASSIFICATION	0.9999985868687563	WITHOUT_CLASSIFICATION	1.4131312437212863E-6	TEST
// TODO: skip formulas?	WITHOUT_CLASSIFICATION	0.9999909572967917	WITHOUT_CLASSIFICATION	9.042703208426282E-6	TEST
//don't need filters for the static loaders	WITHOUT_CLASSIFICATION	0.9998403921933975	WITHOUT_CLASSIFICATION	1.596078066024565E-4	TEST
//do two passes, for collection property-ref!	WITHOUT_CLASSIFICATION	0.9999937328309375	WITHOUT_CLASSIFICATION	6.267169062477589E-6	TEST
// select the correct row by either pk or rowid	WITHOUT_CLASSIFICATION	0.9999963508456383	WITHOUT_CLASSIFICATION	3.6491543617915456E-6	TEST
//TODO: eventually, rowIdName[j]	WITHOUT_CLASSIFICATION	0.9999934937860904	WITHOUT_CLASSIFICATION	6.506213909714725E-6	TEST
// this is a property of the table, which we are updating	WITHOUT_CLASSIFICATION	0.999999587025918	WITHOUT_CLASSIFICATION	4.129740820733071E-7	TEST
// special shortcut for id properties, skip the join! // this must only occur at the _end_ of a path expression	WITHOUT_CLASSIFICATION	0.999999356615325	WITHOUT_CLASSIFICATION	6.433846750295807E-7	TEST
// we are using "all" or "dirty" property-based optimistic locking	WITHOUT_CLASSIFICATION	0.9999996171189627	WITHOUT_CLASSIFICATION	3.828810373045386E-7	TEST
// nothing to do; even if the operand is a parameter, no way we could // infer an appropriate expected type here	WITHOUT_CLASSIFICATION	0.9999999324532292	WITHOUT_CLASSIFICATION	6.754677084299152E-8	TEST
// this property belongs on the table and is to be inserted	WITHOUT_CLASSIFICATION	0.9999933626266332	WITHOUT_CLASSIFICATION	6.6373733667453605E-6	TEST
// add normal properties	WITHOUT_CLASSIFICATION	0.9999973465702082	WITHOUT_CLASSIFICATION	2.6534297917189315E-6	TEST
// add the discriminator	WITHOUT_CLASSIFICATION	0.999997408215528	WITHOUT_CLASSIFICATION	2.5917844721282936E-6	TEST
// more specifically : "? [op] datetime" //      1) if the operator is MINUS, the param needs to be of //          some datetime type //      2) if the operator is PLUS, the param needs to be of //          some numeric type	WITHOUT_CLASSIFICATION	0.9999998289992034	WITHOUT_CLASSIFICATION	1.7100079666840814E-7	TEST
// add normal properties	WITHOUT_CLASSIFICATION	0.9999973465702082	WITHOUT_CLASSIFICATION	2.6534297917189315E-6	TEST
// this property belongs on the table and is to be inserted	WITHOUT_CLASSIFICATION	0.9999933626266332	WITHOUT_CLASSIFICATION	6.6373733667453605E-6	TEST
// add the discriminator	WITHOUT_CLASSIFICATION	0.999997408215528	WITHOUT_CLASSIFICATION	2.5917844721282936E-6	TEST
// add the primary key	WITHOUT_CLASSIFICATION	0.9999914190034304	WITHOUT_CLASSIFICATION	8.580996569612929E-6	TEST
// delegate already handles PK columns	WITHOUT_CLASSIFICATION	0.9999996380401195	WITHOUT_CLASSIFICATION	3.619598805153217E-7	TEST
// we can't batch joined inserts, *especially* not if it is an identity insert; // nor can we batch statements where the expectation is based on an output param	WITHOUT_CLASSIFICATION	0.9999999816077607	WITHOUT_CLASSIFICATION	1.8392239232891712E-8	TEST
// Render the SQL query	WITHOUT_CLASSIFICATION	0.9999897243231289	WITHOUT_CLASSIFICATION	1.027567687111408E-5	TEST
// Write the values of fields onto the prepared statement - we MUST use the state at the time the // insert was issued (cos of foreign key constraints). Not necessarily the object's current state	WITHOUT_CLASSIFICATION	0.9999998166614268	WITHOUT_CLASSIFICATION	1.833385732415453E-7	TEST
// TODO : shouldnt inserts be Expectations.NONE?	WITHOUT_CLASSIFICATION	0.9999996406804623	WITHOUT_CLASSIFICATION	3.593195376907661E-7	TEST
//don't bother trying to update, we know there is no row there yet	WITHOUT_CLASSIFICATION	0.999994191377031	WITHOUT_CLASSIFICATION	5.808622968936559E-6	TEST
//if all fields are null, we might need to delete existing row	WITHOUT_CLASSIFICATION	0.9999894969992333	WITHOUT_CLASSIFICATION	1.0503000766721028E-5	TEST
//there is probably a row there, so try to update //if no rows were updated, we will find out	WITHOUT_CLASSIFICATION	0.9999956606590463	WITHOUT_CLASSIFICATION	4.339340953617011E-6	TEST
//note: updates to joined tables can't be batched...	WITHOUT_CLASSIFICATION	0.9999938476979251	WITHOUT_CLASSIFICATION	6.15230207494325E-6	TEST
// starting index	WITHOUT_CLASSIFICATION	0.9999973910852328	WITHOUT_CLASSIFICATION	2.6089147671299023E-6	TEST
//Now write the values of fields onto the prepared statement	WITHOUT_CLASSIFICATION	0.9999640709920962	WITHOUT_CLASSIFICATION	3.59290079038195E-5	TEST
// Write any appropriate versioning conditional parameters	WITHOUT_CLASSIFICATION	0.9999996367968207	WITHOUT_CLASSIFICATION	3.632031792502332E-7	TEST
//Render the SQL query	WITHOUT_CLASSIFICATION	0.9999506977175514	WITHOUT_CLASSIFICATION	4.930228244847368E-5	TEST
// Do the key. The key is immutable so we can use the _current_ object state - not necessarily // the state at the time the delete was issued	WITHOUT_CLASSIFICATION	0.9999999423987234	WITHOUT_CLASSIFICATION	5.7601276726376144E-8	TEST
// We should use the _current_ object state (ie. after any updates that occurred during flush)	WITHOUT_CLASSIFICATION	0.999998953031135	WITHOUT_CLASSIFICATION	1.0469688649767016E-6	TEST
// this property belongs to the table and it is not specifically // excluded from optimistic locking by optimistic-lock="false"	WITHOUT_CLASSIFICATION	0.9999997880605513	WITHOUT_CLASSIFICATION	2.1193944862451338E-7	TEST
//note: dirtyFields==null means we had no snapshot, and we couldn't get one using select-before-update //	WITHOUT_CLASSIFICATION	0.9999999305610024	WITHOUT_CLASSIFICATION	6.943899754629226E-8	TEST
// more specifically : "datetime [op] ?" //      1) if the operator is MINUS, we really cannot determine //          the expected type as either another datetime or //          numeric would be valid //      2) if the operator is PLUS, the param needs to be of //          some numeric type	WITHOUT_CLASSIFICATION	0.9999999463995562	WITHOUT_CLASSIFICATION	5.360044368155399E-8	TEST
// For the case of dynamic-update="true", we need to generate the UPDATE SQL	WITHOUT_CLASSIFICATION	0.9999996797592569	WITHOUT_CLASSIFICATION	3.202407431318528E-7	TEST
// don't need to check laziness (dirty checking algorithm handles that)	WITHOUT_CLASSIFICATION	0.9999997140418271	WITHOUT_CLASSIFICATION	2.8595817284770294E-7	TEST
// For the case of dynamic-update="false", or no snapshot, we use the static SQL	WITHOUT_CLASSIFICATION	0.9999997979013779	WITHOUT_CLASSIFICATION	2.0209862215913207E-7	TEST
// if not "get", then try "is"	WITHOUT_CLASSIFICATION	0.9999929659817184	WITHOUT_CLASSIFICATION	7.034018281583327E-6	TEST
// Now update only the tables with dirty properties (and the table with the version number)	WITHOUT_CLASSIFICATION	0.9999995817348739	WITHOUT_CLASSIFICATION	4.182651260101121E-7	TEST
// For the case of dynamic-insert="true", we need to generate the INSERT SQL	WITHOUT_CLASSIFICATION	0.9999994611586408	WITHOUT_CLASSIFICATION	5.388413592291931E-7	TEST
// For the case of dynamic-insert="true", we need to generate the INSERT SQL	WITHOUT_CLASSIFICATION	0.9999994611586408	WITHOUT_CLASSIFICATION	5.388413592291931E-7	TEST
// For the case of dynamic-insert="false", use the static SQL	WITHOUT_CLASSIFICATION	0.9999996219542501	WITHOUT_CLASSIFICATION	3.7804574985308236E-7	TEST
// For the case of dynamic-insert="false", use the static SQL	WITHOUT_CLASSIFICATION	0.9999996219542501	WITHOUT_CLASSIFICATION	3.7804574985308236E-7	TEST
// not supported	WITHOUT_CLASSIFICATION	0.9999802308339364	WITHOUT_CLASSIFICATION	1.9769166063626168E-5	TEST
// this property belongs to the table and it is not specifically // excluded from optimistic locking by optimistic-lock="false"	WITHOUT_CLASSIFICATION	0.9999997880605513	WITHOUT_CLASSIFICATION	2.1193944862451338E-7	TEST
// we need to utilize dynamic delete statements	WITHOUT_CLASSIFICATION	0.9999987508972248	WITHOUT_CLASSIFICATION	1.2491027752399746E-6	TEST
// otherwise, utilize the static delete statements	WITHOUT_CLASSIFICATION	0.9999991893731085	WITHOUT_CLASSIFICATION	8.106268915907326E-7	TEST
//just a performance opt!	WITHOUT_CLASSIFICATION	0.9999875626165259	WITHOUT_CLASSIFICATION	1.2437383474097187E-5	TEST
//just a performance opt!	WITHOUT_CLASSIFICATION	0.9999875626165259	WITHOUT_CLASSIFICATION	1.2437383474097187E-5	TEST
//all joins join to the pk of the driving table	WITHOUT_CLASSIFICATION	0.9999965484954637	WITHOUT_CLASSIFICATION	3.451504536234807E-6	TEST
//notice that we skip the first table; it is the driving table!	WITHOUT_CLASSIFICATION	0.9999943092142698	WITHOUT_CLASSIFICATION	5.690785730161879E-6	TEST
//we can inner join to superclass tables (the row MUST be there) //we can never inner join to subclass tables	WITHOUT_CLASSIFICATION	0.9999988757560601	WITHOUT_CLASSIFICATION	1.1242439399920516E-6	TEST
//skip the driving table	WITHOUT_CLASSIFICATION	0.9999935673566054	WITHOUT_CLASSIFICATION	6.432643394644981E-6	TEST
//get 'em in the right order (not that it really matters)	WITHOUT_CLASSIFICATION	0.9999941523973936	WITHOUT_CLASSIFICATION	5.8476026063833655E-6	TEST
// here, we work under the following assumptions: //      ------------ valid cases -------------------------------------- //      1) datetime + {something other than datetime} : always results //              in a datetime ( db will catch invalid conversions ) //      2) datetime - datetime : always results in a DOUBLE //      3) datetime - {something other than datetime} : always results //              in a datetime ( db will catch invalid conversions ) //      ------------ invalid cases ------------------------------------ //      4) datetime + datetime //      5) {something other than datetime} - datetime //      6) datetime * {any type} //      7) datetime / {any type} //      8) {any type} / datetime // doing so allows us to properly handle parameters as either the left // or right side here in the majority of cases	WITHOUT_CLASSIFICATION	0.9999999997377548	WITHOUT_CLASSIFICATION	2.622451837590247E-10	TEST
//render the where and from parts	WITHOUT_CLASSIFICATION	0.999968614638939	WITHOUT_CLASSIFICATION	3.138536106097898E-5	TEST
//we *could* regerate this inside each called method!	WITHOUT_CLASSIFICATION	0.9999991367928555	WITHOUT_CLASSIFICATION	8.632071445795076E-7	TEST
//now render the joins	WITHOUT_CLASSIFICATION	0.9999404764469605	WITHOUT_CLASSIFICATION	5.952355303948585E-5	TEST
// This will add the new from element to the origin.	WITHOUT_CLASSIFICATION	0.9999994918465969	WITHOUT_CLASSIFICATION	5.081534032321883E-7	TEST
//now render the select clause	WITHOUT_CLASSIFICATION	0.9999934681793954	WITHOUT_CLASSIFICATION	6.531820604590781E-6	TEST
//now tie it all together	WITHOUT_CLASSIFICATION	0.9999885478489351	WITHOUT_CLASSIFICATION	1.1452151064803863E-5	TEST
//insert/update/delete SQL	WITHOUT_CLASSIFICATION	0.9999928953189775	WITHOUT_CLASSIFICATION	7.104681022459341E-6	TEST
//select SQL	WITHOUT_CLASSIFICATION	0.9999597160073387	WITHOUT_CLASSIFICATION	4.0283992661294764E-5	TEST
//no need to check laziness, dirty checking handles that	WITHOUT_CLASSIFICATION	0.9999976433040675	WITHOUT_CLASSIFICATION	2.3566959325839236E-6	TEST
// Fully resolve the map reference, create implicit joins.	WITHOUT_CLASSIFICATION	0.999999627931093	WITHOUT_CLASSIFICATION	3.7206890697311753E-7	TEST
// temporary ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999786714222578	WITHOUT_CLASSIFICATION	2.1328577742188857E-5	TEST
// The basic implementation is to simply use the node's text	WITHOUT_CLASSIFICATION	0.9999997197829099	WITHOUT_CLASSIFICATION	2.802170901739799E-7	TEST
// for dialects which are known to not support ANSI-SQL row-value-constructor syntax, // we should mutate the tree.	WITHOUT_CLASSIFICATION	0.9999999496393104	WITHOUT_CLASSIFICATION	5.0360689625508626E-8	TEST
// Due to the complexity in initializing the SelectClause, do not generate one here. // If it is not found; simply return null... // // Also, do not cache since it gets generated well after we are created.	WITHOUT_CLASSIFICATION	0.9999999861183566	WITHOUT_CLASSIFICATION	1.388164334210547E-8	TEST
// check the version unsaved-value, if appropriate	WITHOUT_CLASSIFICATION	0.9999996247946602	WITHOUT_CLASSIFICATION	3.7520533985074773E-7	TEST
// let this take precedence if defined, since it works for // assigned identifiers	WITHOUT_CLASSIFICATION	0.999998216825462	WITHOUT_CLASSIFICATION	1.7831745379749275E-6	TEST
// check the id unsaved-value	WITHOUT_CLASSIFICATION	0.9999979455332777	WITHOUT_CLASSIFICATION	2.054466722235019E-6	TEST
// check to see if it is in the second-level cache	WITHOUT_CLASSIFICATION	0.9999987373046771	WITHOUT_CLASSIFICATION	1.2626953228110922E-6	TEST
///////////////////////////////////////////////////////////////////////	WITHOUT_CLASSIFICATION	0.999667799056761	WITHOUT_CLASSIFICATION	3.3220094323901397E-4	TEST
// For property references generate <tablealias>.<columnname> as <projectionalias>	WITHOUT_CLASSIFICATION	0.9999999286734531	WITHOUT_CLASSIFICATION	7.132654685244452E-8	TEST
// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9998798941819308	WITHOUT_CLASSIFICATION	1.201058180691695E-4	TEST
//if there is no resulting row, return null	WITHOUT_CLASSIFICATION	0.9999907658673463	WITHOUT_CLASSIFICATION	9.23413265373977E-6	TEST
//force immediate execution of the insert	WITHOUT_CLASSIFICATION	0.9999961757445589	WITHOUT_CLASSIFICATION	3.824255441059369E-6	TEST
// If this from element is a collection and the path is a collection property (maxIndex, etc.) then // generate a sub-query.	WITHOUT_CLASSIFICATION	0.9999999615972607	WITHOUT_CLASSIFICATION	3.840273924233228E-8	TEST
// entities ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999771813525538	WITHOUT_CLASSIFICATION	2.281864744621178E-5	TEST
// collections ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999954610505165	WITHOUT_CLASSIFICATION	4.538949483520888E-6	TEST
//cannot occur	WITHOUT_CLASSIFICATION	0.9999697480156995	WITHOUT_CLASSIFICATION	3.0251984300451454E-5	TEST
//cannot occur	WITHOUT_CLASSIFICATION	0.9999697480156995	WITHOUT_CLASSIFICATION	3.0251984300451454E-5	TEST
// only carry on if the method has no parameters	WITHOUT_CLASSIFICATION	0.9999988094049351	WITHOUT_CLASSIFICATION	1.1905950648127323E-6	TEST
// try "get"	WITHOUT_CLASSIFICATION	0.9999754037922164	WITHOUT_CLASSIFICATION	2.459620778358933E-5	TEST
// do nothing...	WITHOUT_CLASSIFICATION	0.9999958856366988	WITHOUT_CLASSIFICATION	4.1143633012029115E-6	TEST
// do nothing...	WITHOUT_CLASSIFICATION	0.9999958856366988	WITHOUT_CLASSIFICATION	4.1143633012029115E-6	TEST
// should be safe to only ever expect EntityPersister references here	WITHOUT_CLASSIFICATION	0.9999992626184389	WITHOUT_CLASSIFICATION	7.373815612433056E-7	TEST
// this page intentionally left blank :)	WITHOUT_CLASSIFICATION	0.9999976257471738	WITHOUT_CLASSIFICATION	2.3742528261576896E-6	TEST
// do not do anything	WITHOUT_CLASSIFICATION	0.9999952763859643	WITHOUT_CLASSIFICATION	4.723614035731502E-6	TEST
//	WITHOUT_CLASSIFICATION	0.999864478982662	WITHOUT_CLASSIFICATION	1.3552101733804665E-4	TEST
// ignore	WITHOUT_CLASSIFICATION	0.9999944894313505	WITHOUT_CLASSIFICATION	5.5105686496089476E-6	TEST
//cant instantiate	WITHOUT_CLASSIFICATION	0.9999796421910494	WITHOUT_CLASSIFICATION	2.035780895055605E-5	TEST
//if it is a property of an embedded component, invoke on the "identifier"	WITHOUT_CLASSIFICATION	0.9999951249488941	WITHOUT_CLASSIFICATION	4.875051105932775E-6	TEST
// otherwise:	WITHOUT_CLASSIFICATION	0.9999850007244742	WITHOUT_CLASSIFICATION	1.4999275525865327E-5	TEST
// skip finalize methods	WITHOUT_CLASSIFICATION	0.9999956952515073	WITHOUT_CLASSIFICATION	4.304748492663815E-6	TEST
// note: interfaces is assumed to already contain HibernateProxy.class	WITHOUT_CLASSIFICATION	0.9999996210352525	WITHOUT_CLASSIFICATION	3.7896474743364536E-7	TEST
// note: interfaces is assumed to already contain HibernateProxy.class	WITHOUT_CLASSIFICATION	0.9999996210352525	WITHOUT_CLASSIFICATION	3.7896474743364536E-7	TEST
// HHH-2481 make sure the callback gets cleared, otherwise the instance stays in a static thread local.	WITHOUT_CLASSIFICATION	0.9999999449692176	WITHOUT_CLASSIFICATION	5.503078239708192E-8	TEST
// while constructor is running	WITHOUT_CLASSIFICATION	0.9999974027906386	WITHOUT_CLASSIFICATION	2.5972093614183194E-6	TEST
// while constructor is running	WITHOUT_CLASSIFICATION	0.9999974027906386	WITHOUT_CLASSIFICATION	2.5972093614183194E-6	TEST
// note: interface is assumed to already contain HibernateProxy.class	WITHOUT_CLASSIFICATION	0.9999996809405476	WITHOUT_CLASSIFICATION	3.190594523612824E-7	TEST
// interfaces // arguments	WITHOUT_CLASSIFICATION	0.9999982709467108	WITHOUT_CLASSIFICATION	1.7290532891672108E-6	TEST
//TODO!	WITHOUT_CLASSIFICATION	0.9997402088417687	WITHOUT_CLASSIFICATION	2.597911582311751E-4	TEST
// Get the caller	WITHOUT_CLASSIFICATION	0.9999931424516322	WITHOUT_CLASSIFICATION	6.85754836779859E-6	TEST
// Get the caller principals	WITHOUT_CLASSIFICATION	0.9999955723886512	WITHOUT_CLASSIFICATION	4.427611348832481E-6	TEST
//private static final Alias DEFAULT_ALIAS = new Alias(10, null);	WITHOUT_CLASSIFICATION	0.9999989532738753	WITHOUT_CLASSIFICATION	1.0467261246385809E-6	TEST
// Needed to bump this up to DotNode, because that is the only thing which currently // knows about the property-ref path in the correct format; it is either this, or // recurse over the DotNodes constructing the property path just like DotNode does // internally	WITHOUT_CLASSIFICATION	0.9999990950241407	WITHOUT_CLASSIFICATION	9.049758592373564E-7	TEST
//if the identifier is quoted, remove the quotes	WITHOUT_CLASSIFICATION	0.9998774961531548	WITHOUT_CLASSIFICATION	1.2250384684517075E-4	TEST
//truncate the identifier to the max alias length, less the suffix length	WITHOUT_CLASSIFICATION	0.9999974017905254	WITHOUT_CLASSIFICATION	2.5982094746125795E-6	TEST
//full joins are not supported.. yet!	WITHOUT_CLASSIFICATION	0.9999918778728742	WITHOUT_CLASSIFICATION	8.122127125785369E-6	TEST
// null is not considered the same type as Integer. //$NON-NLS-1 //$NON-NLS-1	WITHOUT_CLASSIFICATION	0.9999997004188786	WITHOUT_CLASSIFICATION	2.995811213803448E-7	TEST
// the outerJoinsAfterWhere needs to come before where clause to properly // handle dynamic filters	WITHOUT_CLASSIFICATION	0.9999991484551664	WITHOUT_CLASSIFICATION	8.515448336838794E-7	TEST
//$NON-NLS-1	WITHOUT_CLASSIFICATION	0.999489457690701	WITHOUT_CLASSIFICATION	5.105423092990445E-4	TEST
//$NON-NLS-1	WITHOUT_CLASSIFICATION	0.999489457690701	WITHOUT_CLASSIFICATION	5.105423092990445E-4	TEST
//$NON-NLS-1	WITHOUT_CLASSIFICATION	0.999489457690701	WITHOUT_CLASSIFICATION	5.105423092990445E-4	TEST
//$NON-NLS-1	WITHOUT_CLASSIFICATION	0.999489457690701	WITHOUT_CLASSIFICATION	5.105423092990445E-4	TEST
// strip off any leading 'and' token	WITHOUT_CLASSIFICATION	0.9999990873450466	WITHOUT_CLASSIFICATION	9.126549534230107E-7	TEST
// if the condition is not already there...	WITHOUT_CLASSIFICATION	0.9999991728230878	WITHOUT_CLASSIFICATION	8.271769121492867E-7	TEST
//dontSpace.add("'");	WITHOUT_CLASSIFICATION	0.9999695309305787	WITHOUT_CLASSIFICATION	3.0469069421305516E-5	TEST
//for MySQL	WITHOUT_CLASSIFICATION	0.9997942683757193	WITHOUT_CLASSIFICATION	2.0573162428067952E-4	TEST
//HashMap columnsUnique = new HashMap();	WITHOUT_CLASSIFICATION	0.9999960180704573	WITHOUT_CLASSIFICATION	3.98192954266217E-6	TEST
//null caused some problems	WITHOUT_CLASSIFICATION	0.9999912001889799	WITHOUT_CLASSIFICATION	8.79981102015561E-6	TEST
/*package*/	WITHOUT_CLASSIFICATION	0.9999419796562319	WITHOUT_CLASSIFICATION	5.8020343768033676E-5	TEST
//not sure if this would ever be null but wanted to be careful	WITHOUT_CLASSIFICATION	0.9999937299872124	WITHOUT_CLASSIFICATION	6.270012787559971E-6	TEST
//even on inverse="true"	WITHOUT_CLASSIFICATION	0.9999863821440673	WITHOUT_CLASSIFICATION	1.361785593271E-5	TEST
/*package*/	WITHOUT_CLASSIFICATION	0.9999419796562319	WITHOUT_CLASSIFICATION	5.8020343768033676E-5	TEST
/*package*/	WITHOUT_CLASSIFICATION	0.9999419796562319	WITHOUT_CLASSIFICATION	5.8020343768033676E-5	TEST
// If true then execute db updates, otherwise just generate and display updates	WITHOUT_CLASSIFICATION	0.9999995670516185	WITHOUT_CLASSIFICATION	4.3294838147991566E-7	TEST
// we only release the connection	WITHOUT_CLASSIFICATION	0.9999992163078937	WITHOUT_CLASSIFICATION	7.836921064281301E-7	TEST
// deprecated option...	WITHOUT_CLASSIFICATION	0.9999979633682032	WITHOUT_CLASSIFICATION	2.0366317968020443E-6	TEST
//if an exception occurs during flush, user must call rollback()	WITHOUT_CLASSIFICATION	0.9999995875057481	WITHOUT_CLASSIFICATION	4.124942518900305E-7	TEST
//actually, this last test is probably unnecessary, since  //beforeCompletion() doesn't get called during rollback	WITHOUT_CLASSIFICATION	0.9999966363245858	WITHOUT_CLASSIFICATION	3.3636754141882154E-6	TEST
// this one only really needed for badly-behaved applications! // (if the TransactionManager has a Sychronization registered, // its a noop) // (actually we do need it for downgrading locks)	WITHOUT_CLASSIFICATION	0.9999993933836491	WITHOUT_CLASSIFICATION	6.066163510322097E-7	TEST
// Create an DotNode AST for the path and resolve it.	WITHOUT_CLASSIFICATION	0.9999906905541074	WITHOUT_CLASSIFICATION	9.309445892679538E-6	TEST
//if an exception occurs during flush, user must call rollback()	WITHOUT_CLASSIFICATION	0.9999995875057481	WITHOUT_CLASSIFICATION	4.124942518900305E-7	TEST
//if we could not register a synchronization, //do the before/after completion callbacks //ourself (but we need to let jdbcContext //know that this is what we are going to //do, so it doesn't keep trying to register //synchronizations)	WITHOUT_CLASSIFICATION	0.9999996717016462	WITHOUT_CLASSIFICATION	3.282983538653689E-7	TEST
// swallow it, and continue to roll back JTA transaction	WITHOUT_CLASSIFICATION	0.999999742169885	WITHOUT_CLASSIFICATION	2.5783011505685626E-7	TEST
// so the transaction is already rolled back, by JTA spec	WITHOUT_CLASSIFICATION	0.9999989268064047	WITHOUT_CLASSIFICATION	1.0731935952176025E-6	TEST
// this method is a noop if there is a Synchronization!	WITHOUT_CLASSIFICATION	0.9999974954143324	WITHOUT_CLASSIFICATION	2.5045856676619075E-6	TEST
// two conditions where we need to transform this to a theta-join syntax: //      1) 'elem' is the "root from-element" in correlated subqueries //      2) The DotNode.useThetaStyleImplicitJoins has been set to true //          and 'elem' represents an implicit join	WITHOUT_CLASSIFICATION	0.999999914628212	WITHOUT_CLASSIFICATION	8.53717879993318E-8	TEST
// WebSphere, however, is not a sane JEE/JTA container...	WITHOUT_CLASSIFICATION	0.9999992451463909	WITHOUT_CLASSIFICATION	7.548536090501553E-7	TEST
// for sane JEE/JTA containers, the transaction itself functions as its identifier...	WITHOUT_CLASSIFICATION	0.9999996631595373	WITHOUT_CLASSIFICATION	3.3684046284103836E-7	TEST
//swallow, the transaction was finished	WITHOUT_CLASSIFICATION	0.999974264741821	WITHOUT_CLASSIFICATION	2.5735258179008022E-5	TEST
// all AliasToEntityMapResultTransformer are considered equal ~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999995393191203	WITHOUT_CLASSIFICATION	4.6068087974672427E-7	TEST
// Create the join element under the from element.	WITHOUT_CLASSIFICATION	0.9999981323829887	WITHOUT_CLASSIFICATION	1.8676170113414111E-6	TEST
// all DistinctRootEntityResultTransformer are considered equal ~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.999999276230402	WITHOUT_CLASSIFICATION	7.237695979584868E-7	TEST
// map of EntityMode -> Tuplizer	WITHOUT_CLASSIFICATION	0.9999985305052979	WITHOUT_CLASSIFICATION	1.4694947022443787E-6	TEST
// this is a virtual id property...	WITHOUT_CLASSIFICATION	0.9999964932155362	WITHOUT_CLASSIFICATION	3.506784463798705E-6	TEST
//this one needed only for guessEntityMode()	WITHOUT_CLASSIFICATION	0.9999693796193436	WITHOUT_CLASSIFICATION	3.062038065646327E-5	TEST
// create our own copy of the user-supplied tuplizer impl map	WITHOUT_CLASSIFICATION	0.9999989391644026	WITHOUT_CLASSIFICATION	1.0608355973416274E-6	TEST
// todo : move this to SF per HHH-3517; also see HHH-1907 and ComponentMetamodel	WITHOUT_CLASSIFICATION	0.9999995347283895	WITHOUT_CLASSIFICATION	4.652716105120419E-7	TEST
// then the pojo tuplizer, using the dynamic-map tuplizer if no pojo representation is available	WITHOUT_CLASSIFICATION	0.9999997970311953	WITHOUT_CLASSIFICATION	2.029688047206204E-7	TEST
// Build the dynamic-map tuplizer...	WITHOUT_CLASSIFICATION	0.9999978946740975	WITHOUT_CLASSIFICATION	2.1053259024635194E-6	TEST
// then dom4j tuplizer, if dom4j representation is available	WITHOUT_CLASSIFICATION	0.9999990423456145	WITHOUT_CLASSIFICATION	9.576543854762288E-7	TEST
// Build the dynamic-map tuplizer...	WITHOUT_CLASSIFICATION	0.9999978946740975	WITHOUT_CLASSIFICATION	2.1053259024635194E-6	TEST
// put the "standard" tuplizers into the tuplizer map first	WITHOUT_CLASSIFICATION	0.9999966606140865	WITHOUT_CLASSIFICATION	3.3393859135532525E-6	TEST
// found a ctor, but it was not publicly accessible so try to request accessibility	WITHOUT_CLASSIFICATION	0.9999993734851438	WITHOUT_CLASSIFICATION	6.26514856099495E-7	TEST
//	WITHOUT_CLASSIFICATION	0.999864478982662	WITHOUT_CLASSIFICATION	1.3552101733804665E-4	TEST
// cached for efficiency...	WITHOUT_CLASSIFICATION	0.9999881829825085	WITHOUT_CLASSIFICATION	1.1817017491514265E-5	TEST
//	WITHOUT_CLASSIFICATION	0.999864478982662	WITHOUT_CLASSIFICATION	1.3552101733804665E-4	TEST
//	WITHOUT_CLASSIFICATION	0.999864478982662	WITHOUT_CLASSIFICATION	1.3552101733804665E-4	TEST
//it was not embedded, so the argument is just an id	WITHOUT_CLASSIFICATION	0.9999920622129899	WITHOUT_CLASSIFICATION	7.937787010185735E-6	TEST
// then the pojo tuplizer, using the dynamic-map tuplizer if no pojo representation is available	WITHOUT_CLASSIFICATION	0.9999997970311953	WITHOUT_CLASSIFICATION	2.029688047206204E-7	TEST
// then dom4j tuplizer, if dom4j representation is available	WITHOUT_CLASSIFICATION	0.9999990423456145	WITHOUT_CLASSIFICATION	9.576543854762288E-7	TEST
// put the "standard" tuplizers into the tuplizer map first	WITHOUT_CLASSIFICATION	0.9999966606140865	WITHOUT_CLASSIFICATION	3.3393859135532525E-6	TEST
// then handle any user-defined entity modes...	WITHOUT_CLASSIFICATION	0.999999065009331	WITHOUT_CLASSIFICATION	9.349906690069596E-7	TEST
//return currentId;	WITHOUT_CLASSIFICATION	0.9999850773519402	WITHOUT_CLASSIFICATION	1.4922648059797873E-5	TEST
//reset the id	WITHOUT_CLASSIFICATION	0.9999054622597924	WITHOUT_CLASSIFICATION	9.453774020761965E-5	TEST
//	WITHOUT_CLASSIFICATION	0.999864478982662	WITHOUT_CLASSIFICATION	1.3552101733804665E-4	TEST
//reset the version	WITHOUT_CLASSIFICATION	0.9999728734025805	WITHOUT_CLASSIFICATION	2.7126597419562596E-5	TEST
// the default is to simply not lazy fetch properties for now...	WITHOUT_CLASSIFICATION	0.9999973302222488	WITHOUT_CLASSIFICATION	2.669777751171825E-6	TEST
// Add the second join, the one that ends in the destination table.	WITHOUT_CLASSIFICATION	0.9999995171296705	WITHOUT_CLASSIFICATION	4.828703293834143E-7	TEST
// temporary ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999786714222578	WITHOUT_CLASSIFICATION	2.1328577742188857E-5	TEST
// found a ctor, but it was not publicly accessible so try to request accessibility	WITHOUT_CLASSIFICATION	0.9999993734851438	WITHOUT_CLASSIFICATION	6.26514856099495E-7	TEST
// determine the id getter and setter methods from the proxy interface (if any) // determine all interfaces needed by the resulting proxy	WITHOUT_CLASSIFICATION	0.9999987977437248	WITHOUT_CLASSIFICATION	1.202256275252941E-6	TEST
//	WITHOUT_CLASSIFICATION	0.999864478982662	WITHOUT_CLASSIFICATION	1.3552101733804665E-4	TEST
//not final because proxy factory creation can fail	WITHOUT_CLASSIFICATION	0.9999909289224177	WITHOUT_CLASSIFICATION	9.071077582192257E-6	TEST
// superclass entity-name	WITHOUT_CLASSIFICATION	0.9999994231271813	WITHOUT_CLASSIFICATION	5.768728187607317E-7	TEST
// temporary ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999786714222578	WITHOUT_CLASSIFICATION	2.1328577742188857E-5	TEST
// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9998798941819308	WITHOUT_CLASSIFICATION	1.201058180691695E-4	TEST
//init the aliases, after initing the constructornode	WITHOUT_CLASSIFICATION	0.9999953297293609	WITHOUT_CLASSIFICATION	4.670270639206319E-6	TEST
// temporary ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999786714222578	WITHOUT_CLASSIFICATION	2.1328577742188857E-5	TEST
// legacy behavior (with no abstract attribute specified)	WITHOUT_CLASSIFICATION	0.9999990386776303	WITHOUT_CLASSIFICATION	9.613223697405873E-7	TEST
// Get ready to start adding nodes.	WITHOUT_CLASSIFICATION	0.9999992570766444	WITHOUT_CLASSIFICATION	7.429233556221296E-7	TEST
// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9998798941819308	WITHOUT_CLASSIFICATION	1.201058180691695E-4	TEST
//note: this affects the return value!	WITHOUT_CLASSIFICATION	0.999993929770412	WITHOUT_CLASSIFICATION	6.0702295880336315E-6	TEST
// Need to account for allowable '_' within the variant	WITHOUT_CLASSIFICATION	0.9999439174948501	WITHOUT_CLASSIFICATION	5.608250514979139E-5	TEST
// Add the type to the list of returned sqlResultTypes.	WITHOUT_CLASSIFICATION	0.9999975058419028	WITHOUT_CLASSIFICATION	2.494158097234224E-6	TEST
// Collection Types:	WITHOUT_CLASSIFICATION	0.9999976507247387	WITHOUT_CLASSIFICATION	2.3492752613159484E-6	TEST
// convenience methods relating to operations across arrays of types...	WITHOUT_CLASSIFICATION	0.999999964167209	WITHOUT_CLASSIFICATION	3.583279099492428E-8	TEST
//lobs cannot be compared	WITHOUT_CLASSIFICATION	0.9999748187675992	WITHOUT_CLASSIFICATION	2.5181232400830427E-5	TEST
//Blobs are ignored by merge()	WITHOUT_CLASSIFICATION	0.9999821390938126	WITHOUT_CLASSIFICATION	1.7860906187305402E-5	TEST
//value is the entity name	WITHOUT_CLASSIFICATION	0.9999909407987045	WITHOUT_CLASSIFICATION	9.05920129549512E-6	TEST
//EARLY EXIT!	WITHOUT_CLASSIFICATION	0.9998547174787219	WITHOUT_CLASSIFICATION	1.4528252127802852E-4	TEST
// generate id select fragment and then property select fragment for // each expression, just like generateSelectFragments().	WITHOUT_CLASSIFICATION	0.9999999086672238	WITHOUT_CLASSIFICATION	9.133277630721433E-8	TEST
//TODO!	WITHOUT_CLASSIFICATION	0.9997402088417687	WITHOUT_CLASSIFICATION	2.597911582311751E-4	TEST
//xml is the entity name	WITHOUT_CLASSIFICATION	0.9999837640883094	WITHOUT_CLASSIFICATION	1.623591169064172E-5	TEST
//special case ... this is the leaf of the containment graph, even though not immutable	WITHOUT_CLASSIFICATION	0.9999997236583599	WITHOUT_CLASSIFICATION	2.763416401417759E-7	TEST
//tolerates nulls	WITHOUT_CLASSIFICATION	0.9999863476402626	WITHOUT_CLASSIFICATION	1.365235973738607E-5	TEST
/*sqlResultTypeList,*/	WITHOUT_CLASSIFICATION	0.9999343565126593	WITHOUT_CLASSIFICATION	6.564348734066078E-5	TEST
// metaType is assumed to be single-column type	WITHOUT_CLASSIFICATION	0.9999987088915943	WITHOUT_CLASSIFICATION	1.2911084057991732E-6	TEST
// Get all the select expressions (that we just generated) and render the select.	WITHOUT_CLASSIFICATION	0.9999997620293156	WITHOUT_CLASSIFICATION	2.3797068437268396E-7	TEST
// Look through the FromElement's children to find any collections of values that should be fetched...	WITHOUT_CLASSIFICATION	0.9999999268012844	WITHOUT_CLASSIFICATION	7.319871572373964E-8	TEST
//return AssociationType.FOREIGN_KEY_TO_PARENT; //this is better but causes a transient object exception...	WITHOUT_CLASSIFICATION	0.999997821903017	WITHOUT_CLASSIFICATION	2.17809698296607E-6	TEST
// Use the lower case function name. // Remember whether we're in a SELECT clause or not.	WITHOUT_CLASSIFICATION	0.9999998843234152	WITHOUT_CLASSIFICATION	1.1567658483604277E-7	TEST
// IDENT might be the name of a class.	WITHOUT_CLASSIFICATION	0.9999981899167988	WITHOUT_CLASSIFICATION	1.8100832011519228E-6	TEST
//TODO!!!	WITHOUT_CLASSIFICATION	0.9997403230180452	WITHOUT_CLASSIFICATION	2.5967698195473993E-4	TEST
//st.setTimestamp( index,  new Timestamp( cal.getTimeInMillis() ), cal ); //JDK 1.5 only	WITHOUT_CLASSIFICATION	0.9999988454807369	WITHOUT_CLASSIFICATION	1.1545192630123531E-6	TEST
//st.setDate( index,  new Date( cal.getTimeInMillis() ), cal ); //JDK 1.5 only	WITHOUT_CLASSIFICATION	0.9999991165427339	WITHOUT_CLASSIFICATION	8.834572661584305E-7	TEST
// both are Timestamps	WITHOUT_CLASSIFICATION	0.9999919144854061	WITHOUT_CLASSIFICATION	8.085514593783636E-6	TEST
// at least one is a plain old Date	WITHOUT_CLASSIFICATION	0.9999893537341679	WITHOUT_CLASSIFICATION	1.0646265832095E-5	TEST
//noop	WITHOUT_CLASSIFICATION	0.9998504224310202	WITHOUT_CLASSIFICATION	1.4957756897994668E-4	TEST
// if the corresponding SQL value is NULL, the reader we got is NULL as well	WITHOUT_CLASSIFICATION	0.999998334141718	WITHOUT_CLASSIFICATION	1.665858282052399E-6	TEST
// Fetch Reader content up to the end - and put characters in a StringBuffer	WITHOUT_CLASSIFICATION	0.999999804876956	WITHOUT_CLASSIFICATION	1.951230439702158E-7	TEST
// Return StringBuffer content as a large String	WITHOUT_CLASSIFICATION	0.9999995035032524	WITHOUT_CLASSIFICATION	4.964967475865123E-7	TEST
//or Types.LONGVARCHAR?	WITHOUT_CLASSIFICATION	0.9999304174865246	WITHOUT_CLASSIFICATION	6.958251347553147E-5	TEST
//Not called at runtime so doesn't matter if its slow :)	WITHOUT_CLASSIFICATION	0.9999756146929288	WITHOUT_CLASSIFICATION	2.4385307071167967E-5	TEST
//TODO	WITHOUT_CLASSIFICATION	0.9997464874399898	WITHOUT_CLASSIFICATION	2.535125600101575E-4	TEST
// Chop off the rest of the tree.	WITHOUT_CLASSIFICATION	0.999968319113334	WITHOUT_CLASSIFICATION	3.168088666597784E-5	TEST
//different nullability rules for pk/fk	WITHOUT_CLASSIFICATION	0.999989069057492	WITHOUT_CLASSIFICATION	1.0930942508006998E-5	TEST
//cache this	WITHOUT_CLASSIFICATION	0.999963088198065	WITHOUT_CLASSIFICATION	3.691180193500995E-5	TEST
//only really need new array during semiresolve!	WITHOUT_CLASSIFICATION	0.9999954833410145	WITHOUT_CLASSIFICATION	4.516658985425126E-6	TEST
// Forcefully remove leading ands from where fragments; the grammar will // handle adding them	WITHOUT_CLASSIFICATION	0.9999999402735522	WITHOUT_CLASSIFICATION	5.972644781686829E-8	TEST
//TODO!!!!!!!	WITHOUT_CLASSIFICATION	0.9994829148077202	WITHOUT_CLASSIFICATION	5.170851922797902E-4	TEST
// Create a new FILTERS node as a parent of all filters	WITHOUT_CLASSIFICATION	0.9999994381690483	WITHOUT_CLASSIFICATION	5.618309516957257E-7	TEST
// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9998798941819308	WITHOUT_CLASSIFICATION	1.201058180691695E-4	TEST
//public Object instantiate(Object parent, SessionImplementor session) throws HibernateException;	WITHOUT_CLASSIFICATION	0.999999424706735	WITHOUT_CLASSIFICATION	5.752932649385439E-7	TEST
//nothing to do	WITHOUT_CLASSIFICATION	0.9999713092816513	WITHOUT_CLASSIFICATION	2.869071834867876E-5	TEST
//nothing to do	WITHOUT_CLASSIFICATION	0.9999713092816513	WITHOUT_CLASSIFICATION	2.869071834867876E-5	TEST
// VersionType impl ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ //      Note : simply returns null for seed() and next() as the only known //      application of binary types for versioning is for use with the //      TIMESTAMP datatype supported by Sybase and SQL Server, which //      are completely db-generated values...	WITHOUT_CLASSIFICATION	0.9999999959303415	WITHOUT_CLASSIFICATION	4.069658568984907E-9	TEST
//lobs cannot be compared	WITHOUT_CLASSIFICATION	0.9999748187675992	WITHOUT_CLASSIFICATION	2.5181232400830427E-5	TEST
//not really necessary, I guess...	WITHOUT_CLASSIFICATION	0.999997630590924	WITHOUT_CLASSIFICATION	2.3694090761266217E-6	TEST
//Clobs are ignored by merge() operation	WITHOUT_CLASSIFICATION	0.9999936155080551	WITHOUT_CLASSIFICATION	6.3844919448431095E-6	TEST
// we do not have to worry about queued additions to uninitialized // collections, since they can only occur for inverse collections!	WITHOUT_CLASSIFICATION	0.9999999226766295	WITHOUT_CLASSIFICATION	7.732337047812333E-8	TEST
// collections cannot be compared	WITHOUT_CLASSIFICATION	0.9999979654941382	WITHOUT_CLASSIFICATION	2.03450586180773E-6	TEST
//remember the uk value	WITHOUT_CLASSIFICATION	0.9999735892544857	WITHOUT_CLASSIFICATION	2.641074551431888E-5	TEST
//NOOP	WITHOUT_CLASSIFICATION	0.9996143587454608	WITHOUT_CLASSIFICATION	3.856412545392027E-4	TEST
//processCollectionProperty(token, q.getCollectionPersister(collectionRole), collectionName);	WITHOUT_CLASSIFICATION	0.9999985960491797	WITHOUT_CLASSIFICATION	1.4039508201692612E-6	TEST
//we must use the "remembered" uk value, since it is  //not available from the EntityEntry during assembly	WITHOUT_CLASSIFICATION	0.9999995549169547	WITHOUT_CLASSIFICATION	4.450830452349477E-7	TEST
// collections don't dirty an unversioned parent entity	WITHOUT_CLASSIFICATION	0.9999997473176685	WITHOUT_CLASSIFICATION	2.526823314619338E-7	TEST
// return false;	WITHOUT_CLASSIFICATION	0.9999964282617649	WITHOUT_CLASSIFICATION	3.571738235197626E-6	TEST
// This just handles a particular case of component // projection, perhaps get rid of it and throw an exception	WITHOUT_CLASSIFICATION	0.9999999679847276	WITHOUT_CLASSIFICATION	3.201527233057079E-8	TEST
//NOTE: we avoid joining to the next table if the named property is just the foreign key value	WITHOUT_CLASSIFICATION	0.9999975516819983	WITHOUT_CLASSIFICATION	2.4483180016240167E-6	TEST
// the key is the owning entity itself, so get the ID from the key	WITHOUT_CLASSIFICATION	0.9999963850547849	WITHOUT_CLASSIFICATION	3.6149452149775017E-6	TEST
// if the original is a PersistentCollection, and that original // was not flagged as dirty, then reset the target's dirty flag // here after the copy operation. // </p> // One thing to be careful of here is a "bare" original collection // in which case we should never ever ever reset the dirty flag // on the target because we simply do not know...	WITHOUT_CLASSIFICATION	0.9999999918407183	WITHOUT_CLASSIFICATION	8.159281667143184E-9	TEST
//ignore subselect keywords	WITHOUT_CLASSIFICATION	0.9999947494843119	WITHOUT_CLASSIFICATION	5.250515688070555E-6	TEST
// copy elements into newly empty target collection	WITHOUT_CLASSIFICATION	0.9999998068757228	WITHOUT_CLASSIFICATION	1.9312427727832134E-7	TEST
// for a null target, or a target which is the same as the original, we // need to put the merged elements in a new collection	WITHOUT_CLASSIFICATION	0.9999998505338056	WITHOUT_CLASSIFICATION	1.4946619438056257E-7	TEST
// by default just use an unanticipated capacity since we don't // know how to extract the capacity to use from original here...	WITHOUT_CLASSIFICATION	0.9999999765280536	WITHOUT_CLASSIFICATION	2.347194649882466E-8	TEST
// get the elements back into the target making sure to handle dirty flag	WITHOUT_CLASSIFICATION	0.9999998627502589	WITHOUT_CLASSIFICATION	1.372497410625565E-7	TEST
// check if collection is currently being loaded	WITHOUT_CLASSIFICATION	0.9999993954493882	WITHOUT_CLASSIFICATION	6.045506119126867E-7	TEST
// check if it is already completely loaded, but unowned	WITHOUT_CLASSIFICATION	0.9999988323566985	WITHOUT_CLASSIFICATION	1.167643301433734E-6	TEST
// cache the actual id of the object, not the value of the // property-ref, which might not be initialized	WITHOUT_CLASSIFICATION	0.999999768996959	WITHOUT_CLASSIFICATION	2.310030409483745E-7	TEST
//TODO!!!!!!!	WITHOUT_CLASSIFICATION	0.9994829148077202	WITHOUT_CLASSIFICATION	5.170851922797902E-4	TEST
// create a new collection wrapper, to be initialized later	WITHOUT_CLASSIFICATION	0.999999616671184	WITHOUT_CLASSIFICATION	3.833288159236347E-7	TEST
// Some JDBC drivers erroneously return an empty array here for a null DB value :/	WITHOUT_CLASSIFICATION	0.999999934666924	WITHOUT_CLASSIFICATION	6.533307587954209E-8	TEST
// our column span is the number of columns in the PK	WITHOUT_CLASSIFICATION	0.9999986390625504	WITHOUT_CLASSIFICATION	1.360937449647274E-6	TEST
//cannot batch fetch by unique key (property-ref associations)	WITHOUT_CLASSIFICATION	0.9999976383445903	WITHOUT_CLASSIFICATION	2.3616554095956324E-6	TEST
// we already know current is not null...	WITHOUT_CLASSIFICATION	0.999999553943501	WITHOUT_CLASSIFICATION	4.46056498947739E-7	TEST
// the ids are fully resolved, so compare them with isDirty(), not isModified()	WITHOUT_CLASSIFICATION	0.9999989120185351	WITHOUT_CLASSIFICATION	1.0879814649352805E-6	TEST
//the owner of the association is not the owner of the id	WITHOUT_CLASSIFICATION	0.9999813009161602	WITHOUT_CLASSIFICATION	1.8699083839845414E-5	TEST
// ----------------------------------------------------------- Constructors	WITHOUT_CLASSIFICATION	0.9999930802165443	WITHOUT_CLASSIFICATION	6.919783455752569E-6	TEST
// ----------------------------------------------------- Instance Variables	WITHOUT_CLASSIFICATION	0.9999980097499079	WITHOUT_CLASSIFICATION	1.990250092083081E-6	TEST
//	WITHOUT_CLASSIFICATION	0.999864478982662	WITHOUT_CLASSIFICATION	1.3552101733804665E-4	TEST
// --------------------------------------------------------- Public Methods	WITHOUT_CLASSIFICATION	0.9999947452005097	WITHOUT_CLASSIFICATION	5.254799490353958E-6	TEST
// Compare the two maps for equality	WITHOUT_CLASSIFICATION	0.9999955298788928	WITHOUT_CLASSIFICATION	4.470121107057704E-6	TEST
// Simple tests that require no synchronization	WITHOUT_CLASSIFICATION	0.9999981742308722	WITHOUT_CLASSIFICATION	1.8257691277462355E-6	TEST
//Sybase fail if we don't do that, sigh...	WITHOUT_CLASSIFICATION	0.9999964188341423	WITHOUT_CLASSIFICATION	3.5811658576242593E-6	TEST
// Handles things like: // a and b or c // a and ( b or c ) // not a and not b // not ( a and b ) // x between y and z            (overloaded "and") // x in ( a, b, c )             (overloaded brackets) // not not a // a is not null                (overloaded "not") // etc...... // and expressions like // foo = bar                    (maps to: foo.id = bar.id) // foo.Bar = 'foo'              (maps to: foo.bar = 'foo') // foo.Bar.Baz = 1.0            (maps to: foo.bar = bar.id and bar.baz = 1.0) // 1.0 = foo.Bar.Baz            (maps to: bar.baz = 1.0 and foo.Bar = bar.id) // foo.Bar.Baz = a.B.C          (maps to: bar.Baz = b.C and foo.Bar = bar.id and a.B = b.id) // foo.Bar.Baz + a.B.C          (maps to: bar.Baz + b.C and foo.Bar = bar.id and a.B = b.id) // ( foo.Bar.Baz + 1.0 ) < 2.0  (maps to: ( bar.Baz + 1.0 ) < 2.0 and foo.Bar = bar.id)	WITHOUT_CLASSIFICATION	0.999999969841692	WITHOUT_CLASSIFICATION	3.015830795032436E-8	TEST
// release the jdk internal caches everytime to ensure this // plays nicely with destroyable class-loaders	WITHOUT_CLASSIFICATION	0.9999999192381953	WITHOUT_CLASSIFICATION	8.076180462729367E-8	TEST
// release the jdk internal caches everytime to ensure this // plays nicely with destroyable class-loaders	WITHOUT_CLASSIFICATION	0.9999999192381953	WITHOUT_CLASSIFICATION	8.076180462729367E-8	TEST
// try to "pretty print" it	WITHOUT_CLASSIFICATION	0.999989347693046	WITHOUT_CLASSIFICATION	1.0652306954079403E-5	TEST
// otherwise, just dump it	WITHOUT_CLASSIFICATION	0.9999926908371787	WITHOUT_CLASSIFICATION	7.309162821295802E-6	TEST
//its an interface so we can't really tell anything...	WITHOUT_CLASSIFICATION	0.9999989283782913	WITHOUT_CLASSIFICATION	1.0716217086237553E-6	TEST
//its an interface so we can't really tell anything...	WITHOUT_CLASSIFICATION	0.9999989283782913	WITHOUT_CLASSIFICATION	1.0716217086237553E-6	TEST
// use default behavior	WITHOUT_CLASSIFICATION	0.9999966577206119	WITHOUT_CLASSIFICATION	3.3422793880227347E-6	TEST
//NOTE: early return	WITHOUT_CLASSIFICATION	0.9999749130222817	WITHOUT_CLASSIFICATION	2.50869777183245E-5	TEST
// the MRU cache used to keep hard references to the most recently used query plans; // note : LRU here is a bit of a misnomer, it indicates that LRU entries are removed, the // actual kept entries are the MRU entries	WITHOUT_CLASSIFICATION	0.9999998767101497	WITHOUT_CLASSIFICATION	1.232898502859442E-7	TEST
// we want to be able to just use the defaults, // if JNDI environment properties are not supplied // so don't put null in anywhere	WITHOUT_CLASSIFICATION	0.9999999533943296	WITHOUT_CLASSIFICATION	4.660567049969937E-8	TEST
// Clone //-----------------------------------------------------------------------	WITHOUT_CLASSIFICATION	0.9999854990088353	WITHOUT_CLASSIFICATION	1.4500991164761855E-5	TEST
// Serialize //-----------------------------------------------------------------------	WITHOUT_CLASSIFICATION	0.9999924416699183	WITHOUT_CLASSIFICATION	7.558330081660367E-6	TEST
// stream closed in the finally	WITHOUT_CLASSIFICATION	0.9999940535942784	WITHOUT_CLASSIFICATION	5.946405721614047E-6	TEST
// stream closed in the finally	WITHOUT_CLASSIFICATION	0.9999940535942784	WITHOUT_CLASSIFICATION	5.946405721614047E-6	TEST
// Deserialize //-----------------------------------------------------------------------	WITHOUT_CLASSIFICATION	0.9999930672739622	WITHOUT_CLASSIFICATION	6.932726037857721E-6	TEST
/* static methods only - hide constructor */	WITHOUT_CLASSIFICATION	0.9999995242621684	WITHOUT_CLASSIFICATION	4.7573783153031586E-7	TEST
/*&& !('_'==character)*/	WITHOUT_CLASSIFICATION	0.999979471242555	WITHOUT_CLASSIFICATION	2.0528757445030895E-5	TEST
// returnign null!	WITHOUT_CLASSIFICATION	0.999996802573371	WITHOUT_CLASSIFICATION	3.197426629159078E-6	TEST
// returnign null!	WITHOUT_CLASSIFICATION	0.999996802573371	WITHOUT_CLASSIFICATION	3.197426629159078E-6	TEST
// includes last '.'	WITHOUT_CLASSIFICATION	0.9999967352229037	WITHOUT_CLASSIFICATION	3.2647770961866695E-6	TEST
// +1 to include the following '.'	WITHOUT_CLASSIFICATION	0.9999954762648605	WITHOUT_CLASSIFICATION	4.52373513945812E-6	TEST
// Impl note: takes advantage of the fact that an escpaed single quote // embedded within a quote-block can really be handled as two seperate // quote-blocks for the purposes of this method...	WITHOUT_CLASSIFICATION	0.9999999747378019	WITHOUT_CLASSIFICATION	2.5262198108950372E-8	TEST
// first time we find match!	WITHOUT_CLASSIFICATION	0.999993493297828	WITHOUT_CLASSIFICATION	6.506702171910823E-6	TEST
// entityNames may now include slashes for the representations //classname may be an inner class	WITHOUT_CLASSIFICATION	0.9999996740299674	WITHOUT_CLASSIFICATION	3.2597003262707407E-7	TEST
// wrapped iterators	WITHOUT_CLASSIFICATION	0.9999840747129332	WITHOUT_CLASSIFICATION	1.5925287066767625E-5	TEST
// index of current iterator in the wrapped iterators array	WITHOUT_CLASSIFICATION	0.9999983213412615	WITHOUT_CLASSIFICATION	1.6786587384747272E-6	TEST
// the current iterator	WITHOUT_CLASSIFICATION	0.9999944872082451	WITHOUT_CLASSIFICATION	5.512791754846867E-6	TEST
// the last used iterator	WITHOUT_CLASSIFICATION	0.9999802765904526	WITHOUT_CLASSIFICATION	1.9723409547395038E-5	TEST
//it was a boolean expression	WITHOUT_CLASSIFICATION	0.999996064780382	WITHOUT_CLASSIFICATION	3.935219617960239E-6	TEST
/*public static Object[] clone(Class elementClass, Object[] array) {	WITHOUT_CLASSIFICATION	0.9999990609161283	WITHOUT_CLASSIFICATION	9.390838716980912E-7	TEST
// call this before any Iterator method to make sure that the current Iterator // is not exhausted	WITHOUT_CLASSIFICATION	0.9999987298414521	WITHOUT_CLASSIFICATION	1.2701585478951963E-6	TEST
//doable if needed	WITHOUT_CLASSIFICATION	0.9999407290825073	WITHOUT_CLASSIFICATION	5.9270917492754324E-5	TEST
// set last used iterator here, in case the user calls remove // before calling hasNext() or next() (although they shouldn't)	WITHOUT_CLASSIFICATION	0.9999997621983747	WITHOUT_CLASSIFICATION	2.3780162525373776E-7	TEST
// peek ahead	WITHOUT_CLASSIFICATION	0.9999790056305182	WITHOUT_CLASSIFICATION	2.0994369481835927E-5	TEST
// if we reach the end of the string w/o finding the // matching end, that is an exception	WITHOUT_CLASSIFICATION	0.9999996794683651	WITHOUT_CLASSIFICATION	3.2053163491224683E-7	TEST
// we have a placeholder, spin forward till we find the end	WITHOUT_CLASSIFICATION	0.9999955660686275	WITHOUT_CLASSIFICATION	4.433931372549199E-6	TEST
// make sure spinning forward did not put us past the end of the buffer...	WITHOUT_CLASSIFICATION	0.9999992317870623	WITHOUT_CLASSIFICATION	7.682129377951046E-7	TEST
// First, try to locate this resource through the current // context classloader.	WITHOUT_CLASSIFICATION	0.9999999243169747	WITHOUT_CLASSIFICATION	7.568302528754645E-8	TEST
// Next, try to locate this resource through this class's classloader	WITHOUT_CLASSIFICATION	0.9999986436137732	WITHOUT_CLASSIFICATION	1.3563862267893344E-6	TEST
// Next, try to locate this resource through the system classloader	WITHOUT_CLASSIFICATION	0.9999983459641494	WITHOUT_CLASSIFICATION	1.6540358506801338E-6	TEST
// Anywhere else we should look?	WITHOUT_CLASSIFICATION	0.9999950912001296	WITHOUT_CLASSIFICATION	4.9087998703697715E-6	TEST
// would need an IdentitySet for this!	WITHOUT_CLASSIFICATION	0.9999821392031867	WITHOUT_CLASSIFICATION	1.7860796813315865E-5	TEST
//Arrays.asList doesn't do primitive arrays	WITHOUT_CLASSIFICATION	0.9999894636906959	WITHOUT_CLASSIFICATION	1.0536309304129608E-5	TEST
//faster?	WITHOUT_CLASSIFICATION	0.9998762933381505	WITHOUT_CLASSIFICATION	1.2370666184951113E-4	TEST
// the name of a class	WITHOUT_CLASSIFICATION	0.9999955557299228	WITHOUT_CLASSIFICATION	4.444270077206787E-6	TEST
// Its the listener class name	WITHOUT_CLASSIFICATION	0.9999978833127641	WITHOUT_CLASSIFICATION	2.116687235910171E-6	TEST
//allow 9,8,7,6,5,4,3,2,1	WITHOUT_CLASSIFICATION	0.999910092810854	WITHOUT_CLASSIFICATION	8.990718914608517E-5	TEST
// default to element set if no elements() specified	WITHOUT_CLASSIFICATION	0.9999990875588627	WITHOUT_CLASSIFICATION	9.124411371989987E-7	TEST
// look for the instance by uuid	WITHOUT_CLASSIFICATION	0.9999924006610891	WITHOUT_CLASSIFICATION	7.599338910980051E-6	TEST
// in case we were deserialized in a different JVM, look for an instance with the same name // (alternatively we could do an actual JNDI lookup here....)	WITHOUT_CLASSIFICATION	0.9999999137938306	WITHOUT_CLASSIFICATION	8.62061694384379E-8	TEST
// first, lets determine whether to apply cglib or javassist based instrumentation...	WITHOUT_CLASSIFICATION	0.9999997389904839	WITHOUT_CLASSIFICATION	2.610095160871225E-7	TEST
// Make sure we don't override previous set values	WITHOUT_CLASSIFICATION	0.9999991384576705	WITHOUT_CLASSIFICATION	8.615423295375959E-7	TEST
//entirely optional!!	WITHOUT_CLASSIFICATION	0.9999902509742482	WITHOUT_CLASSIFICATION	9.749025751723437E-6	TEST
// Its the listener instance (or better be)	WITHOUT_CLASSIFICATION	0.999962036295791	WITHOUT_CLASSIFICATION	3.796370420903214E-5	TEST
//context.unbind(boundName);	WITHOUT_CLASSIFICATION	0.9999831447060622	WITHOUT_CLASSIFICATION	1.6855293937775006E-5	TEST
//readResolveObject	WITHOUT_CLASSIFICATION	0.9999770952277965	WITHOUT_CLASSIFICATION	2.290477220349568E-5	TEST
//cfg.setProperty("hibernate.show_sql", "true");	WITHOUT_CLASSIFICATION	0.9999967029337531	WITHOUT_CLASSIFICATION	3.29706624691129E-6	TEST
// Defensive, convenience methods	WITHOUT_CLASSIFICATION	0.9999965783330904	WITHOUT_CLASSIFICATION	3.4216669096634097E-6	TEST
// Create the SessionFactory from hibernate.cfg.xml	WITHOUT_CLASSIFICATION	0.9999992994316257	WITHOUT_CLASSIFICATION	7.005683742666569E-7	TEST
// Make sure you log the exception, as it might be swallowed	WITHOUT_CLASSIFICATION	0.9999993107401686	WITHOUT_CLASSIFICATION	6.892598314203785E-7	TEST
// Begin unit of work	WITHOUT_CLASSIFICATION	0.9999947000289852	WITHOUT_CLASSIFICATION	5.299971014902769E-6	TEST
// Write HTML header	WITHOUT_CLASSIFICATION	0.9999912070616767	WITHOUT_CLASSIFICATION	8.79293832333016E-6	TEST
// Handle actions	WITHOUT_CLASSIFICATION	0.9999980201670786	WITHOUT_CLASSIFICATION	1.9798329213444527E-6	TEST
// Print page	WITHOUT_CLASSIFICATION	0.9999947469438354	WITHOUT_CLASSIFICATION	5.253056164565792E-6	TEST
// Write HTML footer	WITHOUT_CLASSIFICATION	0.9999543465854798	WITHOUT_CLASSIFICATION	4.565341452019178E-5	TEST
// End unit of work	WITHOUT_CLASSIFICATION	0.9999891255169053	WITHOUT_CLASSIFICATION	1.0874483094726795E-5	TEST
// Start the session to be used for this request	WITHOUT_CLASSIFICATION	0.9999917896347434	WITHOUT_CLASSIFICATION	8.210365256615715E-6	TEST
// make the session available to the session factory's "current context"	WITHOUT_CLASSIFICATION	0.9999998875735925	WITHOUT_CLASSIFICATION	1.1242640745826499E-7	TEST
// pass control along to the rest of the processing chain	WITHOUT_CLASSIFICATION	0.999998855265475	WITHOUT_CLASSIFICATION	1.1447345249047816E-6	TEST
// remove session from "current context"	WITHOUT_CLASSIFICATION	0.9999990187824689	WITHOUT_CLASSIFICATION	9.81217531075599E-7	TEST
// Eager fetch the collection so we can use it detached	WITHOUT_CLASSIFICATION	0.9999994001382653	WITHOUT_CLASSIFICATION	5.99861734789262E-7	TEST
// If we want to handle it bidirectional and detached, we also need to load this // collection with an eager outer-join fetch, this time with Criteria and not HQL:	WITHOUT_CLASSIFICATION	0.9999999738275117	WITHOUT_CLASSIFICATION	2.6172488270040404E-8	TEST
/*        Event anEvent = (Event) session                .createCriteria(Event.class).setFetchMode("participants", FetchMode.JOIN)                .add( Expression.eq("id", eventId) )                .uniqueResult(); // Eager fetch the colleciton so we can use it detached        */	WITHOUT_CLASSIFICATION	0.9999999986166938	WITHOUT_CLASSIFICATION	1.3833063401287427E-9	TEST
// End of first unit of work	WITHOUT_CLASSIFICATION	0.9999809687066773	WITHOUT_CLASSIFICATION	1.903129332275829E-5	TEST
// or bidirectional safety method, setting both sides: aPerson.addToEvent(anEvent);	WITHOUT_CLASSIFICATION	0.9999999032843381	WITHOUT_CLASSIFICATION	9.671566192945016E-8	TEST
// Begin second unit of work	WITHOUT_CLASSIFICATION	0.999998020753026	WITHOUT_CLASSIFICATION	1.979246974023934E-6	TEST
// Reattachment of aPerson	WITHOUT_CLASSIFICATION	0.9999985562841144	WITHOUT_CLASSIFICATION	1.4437158856474059E-6	TEST
// The getEmailAddresses() might trigger a lazy load of the collection	WITHOUT_CLASSIFICATION	0.9999997974947791	WITHOUT_CLASSIFICATION	2.0250522087652333E-7	TEST
// We need our tm, so get it now and avoid doing other work // if there is a problem	WITHOUT_CLASSIFICATION	0.9999987023222586	WITHOUT_CLASSIFICATION	1.2976777414402008E-6	TEST
// Don't hold the JBC node lock throughout the tx, as that // prevents reads and other updates	WITHOUT_CLASSIFICATION	0.9999998133253336	WITHOUT_CLASSIFICATION	1.8667466628041005E-7	TEST
// Don't hold the JBC node lock throughout the tx, as that // prevents reads and other updates	WITHOUT_CLASSIFICATION	0.9999998133253336	WITHOUT_CLASSIFICATION	1.8667466628041005E-7	TEST
// JBC put a version in the node when it created as part of // some internal operation. We are always newer, but if // the JBC version is > 1 something odd has happened	WITHOUT_CLASSIFICATION	0.9999999602278419	WITHOUT_CLASSIFICATION	3.977215824092554E-8	TEST
//swaldman 2006-08-28: define c3p0-style configuration parameters for properties with //                     hibernate-specific overrides to detect and warn about conflicting //                     declarations	WITHOUT_CLASSIFICATION	0.9999999513181127	WITHOUT_CLASSIFICATION	4.868188733892412E-8	TEST
// Not null if the Isolation level has been specified in the configuration file. // Otherwise, it is left to the Driver's default value.	WITHOUT_CLASSIFICATION	0.9999997242707461	WITHOUT_CLASSIFICATION	2.757292539317215E-7	TEST
// Configured outside of Hibernate (i.e. Servlet container, or Java Bean Container // already has Proxool pools running, and this provider is to just borrow one of these	WITHOUT_CLASSIFICATION	0.9999999751682328	WITHOUT_CLASSIFICATION	2.4831767263043493E-8	TEST
// If you're closing down the ConnectionProvider chances are an // is not a real big deal, just warn	WITHOUT_CLASSIFICATION	0.9999998619092635	WITHOUT_CLASSIFICATION	1.3809073641757105E-7	TEST
// (AS is always optional, for consistency with SQL/OQL)	WITHOUT_CLASSIFICATION	0.9999974526123849	WITHOUT_CLASSIFICATION	2.5473876150548535E-6	TEST
// process the "new" HQL style where aliases are assigned // _after_ the class name or path expression ie. using // the AS construction	WITHOUT_CLASSIFICATION	0.9999999653769135	WITHOUT_CLASSIFICATION	3.46230866117004E-8	TEST
// the loaded owner will be set to null after the collection is removed, // so capture its value as the affected owner so it is accessible to // both pre- and post- events	WITHOUT_CLASSIFICATION	0.9999998772035661	WITHOUT_CLASSIFICATION	1.2279643394295392E-7	TEST
// is a primitive type // invokespecial	WITHOUT_CLASSIFICATION	0.9999985957303402	WITHOUT_CLASSIFICATION	1.4042696598127923E-6	TEST
// array of primitive type // do nothing	WITHOUT_CLASSIFICATION	0.9999995092797433	WITHOUT_CLASSIFICATION	4.907202565777443E-7	TEST
// handle a path expression or class name that // appears at the start, in the "new" HQL // style or an alias that appears at the start // in the "old" HQL style	WITHOUT_CLASSIFICATION	0.9999999690945789	WITHOUT_CLASSIFICATION	3.0905421109376944E-8	TEST
//handle <=, >=, !=, is not, not between, not in	WITHOUT_CLASSIFICATION	0.9999293606987844	WITHOUT_CLASSIFICATION	7.0639301215655E-5	TEST
// The loop ensures atomicity of the // select + update even for no transaction // or read committed isolation level	WITHOUT_CLASSIFICATION	0.9999997062833235	WITHOUT_CLASSIFICATION	2.9371667646015014E-7	TEST
// transfer an explicitly defined entity name // handle the lazy attribute	WITHOUT_CLASSIFICATION	0.9999995452643515	WITHOUT_CLASSIFICATION	4.547356485384828E-7	TEST
//keep the behavior consistent even for boundary usages	WITHOUT_CLASSIFICATION	0.9999803379524	WITHOUT_CLASSIFICATION	1.9662047599914935E-5	TEST
//keep the behavior consistent even for boundary usages	WITHOUT_CLASSIFICATION	0.9999803379524	WITHOUT_CLASSIFICATION	1.9662047599914935E-5	TEST
// get meta's from // <joined-subclass>	WITHOUT_CLASSIFICATION	0.9999983893846359	WITHOUT_CLASSIFICATION	1.6106153640264828E-6	TEST
// parameters on the property mapping should // override parameters in the typedef	WITHOUT_CLASSIFICATION	0.9999993405431056	WITHOUT_CLASSIFICATION	6.594568943582946E-7	TEST
//fetch="join" overrides default laziness //fetch="join" overrides default laziness	WITHOUT_CLASSIFICATION	0.9999950307965941	WITHOUT_CLASSIFICATION	4.969203405948888E-6	TEST
//NOTE SPECIAL CASE: // default to join and non-lazy for the "second join" // of the many-to-many	WITHOUT_CLASSIFICATION	0.9999994454339212	WITHOUT_CLASSIFICATION	5.545660788072338E-7	TEST
// so we "clock over" on the first invocation	WITHOUT_CLASSIFICATION	0.9999978113656931	WITHOUT_CLASSIFICATION	2.188634306938966E-6	TEST
// state ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999785587694615	WITHOUT_CLASSIFICATION	2.1441230538539658E-5	TEST
//	WITHOUT_CLASSIFICATION	0.999864478982662	WITHOUT_CLASSIFICATION	1.3552101733804665E-4	TEST
//element //index -> id	WITHOUT_CLASSIFICATION	0.9999714995430707	WITHOUT_CLASSIFICATION	2.8500456929366487E-5	TEST
// note that it might be better to iterate the snapshot but this is safe, // assuming the user implements equals() properly, as required by the Set // contract!	WITHOUT_CLASSIFICATION	0.9999995846365322	WITHOUT_CLASSIFICATION	4.153634679259424E-7	TEST
// collections detect changes made via their public interface and mark // themselves as dirty as a performance optimization	WITHOUT_CLASSIFICATION	0.9999999336247702	WITHOUT_CLASSIFICATION	6.637522980903473E-8	TEST
// essentially, if the real session is closed allow any // method call to pass through since the real session // will complain by throwing an appropriate exception; // NOTE that allowing close() above has the same basic effect, //   but we capture that there simply to perform the unbind...	WITHOUT_CLASSIFICATION	0.9999999916503034	WITHOUT_CLASSIFICATION	8.349696653121583E-9	TEST
// The default SQLExceptionConverter for all dialects is based on SQLState // since SQLErrorCode is extremely vendor-specific.  Specific Dialects // may override to return whatever is most appropriate for that vendor.	WITHOUT_CLASSIFICATION	0.9999999777825647	WITHOUT_CLASSIFICATION	2.2217435285980517E-8	TEST
//only necessary for postgre < 7.4 //http://anoncvs.postgresql.org/cvsweb.cgi/pgsql/doc/src/sgml/ref/create_sequence.sgml	WITHOUT_CLASSIFICATION	0.9999980646615425	WITHOUT_CLASSIFICATION	1.93533845751264E-6	TEST
// select topic, syntax from information_schema.help // where section like 'Function%' order by section, topic // // see also ->  http://www.h2database.com/html/functions.html	WITHOUT_CLASSIFICATION	0.999999980319617	WITHOUT_CLASSIFICATION	1.9680383008223225E-8	TEST
// registerColumnType(Types.VARBINARY, "CHARACTER($l)"); // registerColumnType(Types.BLOB, "CHARACTER($l)" );  // For use prior to CP 11.0 // registerColumnType(Types.CLOB, "CHARACTER($l)" );	WITHOUT_CLASSIFICATION	0.9999995799148056	WITHOUT_CLASSIFICATION	4.200851943716252E-7	TEST
//the BLOB type requires a size arguement - this defaults to //bytes - no arg defaults to 1 whole byte! //other argument mods include K - kilobyte, M - megabyte, G - gigabyte. //refer to the PBdevelopers guide for more info.	WITHOUT_CLASSIFICATION	0.999999887191682	WITHOUT_CLASSIFICATION	1.128083181151078E-7	TEST
// We must return a valid RDMS/RSA command from this method to // prevent RDMS/RSA from issuing *ERROR 400	WITHOUT_CLASSIFICATION	0.9999999416258784	WITHOUT_CLASSIFICATION	5.837412174892485E-8	TEST
// Oracle driver reports to support getGeneratedKeys(), but they only // support the version taking an array of the names of the columns to // be returned (via its RETURNING clause).  No other driver seems to // support this overloaded version.	WITHOUT_CLASSIFICATION	0.9999999949469872	WITHOUT_CLASSIFICATION	5.053012815331389E-9	TEST
// add the comment // nest the main query in an outer select // add the rownnumber bit into the outer query select list	WITHOUT_CLASSIFICATION	0.9999997542738019	WITHOUT_CLASSIFICATION	2.4572619815230165E-7	TEST
//	WITHOUT_CLASSIFICATION	0.999864478982662	WITHOUT_CLASSIFICATION	1.3552101733804665E-4	TEST
// Note: For object <-> SQL datatype mappings see: //	WITHOUT_CLASSIFICATION	0.9999995164107442	WITHOUT_CLASSIFICATION	4.835892556444388E-7	TEST
// TRIM(end_keyword string-expression-1 FROM string-expression-2) // use Hibernate implementation "From" is one of the parameters they pass in position ?3 //registerFunction( "trim", new SQLFunctionTemplate(Hibernate.STRING, "trim(?1 ?2 from ?3)") );	WITHOUT_CLASSIFICATION	0.999999990250628	WITHOUT_CLASSIFICATION	9.749372022834286E-9	TEST
// Whether this dialect has an Identity clause added to the data type or a completely seperate identity // data type	WITHOUT_CLASSIFICATION	0.9999999047667955	WITHOUT_CLASSIFICATION	9.523320455720083E-8	TEST
// According to both the ANSI-SQL and JPA specs, trim takes a variable number of parameters between 1 and 4. // at least one paramer (trimSource) is required.  From the SQL spec: // // <trim function> ::= //      TRIM <left paren> <trim operands> <right paren> // // <trim operands> ::= //      [ [ <trim specification> ] [ <trim character> ] FROM ] <trim source> // // <trim specification> ::= //      LEADING //      | TRAILING //      | BOTH // // If <trim specification> is omitted, BOTH is assumed. // If <trim character> is omitted, space is assumed	WITHOUT_CLASSIFICATION	0.999999991240123	WITHOUT_CLASSIFICATION	8.759876971569896E-9	TEST
/////////////////////////////////////////////////////////////////////// // Prepare persisters and link them up with their cache // region/access-strategy	WITHOUT_CLASSIFICATION	0.9999997003611133	WITHOUT_CLASSIFICATION	2.9963888673528684E-7	TEST
//Named Queries:	WITHOUT_CLASSIFICATION	0.9999218511350149	WITHOUT_CLASSIFICATION	7.814886498517489E-5	TEST
// this will throw an error if there's something wrong.	WITHOUT_CLASSIFICATION	0.999999153403659	WITHOUT_CLASSIFICATION	8.46596341016504E-7	TEST
// does not handle arrays (thats ok, cos they can't be lazy) // or newly instantiated collections, so we can do the cast	WITHOUT_CLASSIFICATION	0.9999998033616564	WITHOUT_CLASSIFICATION	1.9663834358554892E-7	TEST
// collection deletions are a special case since update() can add // deletions of collections not loaded by the session.	WITHOUT_CLASSIFICATION	0.9999999353288724	WITHOUT_CLASSIFICATION	6.467112758374151E-8	TEST
// we can do the cast since orphan-delete does not apply to: // 1. newly instantiated collections // 2. arrays (we can't track orphans for detached arrays)	WITHOUT_CLASSIFICATION	0.9999998654277592	WITHOUT_CLASSIFICATION	1.3457224079552953E-7	TEST
// if the natural-id is marked as non-mutable, it is not retrieved during a // normal database-snapshot operation...	WITHOUT_CLASSIFICATION	0.9999999226275312	WITHOUT_CLASSIFICATION	7.737246868587943E-8	TEST
// watch out for a case where old is still referenced // somewhere in the object graph! (which is a user error)	WITHOUT_CLASSIFICATION	0.9999989229221385	WITHOUT_CLASSIFICATION	1.0770778613804943E-6	TEST
//slice, to get the columns for this component //property	WITHOUT_CLASSIFICATION	0.9999958104319432	WITHOUT_CLASSIFICATION	4.189568056817095E-6	TEST
//int result = 17; //result = 37 * result + type.hashCode(); //result = 37 * result + ( value==null ? 0 : value.hashCode() ); //return result;	WITHOUT_CLASSIFICATION	0.9999997217902264	WITHOUT_CLASSIFICATION	2.782097734991758E-7	TEST
// The CollectionEntry.isReached() stuff is just to detect any silly users   // who set up circular or shared references between/to collections.	WITHOUT_CLASSIFICATION	0.9999999389722747	WITHOUT_CLASSIFICATION	6.102772529236448E-8	TEST
// detached collection wrappers that get found + reattached // during flush shouldn't be ignored	WITHOUT_CLASSIFICATION	0.9999995629964298	WITHOUT_CLASSIFICATION	4.370035702770526E-7	TEST
// The unique property value represented here may or may not be // serializable, so we do an explicit check here in order to generate // a better error message	WITHOUT_CLASSIFICATION	0.999999907238325	WITHOUT_CLASSIFICATION	9.276167495621084E-8	TEST
// if the version of a newly instantiated object is not the same // as the version seed value, use that as the unsaved-value	WITHOUT_CLASSIFICATION	0.9999998656309913	WITHOUT_CLASSIFICATION	1.3436900862896464E-7	TEST
// ie. we never have to null out a reference to // an uninitialized proxy	WITHOUT_CLASSIFICATION	0.9999998701744973	WITHOUT_CLASSIFICATION	1.2982550266087219E-7	TEST
// ignore this row, the collection is in process of // being loaded somewhere further "up" the stack	WITHOUT_CLASSIFICATION	0.999999735510967	WITHOUT_CLASSIFICATION	2.644890330073692E-7	TEST
// Entity load contexts ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ // 	WITHOUT_CLASSIFICATION	0.9999981966140586	WITHOUT_CLASSIFICATION	1.8033859414671034E-6	TEST
// should be ok performance-wise to generate new delegate instances for each // request since these are locally stack-scoped.  Besides, it makes the code // much easier to read than the old TransactionHelper stuff...	WITHOUT_CLASSIFICATION	0.9999999729466981	WITHOUT_CLASSIFICATION	2.7053301997655516E-8	TEST
// this implementation is supposed to tolerate incorrect unsaved-value // mappings, for the purpose of backward-compatibility	WITHOUT_CLASSIFICATION	0.9999998169831634	WITHOUT_CLASSIFICATION	1.8301683656555897E-7	TEST
// this implementation is supposed to tolerate incorrect unsaved-value // mappings, for the purpose of backward-compatibility	WITHOUT_CLASSIFICATION	0.9999998169831634	WITHOUT_CLASSIFICATION	1.8301683656555897E-7	TEST
// wrap up any new collections directly referenced by the object // or its components	WITHOUT_CLASSIFICATION	0.9999997875821639	WITHOUT_CLASSIFICATION	2.1241783616413294E-7	TEST
// remove any snapshot, not really for memory management purposes, but // rather because it might now be stale, and there is no longer any  // EntityEntry to take precedence // This is now handled by removeEntity() //session.getPersistenceContext().removeDatabaseSnapshot(key);	WITHOUT_CLASSIFICATION	0.9999999868598841	WITHOUT_CLASSIFICATION	1.3140115918303223E-8	TEST
// skip this check for composite-ids relating to dom4j entity-mode; // alternatively, we could add a check to make sure the incoming id value is // an instance of Element...	WITHOUT_CLASSIFICATION	0.9999999937116189	WITHOUT_CLASSIFICATION	6.288381201775694E-9	TEST
// upgrade the lock if necessary: //lock(result, lockMode);	WITHOUT_CLASSIFICATION	0.9999996381613199	WITHOUT_CLASSIFICATION	3.618386801058091E-7	TEST
// now, any collections that are initialized // inside this block do not get updated - they // are ignored until the next flush	WITHOUT_CLASSIFICATION	0.9999999288028785	WITHOUT_CLASSIFICATION	7.119712155695231E-8	TEST
//we must clone embedded composite identifiers, or  //we will get back the same instance that we pass in	WITHOUT_CLASSIFICATION	0.9999989254149868	WITHOUT_CLASSIFICATION	1.0745850132527388E-6	TEST
// Sub-insertions should occur before containing insertion so // Try to do the callback now	WITHOUT_CLASSIFICATION	0.9999999011595736	WITHOUT_CLASSIFICATION	9.884042650460412E-8	TEST
//the entity is not associated with the session, so //try interceptor and unsaved-value	WITHOUT_CLASSIFICATION	0.9999987927590447	WITHOUT_CLASSIFICATION	1.2072409552338652E-6	TEST
//scan the query string for class names appearing in the from clause and replace //with all persistent implementors of the class/interface, returning multiple //query strings (make sure we don't pick up a class in the select clause!)	WITHOUT_CLASSIFICATION	0.999999970662698	WITHOUT_CLASSIFICATION	2.9337302101770182E-8	TEST
// save() operations ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999975718488721	WITHOUT_CLASSIFICATION	2.4281511279717596E-6	TEST
// evict() operations ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999980036727387	WITHOUT_CLASSIFICATION	1.996327261302465E-6	TEST
//stops flush being called multiple times if this method is recursively called	WITHOUT_CLASSIFICATION	0.9999918000462035	WITHOUT_CLASSIFICATION	8.199953796559176E-6	TEST
//if it is an uninitialized proxy, pointing //with this session, then when it is accessed, //the underlying instance will be "contained"	WITHOUT_CLASSIFICATION	0.9999994285967785	WITHOUT_CLASSIFICATION	5.714032214813955E-7	TEST
// Generate an explicit join for the root dot node.   The implied joins will be collected and passed up // to the root dot node.	WITHOUT_CLASSIFICATION	0.9999996099895095	WITHOUT_CLASSIFICATION	3.9001049041499195E-7	TEST
// A session is considered to contain an entity only if the entity has // an entry in the session's persistence context and the entry reports // that the entity has not been removed	WITHOUT_CLASSIFICATION	0.9999998467390042	WITHOUT_CLASSIFICATION	1.5326099574978948E-7	TEST
// Does the collection referenced by this FromElement // specify an order-by attribute?  If so, attach it to // the query's order-by	WITHOUT_CLASSIFICATION	0.9999999405656175	WITHOUT_CLASSIFICATION	5.943438243373074E-8	TEST
// ... and the token could be an identifer and the error is // a mismatched token error ...	WITHOUT_CLASSIFICATION	0.9999984462391687	WITHOUT_CLASSIFICATION	1.5537608314020537E-6	TEST
// If a where clause was specified in the update/delete query, use it to limit the // returned ids here...	WITHOUT_CLASSIFICATION	0.9999999360729837	WITHOUT_CLASSIFICATION	6.392701635882384E-8	TEST
//	WITHOUT_CLASSIFICATION	0.999864478982662	WITHOUT_CLASSIFICATION	1.3552101733804665E-4	TEST
// Default implementation: // If this node has a data type, and that data type is not an association, then this is scalar.	WITHOUT_CLASSIFICATION	0.9999999688272767	WITHOUT_CLASSIFICATION	3.1172723285189354E-8	TEST
// Resolve the LHS fully, generate implicit joins.  Pass in the property name so that the resolver can // discover foreign key (id) properties.	WITHOUT_CLASSIFICATION	0.9999999733416115	WITHOUT_CLASSIFICATION	2.6658388497339356E-8	TEST
// If the propertyType is null and there isn't a parent, just // stop now... there was a problem resolving the node anyway.	WITHOUT_CLASSIFICATION	0.9999999220197892	WITHOUT_CLASSIFICATION	7.798021081256164E-8	TEST
//We do not look for an existing join on the same path, because //it makes sense to join twice on the same collection role	WITHOUT_CLASSIFICATION	0.9999996216638707	WITHOUT_CLASSIFICATION	3.7833612925865154E-7	TEST
// our parent is another dot node, meaning we are being further dereferenced. // thus we need to generate a join unless the parent refers to the associated // entity's PK (because 'our' table would know the FK).	WITHOUT_CLASSIFICATION	0.9999999205641421	WITHOUT_CLASSIFICATION	7.943585794283776E-8	TEST
/*public final Currency getCurrency(int col) throws HibernateException {	WITHOUT_CLASSIFICATION	0.9999974105068578	WITHOUT_CLASSIFICATION	2.589493142345414E-6	TEST
// here, we have two possibilities: // 	WITHOUT_CLASSIFICATION	0.9999972853275292	WITHOUT_CLASSIFICATION	2.714672470880999E-6	TEST
// Set the unresolved path in this node and the parent. // Set the text for the parent.	WITHOUT_CLASSIFICATION	0.9999956188241556	WITHOUT_CLASSIFICATION	4.3811758444705545E-6	TEST
// Get the first child to be considered.  Sub-classes may do this differently in order to skip nodes that // are not select expressions (e.g. DISTINCT).	WITHOUT_CLASSIFICATION	0.9999999689068951	WITHOUT_CLASSIFICATION	3.109310485071111E-8	TEST
// If this is an entity and the property is the identifier property, then use getIdentifierType(). //      Note that the propertyName.equals( propertyPath ) checks whether we have a component //      key reference, where the component class property name is the same as the //      entity id property name; if the two are not equal, this is the case and //      we'd need to "fall through" to using the property mapping.	WITHOUT_CLASSIFICATION	0.9999999978486038	WITHOUT_CLASSIFICATION	2.151396194977001E-9	TEST
// for a subquery, the alias to use depends on a few things (we // already know this is not an overall SELECT): //      1) if this FROM_ELEMENT represents a correlation to the //          outer-most query //              A) if the outer query represents a multi-table //                  persister, we need to use the given alias //                  in anticipation of one of the multi-table //                  executors being used (as this subquery will //                  actually be used in the "id select" phase //                  of that multi-table executor) //              B) otherwise, we need to use the persister's //                  table name as the column qualification //      2) otherwise (not correlated), use the given alias	WITHOUT_CLASSIFICATION	0.9999999988413054	WITHOUT_CLASSIFICATION	1.1586945397617515E-9	TEST
// Not a collection? // Return the entity property mapping.	WITHOUT_CLASSIFICATION	0.9999997052668472	WITHOUT_CLASSIFICATION	2.947331526794284E-7	TEST
// collection of <many-to-any/> mappings... // used to circumvent the component-collection check below...	WITHOUT_CLASSIFICATION	0.9999999523365892	WITHOUT_CLASSIFICATION	4.766341079457678E-8	TEST
// Otherwise, the destination node was implied by the FROM clause and the FROM clause processor // will automatically add it in the right place.	WITHOUT_CLASSIFICATION	0.9999998687558926	WITHOUT_CLASSIFICATION	1.3124410730642552E-7	TEST
// If the first identifier in the path referrs to the class alias (not the class name), then this // is a correlated subselect.  If it's a correlated sub-select, use the existing table alias.  Otherwise // generate a new one.	WITHOUT_CLASSIFICATION	0.9999999904328496	WITHOUT_CLASSIFICATION	9.567150473841112E-9	TEST
// check to see if our "propPath" actually // represents a property on the persister	WITHOUT_CLASSIFICATION	0.9999997920550803	WITHOUT_CLASSIFICATION	2.079449198508077E-7	TEST
// An ident node can represent an index expression if the ident // represents a naked property ref //      *Note: this makes the assumption (which is currently the case //      in the hql-sql grammar) that the ident is first resolved //      itself (addrExpr -> resolve()).  The other option, if that //      changes, is to call resolve from here; but it is //      currently un-needed overhead.	WITHOUT_CLASSIFICATION	0.9999999990742171	WITHOUT_CLASSIFICATION	9.257830306704191E-10	TEST
// This uses a PathExpressionParser but notice that compound paths are not valid, // only bare names and simple paths:	WITHOUT_CLASSIFICATION	0.9999999714091219	WITHOUT_CLASSIFICATION	2.8590878043264678E-8	TEST
// If this is an implied join in a FROM clause, then use ANSI-style joining, and set the // flag on the FromElement that indicates that it was implied in the FROM clause itself.	WITHOUT_CLASSIFICATION	0.9999999133043087	WITHOUT_CLASSIFICATION	8.669569132755537E-8	TEST
//	WITHOUT_CLASSIFICATION	0.999864478982662	WITHOUT_CLASSIFICATION	1.3552101733804665E-4	TEST
// For an explicit many-to-many relationship, add a second join from the intermediate  // (many-to-many) table to the destination table.  Also, make sure that the from element's  // idea of the destination is the destination table.	WITHOUT_CLASSIFICATION	0.9999999883934747	WITHOUT_CLASSIFICATION	1.1606525384488924E-8	TEST
// Reset the node type, because the rest of the system is expecting FROM_FRAGMENT, all we wanted was // for the factory to create the right sub-class.  This might get reset again later on anyway to make the // SQL generation simpler.	WITHOUT_CLASSIFICATION	0.9999999920492577	WITHOUT_CLASSIFICATION	7.950742330503988E-9	TEST
//explicit = true;	WITHOUT_CLASSIFICATION	0.9999755266568879	WITHOUT_CLASSIFICATION	2.447334311205352E-5	TEST
//sqlResultTypeList.add( type ); // Generate the select expression.	WITHOUT_CLASSIFICATION	0.9999998137157805	WITHOUT_CLASSIFICATION	1.862842194745281E-7	TEST
// If the expression list has exactly one expression, and the type of the expression is a collection // then this might be a collection function, such as index(c) or size(c).	WITHOUT_CLASSIFICATION	0.9999999558527379	WITHOUT_CLASSIFICATION	4.4147262138693376E-8	TEST
// Need to parse off the column qualifiers; this is assuming (which is true as of now) // that this is only used from update and delete HQL statement parsing	WITHOUT_CLASSIFICATION	0.9999995228530888	WITHOUT_CLASSIFICATION	4.771469112335066E-7	TEST
// for regression testing against output from the old parser... // found it easiest to simply reorder the FromElements here into ascending order // in terms of injecting them into the resulting sql ast in orders relative to those // expected by the old parser; this is definitely another of those "only needed // for regression purposes".  The SyntheticAndFactory, then, simply injects them as it // encounters them.	WITHOUT_CLASSIFICATION	0.9999999596156633	WITHOUT_CLASSIFICATION	4.038433661305961E-8	TEST
// The uber-rule here is that we need to include  subclass joins if // the FromElement is in any way dereferenced by a property from // the subclass table; otherwise we end up with column references // qualified by a non-existent table reference in the resulting SQL...	WITHOUT_CLASSIFICATION	0.9999999937806143	WITHOUT_CLASSIFICATION	6.219385767208886E-9	TEST
// classic translator does not support collection of ordinal // param metadata	WITHOUT_CLASSIFICATION	0.9999999126750702	WITHOUT_CLASSIFICATION	8.732492985991536E-8	TEST
// The following variables are stacks that keep information about each subexpression // in the list of nested subexpressions we are currently processing.	WITHOUT_CLASSIFICATION	0.9999999456272098	WITHOUT_CLASSIFICATION	5.437279005855016E-8	TEST
// The loop ensures atomicity of the // select + update even for no transaction // or read committed isolation level	WITHOUT_CLASSIFICATION	0.9999997062833235	WITHOUT_CLASSIFICATION	2.9371667646015014E-7	TEST
// should not be able to reach last without maxPosition being set // unless there are no results	WITHOUT_CLASSIFICATION	0.9999999483692738	WITHOUT_CLASSIFICATION	5.1630726327134705E-8	TEST
// we found it in the temp PC.  Should indicate we are in the midst of processing a result set // containing eager fetches via join fetch	WITHOUT_CLASSIFICATION	0.9999999082816179	WITHOUT_CLASSIFICATION	9.171838213800876E-8	TEST
//do not use proxiesByKey, since not all //proxies that point to this session's //instances are in that collection!	WITHOUT_CLASSIFICATION	0.9999999101608807	WITHOUT_CLASSIFICATION	8.983911926968062E-8	TEST
// if there is no TM configured, we will not be able to access // the javax.transaction.Transaction object in order to // register a synch anyway.	WITHOUT_CLASSIFICATION	0.9999998513128142	WITHOUT_CLASSIFICATION	1.4868718571335407E-7	TEST
// Since the result set cursor is always left at the first // physical row after the "last processed", we need to jump // back one position to get the key value we are interested // in skipping	WITHOUT_CLASSIFICATION	0.999999780054096	WITHOUT_CLASSIFICATION	2.1994590404894463E-7	TEST
//true if this is a query and we are loading multiple instances of the same collection role //otherwise this is a CollectionInitializer and we are loading up a single collection or batch	WITHOUT_CLASSIFICATION	0.999999938750414	WITHOUT_CLASSIFICATION	6.124958594789365E-8	TEST
// we don't need to worry about existing version being uninitialized // because this block isn't called by a re-entrant load (re-entrant // loads _always_ have lock mode NONE)	WITHOUT_CLASSIFICATION	0.9999999757783562	WITHOUT_CLASSIFICATION	2.422164374704274E-8	TEST
// add temp entry so that the next step is circular-reference // safe - only needed because some types don't take proper // advantage of two-phase-load (esp. components)	WITHOUT_CLASSIFICATION	0.9999998909021726	WITHOUT_CLASSIFICATION	1.0909782732324728E-7	TEST
// assume we are in an auto-commit state	WITHOUT_CLASSIFICATION	0.9999993862867614	WITHOUT_CLASSIFICATION	6.137132385833136E-7	TEST
// log a message about potential connection leaks	WITHOUT_CLASSIFICATION	0.9999995905894532	WITHOUT_CLASSIFICATION	4.094105467575791E-7	TEST
//	WITHOUT_CLASSIFICATION	0.999864478982662	WITHOUT_CLASSIFICATION	1.3552101733804665E-4	TEST
// this has been shown to happen occasionally in rare cases // when using a transaction manager + transaction-timeout // where the timeout calls back through Hibernate's // registered transaction synchronization on a separate // "reaping" thread.  In cases where that reaping thread // executes through this block at the same time the main // application thread does we can get into situations where // these CMEs occur.  And though it is not "allowed" per-se, // the end result without handling it specifically is infinite // looping.  So here, we simply break the loop	WITHOUT_CLASSIFICATION	0.9999999994756903	WITHOUT_CLASSIFICATION	5.243097954755591E-10	TEST
// unfortunately this stuff can't be cached because // it is per-invocation, not constant for the // QueryTranslator instance	WITHOUT_CLASSIFICATION	0.999997420936289	WITHOUT_CLASSIFICATION	2.579063711015934E-6	TEST
// can't cache this stuff either (per-invocation) // we are given a map of user-alias -> lock mode // create a new map of sql-alias -> lock mode	WITHOUT_CLASSIFICATION	0.9999999884879113	WITHOUT_CLASSIFICATION	1.1512088767516355E-8	TEST
// don't create a unique key, 'cos some // databases don't like a UK on nullable // columns //getCollectionTable().createUniqueKey( getIdentifier().getConstraintColumns() );	WITHOUT_CLASSIFICATION	0.9999999954878747	WITHOUT_CLASSIFICATION	4.512125320294596E-9	TEST
// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ // stuff that is persister-centric and/or EntityInfo-centric ~~~~~~~~~~~~~~ // ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999980826492366	WITHOUT_CLASSIFICATION	1.917350763421192E-6	TEST
//isSet = collection.isSet(); //isSorted = collection.isSorted();	WITHOUT_CLASSIFICATION	0.9999866448244358	WITHOUT_CLASSIFICATION	1.3355175564293077E-5	TEST
//lists, arrays //sets, maps, bags	WITHOUT_CLASSIFICATION	0.9999846266115716	WITHOUT_CLASSIFICATION	1.5373388428445773E-5	TEST
// we finish all the "removes" first to take care of possible unique // constraints and so that we can take better advantage of batching	WITHOUT_CLASSIFICATION	0.9999996278391833	WITHOUT_CLASSIFICATION	3.7216081666342285E-7	TEST
//use a combination of foreign key columns and pk columns, since //the ordering of removal and addition is not guaranteed when //a child moves from one parent to another	WITHOUT_CLASSIFICATION	0.9999998531753889	WITHOUT_CLASSIFICATION	1.4682461117962793E-7	TEST
// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ // stuff that is persister-centric and/or EntityInfo-centric ~~~~~~~~~~~~~~ // ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999980826492366	WITHOUT_CLASSIFICATION	1.917350763421192E-6	TEST
//information about properties of this class, //including inherited properties //(only really needed for updatable/insertable properties)	WITHOUT_CLASSIFICATION	0.9999996585768026	WITHOUT_CLASSIFICATION	3.414231974055691E-7	TEST
// all this only really needs to consider properties // of this class, not its subclasses, but since we // are reusing code used for sequential selects, we // use the subclass closure	WITHOUT_CLASSIFICATION	0.9999999634766827	WITHOUT_CLASSIFICATION	3.652331720077335E-8	TEST
// Here we render the select column list based on the properties defined as being generated. // For partial component generation, we currently just re-select the whole component // rather than trying to handle the individual generated portions.	WITHOUT_CLASSIFICATION	0.9999999878595989	WITHOUT_CLASSIFICATION	1.214040115403509E-8	TEST
// this is the root (versioned) table, and we are using version-based // optimistic locking;  if we are not updating the version, also don't // check it (unless this is a "generated" version column)!	WITHOUT_CLASSIFICATION	0.9999999839714925	WITHOUT_CLASSIFICATION	1.60285074373227E-8	TEST
//optimistic-lock="all", include all updatable properties //optimistic-lock="dirty", include all properties we are updating this time	WITHOUT_CLASSIFICATION	0.9999997484334568	WITHOUT_CLASSIFICATION	2.515665431895129E-7	TEST
// this property belongs to the table, and it is not specifically // excluded from optimistic locking by optimistic-lock="false"	WITHOUT_CLASSIFICATION	0.9999997892650749	WITHOUT_CLASSIFICATION	2.107349249723532E-7	TEST
// check to see if the connection is in auto-commit  // mode (no connection means aggressive connection // release outside a JTA transaction context, so MUST // be autocommit mode)	WITHOUT_CLASSIFICATION	0.9999999892286593	WITHOUT_CLASSIFICATION	1.0771340728171066E-8	TEST
// need to treat this as if it where optimistic-lock="all" (dirty does *not* make sense); // first we need to locate the "loaded" state // // Note, it potentially could be a proxy, so perform the location the safe way...	WITHOUT_CLASSIFICATION	0.9999999824386713	WITHOUT_CLASSIFICATION	1.756132861776103E-8	TEST
// we *always* assume an instance with a null // identifier or no identifier property is unsaved!	WITHOUT_CLASSIFICATION	0.9999999312729364	WITHOUT_CLASSIFICATION	6.87270636501509E-8	TEST
// Need to use the identifier type of the collection owner // since the incoming is value is actually the owner's id. // Using the collection's key type causes problems with // property-ref keys...	WITHOUT_CLASSIFICATION	0.9999998229932656	WITHOUT_CLASSIFICATION	1.7700673442533104E-7	TEST
//allow any identifier quoted with backtick //only recognizes identifiers beginning with a letter	WITHOUT_CLASSIFICATION	0.9999907797387935	WITHOUT_CLASSIFICATION	9.22026120655384E-6	TEST
//following doesn't handle (null, not null) but unnecessary //since this would mean all rows	WITHOUT_CLASSIFICATION	0.9999988344145658	WITHOUT_CLASSIFICATION	1.165585434143935E-6	TEST
// IMPL NOTE : due to the delayed population of setters (setters cached // 	WITHOUT_CLASSIFICATION	0.9999961867562663	WITHOUT_CLASSIFICATION	3.813243733674441E-6	TEST
// we need to dirty check collections, since they can cause an owner // version number increment	WITHOUT_CLASSIFICATION	0.9999999720606094	WITHOUT_CLASSIFICATION	2.7939390573953954E-8	TEST
//return the id, so we can use it to reset the proxy id //return result;	WITHOUT_CLASSIFICATION	0.9999980914167327	WITHOUT_CLASSIFICATION	1.9085832674303743E-6	TEST
//	WITHOUT_CLASSIFICATION	0.999864478982662	WITHOUT_CLASSIFICATION	1.3552101733804665E-4	TEST
// cache the actual id of the object, not the value of the // property-ref, which might not be initialized	WITHOUT_CLASSIFICATION	0.999999768996959	WITHOUT_CLASSIFICATION	2.310030409483745E-7	TEST
// We now have the value of the property-ref we reference.  However, // we need to dig a little deeper, as that property might also be // an entity type, in which case we need to resolve its identitifier	WITHOUT_CLASSIFICATION	0.9999999752545321	WITHOUT_CLASSIFICATION	2.4745467922286052E-8	TEST
// Retrieve the value of the designated column in the current row of this // ResultSet object as a java.io.Reader object	WITHOUT_CLASSIFICATION	0.9999999257486873	WITHOUT_CLASSIFICATION	7.425131268240058E-8	TEST
//not absolutely necessary, but helps for some //equals()/hashCode() implementations	WITHOUT_CLASSIFICATION	0.9999989011782382	WITHOUT_CLASSIFICATION	1.0988217617940667E-6	TEST
//this should be a call to resolve(), not resolveIdentifier(),  //'cos it might be a property-ref, and we did not cache the //referenced value	WITHOUT_CLASSIFICATION	0.9999996144120763	WITHOUT_CLASSIFICATION	3.8558792376333935E-7	TEST
// If we have <tt>not-found="ignore"</tt> association mapped to a // formula, we always need to dirty check it, so we can update the // second-level cache	WITHOUT_CLASSIFICATION	0.9999999778139317	WITHOUT_CLASSIFICATION	2.218606830183359E-8	TEST
// can't just return null here, since that would // cause an owning component to become null	WITHOUT_CLASSIFICATION	0.999999959826279	WITHOUT_CLASSIFICATION	4.017372092206739E-8	TEST
//for arrays, replaceElements() may return a different reference, since //the array length might not match	WITHOUT_CLASSIFICATION	0.9999996415806486	WITHOUT_CLASSIFICATION	3.58419351524868E-7	TEST
// actual cache of the entries.  soft references are used for both the keys and the // values here since the values pertaining to the MRU entries are kept in a // seperate hard reference cache (to avoid their enqueuement/garbage-collection).	WITHOUT_CLASSIFICATION	0.9999999976124778	WITHOUT_CLASSIFICATION	2.3875221216887504E-9	TEST
// as soon as we encounter our first letter, return the substring // from that position	WITHOUT_CLASSIFICATION	0.9999994204661229	WITHOUT_CLASSIFICATION	5.795338771831752E-7	TEST
// Note : expected in the syntax: //      type=listenerClass //          ({sep}type=listenerClass)* // where {sep} is any whitespace or comma	WITHOUT_CLASSIFICATION	0.9999995773218117	WITHOUT_CLASSIFICATION	4.2267818836935106E-7	TEST
// isTransactionCallbackRegistered denotes whether any Hibernate // Transaction has registered as a callback against this // JDBCContext; only one such callback is allowed.  Directly // serializing this value causes problems with JDBCTransaction, // or really any Transaction impl where the callback is local // to the Transaction instance itself, since that Transaction // is not serialized along with the JDBCContext.  Thus we // handle that fact here explicitly...	WITHOUT_CLASSIFICATION	0.999999999200194	WITHOUT_CLASSIFICATION	7.998060382080391E-10	TEST
// note that for sequential scrolling, we make the assumption that // the first persister element is the "root entity"	WITHOUT_CLASSIFICATION	0.999998982043333	WITHOUT_CLASSIFICATION	1.0179566668950718E-6	TEST
// We call getKeyFromResultSet() here so that we can know the // key value upon which to perform the breaking logic.  However, // it is also then called from getRowFromResultSet() which is certainly // not the most efficient.  But the call here is needed, and there // currently is no other way without refactoring of the doQuery()/getRowFromResultSet() // methods	WITHOUT_CLASSIFICATION	0.9999999963120245	WITHOUT_CLASSIFICATION	3.6879754602661155E-9	TEST
// This check is needed since processing leaves the cursor // after the last physical row for the current logical row; // thus if we are after the last physical row, this might be // caused by either: //      1) scrolling to the last logical row //      2) scrolling past the last logical row // In the latter scenario, the previous logical row // really is the last logical row. // // In all other cases, we should process back two // logical records (the current logic row, plus the // previous logical row).	WITHOUT_CLASSIFICATION	0.999999933872574	WITHOUT_CLASSIFICATION	6.612742599611276E-8	TEST
// and perform the load	WITHOUT_CLASSIFICATION	0.9999909676313136	WITHOUT_CLASSIFICATION	9.032368686396367E-6	TEST
//important: reuse the same event instances for performance!	WITHOUT_CLASSIFICATION	0.9999939652133366	WITHOUT_CLASSIFICATION	6.034786663297598E-6	TEST
//this is a query and we are loading multiple instances of the same collection role	WITHOUT_CLASSIFICATION	0.9999997438285531	WITHOUT_CLASSIFICATION	2.561714469403934E-7	TEST
// we found a collection element in the result set	WITHOUT_CLASSIFICATION	0.99999963137864	WITHOUT_CLASSIFICATION	3.6862136000347017E-7	TEST
// we did not find a collection element in the result set, so we // ensure that a collection is created with the owner's identifier, // since what we have is an empty collection	WITHOUT_CLASSIFICATION	0.9999998835600463	WITHOUT_CLASSIFICATION	1.1643995371107336E-7	TEST
// this is a collection initializer, so we must create a collection // for each of the passed-in keys, to account for the possibility // that the collection is empty and has no rows in the result set	WITHOUT_CLASSIFICATION	0.999999881916161	WITHOUT_CLASSIFICATION	1.1808383906601996E-7	TEST
// grab its state from the ResultSet and keep it in the Session // (but don't yet initialize the object itself) // note that we acquire LockMode.READ even if it was not requested	WITHOUT_CLASSIFICATION	0.9999999564399208	WITHOUT_CLASSIFICATION	4.356007912958969E-8	TEST
// a many-to-many; // decrement currentDepth here to allow join across the association table // without exceeding MAX_FETCH_DEPTH (i.e. the "currentDepth - 1" bit)	WITHOUT_CLASSIFICATION	0.9999999972994333	WITHOUT_CLASSIFICATION	2.7005666680015463E-9	TEST
// if not a composite key, use "foo in (?, ?, ?)" for batching // if no batch, and not a composite key, use "foo = ?"	WITHOUT_CLASSIFICATION	0.9999997460858536	WITHOUT_CLASSIFICATION	2.5391414640111873E-7	TEST
//the user visible aliases, which are unknown to the superclass, //these are not the actual "physical" SQL aliases	WITHOUT_CLASSIFICATION	0.9999996732411613	WITHOUT_CLASSIFICATION	3.267588386441471E-7	TEST
//first look for a reference to a projection alias	WITHOUT_CLASSIFICATION	0.9999935056782115	WITHOUT_CLASSIFICATION	6.494321788433094E-6	TEST
//first look for a reference to a projection alias	WITHOUT_CLASSIFICATION	0.9999935056782115	WITHOUT_CLASSIFICATION	6.494321788433094E-6	TEST
//it does not refer to an alias of a projection, //look for a property	WITHOUT_CLASSIFICATION	0.9999966739887991	WITHOUT_CLASSIFICATION	3.3260112008426677E-6	TEST
// determine if the collection elements are entities...	WITHOUT_CLASSIFICATION	0.9999997610548932	WITHOUT_CLASSIFICATION	2.389451067111312E-7	TEST
// Let return-propertys override whatever the persister has for aliases.	WITHOUT_CLASSIFICATION	0.9999946292298344	WITHOUT_CLASSIFICATION	5.370770165499945E-6	TEST
/**	WITHOUT_CLASSIFICATION	0.9998127295896668	WITHOUT_CLASSIFICATION	1.8727041033325122E-4	TEST
// ignore	WITHOUT_CLASSIFICATION	0.9999944894313505	WITHOUT_CLASSIFICATION	5.5105686496089476E-6	TEST
// ignore	WITHOUT_CLASSIFICATION	0.9999944894313505	WITHOUT_CLASSIFICATION	5.5105686496089476E-6	TEST
//        }	WITHOUT_CLASSIFICATION	0.999933478409358	WITHOUT_CLASSIFICATION	6.652159064202929E-5	TEST
//	WITHOUT_CLASSIFICATION	0.999864478982662	WITHOUT_CLASSIFICATION	1.3552101733804665E-4	TEST
//	WITHOUT_CLASSIFICATION	0.999864478982662	WITHOUT_CLASSIFICATION	1.3552101733804665E-4	TEST
//include the discriminator and class-level where, but not filters	WITHOUT_CLASSIFICATION	0.9999919248374035	WITHOUT_CLASSIFICATION	8.07516259649551E-6	TEST
//	WITHOUT_CLASSIFICATION	0.999864478982662	WITHOUT_CLASSIFICATION	1.3552101733804665E-4	TEST
//NONE, because its the requested lock mode, not the actual! 	WITHOUT_CLASSIFICATION	0.9999706492691744	WITHOUT_CLASSIFICATION	2.9350730825441822E-5	TEST
// at this point we have (drivingSqlAlias) the SQL alias of the driving table // corresponding to the given user alias.  However, the driving table is not // (necessarily) the table against which we want to apply locks.  Mainly, // the exception case here is joined-subclass hierarchies where we instead // want to apply the lock against the root table (for all other strategies, // it just happens that driving and root are the same).	WITHOUT_CLASSIFICATION	0.9999999997593307	WITHOUT_CLASSIFICATION	2.4066920791872445E-10	TEST
// the column doesnt exist at all.	WITHOUT_CLASSIFICATION	0.9999976605473891	WITHOUT_CLASSIFICATION	2.3394526107616906E-6	TEST
// we have a mapped identifier property and the root of // the incoming property path matched that identifier // property	WITHOUT_CLASSIFICATION	0.9999988727152272	WITHOUT_CLASSIFICATION	1.1272847726914692E-6	TEST
// we have an embedded composite identifier	WITHOUT_CLASSIFICATION	0.9999979669199829	WITHOUT_CLASSIFICATION	2.0330800170298747E-6	TEST
// both many-to-one and one-to-one are represented as a // Property.  EntityPersister is relying on this value to // determine "lazy fetch groups" in terms of field-level // interception.  So we need to make sure that we return // true here for the case of many-to-one and one-to-one // with lazy="no-proxy" // // * impl note - lazy="no-proxy" currently forces both // lazy and unwrap to be set to true.  The other case we // are extremely interested in here is that of lazy="proxy" // where lazy is set to true, but unwrap is set to false. // thus we use both here under the assumption that this // return is really only ever used during persister // construction to determine the lazy property/field fetch // groupings.  If that assertion changes then this check // needs to change as well.  Partially, this is an issue with // the overloading of the term "lazy" here...	WITHOUT_CLASSIFICATION	0.9999999994800405	WITHOUT_CLASSIFICATION	5.19959530025784E-10	TEST
// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ // stuff that is tuplizer-centric, but is passed a session ~~~~~~~~~~~~~~~~ // ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999986218853402	WITHOUT_CLASSIFICATION	1.3781146598825796E-6	TEST
// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ // stuff that is tuplizer-centric, but is passed a session ~~~~~~~~~~~~~~~~ // ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999986218853402	WITHOUT_CLASSIFICATION	1.3781146598825796E-6	TEST
/*rootTableName = persistentClass.getRootTable().getQualifiedName( 	WITHOUT_CLASSIFICATION	0.9999915145867189	WITHOUT_CLASSIFICATION	8.485413281147207E-6	TEST
// SUBCLASSES	WITHOUT_CLASSIFICATION	0.9999659191856964	WITHOUT_CLASSIFICATION	3.4080814303453855E-5	TEST
// Custom sql	WITHOUT_CLASSIFICATION	0.999986958629372	WITHOUT_CLASSIFICATION	1.3041370627927623E-5	TEST
/*protected void initPropertyPaths(	WITHOUT_CLASSIFICATION	0.9999794249430423	WITHOUT_CLASSIFICATION	2.0575056957808657E-5	TEST
// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9998798941819308	WITHOUT_CLASSIFICATION	1.201058180691695E-4	TEST
//Custom SQL (would be better if these were private)	WITHOUT_CLASSIFICATION	0.9997807326522544	WITHOUT_CLASSIFICATION	2.1926734774555307E-4	TEST
// moved up from AbstractEntityPersister ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999943611846196	WITHOUT_CLASSIFICATION	5.638815380355268E-6	TEST
// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9998798941819308	WITHOUT_CLASSIFICATION	1.201058180691695E-4	TEST
// aliases for identifier ( alias.id ); skip if the entity defines a non-id property named 'id'	WITHOUT_CLASSIFICATION	0.9999989981497339	WITHOUT_CLASSIFICATION	1.0018502660089109E-6	TEST
//decide which ResultSet to get the property value from:	WITHOUT_CLASSIFICATION	0.9999966221619929	WITHOUT_CLASSIFICATION	3.377838007162765E-6	TEST
//note: it is conceptually possible that a UserType could map null to //	WITHOUT_CLASSIFICATION	0.9999996978957829	WITHOUT_CLASSIFICATION	3.021042170105445E-7	TEST
// the contract of EntityTuplizer.determineConcreteSubclassEntityName says that returning null // is an indication that the specified entity-name (this.getEntityName) should be used.	WITHOUT_CLASSIFICATION	0.9999999380191338	WITHOUT_CLASSIFICATION	6.19808662124549E-8	TEST
// Need to use the identifier type of the collection owner // since the incoming is value is actually the owner's id. // Using the collection's key type causes problems with // property-ref keys...	WITHOUT_CLASSIFICATION	0.9999998229932656	WITHOUT_CLASSIFICATION	1.7700673442533104E-7	TEST
// cache these since they are stateless // this one could even be static...	WITHOUT_CLASSIFICATION	0.9999997131248036	WITHOUT_CLASSIFICATION	2.8687519630267926E-7	TEST
//"as" is not in KEYWORDS	WITHOUT_CLASSIFICATION	0.9999395140942997	WITHOUT_CLASSIFICATION	6.0485905700405523E-5	TEST
// --Commented out by Inspection (12/4/04 9:10 AM): public abstract void addCondition(String alias, String[] columns, String condition);	WITHOUT_CLASSIFICATION	0.9999999735687307	WITHOUT_CLASSIFICATION	2.643126935305482E-8	TEST
//use the id column alias	WITHOUT_CLASSIFICATION	0.9999926886335607	WITHOUT_CLASSIFICATION	7.311366439254892E-6	TEST
//private List aliases = new ArrayList();	WITHOUT_CLASSIFICATION	0.9999948644540629	WITHOUT_CLASSIFICATION	5.135545937074884E-6	TEST
//columns.add(columnName); //aliases.add(tableAlias);	WITHOUT_CLASSIFICATION	0.9999970813281138	WITHOUT_CLASSIFICATION	2.9186718861107394E-6	TEST
//where fragment must be empty!	WITHOUT_CLASSIFICATION	0.9999835549984443	WITHOUT_CLASSIFICATION	1.64450015557804E-5	TEST
// revert to traditional hibernate behavior of setting initialPoolSize to minPoolSize // unless otherwise specified with a c3p0.*-style parameter.	WITHOUT_CLASSIFICATION	0.9999999693762084	WITHOUT_CLASSIFICATION	3.0623791680366244E-8	TEST
//arbitrary on clause ignored!!	WITHOUT_CLASSIFICATION	0.9999969337972084	WITHOUT_CLASSIFICATION	3.0662027915802273E-6	TEST
// might happen with a managed connection	WITHOUT_CLASSIFICATION	0.9999988861718242	WITHOUT_CLASSIFICATION	1.113828175794338E-6	TEST
// might happen with a managed connection	WITHOUT_CLASSIFICATION	0.9999988861718242	WITHOUT_CLASSIFICATION	1.113828175794338E-6	TEST
//if an exception occurs during flush, user must call rollback()	WITHOUT_CLASSIFICATION	0.9999995875057481	WITHOUT_CLASSIFICATION	4.124942518900305E-7	TEST
// Essentially: // 1) If we have a local (Hibernate) transaction in progress //      and it already has the UserTransaction cached, use that //      UserTransaction to determine the status. // 2) If a transaction manager has been located, use //      that transaction manager to determine the status. // 3) Finally, as the last resort, try to lookup the //      UserTransaction via JNDI and use that to determine the //      status.	WITHOUT_CLASSIFICATION	0.999999994625383	WITHOUT_CLASSIFICATION	5.3746170716769285E-9	TEST
/*package*/	WITHOUT_CLASSIFICATION	0.9999419796562319	WITHOUT_CLASSIFICATION	5.8020343768033676E-5	TEST
//swallow it (the transaction _was_ successful or successfully rolled back)	WITHOUT_CLASSIFICATION	0.9999947866059143	WITHOUT_CLASSIFICATION	5.21339408560408E-6	TEST
// ignore it	WITHOUT_CLASSIFICATION	0.9999932979081121	WITHOUT_CLASSIFICATION	6.702091887869724E-6	TEST
// we need to dirty check many-to-ones with not-found="ignore" in order  // to update the cache (not the database), since in this case a null // entity reference can lose information	WITHOUT_CLASSIFICATION	0.9999999940840891	WITHOUT_CLASSIFICATION	5.915910930364242E-9	TEST
// create our own copy of the user-supplied tuplizer impl map	WITHOUT_CLASSIFICATION	0.9999989391644026	WITHOUT_CLASSIFICATION	1.0608355973416274E-6	TEST
// Regions can get instantiated in the course of normal work (e.g. // a named query region will be created the first time the query is // executed), so suspend any ongoing tx	WITHOUT_CLASSIFICATION	0.9999999874100706	WITHOUT_CLASSIFICATION	1.2589929434164526E-8	TEST
// then handle any user-defined entity modes...	WITHOUT_CLASSIFICATION	0.999999065009331	WITHOUT_CLASSIFICATION	9.349906690069596E-7	TEST
// Establish the region root node with a non-locking data version	WITHOUT_CLASSIFICATION	0.9999997968200854	WITHOUT_CLASSIFICATION	2.031799146846879E-7	TEST
// temporary ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999786714222578	WITHOUT_CLASSIFICATION	2.1328577742188857E-5	TEST
// NOTE : this is being used from the process of shutting down a // SessionFactory. Specific things to consider: // (1) this clearing of the region should not propagate to // other nodes on the cluster (if any); this is the // cache-mode-local option bit... // (2) really just trying a best effort to cleanup after // ourselves; lock failures, etc are not critical here; // this is the fail-silently option bit...	WITHOUT_CLASSIFICATION	0.9999999696872417	WITHOUT_CLASSIFICATION	3.031275822606528E-8	TEST
// need to extract the component values and check for subtype replacements...	WITHOUT_CLASSIFICATION	0.9999998371681732	WITHOUT_CLASSIFICATION	1.6283182666890024E-7	TEST
// We ignore minimalPutOverride. JBossCache putForExternalRead is // already about as minimal as we can get; it will promptly return // if it discovers that the node we want to write to already exists	WITHOUT_CLASSIFICATION	0.9999999813211353	WITHOUT_CLASSIFICATION	1.86788646402883E-8	TEST
// for now, just "re-flatten" the metamodel since this is temporary stuff anyway (HHH-1907)	WITHOUT_CLASSIFICATION	0.9999989221490911	WITHOUT_CLASSIFICATION	1.077850908968219E-6	TEST
// Configure the cache to use our TM	WITHOUT_CLASSIFICATION	0.9999989387601482	WITHOUT_CLASSIFICATION	1.0612398517299539E-6	TEST
//This solution would allow us to eliminate the owner arg to disassemble(), but //what if the collection was null, and then later had elements added? seems unsafe //session.getPersistenceContext().getCollectionEntry( (PersistentCollection) value ).getKey();	WITHOUT_CLASSIFICATION	0.9999999890395688	WITHOUT_CLASSIFICATION	1.0960431272651247E-8	TEST
// Make sure JBC doesn't look one up	WITHOUT_CLASSIFICATION	0.9999981207362136	WITHOUT_CLASSIFICATION	1.8792637863113787E-6	TEST
// some collections are not lazy:	WITHOUT_CLASSIFICATION	0.9999995983987962	WITHOUT_CLASSIFICATION	4.0160120389361025E-7	TEST
// Here we don't want to suspend the tx. If we do: // 1) We might be caching query results that reflect uncommitted // changes. No tx == no WL on cache node, so other threads // can prematurely see those query results // 2) No tx == immediate replication. More overhead, plus we // spread issue #1 above around the cluster	WITHOUT_CLASSIFICATION	0.9999999865709935	WITHOUT_CLASSIFICATION	1.3429006396935442E-8	TEST
// return the (fully resolved) identifier value, but do not resolve // to the actual referenced entity instance // NOTE: the owner of the association is not really the owner of the id!	WITHOUT_CLASSIFICATION	0.9999994027726906	WITHOUT_CLASSIFICATION	5.972273094576934E-7	TEST
// Add a zero (or quite low) timeout option so we don't block. // Ignore any TimeoutException. Basically we forego caching the // query result in order to avoid blocking. // Reads are done with suspended tx, so they should not hold the // lock for long.  Not caching the query result is OK, since // any subsequent read will just see the old result with its // out-of-date timestamp; that result will be discarded and the // db query performed again.	WITHOUT_CLASSIFICATION	0.9999999979743158	WITHOUT_CLASSIFICATION	2.0256842184143714E-9	TEST
// Impl note: takes advantage of the fact that an escpaed single quote // embedded within a quote-block can really be handled as two seperate // quote-blocks for the purposes of this method...	WITHOUT_CLASSIFICATION	0.9999999747378019	WITHOUT_CLASSIFICATION	2.5262198108950372E-8	TEST
// We have the JBCWriteMutex, so no other *local* thread will  // be trying to write this key.  // It's possible here some remote thread has come in and // changed the values again, but since we are reading the // values to write to JBC right now, we know we are writing // the latest values; i.e. we don't assume that what we cached // in entry.update() above is what we should write to JBC *now*. // Our write could be redundant, i.e. we are writing what // some remote thread just came in an wrote.  There is a chance  // that yet another remote thread will update us, and we'll then // overwrite that later data in JBC.  But, all remote nodes will // ignore that change in their localCache; the only place it  // will live will be in JBC, where it can only effect the  // initial state transfer values on newly joined nodes  // (i.e. populateLocalCache()).	WITHOUT_CLASSIFICATION	0.9999999999050994	WITHOUT_CLASSIFICATION	9.490070083326657E-11	TEST
// local cache, so we use synchronization	WITHOUT_CLASSIFICATION	0.999999594647436	WITHOUT_CLASSIFICATION	4.0535256391372286E-7	TEST
// local cache, so we use synchronization	WITHOUT_CLASSIFICATION	0.999999594647436	WITHOUT_CLASSIFICATION	4.0535256391372286E-7	TEST
// Don't need to lock the cache here, since if someone // else inserted the same pk first, the insert would fail	WITHOUT_CLASSIFICATION	0.9999991172122376	WITHOUT_CLASSIFICATION	8.827877623597361E-7	TEST
// we need to grab the version value from the entity, otherwise // we have issues with generated-version entities that may have // multiple actions queued during the same flush	WITHOUT_CLASSIFICATION	0.9999999690920724	WITHOUT_CLASSIFICATION	3.0907927528165675E-8	TEST
// we need to obtain the lock before any actions are // executed, since this may be an inverse="true" // bidirectional association and it is one of the // earlier entity actions which actually updates // the database (this action is resposible for // second-level cache invalidation only)	WITHOUT_CLASSIFICATION	0.9999999904650496	WITHOUT_CLASSIFICATION	9.534950325888331E-9	TEST
//postDelete: // After actually deleting a row, record the fact that the instance no longer  // exists on the database (needed for identity-column key generation), and // remove it from the session cache	WITHOUT_CLASSIFICATION	0.9999999891958334	WITHOUT_CLASSIFICATION	1.0804166674774079E-8	TEST
// intentionally empty	WITHOUT_CLASSIFICATION	0.9999981422016773	WITHOUT_CLASSIFICATION	1.857798322720901E-6	TEST
