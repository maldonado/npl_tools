comment,Sultan,Everton,Decided// we don't expect to find this,DESIGN,WITHOUT_CLASSIFICATION,// tell the build it is finished,DESIGN,WITHOUT_CLASSIFICATION,// keep track of what operating systems are supported here.,IMPLEMENTATION,WITHOUT_CLASSIFICATION,// father and child pattern test,TEST,WITHOUT_CLASSIFICATION,"// redo the test, but the 2 include patterns are inverted",TEST,WITHOUT_CLASSIFICATION,// add conditions and more commands as soon as the need arises,IMPLEMENTATION,WITHOUT_CLASSIFICATION,// give ourselves some time for the system call // to execute... tweak if you have a really over // loaded system.,IMPLEMENTATION,WITHOUT_CLASSIFICATION,"// followLinks should be true by default, but if this ever // changes we will need this line.",DESIGN,WITHOUT_CLASSIFICATION,//testing drive letter search from root:,TEST,WITHOUT_CLASSIFICATION,//if this is our context we assume there must be something here:,DESIGN,WITHOUT_CLASSIFICATION,// This path should contain the class files for these testcases:,TEST,WITHOUT_CLASSIFICATION,// A special parent loader which is not the system class loader:,IMPLEMENTATION,WITHOUT_CLASSIFICATION,// An AntClassLoader which is supposed to delegate to // the parent and then to the disk path:,DESIGN,WITHOUT_CLASSIFICATION,// A special parent loader which is not the system class loader:,DESIGN,WITHOUT_CLASSIFICATION,// ensure <tstamp>'s new prefix attribute is working,IMPLEMENTATION,WITHOUT_CLASSIFICATION,// ensure <tstamp> follows the immutability rule,IMPLEMENTATION,WITHOUT_CLASSIFICATION,// ensure <condition> follows the immutability rule,IMPLEMENTATION,WITHOUT_CLASSIFICATION,// ensure <checksum> follows the immutability rule,IMPLEMENTATION,WITHOUT_CLASSIFICATION,// ensure <exec> follows the immutability rule,IMPLEMENTATION,WITHOUT_CLASSIFICATION,// ensure <pathconvert> follows the immutability rule,IMPLEMENTATION,WITHOUT_CLASSIFICATION,"/*             * throw in drive letters             */",IMPLEMENTATION,WITHOUT_CLASSIFICATION,"/*             * promised to eliminate consecutive slashes after drive letter.             */",IMPLEMENTATION,WITHOUT_CLASSIFICATION,"/*             * drive letters are not used, just to be considered as normal             * part of a name             */",IMPLEMENTATION,WITHOUT_CLASSIFICATION,"/*         * Now test some relative file name magic.         */",TEST,WITHOUT_CLASSIFICATION,"// fail, because buildfile contains two targets with the same name",DEFECT,WITHOUT_CLASSIFICATION,// overriding target from imported buildfile is allowed,IMPLEMENTATION,WITHOUT_CLASSIFICATION,"/*         * JUnit 3.7 adds a getName method to TestCase - so we now         * have a name attribute in IntrospectionHelperTest if we run         * under JUnit 3.7 but not in earlier versions.         *         * Simply add it here and remove it after the tests.         */",TEST,WITHOUT_CLASSIFICATION,// addConfigured(Hashtable) should come before addConfigured(Map),IMPLEMENTATION,WITHOUT_CLASSIFICATION,// make sure we do not get a NPE,TEST,WITHOUT_CLASSIFICATION,// use an anonymous subclass since ProjectComponent is abstract,IMPLEMENTATION,WITHOUT_CLASSIFICATION,"/* I wrote the testcases in one java file because I want also to test the * combined behaviour (see end of the class).*/",TEST,WITHOUT_CLASSIFICATION,// check attribute overrides build.compiler,IMPLEMENTATION,WITHOUT_CLASSIFICATION,"// some database keys, see #getProperties(int)",IMPLEMENTATION,WITHOUT_CLASSIFICATION,// keys used in properties.,DESIGN,WITHOUT_CLASSIFICATION,// simple test to ensure that the caching does work...,TEST,WITHOUT_CLASSIFICATION,// the driver must still be cached.,IMPLEMENTATION,WITHOUT_CLASSIFICATION,// look for the driver path...,DESIGN,WITHOUT_CLASSIFICATION,//file length checks rely on touch generating a zero byte file,IMPLEMENTATION,WITHOUT_CLASSIFICATION,// no-op: not a real business error,DESIGN,WITHOUT_CLASSIFICATION,// AntLikeTasksAtTopLevelTest,TEST,WITHOUT_CLASSIFICATION,// can't access the booleans in MyPrinter here (even if they // were static) since the MyPrinter instance that was used in // the test has likely been loaded via a different classloader // than this class.  Therefore we make the printer assert its // state and only check for the tail invocation.,TEST,WITHOUT_CLASSIFICATION,"// not used, but public so theoretically must remain for BC?",WITHOUT_CLASSIFICATION,DESIGN,// should get no output at all,IMPLEMENTATION,WITHOUT_CLASSIFICATION,// should get no output at all,IMPLEMENTATION,WITHOUT_CLASSIFICATION,// should get no output at all,IMPLEMENTATION,WITHOUT_CLASSIFICATION,// should get no output at all,IMPLEMENTATION,WITHOUT_CLASSIFICATION,//this call should succeed as unless overrides if,IMPLEMENTATION,WITHOUT_CLASSIFICATION,// test that the watchdog ends the process,TEST,WITHOUT_CLASSIFICATION,// test that the watchdog ends the process,TEST,WITHOUT_CLASSIFICATION,// target must be specified,IMPLEMENTATION,WITHOUT_CLASSIFICATION,// Should fail since a recursion will occur...,DEFECT,WITHOUT_CLASSIFICATION,// a rather convoluted equals() test,TEST,WITHOUT_CLASSIFICATION,"// <path> swallows the basedir, it seems //assertTrue(!getProject().resolveFile(""A"").exists());",IMPLEMENTATION,WITHOUT_CLASSIFICATION,// allow this as imported in targets are only tested when a target is run,IMPLEMENTATION,WITHOUT_CLASSIFICATION,"// Running on Windows or something, so skip it.",IMPLEMENTATION,WITHOUT_CLASSIFICATION,// remove log file from testSpawn,IMPLEMENTATION,WITHOUT_CLASSIFICATION,// this is guaranteed by FileUtils#createTempFile,DESIGN,WITHOUT_CLASSIFICATION,"//executeTarget(""setup""); //commented out for performance while target is empty",DESIGN,WITHOUT_CLASSIFICATION,// target // file // exptected string,IMPLEMENTATION,WITHOUT_CLASSIFICATION,// *************  copied from ConcatTest  *************,WITHOUT_CLASSIFICATION,DESIGN,// test that the watchdog ends the process,TEST,WITHOUT_CLASSIFICATION,// test a process that runs and failed,TEST,WITHOUT_CLASSIFICATION,// process should abort,DESIGN,WITHOUT_CLASSIFICATION,// I assume that starting this takes less than TIME_OUT/2 ms...,IMPLEMENTATION,WITHOUT_CLASSIFICATION,// not very nice but will do the job,IMPLEMENTATION,DESIGN,"// wait for TIME_OUT/2, there should be about TIME_OUT/2 ms remaining before timeout",DESIGN,WITHOUT_CLASSIFICATION,// now stop the watchdog.,DESIGN,WITHOUT_CLASSIFICATION,"// wait for the thread to die, should be the end of the process",DESIGN,WITHOUT_CLASSIFICATION,// process should be dead and well finished,DESIGN,WITHOUT_CLASSIFICATION,// We have to compare the decompressed content instead:,DESIGN,WITHOUT_CLASSIFICATION,//no point in setting a message,IMPLEMENTATION,WITHOUT_CLASSIFICATION,// this is guaranteed by FileUtils#createTempFile,IMPLEMENTATION,WITHOUT_CLASSIFICATION,// make the spawned process run 4 seconds,IMPLEMENTATION,WITHOUT_CLASSIFICATION,// this loop runs parallel to the build,DESIGN,WITHOUT_CLASSIFICATION,//borrowed from TokenFilterTest,IMPLEMENTATION,DESIGN,// Nothing specified -> Fail,DESIGN,WITHOUT_CLASSIFICATION,// Only property specified -> Fail,DESIGN,WITHOUT_CLASSIFICATION,// Only file specified -> Fail,DESIGN,WITHOUT_CLASSIFICATION,// file does exist -> property 'test' == 'true',DESIGN,WITHOUT_CLASSIFICATION,// resource doesn't exist -> property 'test' == null,DESIGN,WITHOUT_CLASSIFICATION,// resource does exist -> property 'test' == 'true',DESIGN,WITHOUT_CLASSIFICATION,// class doesn't exist -> property 'test' == null,DESIGN,WITHOUT_CLASSIFICATION,// class does exist -> property 'test' == 'true',DESIGN,WITHOUT_CLASSIFICATION,// All three specified but class missing -> null,IMPLEMENTATION,WITHOUT_CLASSIFICATION,"// Specified property-name is """" -> true",IMPLEMENTATION,WITHOUT_CLASSIFICATION,"// Specified file is """" -> invalid files do not exist",IMPLEMENTATION,WITHOUT_CLASSIFICATION,"// Specified file is """" actually a directory, so it should pass",IMPLEMENTATION,WITHOUT_CLASSIFICATION,"// Specified resource is """" -> can such a thing exist?",IMPLEMENTATION,WITHOUT_CLASSIFICATION,"// Specified dir is """" -> this is the current directory and should // always exist",IMPLEMENTATION,WITHOUT_CLASSIFICATION,"// Specified dir is ""../taskdefs"" -> should exist since it's the // location of the buildfile used...",IMPLEMENTATION,WITHOUT_CLASSIFICATION,"// Specified dir is ""../this_dir_should_never_exist"" -> null",IMPLEMENTATION,WITHOUT_CLASSIFICATION,// Invalid type specified,DESIGN,WITHOUT_CLASSIFICATION,// File is not found in specified filepath,IMPLEMENTATION,WITHOUT_CLASSIFICATION,// test when file begins with basedir twice,TEST,WITHOUT_CLASSIFICATION,// test for searching parents,TEST,WITHOUT_CLASSIFICATION,// test for not searching parents,TEST,WITHOUT_CLASSIFICATION,"// We keep this, so we have something to delete in later tests :-)",TEST,DESIGN,// Set a property on the project to make sure that loading // a property with the same name from an xml file will // *not* change it.,IMPLEMENTATION,WITHOUT_CLASSIFICATION,// Every key identified by the Properties must have been loaded.,DESIGN,WITHOUT_CLASSIFICATION,// Substitute .xml with .properties,IMPLEMENTATION,WITHOUT_CLASSIFICATION,// target must be specified,DESIGN,WITHOUT_CLASSIFICATION,// basedir of subant/subant-test1/subant.xml is .. // therefore we expect here the subant/subant-test1 subdirectory,IMPLEMENTATION,WITHOUT_CLASSIFICATION,// make sure that the parsing does not break,DESIGN,WITHOUT_CLASSIFICATION,"// Tests property element, using XML schema properties as an example.",TEST,WITHOUT_CLASSIFICATION,// override some of the code so we can test the handling of the // return code only.,IMPLEMENTATION,WITHOUT_CLASSIFICATION,"/** * Tests the {@link XSLTProcess} task. * XXX merge with {@link StyleTest}? * @since Ant 1.5 */",TEST,WITHOUT_CLASSIFICATION,// avoid endless loop,IMPLEMENTATION,WITHOUT_CLASSIFICATION,// those would fail because of the way BuildFileTest captures output,IMPLEMENTATION,WITHOUT_CLASSIFICATION,// tests one the file object,TEST,WITHOUT_CLASSIFICATION,// tests one the file object,TEST,WITHOUT_CLASSIFICATION,"// conversion to URL via FileUtils like in XMLResultAggregator, not as suggested in the bug report",IMPLEMENTATION,WITHOUT_CLASSIFICATION,"// conversion to URL via FileUtils like in XMLResultAggregator, not as suggested in the bug report",IMPLEMENTATION,WITHOUT_CLASSIFICATION,"// conversion to URL via FileUtils like in XMLResultAggregator, not as suggested in the bug report",IMPLEMENTATION,WITHOUT_CLASSIFICATION,// check that having no suite generates no errors,DESIGN,WITHOUT_CLASSIFICATION,// check that a suite generates no errors,DESIGN,WITHOUT_CLASSIFICATION,// check that an invalid suite generates an error.,DESIGN,WITHOUT_CLASSIFICATION,// check that something which is not a testcase generates no errors // at first even though this is incorrect.,DESIGN,WITHOUT_CLASSIFICATION,// check that an exception in the constructor is noticed,DESIGN,WITHOUT_CLASSIFICATION,// use the classloader that loaded this class otherwise // it will not be able to run inner classes if this test // is ran in non-forked mode.,TEST,WITHOUT_CLASSIFICATION,// dummy formatter just to catch the error,DESIGN,WITHOUT_CLASSIFICATION,"// redo the test, but the 2 include patterns are inverted",IMPLEMENTATION,WITHOUT_CLASSIFICATION,// provide public visibility,WITHOUT_CLASSIFICATION,DESIGN,// Count the number of empty strings,IMPLEMENTATION,WITHOUT_CLASSIFICATION,// ran Ant tests with -ea and this would fail spuriously,DEFECT,WITHOUT_CLASSIFICATION,"// """" should become a single empty argument, same for '' // PR 5906",WITHOUT_CLASSIFICATION,DESIGN,// now to the expected failures,IMPLEMENTATION,WITHOUT_CLASSIFICATION,// // These shenanigans are necessary b/c Norm Walsh's resolver // has a different idea of how file URLs are created on windoze // ie file://c:/foo instead of file:///c:/foo //,IMPLEMENTATION,WITHOUT_CLASSIFICATION,//check that dir and src are incompatible,IMPLEMENTATION,WITHOUT_CLASSIFICATION,//check that fullpath and prefix are incompatible,IMPLEMENTATION,WITHOUT_CLASSIFICATION,// check that reference zipfilesets cannot have specific attributes,IMPLEMENTATION,WITHOUT_CLASSIFICATION,// check that a reference zipfileset gets the same attributes as the original,IMPLEMENTATION,WITHOUT_CLASSIFICATION,"// try a multi-part netware-volume length path w/forward slash, see how it is handled",IMPLEMENTATION,WITHOUT_CLASSIFICATION,"// try a multi-part netware-volume length path with UNIX // separator (this testcase if from an actual bug that was // found, in AvailableTest, which uses PathTokenizer)",TEST,WITHOUT_CLASSIFICATION,"// dummy1 --> dummy2 --> dummy3 (with Path ""/a"")",DESIGN,WITHOUT_CLASSIFICATION,// dummy1 --> dummy2 --> dummy3 // (which has the Project's basedir as root).,DESIGN,WITHOUT_CLASSIFICATION,// This class acts as a custom Ant task also // and uses these variables/methods in that mode,IMPLEMENTATION,WITHOUT_CLASSIFICATION,// dummy1 --> dummy2 --> dummy3 --> dummy1,DESIGN,WITHOUT_CLASSIFICATION,// dummy1 --> dummy2 --> dummy3 // (which has the Project's basedir as root).,DESIGN,WITHOUT_CLASSIFICATION,//check that dir and src are incompatible,IMPLEMENTATION,WITHOUT_CLASSIFICATION,//check that dir and src are incompatible,IMPLEMENTATION,WITHOUT_CLASSIFICATION,//check that fullpath and prefix are incompatible,IMPLEMENTATION,WITHOUT_CLASSIFICATION,// dummy1 --> dummy2 --> dummy3 --> dummy1,DESIGN,WITHOUT_CLASSIFICATION,"// dummy1 --> dummy2 --> dummy3 // (which holds patterns ""include"" and ""exclude"")",DESIGN,WITHOUT_CLASSIFICATION,// Grant extra permissions to read and write the user.* properties and read to the // java.home property,IMPLEMENTATION,WITHOUT_CLASSIFICATION,"// Revoke permission to write user.home (granted above via user.*), still able to read though. // and the default granted permission to read os.name.",IMPLEMENTATION,WITHOUT_CLASSIFICATION,"/*         * After changing CommandlineJava to search for the java         * executable, I don't know, how to tests the value returned         * here without using the same logic as applied in the class         * itself.         *         * assertTrue(""no classpath"", ""java"", s[0]);         */",IMPLEMENTATION,WITHOUT_CLASSIFICATION,// only the second iteration would pass because of PR 27218,IMPLEMENTATION,WITHOUT_CLASSIFICATION,// dummy1 --> dummy2 --> dummy3 --> dummy1,DESIGN,WITHOUT_CLASSIFICATION,// a --> b --> c --- def //               \-- ghi,IMPLEMENTATION,WITHOUT_CLASSIFICATION,"// // Ensure that an external entity resolves as expected with NO // XMLCatalog involvement: // // Transform an XML file that refers to the entity into a text // file, stuff result into property: val1 //",IMPLEMENTATION,WITHOUT_CLASSIFICATION,"// // Ensure that an external entity resolves as expected Using an // XMLCatalog: // // Transform an XML file that refers to the entity into a text // file, entity is listed in the XMLCatalog pointing to a // different file.  Stuff result into property: val2 //",IMPLEMENTATION,WITHOUT_CLASSIFICATION,// // Ensure that an external entity resolves as expected with NO // XMLCatalog involvement: // // Transform an XML file that contains a reference to a _second_ XML file // via the document() function.  The _second_ XML file refers to an entity. // Stuff result into the property: val3 //,IMPLEMENTATION,WITHOUT_CLASSIFICATION,// // Ensure that an external entity resolves as expected Using an // XMLCatalog: // // Transform an XML file that contains a reference to a _second_ XML file // via the document() function.  The _second_ XML file refers to an entity. // The entity is listed in the XMLCatalog pointing to a different file. // Stuff result into the property: val4 //,IMPLEMENTATION,WITHOUT_CLASSIFICATION,// The following will be used as types and tasks,DESIGN,WITHOUT_CLASSIFICATION,// this actually relies on the first manifest being found on // the classpath (probably rt.jar's) being valid,DESIGN,WITHOUT_CLASSIFICATION,// Test for path relative to project base directory,TEST,WITHOUT_CLASSIFICATION,// project reference is set in super.setUp(),IMPLEMENTATION,WITHOUT_CLASSIFICATION,"/* * /    // for test only - ignore tests where we arent work at the moment    public static junit.framework.Test suite() {        junit.framework.TestSuite suite= new junit.framework.TestSuite();        suite.addTest(new ModifiedSelectorTest(""testValidateWrongCache""));        return suite;    }    /* */",TEST,WITHOUT_CLASSIFICATION,// must be empty according to the Mock* implementations,DESIGN,WITHOUT_CLASSIFICATION,// don't catch the JUnit exceptions,IMPLEMENTATION,WITHOUT_CLASSIFICATION,// no check for 1<=kind<=3 - only internal use therefore check it // while development,DESIGN,WITHOUT_CLASSIFICATION,// sorry - otherwise we will get a ClassCastException because the MockCache // is loaded by two different classloader ...,IMPLEMENTATION,DESIGN,"// get the cache, so we can check our things",IMPLEMENTATION,WITHOUT_CLASSIFICATION,// MockCache doesnt create a file - therefore no cleanup needed,IMPLEMENTATION,WITHOUT_CLASSIFICATION,// extract the algorithm name (and config) from the selectors output,IMPLEMENTATION,WITHOUT_CLASSIFICATION,// '<' and '>' are only used if the algorithm has properties,IMPLEMENTATION,WITHOUT_CLASSIFICATION,// must not be a directory,DESIGN,WITHOUT_CLASSIFICATION,// Assert !=null and equality,IMPLEMENTATION,WITHOUT_CLASSIFICATION,//not yet supported see note in selector,DOCUMENTATION,WITHOUT_CLASSIFICATION,"// // *****  First Run  ***** // the first call should get all files, because nothing is in // the cache //",DOCUMENTATION,WITHOUT_CLASSIFICATION,"// // *****  Second Run  ***** // the second call should get no files, because no content // has changed //",DOCUMENTATION,WITHOUT_CLASSIFICATION,// // *****  make some files dirty  ***** //,IMPLEMENTATION,WITHOUT_CLASSIFICATION,// these files are made dirty --> 3+4 with different content,DESIGN,WITHOUT_CLASSIFICATION,"// // *****  Third Run  ***** // third call should get only those files, which CONTENT changed // (no timestamp changes required!)",DOCUMENTATION,WITHOUT_CLASSIFICATION,// // *****  Check the result  ***** //,IMPLEMENTATION,WITHOUT_CLASSIFICATION,// Mark all files which should be selected as (T)rue and all others // as (F)alse. Directories are always selected so they always are // (T)rue.,IMPLEMENTATION,WITHOUT_CLASSIFICATION,// f2name shouldn't be selected: only timestamp has changed!,DESIGN,WITHOUT_CLASSIFICATION,// RuleBasedCollator not yet supported - see Selector:375 note,DOCUMENTATION,WITHOUT_CLASSIFICATION,"//s.addParam(createParam(""algorithm.provider"",""---"")); // i don't know any valid",IMPLEMENTATION,WITHOUT_CLASSIFICATION,// Make sure that the counts are the same,DESIGN,WITHOUT_CLASSIFICATION,// make sure that elapsed time in set via date works,DESIGN,WITHOUT_CLASSIFICATION,// make sure that elapsed time in ms works,DESIGN,WITHOUT_CLASSIFICATION,// should be new moon,IMPLEMENTATION,WITHOUT_CLASSIFICATION,// Try a silly case,IMPLEMENTATION,WITHOUT_CLASSIFICATION,// and a little longer,IMPLEMENTATION,WITHOUT_CLASSIFICATION,"// Windows adds the drive letter in uppercase, unless you run Cygwin",IMPLEMENTATION,WITHOUT_CLASSIFICATION,"/*         * Sleep for some time to make sure a touched file would get a         * more recent timestamp according to the file system's         * granularity (should be > 2s to account for Windows FAT).         */",IMPLEMENTATION,WITHOUT_CLASSIFICATION,"// in a previous version, the date of the file was set to 123456 // milliseconds since 01.01.1970 // it did not work on a computer running JDK 1.4.1_02 + Windows 2000",IMPLEMENTATION,WITHOUT_CLASSIFICATION,"/*         * I would love to compare this with 123456, but depending on         * the filesystems granularity it can take an arbitrary value.         *         * Just assert the time has changed.         */",IMPLEMENTATION,WITHOUT_CLASSIFICATION,"/*             * Start with simple absolute file names.             */",DESIGN,WITHOUT_CLASSIFICATION,"/*             * promised to eliminate consecutive slashes after drive letter.             */",IMPLEMENTATION,WITHOUT_CLASSIFICATION,"/*             * drive letters must be considered just normal filenames.             */",DESIGN,WITHOUT_CLASSIFICATION,"/*         * Now test some relative file name magic.         */",TEST,WITHOUT_CLASSIFICATION,"/*             * Start with simple absolute file names.             */",DESIGN,WITHOUT_CLASSIFICATION,"/*         * Now test some relative file name magic.         */",TEST,WITHOUT_CLASSIFICATION,// Expected exception caught,DESIGN,WITHOUT_CLASSIFICATION,// Expected exception caught,DESIGN,WITHOUT_CLASSIFICATION,//preserve case on Cygwin when using 1.4 toURI:,IMPLEMENTATION,WITHOUT_CLASSIFICATION,//add some time. We assume no OS has a granularity this bad,IMPLEMENTATION,WITHOUT_CLASSIFICATION,"/*        assertTrue(""same timestamp is up to date"",                fu.isUpToDate(firstTime, firstTime));                */",IMPLEMENTATION,WITHOUT_CLASSIFICATION,//check that older is up to date with a newer dest,DESIGN,WITHOUT_CLASSIFICATION,//check that older is up to date with a newer dest,DESIGN,WITHOUT_CLASSIFICATION,// This just tests that the function does not blow up,TEST,WITHOUT_CLASSIFICATION,// java.home is bogus,DESIGN,WITHOUT_CLASSIFICATION,// could still be OS/2,IMPLEMENTATION,WITHOUT_CLASSIFICATION,// make sure there are no issues concerning line separator interpretation // a line separator for regex (perl) is always a unix line (ie \n),IMPLEMENTATION,WITHOUT_CLASSIFICATION,"//throw new IllegalStateException(""Command unrecognized: "" //    + response);",IMPLEMENTATION,WITHOUT_CLASSIFICATION,"// CRC manually calculated, sorry // CRC // mode // link length // uid, gid",IMPLEMENTATION,WITHOUT_CLASSIFICATION,"// CRC manually calculated, sorry // CRC // mode // link length // uid, gid",IMPLEMENTATION,WITHOUT_CLASSIFICATION,"// bad CRC // mode // link // uid, gid",DESIGN,WITHOUT_CLASSIFICATION,"//if we got here, all was well",DESIGN,WITHOUT_CLASSIFICATION,// TODO Auto-generated constructor stub,DESIGN,IMPLEMENTATION,// shouldn't be possible,DESIGN,WITHOUT_CLASSIFICATION,// hide addTask for TaskContainers,DESIGN,WITHOUT_CLASSIFICATION,// Check if a create of this property is already present // add takes preference over create for CB purposes,IMPLEMENTATION,WITHOUT_CLASSIFICATION,// Element doesn't handle text content,DESIGN,WITHOUT_CLASSIFICATION,// Not whitespace - fail,IMPLEMENTATION,WITHOUT_CLASSIFICATION,// impossible as getMethods should only return public methods,DEFECT,WITHOUT_CLASSIFICATION,// impossible as getMethods should only return public methods,DEFECT,WITHOUT_CLASSIFICATION,// impossible as getMethods should only return public methods,DEFECT,WITHOUT_CLASSIFICATION,// Class doesn't have a String constructor but a decent factory method,IMPLEMENTATION,WITHOUT_CLASSIFICATION,"// Should move to a separate public class - and have API to add // listeners, etc.",IMPLEMENTATION,DESIGN,// report error if something weird happens...this is diagnostic.,IMPLEMENTATION,DESIGN,// don't call super.close() because that reader is used // on other places ...,IMPLEMENTATION,DESIGN,"// not sure whether this is clean, but this method is // declared not to throw exceptions.",IMPLEMENTATION,DESIGN,// check first that it is not already loaded otherwise // consecutive runs seems to end into an OutOfMemoryError // or it fails when there is a native library to load // several times. // this is far from being perfect but should work // in most cases.,IMPLEMENTATION,DEFECT,// TODO: allow user to request the system or no parent,DESIGN,IMPLEMENTATION,"/**     * Add logTargets to root logger     * FIXME What's the clean way to add a LogTarget afterwards ?     * @param logTargets LogTarget array     */",DEFECT,DESIGN,"// If invokee was provided, then clazz has been set up",IMPLEMENTATION,WITHOUT_CLASSIFICATION,// MUST do this for background to show up.,IMPLEMENTATION,WITHOUT_CLASSIFICATION,"//DMS Why not this? //new SubProgressMonitor(progressMonitor, 1));",IMPLEMENTATION,DESIGN,"//DMS Why not this? //new SubProgressMonitor(progressMonitor, 1));",IMPLEMENTATION,DESIGN,// EATM in JDK 1.4 there will be an indexOf on StringBuffer. //,WITHOUT_CLASSIFICATION,DEFECT,"// This runs the options, and shows progress. // (It appears to be a bad thing to fork this onto another thread.) //",DESIGN,IMPLEMENTATION,"// we should be able to find the comma because the range for enum constants includes all preceding comments up to the previous constant // if TargetSourceRangeComputer of ASTRewrite changes, this logic should change to skip comments // see org.eclipse.emf.codegen.merge.java.facade.ast.CommentAwareSourceRangeComputer#getEnumConstantSourceRange(ASTNode)",DESIGN,IMPLEMENTATION,"// if current char is comma, insert line break after it // // we should be able to find the comma because the range for enum constants includes all trailing comments up to the separator // if TargetSourceRangeComputer of ASTRewrite changes, this logic should change to skip comments // see org.eclipse.emf.codegen.merge.java.facade.ast.CommentAwareSourceRangeComputer#getEnumConstantSourceRange(ASTNode)",DESIGN,IMPLEMENTATION,// Make sure it's okay. //,IMPLEMENTATION,WITHOUT_CLASSIFICATION,// Do the work within an operation because this is a long running activity that modifies the workbench. //,DESIGN,WITHOUT_CLASSIFICATION,// Refresh the necessary state. //,IMPLEMENTATION,WITHOUT_CLASSIFICATION,// Something went wrong that shouldn't. //,DESIGN,WITHOUT_CLASSIFICATION,// Check the type of the specified child object and return the proper feature to use for // adding (see {@link AddCommand}) it as a child.,IMPLEMENTATION,WITHOUT_CLASSIFICATION,// Mark meta-data to indicate it can't be changed,IMPLEMENTATION,WITHOUT_CLASSIFICATION,// I don't know if we should be run this deferred  // because we might have to give the editor a chance to process the viewer update events  // and hence to update the views first. //  //,IMPLEMENTATION,DESIGN,"// Workaround for JDK bug 4071281, where system.in.available()  // returns too large a value. This bug has been fixed in JDK 1.2.",DEFECT,DESIGN,// can't happen,IMPLEMENTATION,WITHOUT_CLASSIFICATION,/* two plugins provide same class! */,WITHOUT_CLASSIFICATION,DEFECT,"// file does not begin with UTF-8-Y // signature. reset stream, read as // UTF-8.",IMPLEMENTATION,WITHOUT_CLASSIFICATION,